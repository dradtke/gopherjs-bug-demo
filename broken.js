/*
 * Generated using this branch of vdom: https://github.com/dradtke/vdom/tree/remove-patch-fix
 * It's the same as master, but with the addition of an unrelated bugfix that's necessary
 * for this test to work properly.
 */

"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerActive = false;
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
    $schedulerActive = false;
  } finally {
    if ($schedulerActive) {
      setTimeout($runScheduled, 0);
    }
  }
};
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerActive) {
    $schedulerActive = true;
    setTimeout($runScheduled, 0);
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, sliceType$1, ptrType, ptrType$1, MakeFunc, Keys, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($String);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var $ptr, fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	Keys = function(o) {
		var $ptr, a, i, o, s;
		if (o === null || o === undefined) {
			return sliceType$1.nil;
		}
		a = $global.Object.keys(o);
		s = $makeSlice(sliceType$1, $parseInt(a.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(a.length))) { break; }
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = $internalize(a[i], $String));
			i = i + (1) >> 0;
		}
		return s;
	};
	$pkg.Keys = Keys;
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, Error, TypeAssertionError, errorString, ptrType$3, init, GOROOT, Goexit, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", true, "runtime", true, null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$3 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	GOROOT = function() {
		var $ptr, goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/lib64/go";
	};
	$pkg.GOROOT = GOROOT;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$3.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}]);
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var $ptr, addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var $ptr, addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var $ptr, addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
		var $ptr;
	};
	$pkg.Disable = Disable;
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, noCopy, ptrType, ptrType$1, CompareAndSwapInt32, AddInt32, LoadUint32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(noCopy_, v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.noCopy = new noCopy.ptr();
			this.v = $ifaceNil;
			return;
		}
		this.noCopy = noCopy_;
		this.v = v_;
	});
	noCopy = $pkg.noCopy = $newType(0, $kindStruct, "atomic.noCopy", true, "sync/atomic", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(Value);
	ptrType$1 = $ptrType(noCopy);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	Value.ptr.prototype.Load = function() {
		var $ptr, v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var $ptr, v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	noCopy.ptr.prototype.Lock = function() {
		var $ptr;
	};
	noCopy.prototype.Lock = function() { return this.$val.Lock(); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}];
	Value.init("sync/atomic", [{prop: "noCopy", name: "noCopy", exported: false, typ: noCopy, tag: ""}, {prop: "v", name: "v", exported: false, typ: $emptyInterface, tag: ""}]);
	noCopy.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, race, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$5, sliceType$3, ptrType$6, ptrType$7, funcType, ptrType$13, funcType$1, ptrType$14, arrayType$1, semWaiters, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$1.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($Int32);
	ptrType$5 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$6 = $ptrType(rlocker);
	ptrType$7 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$13 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$14 = $ptrType(Once);
	arrayType$1 = $arrayType($Uint8, 128);
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var $ptr, size;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire(m);
			}
			$s = -1; return;
			return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire(m);
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			race.Release(m);
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				$s = -1; return;
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			$s = -1; return;
			return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	init$1 = function() {
		var $ptr, n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.ReleaseMerge((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Acquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Release((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Release((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$6);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$7).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$7).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$5], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$5], false)}];
	ptrType$13.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$14.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$7.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$6.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", exported: false, typ: sliceType$3, tag: ""}, {prop: "New", name: "New", exported: true, typ: funcType, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init("sync", [{prop: "m", name: "m", exported: false, typ: Mutex, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Uint32, tag: ""}]);
	poolLocal.init("sync", [{prop: "private$0", name: "private", exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", exported: false, typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", exported: true, typ: Mutex, tag: ""}, {prop: "pad", name: "pad", exported: false, typ: arrayType$1, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = race.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, ByteReader, RuneScanner, sliceType, errWhence, errOffset, ReadAtLeast, ReadFull;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteReader = $pkg.ByteReader = $newType(8, $kindInterface, "io.ByteReader", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	sliceType = $sliceType($Uint8);
	ReadAtLeast = function(r, buf, min) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
			return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var $ptr, _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteReader.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, arrayType, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, sliceType$4, _L, _M, _N, _Nd, _P, _S, _White_Space, _CaseRanges, properties, asciiFold, caseOrbit, to, IsDigit, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(CaseRange);
	sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = function(r) {
		var $ptr, r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsPrint = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var $ptr, _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	IsLetter = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	IsSpace = function(r) {
		var $ptr, _1, r;
		if ((r >>> 0) <= 255) {
			_1 = r;
			if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32)) || (_1 === (133)) || (_1 === (160))) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var $ptr, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var $ptr, _q, hi, l, lo, m, r;
		if ((r >> 0) < 128) {
			return (((r < 0 || r >= asciiFold.length) ? $throwRuntimeError("index out of range") : asciiFold[r]) >> 0);
		}
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	RangeTable.init("", [{prop: "R16", name: "R16", exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Uint32, tag: ""}]);
	CaseRange.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init("", [{prop: "From", name: "From", exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", exported: true, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94208, 32), new Range32.ptr(94209, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3331, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43205, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70206, 70367, 161), new Range32.ptr(70368, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70709, 70726, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(72751, 72758, 1), new Range32.ptr(72760, 72767, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3430, 3448, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(72784, 72812, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(72784, 72793, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125264, 125273, 1)]), 1);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11844, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3407, 208), new Range16.ptr(3449, 3647, 198), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9214, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128722, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128758, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129310, 1), new Range32.ptr(129312, 129319, 1), new Range32.ptr(129328, 129331, 3), new Range32.ptr(129332, 129342, 1), new Range32.ptr(129344, 129355, 1), new Range32.ptr(129360, 129374, 1), new Range32.ptr(129408, 129425, 1), new Range32.ptr(129472, 129472, 1)]), 10);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(1042, 1074), new foldPair.ptr(1044, 1076), new foldPair.ptr(1054, 1086), new foldPair.ptr(1057, 1089), new foldPair.ptr(1058, 1090), new foldPair.ptr(1066, 1098), new foldPair.ptr(1074, 7296), new foldPair.ptr(1076, 7297), new foldPair.ptr(1086, 7298), new foldPair.ptr(1089, 7299), new foldPair.ptr(1090, 7300), new foldPair.ptr(1098, 7302), new foldPair.ptr(1122, 1123), new foldPair.ptr(1123, 7303), new foldPair.ptr(7296, 1042), new foldPair.ptr(7297, 1044), new foldPair.ptr(7298, 1054), new foldPair.ptr(7299, 1057), new foldPair.ptr(7300, 7301), new foldPair.ptr(7301, 1058), new foldPair.ptr(7302, 1066), new foldPair.ptr(7303, 1122), new foldPair.ptr(7304, 42570), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197), new foldPair.ptr(42570, 42571), new foldPair.ptr(42571, 7304)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var $ptr, accept, c, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? $throwRuntimeError("index out of range") : first[x]));
		if (n >= (((x$1 & 7) >>> 0) >> 0)) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$2])), acceptRange);
		if (n > 1) {
			c = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
			if (c < accept.lo || accept.hi < c) {
				return true;
			} else if (n > 2 && ((2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]))) {
				return true;
			}
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? $throwRuntimeError("index out of range") : first[p0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((p0 & 31) >>> 0) >> 0) << 6 >> 0) | (((b1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((p0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((p0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((b2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? $throwRuntimeError("index out of range") : first[s0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((s.charCodeAt(0) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((s0 & 31) >>> 0) >> 0) << 6 >> 0) | (((s1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((s0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((s0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((s2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidRune = function(r) {
		var $ptr, r;
		if (r < 0) {
			return false;
		} else if (55296 <= r && r <= 57343) {
			return false;
		} else if (r > 1114111) {
			return false;
		}
		return true;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBuffer, Contains, Index, IndexAny, HasPrefix, Map, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace, EqualFold;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", true, "bytes", false, null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if ((n === 0)) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off));
			n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = $bytesToString(slice);
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var $ptr, buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	Contains = function(b, subslice) {
		var $ptr, b, subslice;
		return !((Index(b, subslice) === -1));
	};
	$pkg.Contains = Contains;
	Index = function(s, sep) {
		var $ptr, c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.Index = Index;
	IndexAny = function(s, chars) {
		var $ptr, _i, _ref, _rune, _tuple, ch, chars, i, r, s, width;
		if (chars.length > 0) {
			r = 0;
			width = 0;
			i = 0;
			while (true) {
				if (!(i < s.$length)) { break; }
				r = (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >> 0);
				if (r < 128) {
					width = 1;
				} else {
					_tuple = utf8.DecodeRune($subslice(s, i));
					r = _tuple[0];
					width = _tuple[1];
				}
				_ref = chars;
				_i = 0;
				while (true) {
					if (!(_i < _ref.length)) { break; }
					_rune = $decodeRune(_ref, _i);
					ch = _rune[0];
					if (r === ch) {
						return i;
					}
					_i += _rune[1];
				}
				i = i + (width) >> 0;
			}
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	Map = function(mapping, s) {
		var $ptr, _r, _tuple, b, i, mapping, maxbytes, nb, nbytes, r, rl, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; rl = $f.rl; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.$length;
		nbytes = 0;
		b = $makeSlice(sliceType, maxbytes);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.$length)) { break; } */ if(!(i < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, i));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = mapping(r); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r >= 0) {
				rl = utf8.RuneLen(r);
				if (rl < 0) {
					rl = 3;
				}
				if ((nbytes + rl >> 0) > maxbytes) {
					maxbytes = ($imul(maxbytes, 2)) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			i = i + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(b, 0, nbytes);
		return $subslice(b, 0, nbytes);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.rl = rl; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToUpper = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return sliceType.nil;
			return sliceType.nil;
		}
		$s = -1; return $subslice(s, i);
		return $subslice(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $subslice(s, 0, i);
		return $subslice(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.$length)) { break; } */ if(!(start < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = (((start < 0 || start >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + start]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return start;
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.$length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tmp = ((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) >> 0);
			_tmp$1 = 1;
			r = _tmp;
			size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i));
				r = _tuple[0];
				size = _tuple[1];
			}
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, _i, _ref, _rune, c, r;
			_ref = cutset;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimLeft = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeft = TrimLeft;
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	EqualFold = function(s, t) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!((s.$length === 0)) && !((t.$length === 0)))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if ((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = ((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) >> 0);
				_tmp$3 = $subslice(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $subslice(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) >> 0);
				_tmp$7 = $subslice(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $subslice(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	$pkg.EqualFold = EqualFold;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", exported: false, typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", exported: false, typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", exported: false, typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", exported: false, typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Inf, IsInf, IsNaN, Ldexp, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", exported: false, typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var $ptr, f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Ldexp = function(frac, exp$1) {
		var $ptr, exp$1, frac;
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	$pkg.Ldexp = Ldexp;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, js, race, runtime, sync, mmapper, Errno, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType$2, arrayType$5, arrayType$13, arrayType$14, structType, ptrType$22, ptrType$25, mapType, funcType, funcType$1, ptrType$29, arrayType$18, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors, init, printWarning, printToConsole, use, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, CloseOnExec, msanRead, msanWrite, itoa, uitoa, Chmod, Open, clen, ReadDirent, ParseDirent, errnoErr, Read, Write, openat, Close, Fchdir, Fchmod, Fchmodat, fcntl, Fsync, Getdents, read, write, munmap, Fchown, Fstat, Ftruncate, Lstat, Pread, Pwrite, Seek, Stat, mmap;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Ino_, Nlink_, Mode_, Uid_, Gid_, X__pad0_, Rdev_, Size_, Blksize_, Blocks_, Atim_, Mtim_, Ctim_, X__unused_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Uint64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Nlink = new $Uint64(0, 0);
			this.Mode = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.X__pad0 = 0;
			this.Rdev = new $Uint64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Atim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.X__unused = arrayType$18.zero();
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Nlink = Nlink_;
		this.Mode = Mode_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.X__pad0 = X__pad0_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atim = Atim_;
		this.Mtim = Mtim_;
		this.Ctim = Ctim_;
		this.X__unused = X__unused_;
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", true, "syscall", true, function(Ino_, Off_, Reclen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ino = new $Uint64(0, 0);
			this.Off = new $Int64(0, 0);
			this.Reclen = 0;
			this.Type = 0;
			this.Name = arrayType$13.zero();
			this.Pad_cgo_0 = arrayType$14.zero();
			return;
		}
		this.Ino = Ino_;
		this.Off = Off_;
		this.Reclen = Reclen_;
		this.Type = Type_;
		this.Name = Name_;
		this.Pad_cgo_0 = Pad_cgo_0_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType$5 = $arrayType($Uint8, 32);
	arrayType$13 = $arrayType($Int8, 256);
	arrayType$14 = $arrayType($Uint8, 5);
	structType = $structType("syscall", [{prop: "addr", name: "addr", exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", exported: false, typ: $Int, tag: ""}]);
	ptrType$22 = $ptrType($Int64);
	ptrType$25 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$29 = $ptrType(Timespec);
	arrayType$18 = $arrayType($Int64, 3);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	indexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 1) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0);
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 60) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0);
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0);
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = $substring(s, 0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			$s = -1; return [value, found];
			return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			$s = -1; return [value, found];
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = $substring(s, (i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				$s = -1; return [value, found];
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		$s = -1; return [value, found];
		return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	CloseOnExec = function(fd) {
		var $ptr, fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	msanRead = function(addr, len) {
		var $ptr, addr, len;
	};
	msanWrite = function(addr, len) {
		var $ptr, addr, len;
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$5.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec;
		_tmp$1 = ts.Nsec;
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	Chmod = function(path, mode) {
		var $ptr, err, mode, path;
		err = $ifaceNil;
		err = Fchmodat(-100, path, mode, 0);
		return err;
	};
	$pkg.Chmod = Chmod;
	Open = function(path, mode, perm) {
		var $ptr, _tuple, err, fd, mode, path, perm;
		fd = 0;
		err = $ifaceNil;
		_tuple = openat(-100, path, mode | 0, perm);
		fd = _tuple[0];
		err = _tuple[1];
		return [fd, err];
	};
	$pkg.Open = Open;
	clen = function(n) {
		var $ptr, i, n;
		i = 0;
		while (true) {
			if (!(i < n.$length)) { break; }
			if (((i < 0 || i >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + i]) === 0) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return n.$length;
	};
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		_tuple = Getdents(fd, buf);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	ParseDirent = function(buf, max, names) {
		var $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes, consumed, count, dirent, max, name, names, newnames, origlen, x;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(new $Uint64(0, 0), new $Int64(0, 0), 0, 0, arrayType$13.zero(), arrayType$14.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Off = new $Int64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Type = _view.getUint8(18, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 19, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 275, _array.buffer.byteLength)), _struct);
			buf = $subslice(buf, dirent.Reclen);
			if ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes = $sliceToArray(new sliceType(dirent.Name));
			name = $bytesToString($subslice(new sliceType(bytes), 0, clen(new sliceType(bytes))));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0;
		_tmp$1 = count;
		_tmp$2 = names;
		consumed = _tmp;
		count = _tmp$1;
		newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
			return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
			return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
			return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
			return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
			return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 133) {
			s = ((e < 0 || e >= errors.length) ? $throwRuntimeError("index out of range") : errors[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 104) || (e === 103) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var $ptr, _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (11)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange($sliceToArray(p), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; }))));
			}
		}
		if (false && n > 0) {
			msanWrite($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; }))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange($sliceToArray(p), n);
		}
		if (false && n > 0) {
			msanRead($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	openat = function(dirfd, path, flags, mode) {
		var $ptr, _p0, _tuple, _tuple$1, dirfd, e1, err, fd, flags, mode, path, r0;
		fd = 0;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall6(257, (dirfd >>> 0), _p0, (flags >>> 0), (mode >>> 0), 0, 0);
		r0 = _tuple$1[0];
		e1 = _tuple$1[2];
		use(_p0);
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(3, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(81, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(91, (fd >>> 0), (mode >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchmodat = function(dirfd, path, mode, flags) {
		var $ptr, _p0, _tuple, _tuple$1, dirfd, e1, err, flags, mode, path;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall6(268, (dirfd >>> 0), _p0, (mode >>> 0), (flags >>> 0), 0, 0);
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmodat = Fchmodat;
	fcntl = function(fd, cmd, arg) {
		var $ptr, _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(72, (fd >>> 0), (cmd >>> 0), (arg >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(74, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Getdents = function(fd, buf) {
		var $ptr, _p0, _tuple, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(217, (fd >>> 0), _p0, (buf.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdents = Getdents;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(0, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(1, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(11, addr, length, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(93, (fd >>> 0), (uid >>> 0), (gid >>> 0));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(5, (fd >>> 0), _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(77, (fd >>> 0), (length.$low >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(6, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(17, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(18, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, off, offset, r0, whence;
		off = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(8, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		off = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [off, err];
	};
	$pkg.Seek = Seek;
	Stat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(4, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Stat = Stat;
	mmap = function(addr, length, prot, flags, fd, offset) {
		var $ptr, _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr;
		xaddr = 0;
		err = $ifaceNil;
		_tuple = Syscall6(9, addr, length, (prot >>> 0), (flags >>> 0), (fd >>> 0), (offset.$low >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		xaddr = r0;
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [xaddr, err];
	};
	ptrType$25.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$29.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init("syscall", [{prop: "Mutex", name: "", exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", exported: false, typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", exported: false, typ: funcType$1, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", exported: true, typ: $Uint64, tag: ""}, {prop: "Ino", name: "Ino", exported: true, typ: $Uint64, tag: ""}, {prop: "Nlink", name: "Nlink", exported: true, typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", exported: true, typ: $Uint32, tag: ""}, {prop: "X__pad0", name: "X__pad0", exported: true, typ: $Int32, tag: ""}, {prop: "Rdev", name: "Rdev", exported: true, typ: $Uint64, tag: ""}, {prop: "Size", name: "Size", exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", exported: true, typ: $Int64, tag: ""}, {prop: "Atim", name: "Atim", exported: true, typ: Timespec, tag: ""}, {prop: "Mtim", name: "Mtim", exported: true, typ: Timespec, tag: ""}, {prop: "Ctim", name: "Ctim", exported: true, typ: Timespec, tag: ""}, {prop: "X__unused", name: "X__unused", exported: true, typ: arrayType$18, tag: ""}]);
	Dirent.init("", [{prop: "Ino", name: "Ino", exported: true, typ: $Uint64, tag: ""}, {prop: "Off", name: "Off", exported: true, typ: $Int64, tag: ""}, {prop: "Reclen", name: "Reclen", exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: arrayType$13, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", exported: true, typ: arrayType$14, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "no such device or address", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource temporarily unavailable", "cannot allocate memory", "permission denied", "bad address", "block device required", "device or resource busy", "file exists", "invalid cross-device link", "no such device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "numerical result out of range", "resource deadlock avoided", "file name too long", "no locks available", "function not implemented", "directory not empty", "too many levels of symbolic links", "", "no message of desired type", "identifier removed", "channel number out of range", "level 2 not synchronized", "level 3 halted", "level 3 reset", "link number out of range", "protocol driver not attached", "no CSI structure available", "level 2 halted", "invalid exchange", "invalid request descriptor", "exchange full", "no anode", "invalid request code", "invalid slot", "", "bad font file format", "device not a stream", "no data available", "timer expired", "out of streams resources", "machine is not on the network", "package not installed", "object is remote", "link has been severed", "advertise error", "srmount error", "communication error on send", "protocol error", "multihop attempted", "RFS specific error", "bad message", "value too large for defined data type", "name not unique on network", "file descriptor in bad state", "remote address changed", "can not access a needed shared library", "accessing a corrupted shared library", ".lib section in a.out corrupted", "attempting to link in too many shared libraries", "cannot exec a shared library directly", "invalid or incomplete multibyte or wide character", "interrupted system call should be restarted", "streams pipe error", "too many users", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol", "address already in use", "cannot assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "transport endpoint is already connected", "transport endpoint is not connected", "cannot send after transport endpoint shutdown", "too many references: cannot splice", "connection timed out", "connection refused", "host is down", "no route to host", "operation already in progress", "operation now in progress", "stale NFS file handle", "structure needs cleaning", "not a XENIX named type file", "no XENIX semaphores available", "is a named type file", "remote I/O error", "disk quota exceeded", "no medium found", "wrong medium type", "operation canceled", "required key not available", "key has expired", "key has been revoked", "key was rejected by service", "owner died", "state not recoverable", "operation not possible due to RF-kill"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, RWMutex, WaitGroup, Once, ptrType, ptrType$1, ptrType$2, funcType, ptrType$3;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(writeLocked_, readLockCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writeLocked = false;
			this.readLockCounter = 0;
			return;
		}
		this.writeLocked = writeLocked_;
		this.readLockCounter = readLockCounter_;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, $kindStruct, "nosync.WaitGroup", true, "github.com/gopherjs/gopherjs/nosync", true, function(counter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.counter = 0;
			return;
		}
		this.counter = counter_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType = $ptrType(Mutex);
	ptrType$1 = $ptrType(RWMutex);
	ptrType$2 = $ptrType(WaitGroup);
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	WaitGroup.ptr.prototype.Add = function(delta) {
		var $ptr, delta, wg;
		wg = this;
		wg.counter = wg.counter + (delta) >> 0;
		if (wg.counter < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.ptr.prototype.Done = function() {
		var $ptr, wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	WaitGroup.ptr.prototype.Wait = function() {
		var $ptr, wg;
		wg = this;
		if (!((wg.counter === 0))) {
			$panic(new $String("sync: WaitGroup counter not zero"));
		}
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [], false)}, {prop: "Wait", name: "Wait", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", exported: false, typ: $Bool, tag: ""}]);
	RWMutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "writeLocked", name: "writeLocked", exported: false, typ: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", exported: false, typ: $Int, tag: ""}]);
	WaitGroup.init("github.com/gopherjs/gopherjs/nosync", [{prop: "counter", name: "counter", exported: false, typ: $Int, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, arrayType$4, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, zoneDirs, _tuple, _r, init, initLocal, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, daysIn, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		Unix(new $Int64(0, 0), new $Int64(0, 0));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	indexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = (x >>> 0);
		if (x < 0) {
			b = $append(b, 45);
			u = (-x >>> 0);
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((48 + u >>> 0) << 24 >>> 24));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r$1, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = t.AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		$s = -1; return $bytesToString(b);
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, (month >> 0), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, (month >> 0), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), $substring(s, 1), $ifaceNil];
		}
		return [($imul(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), 10)) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _1, _2, _3, _4, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$4 = atoi(p);
					year = _tuple$4[0];
					err = _tuple$4[1];
				} else if (_1 === (258)) {
					_tuple$5 = lookup(shortMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if (_1 === (257)) {
					_tuple$6 = lookup(longMonthNames, value);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$7 = getnum(value, std === 260);
					month = _tuple$7[0];
					value = _tuple$7[1];
					err = _tuple$7[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$8 = lookup(shortDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if (_1 === (261)) {
					_tuple$9 = lookup(longDayNames, value);
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$10 = getnum(value, std === 265);
					day = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$12 = getnum(value, std === 524);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$13 = getnum(value, std === 526);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$14 = getnum(value, std === 528);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day > daysIn((month >> 0), year)) {
			$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
			return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [_r$1, $ifaceNil];
			return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				$s = -1; return [t, $ifaceNil];
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			$s = -1; return [t, $ifaceNil];
			return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				$s = -1; return [t$1, $ifaceNil];
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			$s = -1; return [t$1, $ifaceNil];
			return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return [_r$6, $ifaceNil];
		return [_r$6, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt($substring(value, 1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi($substring(value, 1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		$s = -1; return [name, offset, abs];
		return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		$s = -1; return [year, month, day];
		return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		$s = -1; return year;
		return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		month = _tuple$1[1];
		$s = -1; return month;
		return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		day = _tuple$1[2];
		$s = -1; return day;
		return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		$s = -1; return [hour, min, sec];
		return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		yday = _tuple$1[3];
		$s = -1; return yday + 1 >> 0;
		return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ((digit.$low << 24 >>> 24) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		u = $clone(u, Time);
		t = $clone(this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		$s = -1; return [year, month, day, yday];
		return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var $ptr, m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return ((((m < 0 || m >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x])) >> 0) >> 0);
	};
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		$s = -1; return [name, offset];
		return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		$s = -1; return [enc, $ifaceNil];
		return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return [_r$2, $ifaceNil];
		return [_r$2, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$3 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$8 = _r$3;
					offset = _tuple$8[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		$s = -1; return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			$s = -1; return utcLoc;
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1.name;
		return _r$1.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					$s = -1; return [offset, isDST, ok];
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				$s = -1; return [offset, isDST, ok];
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, isDST, ok];
		return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "sec", name: "sec", exported: false, typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", exported: false, typ: $Int32, tag: ""}, {prop: "loc", name: "loc", exported: false, typ: ptrType$1, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, ptrType$12, funcType$1, ptrType$13, arrayType$1, arrayType$5, ptrType$15, errFinished, lstat, runtime_args, init, NewSyscallError, IsNotExist, isNotExist, Open, fixCount, sigpipe, syscallMode, Chmod, NewFile, epipecheck, OpenFile, Stat, Lstat, basename, IsPathSeparator, init$1, fillFileStatFromSys, timespecToTime;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$12.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(fd_, name_, dirinfo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType.nil;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil);
			this.sys = new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(File);
	sliceType$2 = $sliceType(FileInfo);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	ptrType$12 = $ptrType(file);
	funcType$1 = $funcType([ptrType$12], [$error], false);
	ptrType$13 = $ptrType(time.Location);
	arrayType$1 = $arrayType($Int64, 3);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$15 = $ptrType(fileStat);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$1.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = NewSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$2[0];
			nc = _tuple$2[1];
			names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return [sliceType$2.nil, $pkg.ErrInvalid];
			return [sliceType$2.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	isNotExist = function(err) {
		var $ptr, _ref, err, pe, pe$1, pe$2, pe$3;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			pe$1 = _ref.$val;
			err = pe$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			pe$2 = _ref.$val;
			err = pe$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			pe$3 = _ref.$val;
			err = pe$3.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b);
		n = _tuple[0];
		e = _tuple[1];
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $pkg.ErrInvalid;
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence);
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, s;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.Write(new sliceType$1($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = function(name) {
		var $ptr, name;
		return OpenFile(name, 0, 0);
	};
	$pkg.Open = Open;
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	Chmod = function(name, mode) {
		var $ptr, e, mode, name;
		e = syscall.Chmod(name, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", name, e);
		}
		return $ifaceNil;
	};
	$pkg.Chmod = Chmod;
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return NewSyscallError("fsync", e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$1.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$12, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.fd === 1) || (file$1.file.fd === 2))) {
			sigpipe();
		}
	};
	OpenFile = function(name, flag, perm) {
		var $ptr, _tuple, _tuple$1, chmod, e, err, flag, name, perm, r;
		chmod = false;
		if (false && !(((flag & 64) === 0)) && !((((perm & 1048576) >>> 0) === 0))) {
			_tuple = Stat(name);
			err = _tuple[1];
			if (IsNotExist(err)) {
				chmod = true;
			}
		}
		r = 0;
		while (true) {
			e = $ifaceNil;
			_tuple$1 = syscall.Open(name, flag | 524288, syscallMode(perm));
			r = _tuple$1[0];
			e = _tuple$1[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				break;
			}
			if (false && $interfaceIsEqual(e, new syscall.Errno(4))) {
				continue;
			}
			return [ptrType$1.nil, new PathError.ptr("open", name, e)];
		}
		if (chmod) {
			Chmod(name, perm);
		}
		if (false) {
			syscall.CloseOnExec(r);
		}
		return [NewFile((r >>> 0), name), $ifaceNil];
	};
	$pkg.OpenFile = OpenFile;
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$12.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var $ptr, err, f, fs;
		f = this;
		if (f === ptrType$1.nil) {
			return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Fstat(f.file.fd, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs, f.file.name);
		return [fs, $ifaceNil];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Stat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$2, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (false && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			m = _tuple[0];
			err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (false && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	IsPathSeparator = function(c) {
		var $ptr, c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	init$1 = function() {
		var $ptr;
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	fillFileStatFromSys = function(fs, name) {
		var $ptr, _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime(fs.sys.Mtim));
		fs.mode = (((fs.sys.Mode & 511) >>> 0) >>> 0);
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if (_1 === (24576)) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$1(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$12.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$15.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	File.init("os", [{prop: "file", name: "", exported: false, typ: ptrType$12, tag: ""}]);
	file.init("os", [{prop: "fd", name: "fd", exported: false, typ: $Int, tag: ""}, {prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", exported: false, typ: ptrType, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", exported: false, typ: sliceType$1, tag: ""}, {prop: "nbuf", name: "nbuf", exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", exported: false, typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		lstat = Lstat;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, ParseBool, FormatBool, AppendBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatUint, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	ParseBool = function(str) {
		var $ptr, _1, str;
		_1 = str;
		if (_1 === ("1") || _1 === ("t") || _1 === ("T") || _1 === ("true") || _1 === ("TRUE") || _1 === ("True")) {
			return [true, $ifaceNil];
		} else if (_1 === ("0") || _1 === ("f") || _1 === ("F") || _1 === ("false") || _1 === ("FALSE") || _1 === ("False")) {
			return [false, $ifaceNil];
		}
		return [false, syntaxError("ParseBool", str)];
	};
	$pkg.ParseBool = ParseBool;
	FormatBool = function(b) {
		var $ptr, b;
		if (b) {
			return "true";
		}
		return "false";
	};
	$pkg.FormatBool = FormatBool;
	AppendBool = function(dst, b) {
		var $ptr, b, dst;
		if (b) {
			return $appendSlice(dst, "true");
		}
		return $appendSlice(dst, "false");
	};
	$pkg.AppendBool = AppendBool;
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_1 = s.charCodeAt(0);
		if (_1 === (43)) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1);
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			}
		} else if (_1 === (45)) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			}
		} else if ((_1 === (110)) || (_1 === (78))) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN();
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
		} else if ((_1 === (105)) || (_1 === (73))) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1);
				_tmp$7 = true;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, _1, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_1 = true;
			if (_1 === ((c === 46))) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!((mantissa.$high === 0 && mantissa.$low === 0))) {
			exp = dp - ndMant >> 0;
		}
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		$s = -1; return [b, overflow];
		return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val);
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = val;
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tuple, bitSize, err, f, s;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f = _tuple[0];
			err = _tuple[1];
			return [f, err];
		}
		return atof64(s);
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _1, _tmp, _tmp$1, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
			/* */ if (s.length < 1) { $s = 2; continue; }
			/* */ if (2 <= base && base <= 36) { $s = 3; continue; }
			/* */ if ((base === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (s.length < 1) { */ case 2:
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
				$s = 6; continue;
			/* } else if (2 <= base && base <= 36) { */ case 3:
				$s = 6; continue;
			/* } else if ((base === 0)) { */ case 4:
					/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 9; continue; }
					/* */ if ((s.charCodeAt(0) === 48)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 9:
						/* */ if (s.length < 3) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (s.length < 3) { */ case 13:
							err = $pkg.ErrSyntax;
							/* goto Error */ $s = 7; continue;
						/* } */ case 14:
						base = 16;
						i = 2;
						$s = 12; continue;
					/* } else if ((s.charCodeAt(0) === 48)) { */ case 10:
						base = 8;
						i = 1;
						$s = 12; continue;
					/* } else { */ case 11:
						base = 10;
					/* } */ case 12:
				case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errors.New("invalid base " + Itoa(base));
				/* goto Error */ $s = 7; continue;
			/* } */ case 6:
		case 1:
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 15:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 16; continue; }
			v = 0;
			d = s.charCodeAt(i);
				/* */ if (48 <= d && d <= 57) { $s = 18; continue; }
				/* */ if (97 <= d && d <= 122) { $s = 19; continue; }
				/* */ if (65 <= d && d <= 90) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (48 <= d && d <= 57) { */ case 18:
					v = d - 48 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (97 <= d && d <= 122) { */ case 19:
					v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (65 <= d && d <= 90) { */ case 20:
					v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else { */ case 21:
					n = new $Uint64(0, 0);
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 7; continue;
				/* } */ case 22:
			case 17:
			/* */ if (v >= (base << 24 >>> 24)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v >= (base << 24 >>> 24)) { */ case 23:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
			/* } */ case 24:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 25:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 26:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$2 = new $Uint64(0, v), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 27:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 28:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return [n, $ifaceNil];
		return [n, $ifaceNil];
		/* Error: */ case 7:
		$s = -1; return [n, new NumError.ptr("ParseUint", s, err)];
		return [n, new NumError.ptr("ParseUint", s, err)];
		$s = -1; return [new $Uint64(0, 0), $ifaceNil];
		return [new $Uint64(0, 0), $ifaceNil];
		/* */ } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var $ptr, _tuple, err, i64, s;
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		return [((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0), err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0);
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >>> 0);
			dig = (y$2 = k, y$2 < 32 ? (n >>> y$2) : 0) >>> 0;
			n = n - (((y$3 = k, y$3 < 32 ? (dig << y$3) : 0) >>> 0)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >>> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = n - (((y$5 = k, y$5 < 32 ? (dig$1 << y$5) : 0) >>> 0)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >>> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = $clone(g, extFloat);
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = new $Uint64(0, (f.mant.$low >>> 0));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = new $Uint64(0, (g.mant.$low >>> 0));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, (pow10.$low >>> 0)) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - (($imul(digit, (pow$1.$low >>> 0)) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = function(f, fmt, prec, bitSize) {
		var $ptr, bitSize, f, fmt, prec;
		return $bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	$pkg.FormatFloat = FormatFloat;
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, digs, prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - (flt.mantbits >> 0) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, (exp << 24 >>> 24) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, ((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, ((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, ((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, (_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, ((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, new $Uint64(0, exp), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, i, base, false, false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	AppendUint = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, i, base, false, true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendUint = AppendUint;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = ((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
					j = 9;
					while (true) {
						if (!(j > 0)) { break; }
						i = i - (1) >> 0;
						qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
						us = qs;
						j = j - (1) >> 0;
					}
					u = q;
				}
			}
			us$1 = (u.$low >>> 0);
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = ((us$1 + 48 >>> 0) << 24 >>> 24));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0)));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _q, graphicOnly, quote, s;
		return $bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, width, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, utf8.RuneLen(r), quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, width, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1, width;
		runeTmp = arrayType$4.zero();
		if ((r === (quote >> 0)) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, (r << 24 >>> 24));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, (r << 24 >>> 24));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt(((r << 24 >>> 24) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s >>> 0), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s >>> 0), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0);
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = (c$1 >> 0) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = (c$1 >> 0);
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _1, _q, _tuple, _tuple$1, buf, c, err, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [$bytesToString(buf), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16);
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0);
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var $ptr, i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = (r << 16 >>> 16);
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? $throwRuntimeError("index out of range") : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7669, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11844, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9215, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94176, 94208, 100332, 100352, 101106, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127744, 128722, 128736, 128748, 128752, 128758, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129319, 129328, 129328, 129331, 129355, 129360, 129374, 129408, 129425, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 7177, 7223, 7336, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63775, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, mapType$1, structType$1, sliceType$5, ptrType$3, funcType$1, sliceType$6, ptrType$4, ptrType$5, sliceType$7, sliceType$8, ptrType$6, ptrType$7, structType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, ptrType$8, ptrType$9, sliceType$14, sliceType$15, ptrType$10, sliceType$16, ptrType$16, sliceType$18, ptrType$17, funcType$3, funcType$4, funcType$5, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$3.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$5.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, pkgPath_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.pkgPath = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.pkgPath = pkgPath_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.methods = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$5.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.fields = sliceType$8.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$14.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$10.nil;
			this.index = sliceType$14.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType(method);
	mapType$1 = $mapType(ptrType$1, sliceType$3);
	structType$1 = $structType("reflect", [{prop: "RWMutex", name: "", exported: true, typ: sync.RWMutex, tag: ""}, {prop: "m", name: "m", exported: false, typ: mapType$1, tag: ""}]);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$5], [ptrType$3], true);
	sliceType$6 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	sliceType$7 = $sliceType(imethod);
	sliceType$8 = $sliceType(structField);
	ptrType$6 = $ptrType(uncommonType);
	ptrType$7 = $ptrType(nameData);
	structType$8 = $structType("reflect", [{prop: "str", name: "str", exported: false, typ: $String, tag: ""}]);
	sliceType$9 = $sliceType(ptrType$3);
	sliceType$10 = $sliceType(Value);
	sliceType$11 = $sliceType(Type);
	sliceType$12 = $sliceType(sliceType$9);
	ptrType$8 = $ptrType(interfaceType);
	ptrType$9 = $ptrType(imethod);
	sliceType$14 = $sliceType($Int);
	sliceType$15 = $sliceType(fieldScan);
	ptrType$10 = $ptrType(structType);
	sliceType$16 = $sliceType($Uint8);
	ptrType$16 = $ptrType($UnsafePointer);
	sliceType$18 = $sliceType($Int32);
	ptrType$17 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$7.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$8.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$5.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, ptrType$5.nil, newNameOff(newName(internalStr(typ.string), "", "", !!(typ.exported))), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff(newName(internalStr(m.name), "", "", internalStr(m.pkg) === "")), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff(newName(internalStr(typ.pkg), "", "", false)), ($parseInt(methodSet.length) << 16 >>> 16), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), (dir >>> 0)));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = ($parseInt(results.length) << 16 >>> 16);
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), ($parseInt(params.length) << 16 >>> 16), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$7, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff(newName(internalStr(m$1.name), "", "", internalStr(m$1.pkg) === "")), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), new name.ptr(ptrType$5.nil), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$8, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), "", !!(f.exported)), name), reflectType(f.typ), (i$4 >>> 0)));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", "", false), name), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var $ptr, t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var $ptr, _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$6.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var $ptr, t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var $ptr, t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = $clone(this, name);
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = $clone(this, name);
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var $ptr, _entry, n;
		n = $clone(this, name);
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var $ptr, _entry, n;
		n = $clone(this, name);
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, pkgPath, exported) {
		var $ptr, _key, b, exported, n, pkgPath, tag;
		b = $newDataPointer(0, ptrType$5);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$5.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, pkgPath, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = (off >> 0), ((x < 0 || x >= nameOffList.$length) ? $throwRuntimeError("index out of range") : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var $ptr, i, n;
		n = $clone(n, name);
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return (i >> 0);
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = (off >> 0), ((x < 0 || x >= typeOffList.$length) ? $throwRuntimeError("index out of range") : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var $ptr, i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return (i >> 0);
	};
	internalStr = function(strObj) {
		var $ptr, c, strObj;
		c = new structType$8.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$9, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? $throwRuntimeError("index out of range") : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$9, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? $throwRuntimeError("index out of range") : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$9), $externalize(jsOut, sliceType$9), $externalize(variadic, $Bool)));
		return reflectType($funcType($externalize(jsIn, sliceType$9), $externalize(jsOut, sliceType$9), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return new (jsType(typ).ptr)();
		} else if (_1 === (17)) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_1 === (4)) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if ((_1 === (2)) || (_1 === (5))) {
			ptr.$set((bits.$low >> 0));
		} else if (_1 === (6)) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_1 === (8)) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_1 === (9)) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			ptr.$set((bits.$low >>> 0));
		} else if (_1 === (11)) {
			ptr.$set(bits);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		$s = -1; return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, _$37, fn, i, m, m$1, op, prop, rcvr, t, tt, ut, v, x, x$1;
		_$37 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!tt.rtype.nameOff(m.name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = tt.rtype.nameOff(m.name).name();
		} else {
			ut = v.typ.uncommon();
			if (ut === ptrType$6.nil || (i >>> 0) >= (ut.mcount >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])), method);
			if (!v.typ.nameOff(m$1.name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [_$37, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return new (jsType(v.typ))(v.object());
			return new (jsType(v.typ))(v.object());
		}
		$s = -1; return v.object();
		return v.object();
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = v.object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$9)));
		}; })(fn, rcvr));
		_r = v.Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _1, _r, _r$1, _r$2, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
				return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$2) { */ case 9:
						$s = -1; return false;
						return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
			return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? $throwRuntimeError("index out of range") : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = pname.name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = mtyp.kindType;
		in$1 = $makeSlice(sliceType$11, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$11, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$9)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), fn, fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = v.typ;
			fn = v.object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = slice.Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = _r$8.Set(x$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$10, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$5([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$10.nil;
				return sliceType$10.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$10([$clone(_r$14, Value)]);
				return new sliceType$10([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$10, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 34:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 34; continue; case 35:
				$s = -1; return ret;
				return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$10.nil;
		return sliceType$10.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = v.object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if (v.IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = v.object();
				tt = v.typ.kindType;
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
				return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = v.typ.kindType;
		if ((i >>> 0) >= (tt.fields.$length >>> 0)) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | (typ[0].Kind() >>> 0)) >>> 0;
		if (!field.name.isExported()) {
			if (field.name.name() === "") {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).name.tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = $substring(tag, 0, i);
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = $substring(tag, 0, (i + 1 >> 0));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = v.typ.kindType;
				if (i[0] < 0 || i[0] > (tt.len >> 0)) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ$1[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((typ$1[0].Kind() >>> 0))) >>> 0;
				a$1[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
					return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
				/* } */ case 8:
				_r = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = v.object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = v.typ.kindType;
				typ[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | ((typ[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
					return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = v.ptr.$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
				return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return v.object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return v.object() === $chanNil;
		} else if (_1 === (19)) {
			return v.object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return v.object() === false;
		} else if (_1 === (20)) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt(v.object().length);
		} else if (_1 === (23)) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_1 === (19)) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface(x, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set(x.object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = v.typ.kindType;
				cap = (tt.len >> 0);
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))(v.object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = v.object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = v.ptr.$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$12([new sliceType$9([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$12([new sliceType$9([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
			return false;
		}
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, s, t;
		t = this;
		s = t.nameOff(t.str).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul((t.size >> 0), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var $ptr, _entry, _i, _i$1, _key, _ref, _ref$1, _tuple, allExported, allm, found, m, m$1, methods, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = methodCache.RWMutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = methodCache.m[ptrType$1.keyFor(t)], _entry !== undefined ? [_entry.v, true] : [sliceType$3.nil, false]);
		methods = _tuple[0];
		found = _tuple[1];
		$r = methodCache.RWMutex.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (found) {
			$s = -1; return methods;
			return methods;
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			$s = -1; return sliceType$3.nil;
			return sliceType$3.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!name$1.isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$3, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if (name$2.isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		$r = methodCache.RWMutex.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (methodCache.m === false) {
			methodCache.m = {};
		}
		_key = t; (methodCache.m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: methods };
		$r = methodCache.RWMutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return methods;
		return methods;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			$s = -1; return tt.NumMethod();
			return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
			return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
			return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
			return [m, ok];
		}
		utmethods = ut.methods();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (ut.mcount >> 0))) { break; } */ if(!(i < (ut.mcount >> 0))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? $throwRuntimeError("index out of range") : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if (pname.isExported() && pname.name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pname.isExported() && pname.name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$s = -1; return [m, ok];
				return [m, ok];
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			return "";
		}
		return t.nameOff(ut.pkgPath).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return (tt.inCount >> 0);
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = pname.name();
		if (!pname.isExported()) {
			m.PkgPath = pname.pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = t.pkgPath.name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$8.nil) {
			return [m, ok];
		}
		p = ptrType$9.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (t.rtype.nameOff(p.name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = $substring(tag, 0, i);
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = $substring(tag, 0, (i + 1 >> 0));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, name$1, p, t, t$1, tag, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; name$1 = $f.name$1; p = $f.p; t = $f.t; t$1 = $f.t$1; tag = $f.tag; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		name$1 = p.name.name();
		/* */ if (!(name$1 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1 === "")) { */ case 1:
			f.Name = name$1;
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!p.name.isExported()) {
			f.PkgPath = t.pkgPath.name();
		}
		tag = p.name.tag();
		if (!(tag === "")) {
			f.Tag = tag;
		}
		f.Offset = p.offset;
		f.Index = new sliceType$14([i]);
		$s = -1; return f;
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.name$1 = name$1; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.tag = tag; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, name$1, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		ok = false;
		t = this;
		current = new sliceType$15([]);
		next = new sliceType$15([new fieldScan.ptr(t, sliceType$14.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$10.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					name$1 = f.name.name();
					/* */ if (!(name$1 === "")) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(name$1 === "")) { */ case 9:
						fname = name$1;
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$10.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$14.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$10.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$10.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$10.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$14.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, tfname, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; tfname = $f.tfname; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name$1[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				tfname = tf.name.name();
				/* */ if (tfname === "") { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tfname === "") { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tfname === name$1[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tfname === name$1[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			$s = -1; return [f, present];
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name$1) { return function(s) {
			var $ptr, s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.tfname = tfname; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (V.nameOff(vm.name).name() === t.rtype.nameOff(tm.name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$6.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < (v$1.mcount >> 0))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? $throwRuntimeError("index out of range") : vmethods.$array[vmethods.$offset + j$1]), method);
			if (V.nameOff(vm$1.name).name() === t.rtype.nameOff(tm$1.name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _1, _i, _ref, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_1 = kind;
		if (_1 === (17)) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_1 === (18)) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_1 === (19)) {
			t = T.kindType;
			v = V.kindType;
			if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
				return false;
			}
			i = 0;
			while (true) {
				if (!(i < t.rtype.NumIn())) { break; }
				if (!($interfaceIsEqual(t.rtype.In(i), v.rtype.In(i)))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			i$1 = 0;
			while (true) {
				if (!(i$1 < t.rtype.NumOut())) { break; }
				if (!($interfaceIsEqual(t.rtype.Out(i$1), v.rtype.Out(i$1)))) {
					return false;
				}
				i$1 = i$1 + (1) >> 0;
			}
			return true;
		} else if (_1 === (20)) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_1 === (21)) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if ((_1 === (22)) || (_1 === (23))) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_1 === (25)) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref = t$2.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$2 = _i;
				tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i$2]));
				vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$2]));
				if (!(tf.name.name() === vf.name.name())) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.name.tag() === vf.name.tag())) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return v.ptr.$get();
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return v.ptr.$get();
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_1 === (16)) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!(v.Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = v.Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return v.ptr.$get();
		} else if (_1 === (14)) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (3)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (4)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (5)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (6)) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			$s = -1; return new Value.ptr(typ, e.$get(), fl);
			return new Value.ptr(typ, e.$get(), fl);
		}
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$10, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = (i >>> 0) >= (_r >>> 0); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
			return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = v.Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		x = x;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_1 === (16)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			v.ptr.$set($fround(x));
		} else if (_1 === (14)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_1 === (3)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_1 === (4)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_1 === (5)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_1 === (6)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			$s = -1; return;
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_1 === (8)) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_1 === (9)) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_1 === (10)) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_1 === (11)) {
			v.ptr.$set(x);
		} else if (_1 === (12)) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
			return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return v.ptr.$get();
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r + " Value>";
		return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ut = v.typ.uncommon();
		if (ut === ptrType$6.nil || (i >>> 0) >= (ut.mcount >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (8)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (9)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (10)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (11)) {
			return p.$get();
		} else if (_1 === (12)) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			/* */ if (directlyAssignable(dst, v.typ)) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (directlyAssignable(dst, v.typ)) { */ case 5:
				v.typ = dst;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
				return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$1 = valueInterface(v, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				_r$2 = dst.NumMethod(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2 === 0) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r$2 === 0) { */ case 9:
					target.$set(x);
					$s = 11; continue;
				/* } else { */ case 10:
					ifaceE2I(dst, x, target);
				/* } */ case 11:
				$s = -1; return new Value.ptr(dst, target, 148);
				return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
					return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
					return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
					return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
					return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
					return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
					return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
					return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
					return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
					return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
					return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
							return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
							return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
							return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
							return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		if (haveIdenticalUnderlyingType(dst, src)) {
			$s = -1; return cvtDirect;
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 23; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 23:
		/* */ if (_v$2) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_v$2) { */ case 21:
			$s = -1; return cvtDirect;
			return cvtDirect;
		/* } */ case 22:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
				return cvtI2I;
			}
			$s = -1; return cvtT2I;
			return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			ptr.$set($fround(v));
		} else if (_1 === (8)) {
			ptr.$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_1 === (16)) {
			ptr.$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 96) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$16($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$18($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			$s = -1; return ret;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$6.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}];
	ptrType$17.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$10.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$10], [sliceType$10], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$16], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$18], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$18], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", exported: false, typ: sliceType$3, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", exported: false, typ: ptrType$5, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", exported: false, typ: $String, tag: ""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", exported: false, typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", exported: false, typ: ptrType$3, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", exported: false, typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", exported: false, typ: ptrType$5, tag: ""}, {prop: "str", name: "str", exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", exported: false, typ: sliceType$7, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", exported: false, typ: sliceType$8, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: sliceType$14, tag: ""}, {prop: "Anonymous", name: "Anonymous", exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$10, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$14, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new structType$1.ptr(new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$6(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, ScanState, Scanner, stringReader, scanError, ss, ssave, readRune, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, ptrType$5, arrayType$2, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, funcType, ptrType$26, ppFree, byteType, space, ssFree, complexError, boolError, newPrinter, Fprintf, Sprintf, Errorf, Fprint, Sprint, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, Sscan, Fscan, isSpace, notSpace, newScanState, indexRune, hexDigit, errorHandler;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", true, "fmt", true, null);
	Scanner = $pkg.Scanner = $newType(8, $kindInterface, "fmt.Scanner", true, "fmt", true, null);
	stringReader = $pkg.stringReader = $newType(8, $kindString, "fmt.stringReader", true, "fmt", false, null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	readRune = $pkg.readRune = $newType(0, $kindStruct, "fmt.readRune", true, "fmt", false, function(reader_, buf_, pending_, pendBuf_, peekRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.reader = $ifaceNil;
			this.buf = arrayType$2.zero();
			this.pending = 0;
			this.pendBuf = arrayType$2.zero();
			this.peekRune = 0;
			return;
		}
		this.reader = reader_;
		this.buf = buf_;
		this.pending = pending_;
		this.pendBuf = pendBuf_;
		this.peekRune = peekRune_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(pp);
	ptrType$3 = $ptrType(stringReader);
	ptrType$4 = $ptrType($String);
	ptrType$5 = $ptrType(ss);
	arrayType$2 = $arrayType($Uint8, 4);
	ptrType$6 = $ptrType(strconv.NumError);
	ptrType$7 = $ptrType($Bool);
	ptrType$8 = $ptrType($Complex64);
	ptrType$9 = $ptrType($Complex128);
	ptrType$10 = $ptrType($Int);
	ptrType$11 = $ptrType($Int8);
	ptrType$12 = $ptrType($Int16);
	ptrType$13 = $ptrType($Int32);
	ptrType$14 = $ptrType($Int64);
	ptrType$15 = $ptrType($Uint);
	ptrType$16 = $ptrType($Uint8);
	ptrType$17 = $ptrType($Uint16);
	ptrType$18 = $ptrType($Uint32);
	ptrType$19 = $ptrType($Uint64);
	ptrType$20 = $ptrType($Uintptr);
	ptrType$21 = $ptrType($Float32);
	ptrType$22 = $ptrType($Float64);
	ptrType$23 = $ptrType(sliceType$2);
	ptrType$24 = $ptrType($error);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	ptrType$26 = $ptrType(readRune);
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var $ptr, _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? $throwRuntimeError("index out of range") : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var $ptr, buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint((u.$low >> 0))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen((u.$low >> 0))) >> 0;
			utf8.EncodeRune($subslice(buf, i), (u.$low >> 0));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var $ptr, _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = new $Int64(u.$high, u.$low), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var $ptr, buf, c, f, r, w;
		f = this;
		r = (c.$low >> 0);
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, buf, c, f, r;
		f = this;
		r = (c.$low >> 0);
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var $ptr, f, num, oldZero, prec, size, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, (verb << 24 >>> 24), prec, size);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var $ptr, _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Sprintf = function(format, a) {
		var $ptr, _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var $ptr, _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Sprint = function(a) {
		var $ptr, _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Sprintln = function(a) {
		var $ptr, _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var $ptr, _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$1 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		p = this;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if (p.value.IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if (p.value.IsValid()) { */ case 3:
				_r$1 = p.value.Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue(p.value, 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var $ptr, _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f.$ptr = $ptr; $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var $ptr, _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var $ptr, _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var $ptr, _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
						return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64(new $Uint64(0, c), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer(new $Uint64(0, c$1), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s($bytesToString(v));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q($bytesToString(v));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue(_r, verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		u = 0;
			_1 = value.Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = value.Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = value.Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger(new $Uint64(0, u.constructor === Number ? u : 1), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if ((v.Kind() === 22) && v.IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r = _r; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var $ptr, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
						return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
						return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
			return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer(_r$1, 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat(f$1, 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex(new $Complex128(f$3.$real, f$3.$imag), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$5), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$6), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$7), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$8), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(f$9.$high, f$9.$low), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$10), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$11), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$12), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$13), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			$r = p.printValue(f$18, verb, 0); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$2 = p.handleMethods(verb); /* */ $s = 58; case 58: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (!_r$2) { */ case 56:
				_r$3 = reflect.ValueOf(f$19); /* */ $s = 59; case 59: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = p.printValue(_r$3, verb, 0); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 57:
		/* } */ case 36:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		/* */ if (depth > 0 && value.IsValid() && value.CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && value.IsValid() && value.CanInterface()) { */ case 1:
			_r = value.Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
				return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = value.Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool(f.Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger((x = f.Int(), new $Uint64(x.$high, x.$low)), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger(f.Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat(f.Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat(f.Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex(f.Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex(f.Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = f.String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = f.Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (f.IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
						return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$4 = f.MapKeys(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				keys = _r$4;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$5 = f.MapIndex(key); /* */ $s = 51; case 51: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = p.printValue(_r$5, verb, depth + 1 >> 0); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 53:
					_r$6 = f.Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$6); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 54:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 57:
					/* if (!(i$1 < f.NumField())) { break; } */ if(!(i$1 < f.NumField())) { $s = 58; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 59:
						_r$7 = f.Type().Field(i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						name = _r$7.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 60:
					_r$8 = getField(f, i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.printValue(_r$8, verb, depth + 1 >> 0); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 57; continue; case 58:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$9 = f.Elem(); /* */ $s = 64; case 64: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				value$1 = _r$9;
				/* */ if (!value$1.IsValid()) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (!value$1.IsValid()) { */ case 65:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 68:
						_r$10 = f.Type().String(); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$10); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 70; continue;
					/* } else { */ case 69:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 70:
					$s = 67; continue;
				/* } else { */ case 66:
					$r = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 75:
						t = f.Type();
						_r$11 = t.Elem(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Kind(); /* */ $s = 80; case 80: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 8) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$12 === 8) { */ case 77:
							bytes = sliceType$2.nil;
							/* */ if (f.Kind() === 23) { $s = 81; continue; }
							/* */ if (f.CanAddr()) { $s = 82; continue; }
							/* */ $s = 83; continue;
							/* if (f.Kind() === 23) { */ case 81:
								_r$13 = f.Bytes(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								bytes = _r$13;
								$s = 84; continue;
							/* } else if (f.CanAddr()) { */ case 82:
								_r$14 = f.Slice(0, f.Len()); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = _r$14.Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 84; continue;
							/* } else { */ case 83:
								bytes = $makeSlice(sliceType$2, f.Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 88:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 89; continue; }
									i$2 = _i$1;
									_r$16 = f.Index(i$2); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									_r$17 = _r$16.Uint(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$17.$low << 24 >>> 24));
									_i$1++;
								/* } */ $s = 88; continue; case 89:
							/* } */ case 84:
							_arg = bytes;
							_arg$1 = verb;
							_r$18 = t.String(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							_arg$2 = _r$18;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
							return;
						/* } */ case 78:
					/* } */ case 76:
				case 74:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 94:
					_r$19 = f.Type().String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$19); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if ((f.Kind() === 23) && f.IsNil()) { $s = 99; continue; }
					/* */ $s = 100; continue;
					/* if ((f.Kind() === 23) && f.IsNil()) { */ case 99:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
						return;
					/* } else { */ case 100:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
						i$3 = 0;
						/* while (true) { */ case 102:
							/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 103; continue; }
							if (i$3 > 0) {
								(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
							}
							_r$20 = f.Index(i$3); /* */ $s = 104; case 104: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							$r = p.printValue(_r$20, verb, depth + 1 >> 0); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							i$3 = i$3 + (1) >> 0;
						/* } */ $s = 102; continue; case 103:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					/* } */ case 101:
					$s = 96; continue;
				/* } else { */ case 95:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 106:
						/* if (!(i$4 < f.Len())) { break; } */ if(!(i$4 < f.Len())) { $s = 107; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$21 = f.Index(i$4); /* */ $s = 108; case 108: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						$r = p.printValue(_r$21, verb, depth + 1 >> 0); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 106; continue; case 107:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 96:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !((f.Pointer() === 0))) { $s = 110; continue; }
				/* */ $s = 111; continue;
				/* if ((depth === 0) && !((f.Pointer() === 0))) { */ case 110:
						_r$22 = f.Elem(); /* */ $s = 113; case 113: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						a = _r$22;
						_4 = a.Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 114; continue; }
						/* */ $s = 115; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 114:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
							return;
						/* } */ case 115:
					case 112:
				/* } */ case 111:
				$r = p.fmtPointer(f, verb); /* */ $s = 117; case 117: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer(f, verb); /* */ $s = 118; case 118: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType(f); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = v.Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = v.Int();
						if ((x = new $Int64(0, ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)), (x.$high === n.$high && x.$low === n.$low))) {
							num = ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0);
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = v.Uint();
						if ((x$1 = new $Int64(n$1.$high, n$1.$low), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = new $Uint64(0, (n$1.$low >> 0)), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = (n$1.$low >> 0);
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, verb, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; verb = $f.verb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), (c >> 0)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
			verb = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.verb = verb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var $ptr, _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var $ptr, _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	$ptrType(stringReader).prototype.Read = function(b) {
		var $ptr, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		r = this;
		n = $copyString(b, r.$get());
		r.$set($substring((r.$get()), n));
		if (n === 0) {
			err = io.EOF;
		}
		return [n, err];
	};
	Sscan = function(str, a) {
		var $ptr, _ptr, _r, _tuple, a, err, n, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ptr = $f._ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		str = [str];
		n = 0;
		err = $ifaceNil;
		_r = Fscan((_ptr = (str.$ptr || (str.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, str))), new ptrType$3(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target)), a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sscan }; } $f.$ptr = $ptr; $f._ptr = _ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sscan = Sscan;
	Fscan = function(r, a) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, a, err, n, old, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; err = $f.err; n = $f.n; old = $f.old; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newScanState(r, true, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[0];
		old = $clone(_tuple[1], ssave);
		_r$1 = s.doScan(a); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		n = _tuple$1[0];
		err = _tuple$1[1];
		s.free(old);
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fscan }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.err = err; $f.n = n; $f.old = old; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fscan = Fscan;
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
			return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
				return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.mustReadRune = function() {
		var $ptr, _r, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		if (r === -1) {
			s.error(io.ErrUnexpectedEOF);
		}
		$s = -1; return r;
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.mustReadRune }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.mustReadRune = function() { return this.$val.mustReadRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	readRune.ptr.prototype.readByte = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		err = $ifaceNil;
		r = this;
		if (r.pending > 0) {
			b = r.pendBuf[0];
			$copySlice($subslice(new sliceType$2(r.pendBuf), 0), $subslice(new sliceType$2(r.pendBuf), 1));
			r.pending = r.pending - (1) >> 0;
			$s = -1; return [b, err];
			return [b, err];
		}
		_r = io.ReadFull(r.reader, $subslice(new sliceType$2(r.pendBuf), 0, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!((n === 1))) {
			_tmp = 0;
			_tmp$1 = err;
			b = _tmp;
			err = _tmp$1;
			$s = -1; return [b, err];
			return [b, err];
		}
		_tmp$2 = r.pendBuf[0];
		_tmp$3 = err;
		b = _tmp$2;
		err = _tmp$3;
		$s = -1; return [b, err];
		return [b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readRune.ptr.prototype.readByte }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	readRune.prototype.readByte = function() { return this.$val.readByte(); };
	readRune.ptr.prototype.ReadRune = function() {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, r, rr, size, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; r = $f.r; rr = $f.rr; size = $f.size; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if (r.peekRune >= 0) {
			rr = r.peekRune;
			r.peekRune = ~r.peekRune >> 0;
			size = utf8.RuneLen(rr);
			$s = -1; return [rr, size, err];
			return [rr, size, err];
		}
		_r = r.readByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r.buf[0] = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [rr, size, err];
			return [rr, size, err];
		}
		if (r.buf[0] < 128) {
			rr = (r.buf[0] >> 0);
			size = 1;
			r.peekRune = ~rr >> 0;
			$s = -1; return [rr, size, err];
			return [rr, size, err];
		}
		n = 0;
		n = 1;
		/* while (true) { */ case 2:
			/* if (!(!utf8.FullRune($subslice(new sliceType$2(r.buf), 0, n)))) { break; } */ if(!(!utf8.FullRune($subslice(new sliceType$2(r.buf), 0, n)))) { $s = 3; continue; }
			_r$1 = r.readByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			(x = r.buf, ((n < 0 || n >= x.length) ? $throwRuntimeError("index out of range") : x[n] = _tuple$1[0]));
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = $ifaceNil;
					/* break; */ $s = 3; continue;
				}
				$s = -1; return [rr, size, err];
				return [rr, size, err];
			}
			n = n + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		_tuple$2 = utf8.DecodeRune($subslice(new sliceType$2(r.buf), 0, n));
		rr = _tuple$2[0];
		size = _tuple$2[1];
		if (size < n) {
			$copySlice($subslice(new sliceType$2(r.pendBuf), r.pending), $subslice(new sliceType$2(r.buf), size, n));
			r.pending = r.pending + ((n - size >> 0)) >> 0;
		}
		r.peekRune = ~rr >> 0;
		$s = -1; return [rr, size, err];
		return [rr, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readRune.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.r = r; $f.rr = rr; $f.size = size; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	readRune.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	readRune.ptr.prototype.UnreadRune = function() {
		var $ptr, r;
		r = this;
		if (r.peekRune >= 0) {
			return errors.New("fmt: scanning called UnreadRune with no rune available");
		}
		r.peekRune = ~r.peekRune >> 0;
		return $ifaceNil;
	};
	readRune.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	newScanState = function(r, nlIsSpace, nlIsEnd) {
		var $ptr, _r, _tuple, nlIsEnd, nlIsSpace, ok, old, r, rs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nlIsEnd = $f.nlIsEnd; nlIsSpace = $f.nlIsSpace; ok = $f.ok; old = $f.old; r = $f.r; rs = $f.rs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = ptrType$5.nil;
		old = new ssave.ptr(false, false, false, 0, 0, 0);
		_r = ssFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = $assertType(_r, ptrType$5);
		_tuple = $assertType(r, io.RuneScanner, true);
		rs = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			s.rs = rs;
		} else {
			s.rs = new readRune.ptr(r, arrayType$2.zero(), 0, arrayType$2.zero(), -1);
		}
		s.ssave.nlIsSpace = nlIsSpace;
		s.ssave.nlIsEnd = nlIsEnd;
		s.atEOF = false;
		s.ssave.limit = 1073741824;
		s.ssave.argLimit = 1073741824;
		s.ssave.maxWid = 1073741824;
		s.ssave.validSave = true;
		s.count = 0;
		$s = -1; return [s, old];
		return [s, old];
		/* */ } return; } if ($f === undefined) { $f = { $blk: newScanState }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nlIsEnd = nlIsEnd; $f.nlIsSpace = nlIsSpace; $f.ok = ok; $f.old = old; $f.r = r; $f.rs = rs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		old = $clone(old, ssave);
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r, _r$1, _r$2, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.consume = function(ok, accept) {
		var $ptr, _r, _r$1, accept, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; accept = $f.accept; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		if (r === -1) {
			$s = -1; return false;
			return false;
		}
		if (indexRune(ok, r) >= 0) {
			if (accept) {
				(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
			}
			$s = -1; return true;
			return true;
		}
		/* */ if (!((r === -1)) && accept) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1)) && accept) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.consume }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.accept = accept; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.consume = function(ok, accept) { return this.$val.consume(ok, accept); };
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ss.ptr.prototype.notEOF = function() {
		var $ptr, _r, _r$1, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		if (r === -1) {
			$panic(io.EOF);
		}
		_r$1 = s.UnreadRune(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.notEOF }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.notEOF = function() { return this.$val.notEOF(); };
	ss.ptr.prototype.accept = function(ok) {
		var $ptr, _r, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.consume(ok, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.accept }; } $f.$ptr = $ptr; $f._r = _r; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.accept = function(ok) { return this.$val.accept(ok); };
	ss.ptr.prototype.okVerb = function(verb, okVerbs, typ) {
		var $ptr, _i, _ref, _rune, okVerbs, s, typ, v, verb;
		s = this;
		_ref = okVerbs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			v = _rune[0];
			if (v === verb) {
				return true;
			}
			_i += _rune[1];
		}
		s.errorString("bad verb '%" + $encodeRune(verb) + "' for " + typ);
		return false;
	};
	ss.prototype.okVerb = function(verb, okVerbs, typ) { return this.$val.okVerb(verb, okVerbs, typ); };
	ss.ptr.prototype.scanBool = function(verb) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, _v$3, _v$4, s, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; s = $f.s; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!s.okVerb(verb, "tv", "boolean")) {
			$s = -1; return false;
			return false;
		}
			_r = s.getRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (48)) { $s = 5; continue; }
			/* */ if (_1 === (49)) { $s = 6; continue; }
			/* */ if ((_1 === (116)) || (_1 === (84))) { $s = 7; continue; }
			/* */ if ((_1 === (102)) || (_1 === (70))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (48)) { */ case 5:
				$s = -1; return false;
				return false;
			/* } else if (_1 === (49)) { */ case 6:
				$s = -1; return true;
				return true;
			/* } else if ((_1 === (116)) || (_1 === (84))) { */ case 7:
				_r$1 = s.accept("rR"); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				if (!(_r$1)) { _v = false; $s = 12; continue s; }
				_r$2 = s.accept("uU"); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				if (!_r$2) { _v$1 = true; $s = 14; continue s; }
				_r$3 = s.accept("eE"); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v$1 = !_r$3; case 14:
				_v = _v$1; case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
					s.error(boolError);
				/* } */ case 11:
				$s = -1; return true;
				return true;
			/* } else if ((_1 === (102)) || (_1 === (70))) { */ case 8:
				_r$4 = s.accept("aA"); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				if (!(_r$4)) { _v$2 = false; $s = 19; continue s; }
				_r$5 = s.accept("lL"); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!_r$5) { _v$4 = true; $s = 22; continue s; }
				_r$6 = s.accept("sS"); /* */ $s = 24; case 24: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$4 = !_r$6; case 22:
				if (_v$4) { _v$3 = true; $s = 21; continue s; }
				_r$7 = s.accept("eE"); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_v$3 = !_r$7; case 21:
				_v$2 = _v$3; case 19:
				/* */ if (_v$2) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_v$2) { */ case 17:
					s.error(boolError);
				/* } */ case 18:
				$s = -1; return false;
				return false;
			/* } */ case 9:
		case 3:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanBool }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.s = s; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanBool = function(verb) { return this.$val.scanBool(verb); };
	ss.ptr.prototype.getBase = function(verb) {
		var $ptr, _1, base, digits, s, verb;
		base = 0;
		digits = "";
		s = this;
		s.okVerb(verb, "bdoUxXv", "integer");
		base = 10;
		digits = "0123456789";
		_1 = verb;
		if (_1 === (98)) {
			base = 2;
			digits = "01";
		} else if (_1 === (111)) {
			base = 8;
			digits = "01234567";
		} else if ((_1 === (120)) || (_1 === (88)) || (_1 === (85))) {
			base = 16;
			digits = "0123456789aAbBcCdDeEfF";
		}
		return [base, digits];
	};
	ss.prototype.getBase = function(verb) { return this.$val.getBase(verb); };
	ss.ptr.prototype.scanNumber = function(digits, haveDigits) {
		var $ptr, _r, _r$1, digits, haveDigits, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; digits = $f.digits; haveDigits = $f.haveDigits; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!haveDigits) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!haveDigits) { */ case 1:
			$r = s.notEOF(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = s.accept(digits); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r) { */ case 4:
				s.errorString("expected integer");
			/* } */ case 5:
		/* } */ case 2:
		/* while (true) { */ case 7:
			_r$1 = s.accept(digits); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* if (!(_r$1)) { break; } */ if(!(_r$1)) { $s = 8; continue; }
		/* } */ $s = 7; continue; case 8:
		$s = -1; return $bytesToString(s.buf);
		return $bytesToString(s.buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanNumber }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.digits = digits; $f.haveDigits = haveDigits; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanNumber = function(digits, haveDigits) { return this.$val.scanNumber(digits, haveDigits); };
	ss.ptr.prototype.scanRune = function(bitSize) {
		var $ptr, _r, bitSize, n, r, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; bitSize = $f.bitSize; n = $f.n; r = $f.r; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.notEOF(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = s.getRune(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = new $Int64(0, _r);
		n = (bitSize >>> 0);
		x = $shiftRightInt64(($shiftLeft64(r, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.$high === r.$high && x.$low === r.$low))) {
			s.errorString("overflow on character value " + $encodeRune(r.$low));
		}
		$s = -1; return r;
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanRune }; } $f.$ptr = $ptr; $f._r = _r; $f.bitSize = bitSize; $f.n = n; $f.r = r; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanRune = function(bitSize) { return this.$val.scanRune(bitSize); };
	ss.ptr.prototype.scanBasePrefix = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, base, digits, found, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; base = $f.base; digits = $f.digits; found = $f.found; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		base = 0;
		digits = "";
		found = false;
		s = this;
		_r = s.peek("0"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			_tmp = 10;
			_tmp$1 = "0123456789";
			_tmp$2 = false;
			base = _tmp;
			digits = _tmp$1;
			found = _tmp$2;
			$s = -1; return [base, digits, found];
			return [base, digits, found];
		/* } */ case 2:
		_r$1 = s.accept("0"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		found = true;
		_tmp$3 = 8;
		_tmp$4 = "01234567";
		base = _tmp$3;
		digits = _tmp$4;
		_r$2 = s.peek("xX"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$2) { */ case 5:
			_r$3 = s.consume("xX", false); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_tmp$5 = 16;
			_tmp$6 = "0123456789aAbBcCdDeEfF";
			base = _tmp$5;
			digits = _tmp$6;
		/* } */ case 6:
		$s = -1; return [base, digits, found];
		return [base, digits, found];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanBasePrefix }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f.base = base; $f.digits = digits; $f.found = found; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanBasePrefix = function() { return this.$val.scanBasePrefix(); };
	ss.ptr.prototype.scanInt = function(verb, bitSize) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _v, base, bitSize, digits, err, haveDigits, i, n, s, tok, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; base = $f.base; bitSize = $f.bitSize; digits = $f.digits; err = $f.err; haveDigits = $f.haveDigits; i = $f.i; n = $f.n; s = $f.s; tok = $f.tok; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (verb === 99) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (verb === 99) { */ case 1:
			_r = s.scanRune(bitSize); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		$r = s.skipSpace(false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = s.getBase(verb);
		base = _tuple[0];
		digits = _tuple[1];
		haveDigits = false;
		/* */ if (verb === 85) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (verb === 85) { */ case 6:
			_r$1 = s.consume("U", false); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			if (!_r$1) { _v = true; $s = 11; continue s; }
			_r$2 = s.consume("+", false); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !_r$2; case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				s.errorString("bad unicode format ");
			/* } */ case 10:
			$s = 8; continue;
		/* } else { */ case 7:
			_r$3 = s.accept("+-"); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ if (verb === 118) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (verb === 118) { */ case 15:
				_r$4 = s.scanBasePrefix(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				base = _tuple$1[0];
				digits = _tuple$1[1];
				haveDigits = _tuple$1[2];
			/* } */ case 16:
		/* } */ case 8:
		_r$5 = s.scanNumber(digits, haveDigits); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		tok = _r$5;
		_tuple$2 = strconv.ParseInt(tok, base, 64);
		i = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x = $shiftRightInt64(($shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.$high === i.$high && x.$low === i.$low))) {
			s.errorString("integer overflow on token " + tok);
		}
		$s = -1; return i;
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanInt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.base = base; $f.bitSize = bitSize; $f.digits = digits; $f.err = err; $f.haveDigits = haveDigits; $f.i = i; $f.n = n; $f.s = s; $f.tok = tok; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanInt = function(verb, bitSize) { return this.$val.scanInt(verb, bitSize); };
	ss.ptr.prototype.scanUint = function(verb, bitSize) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _v, base, bitSize, digits, err, haveDigits, i, n, s, tok, verb, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; base = $f.base; bitSize = $f.bitSize; digits = $f.digits; err = $f.err; haveDigits = $f.haveDigits; i = $f.i; n = $f.n; s = $f.s; tok = $f.tok; verb = $f.verb; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (verb === 99) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (verb === 99) { */ case 1:
			_r = s.scanRune(bitSize); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x = _r, new $Uint64(x.$high, x.$low));
			return (x = _r, new $Uint64(x.$high, x.$low));
		/* } */ case 2:
		$r = s.skipSpace(false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = s.getBase(verb);
		base = _tuple[0];
		digits = _tuple[1];
		haveDigits = false;
		/* */ if (verb === 85) { $s = 6; continue; }
		/* */ if (verb === 118) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (verb === 85) { */ case 6:
			_r$1 = s.consume("U", false); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			if (!_r$1) { _v = true; $s = 11; continue s; }
			_r$2 = s.consume("+", false); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !_r$2; case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				s.errorString("bad unicode format ");
			/* } */ case 10:
			$s = 8; continue;
		/* } else if (verb === 118) { */ case 7:
			_r$3 = s.scanBasePrefix(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			base = _tuple$1[0];
			digits = _tuple$1[1];
			haveDigits = _tuple$1[2];
		/* } */ case 8:
		_r$4 = s.scanNumber(digits, haveDigits); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		tok = _r$4;
		_tuple$2 = strconv.ParseUint(tok, base, 64);
		i = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x$1 = $shiftRightUint64(($shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x$1.$high === i.$high && x$1.$low === i.$low))) {
			s.errorString("unsigned integer overflow on token " + tok);
		}
		$s = -1; return i;
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanUint }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.base = base; $f.bitSize = bitSize; $f.digits = digits; $f.err = err; $f.haveDigits = haveDigits; $f.i = i; $f.n = n; $f.s = s; $f.tok = tok; $f.verb = verb; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanUint = function(verb, bitSize) { return this.$val.scanUint(verb, bitSize); };
	ss.ptr.prototype.floatToken = function() {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.accept("nN"); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r)) { _v$1 = false; $s = 4; continue s; }
		_r$1 = s.accept("aA"); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r$1; case 4:
		if (!(_v$1)) { _v = false; $s = 3; continue s; }
		_r$2 = s.accept("nN"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return $bytesToString(s.buf);
			return $bytesToString(s.buf);
		/* } */ case 2:
		_r$3 = s.accept("+-"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = s.accept("iI"); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		if (!(_r$4)) { _v$3 = false; $s = 12; continue s; }
		_r$5 = s.accept("nN"); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v$3 = _r$5; case 12:
		if (!(_v$3)) { _v$2 = false; $s = 11; continue s; }
		_r$6 = s.accept("fF"); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 11:
		/* */ if (_v$2) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v$2) { */ case 9:
			$s = -1; return $bytesToString(s.buf);
			return $bytesToString(s.buf);
		/* } */ case 10:
		/* while (true) { */ case 16:
			_r$7 = s.accept("0123456789"); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* if (!(_r$7)) { break; } */ if(!(_r$7)) { $s = 17; continue; }
		/* } */ $s = 16; continue; case 17:
		_r$8 = s.accept("."); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (_r$8) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (_r$8) { */ case 19:
			/* while (true) { */ case 22:
				_r$9 = s.accept("0123456789"); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* if (!(_r$9)) { break; } */ if(!(_r$9)) { $s = 23; continue; }
			/* } */ $s = 22; continue; case 23:
		/* } */ case 20:
		_r$10 = s.accept("eEp"); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		/* */ if (_r$10) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (_r$10) { */ case 25:
			_r$11 = s.accept("+-"); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			/* while (true) { */ case 29:
				_r$12 = s.accept("0123456789"); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				/* if (!(_r$12)) { break; } */ if(!(_r$12)) { $s = 30; continue; }
			/* } */ $s = 29; continue; case 30:
		/* } */ case 26:
		$s = -1; return $bytesToString(s.buf);
		return $bytesToString(s.buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.floatToken }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.floatToken = function() { return this.$val.floatToken(); };
	ss.ptr.prototype.complexTokens = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _v, imag, imagSign, parens, real, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _v = $f._v; imag = $f.imag; imagSign = $f.imagSign; parens = $f.parens; real = $f.real; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		real = "";
		imag = "";
		s = this;
		_r = s.accept("("); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		parens = _r;
		_r$1 = s.floatToken(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		real = _r$1;
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.accept("+-"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!_r$2) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!_r$2) { */ case 3:
			s.error(complexError);
		/* } */ case 4:
		imagSign = $bytesToString(s.buf);
		_r$3 = s.floatToken(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		imag = _r$3;
		_r$4 = s.accept("i"); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!_r$4) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!_r$4) { */ case 7:
			s.error(complexError);
		/* } */ case 8:
		if (!(parens)) { _v = false; $s = 12; continue s; }
		_r$5 = s.accept(")"); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = !_r$5; case 12:
		/* */ if (_v) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v) { */ case 10:
			s.error(complexError);
		/* } */ case 11:
		_tmp = real;
		_tmp$1 = imagSign + imag;
		real = _tmp;
		imag = _tmp$1;
		$s = -1; return [real, imag];
		return [real, imag];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.complexTokens }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._v = _v; $f.imag = imag; $f.imagSign = imagSign; $f.parens = parens; $f.real = real; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.complexTokens = function() { return this.$val.complexTokens(); };
	ss.ptr.prototype.convertFloat = function(str, n) {
		var $ptr, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, err, err$1, f, f$1, m, n, ok, ok$1, p, s, str;
		s = this;
		p = indexRune(str, 112);
		if (p >= 0) {
			_tuple = strconv.ParseFloat($substring(str, 0, p), n);
			f = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tuple$1 = $assertType(err, ptrType$6, true);
				e = _tuple$1[0];
				ok = _tuple$1[1];
				if (ok) {
					e.Num = str;
				}
				s.error(err);
			}
			_tuple$2 = strconv.Atoi($substring(str, (p + 1 >> 0)));
			m = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tuple$3 = $assertType(err, ptrType$6, true);
				e$1 = _tuple$3[0];
				ok$1 = _tuple$3[1];
				if (ok$1) {
					e$1.Num = str;
				}
				s.error(err);
			}
			return math.Ldexp(f, m);
		}
		_tuple$4 = strconv.ParseFloat(str, n);
		f$1 = _tuple$4[0];
		err$1 = _tuple$4[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			s.error(err$1);
		}
		return f$1;
	};
	ss.prototype.convertFloat = function(str, n) { return this.$val.convertFloat(str, n); };
	ss.ptr.prototype.scanComplex = function(verb, n) {
		var $ptr, _q, _q$1, _r, _tuple, imag, n, real, s, simag, sreal, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _tuple = $f._tuple; imag = $f.imag; n = $f.n; real = $f.real; s = $f.s; simag = $f.simag; sreal = $f.sreal; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!s.okVerb(verb, "beEfFgGv", "complex")) {
			$s = -1; return new $Complex128(0, 0);
			return new $Complex128(0, 0);
		}
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = s.complexTokens(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		sreal = _tuple[0];
		simag = _tuple[1];
		real = s.convertFloat(sreal, (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		imag = s.convertFloat(simag, (_q$1 = n / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
		$s = -1; return new $Complex128(real, imag);
		return new $Complex128(real, imag);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanComplex }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._tuple = _tuple; $f.imag = imag; $f.n = n; $f.real = real; $f.s = s; $f.simag = simag; $f.sreal = sreal; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanComplex = function(verb, n) { return this.$val.scanComplex(verb, n); };
	ss.ptr.prototype.convertString = function(verb) {
		var $ptr, _1, _r, _r$1, _r$2, s, str, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; s = $f.s; str = $f.str; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		str = "";
		s = this;
		if (!s.okVerb(verb, "svqxX", "string")) {
			str = "";
			$s = -1; return str;
			return str;
		}
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_1 = verb;
			/* */ if (_1 === (113)) { $s = 4; continue; }
			/* */ if ((_1 === (120)) || (_1 === (88))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (113)) { */ case 4:
				_r = s.quotedString(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				str = _r;
				$s = 7; continue;
			/* } else if ((_1 === (120)) || (_1 === (88))) { */ case 5:
				_r$1 = s.hexString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				str = _r$1;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$2 = s.token(true, notSpace); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				str = $bytesToString(_r$2);
			/* } */ case 7:
		case 3:
		$s = -1; return str;
		return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.convertString }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.s = s; $f.str = str; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.convertString = function(verb) { return this.$val.convertString(verb); };
	ss.ptr.prototype.quotedString = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _tuple, err, quote, r, r$1, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; quote = $f.quote; r = $f.r; r$1 = $f.r$1; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.notEOF(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = s.getRune(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		quote = _r;
			_1 = quote;
			/* */ if (_1 === (96)) { $s = 4; continue; }
			/* */ if (_1 === (34)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (96)) { */ case 4:
				/* while (true) { */ case 8:
					_r$1 = s.mustReadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					r = _r$1;
					if (r === quote) {
						/* break; */ $s = 9; continue;
					}
					(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
				/* } */ $s = 8; continue; case 9:
				$s = -1; return $bytesToString(s.buf);
				return $bytesToString(s.buf);
			/* } else if (_1 === (34)) { */ case 5:
				(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteByte(34);
				/* while (true) { */ case 11:
					_r$2 = s.mustReadRune(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					r$1 = _r$2;
					(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r$1);
					/* */ if (r$1 === 92) { $s = 14; continue; }
					/* */ if (r$1 === 34) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (r$1 === 92) { */ case 14:
						_r$3 = s.mustReadRune(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$r = (s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(_r$3); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 16; continue;
					/* } else if (r$1 === 34) { */ case 15:
						/* break; */ $s = 12; continue;
					/* } */ case 16:
				/* } */ $s = 11; continue; case 12:
				_tuple = strconv.Unquote($bytesToString(s.buf));
				result = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					s.error(err);
				}
				$s = -1; return result;
				return result;
			/* } else { */ case 6:
				s.errorString("expected quoted string");
			/* } */ case 7:
		case 3:
		$s = -1; return "";
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.quotedString }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.quote = quote; $f.r = r; $f.r$1 = r$1; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.quotedString = function() { return this.$val.quotedString(); };
	hexDigit = function(d) {
		var $ptr, _1, d, digit;
		digit = (d >> 0);
		_1 = digit;
		if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55)) || (_1 === (56)) || (_1 === (57))) {
			return [digit - 48 >> 0, true];
		} else if ((_1 === (97)) || (_1 === (98)) || (_1 === (99)) || (_1 === (100)) || (_1 === (101)) || (_1 === (102))) {
			return [(10 + digit >> 0) - 97 >> 0, true];
		} else if ((_1 === (65)) || (_1 === (66)) || (_1 === (67)) || (_1 === (68)) || (_1 === (69)) || (_1 === (70))) {
			return [(10 + digit >> 0) - 65 >> 0, true];
		}
		return [-1, false];
	};
	ss.ptr.prototype.hexByte = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, b, ok, rune1, s, value1, value2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; ok = $f.ok; rune1 = $f.rune1; s = $f.s; value1 = $f.value1; value2 = $f.value2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		ok = false;
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rune1 = _r;
		if (rune1 === -1) {
			$s = -1; return [b, ok];
			return [b, ok];
		}
		_tuple = hexDigit(rune1);
		value1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [b, ok];
			return [b, ok];
		/* } */ case 3:
		_r$2 = s.mustReadRune(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = hexDigit(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		value2 = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			s.errorString("illegal hex digit");
			$s = -1; return [b, ok];
			return [b, ok];
		}
		_tmp = (((value1 << 4 >> 0) | value2) << 24 >>> 24);
		_tmp$1 = true;
		b = _tmp;
		ok = _tmp$1;
		$s = -1; return [b, ok];
		return [b, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.hexByte }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.ok = ok; $f.rune1 = rune1; $f.s = s; $f.value1 = value1; $f.value2 = value2; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.hexByte = function() { return this.$val.hexByte(); };
	ss.ptr.prototype.hexString = function() {
		var $ptr, _r, _tuple, b, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.notEOF(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			_r = s.hexByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			b = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				/* break; */ $s = 3; continue;
			}
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteByte(b);
		/* } */ $s = 2; continue; case 3:
		if (s.buf.$length === 0) {
			s.errorString("no hex data for %x string");
			$s = -1; return "";
			return "";
		}
		$s = -1; return $bytesToString(s.buf);
		return $bytesToString(s.buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.hexString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.hexString = function() { return this.$val.hexString(); };
	ss.ptr.prototype.scanOne = function(verb, arg) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, arg, err, i, ok, ptr, s, str, typ, v, v$1, v$10, v$11, v$12, v$13, v$14, v$15, v$16, v$17, v$18, v$19, v$2, v$20, v$3, v$4, v$5, v$6, v$7, v$8, v$9, val, verb, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; err = $f.err; i = $f.i; ok = $f.ok; ptr = $f.ptr; s = $f.s; str = $f.str; typ = $f.typ; v = $f.v; v$1 = $f.v$1; v$10 = $f.v$10; v$11 = $f.v$11; v$12 = $f.v$12; v$13 = $f.v$13; v$14 = $f.v$14; v$15 = $f.v$15; v$16 = $f.v$16; v$17 = $f.v$17; v$18 = $f.v$18; v$19 = $f.v$19; v$2 = $f.v$2; v$20 = $f.v$20; v$3 = $f.v$3; v$4 = $f.v$4; v$5 = $f.v$5; v$6 = $f.v$6; v$7 = $f.v$7; v$8 = $f.v$8; v$9 = $f.v$9; val = $f.val; verb = $f.verb; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.buf = $subslice(s.buf, 0, 0);
		err = $ifaceNil;
		_tuple = $assertType(arg, Scanner, true);
		v = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = v.Scan(s, verb); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				s.error(err);
			}
			$s = -1; return;
			return;
		/* } */ case 2:
		_ref = arg;
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if ($assertType(_ref, ptrType$7, true)[1]) { */ case 4:
			v$1 = _ref.$val;
			_r$1 = s.scanBool(verb); /* */ $s = 24; case 24: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			v$1.$set(_r$1);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 5:
			v$2 = _ref.$val;
			_r$2 = s.scanComplex(verb, 64); /* */ $s = 25; case 25: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v$2.$set((x = _r$2, new $Complex64(x.$real, x.$imag)));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 6:
			v$3 = _ref.$val;
			_r$3 = s.scanComplex(verb, 128); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v$3.$set(_r$3);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 7:
			v$4 = _ref.$val;
			_r$4 = s.scanInt(verb, 32); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v$4.$set(((x$1 = _r$4, x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 8:
			v$5 = _ref.$val;
			_r$5 = s.scanInt(verb, 8); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v$5.$set(((x$2 = _r$5, x$2.$low + ((x$2.$high >> 31) * 4294967296)) << 24 >> 24));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 9:
			v$6 = _ref.$val;
			_r$6 = s.scanInt(verb, 16); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			v$6.$set(((x$3 = _r$6, x$3.$low + ((x$3.$high >> 31) * 4294967296)) << 16 >> 16));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 10:
			v$7 = _ref.$val;
			_r$7 = s.scanInt(verb, 32); /* */ $s = 30; case 30: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			v$7.$set(((x$4 = _r$7, x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 11:
			v$8 = _ref.$val;
			_r$8 = s.scanInt(verb, 64); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			v$8.$set(_r$8);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 12:
			v$9 = _ref.$val;
			_r$9 = s.scanUint(verb, 32); /* */ $s = 32; case 32: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			v$9.$set((_r$9.$low >>> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 13:
			v$10 = _ref.$val;
			_r$10 = s.scanUint(verb, 8); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			v$10.$set((_r$10.$low << 24 >>> 24));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 14:
			v$11 = _ref.$val;
			_r$11 = s.scanUint(verb, 16); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			v$11.$set((_r$11.$low << 16 >>> 16));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 15:
			v$12 = _ref.$val;
			_r$12 = s.scanUint(verb, 32); /* */ $s = 35; case 35: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			v$12.$set((_r$12.$low >>> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 16:
			v$13 = _ref.$val;
			_r$13 = s.scanUint(verb, 64); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			v$13.$set(_r$13);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 17:
			v$14 = _ref.$val;
			_r$14 = s.scanUint(verb, 32); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			v$14.$set((_r$14.$low >>> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 18:
			v$15 = _ref.$val;
			/* */ if (s.okVerb(verb, "beEfFgGv", "float32")) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (s.okVerb(verb, "beEfFgGv", "float32")) { */ case 38:
				$r = s.skipSpace(false); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = s.notEOF(); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$15 = s.floatToken(); /* */ $s = 42; case 42: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = s.convertFloat(_r$15, 32); /* */ $s = 43; case 43: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				v$15.$set($fround(_r$16));
			/* } */ case 39:
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 19:
			v$16 = _ref.$val;
			/* */ if (s.okVerb(verb, "beEfFgGv", "float64")) { $s = 44; continue; }
			/* */ $s = 45; continue;
			/* if (s.okVerb(verb, "beEfFgGv", "float64")) { */ case 44:
				$r = s.skipSpace(false); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = s.notEOF(); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$17 = s.floatToken(); /* */ $s = 48; case 48: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = s.convertFloat(_r$17, 64); /* */ $s = 49; case 49: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				v$16.$set(_r$18);
			/* } */ case 45:
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 20:
			v$17 = _ref.$val;
			_r$19 = s.convertString(verb); /* */ $s = 50; case 50: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			v$17.$set(_r$19);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 21:
			v$18 = _ref.$val;
			_r$20 = s.convertString(verb); /* */ $s = 51; case 51: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			v$18.$set(new sliceType$2($stringToBytes(_r$20)));
			$s = 23; continue;
		/* } else { */ case 22:
			v$19 = _ref;
			_r$21 = reflect.ValueOf(v$19); /* */ $s = 52; case 52: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			val = _r$21;
			ptr = val;
			/* */ if (!((ptr.Kind() === 22))) { $s = 53; continue; }
			/* */ $s = 54; continue;
			/* if (!((ptr.Kind() === 22))) { */ case 53:
				_r$22 = val.Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				$r = s.errorString("type not a pointer: " + _r$22); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 54:
				_r$23 = ptr.Elem(); /* */ $s = 58; case 58: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				v$20 = _r$23;
				_1 = v$20.Kind();
				/* */ if (_1 === (1)) { $s = 59; continue; }
				/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 60; continue; }
				/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 61; continue; }
				/* */ if (_1 === (24)) { $s = 62; continue; }
				/* */ if (_1 === (23)) { $s = 63; continue; }
				/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 64; continue; }
				/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (_1 === (1)) { */ case 59:
					_r$24 = s.scanBool(verb); /* */ $s = 68; case 68: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					$r = v$20.SetBool(_r$24); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 60:
					_arg = verb;
					_r$25 = v$20.Type().Bits(); /* */ $s = 70; case 70: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_arg$1 = _r$25;
					_r$26 = s.scanInt(_arg, _arg$1); /* */ $s = 71; case 71: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					$r = v$20.SetInt(_r$26); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 61:
					_arg$2 = verb;
					_r$27 = v$20.Type().Bits(); /* */ $s = 73; case 73: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_arg$3 = _r$27;
					_r$28 = s.scanUint(_arg$2, _arg$3); /* */ $s = 74; case 74: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					$r = v$20.SetUint(_r$28); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if (_1 === (24)) { */ case 62:
					_r$29 = s.convertString(verb); /* */ $s = 76; case 76: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					$r = v$20.SetString(_r$29); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if (_1 === (23)) { */ case 63:
					typ = v$20.Type();
					_r$30 = typ.Elem(); /* */ $s = 80; case 80: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_r$31 = _r$30.Kind(); /* */ $s = 81; case 81: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					/* */ if (!((_r$31 === 8))) { $s = 78; continue; }
					/* */ $s = 79; continue;
					/* if (!((_r$31 === 8))) { */ case 78:
						_r$32 = val.Type().String(); /* */ $s = 82; case 82: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						$r = s.errorString("can't scan type: " + _r$32); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 79:
					_r$33 = s.convertString(verb); /* */ $s = 84; case 84: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					str = _r$33;
					_r$34 = reflect.MakeSlice(typ, str.length, str.length); /* */ $s = 85; case 85: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					$r = v$20.Set(_r$34); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = 0;
					/* while (true) { */ case 87:
						/* if (!(i < str.length)) { break; } */ if(!(i < str.length)) { $s = 88; continue; }
						_r$35 = v$20.Index(i); /* */ $s = 89; case 89: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
						$r = _r$35.SetUint(new $Uint64(0, str.charCodeAt(i))); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i = i + (1) >> 0;
					/* } */ $s = 87; continue; case 88:
					$s = 67; continue;
				/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 64:
					$r = s.skipSpace(false); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = s.notEOF(); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$36 = s.floatToken(); /* */ $s = 93; case 93: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					_arg$4 = _r$36;
					_r$37 = v$20.Type().Bits(); /* */ $s = 94; case 94: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					_arg$5 = _r$37;
					_r$38 = s.convertFloat(_arg$4, _arg$5); /* */ $s = 95; case 95: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					$r = v$20.SetFloat(_r$38); /* */ $s = 96; case 96: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 65:
					_arg$6 = verb;
					_r$39 = v$20.Type().Bits(); /* */ $s = 97; case 97: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					_arg$7 = _r$39;
					_r$40 = s.scanComplex(_arg$6, _arg$7); /* */ $s = 98; case 98: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
					$r = v$20.SetComplex(_r$40); /* */ $s = 99; case 99: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else { */ case 66:
					_r$41 = val.Type().String(); /* */ $s = 100; case 100: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					$r = s.errorString("can't scan type: " + _r$41); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
			case 57:
		/* } */ case 23:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanOne }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.err = err; $f.i = i; $f.ok = ok; $f.ptr = ptr; $f.s = s; $f.str = str; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.v$10 = v$10; $f.v$11 = v$11; $f.v$12 = v$12; $f.v$13 = v$13; $f.v$14 = v$14; $f.v$15 = v$15; $f.v$16 = v$16; $f.v$17 = v$17; $f.v$18 = v$18; $f.v$19 = v$19; $f.v$2 = v$2; $f.v$20 = v$20; $f.v$3 = v$3; $f.v$4 = v$4; $f.v$5 = v$5; $f.v$6 = v$6; $f.v$7 = v$7; $f.v$8 = v$8; $f.v$9 = v$9; $f.val = val; $f.verb = verb; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanOne = function(verb, arg) { return this.$val.scanOne(verb, arg); };
	errorHandler = function(errp) {
		var $ptr, _tuple, _tuple$1, e, eof, errp, ok, ok$1, se;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, scanError, true);
			se = $clone(_tuple[0], scanError);
			ok = _tuple[1];
			if (ok) {
				errp.$set(se.err);
			} else {
				_tuple$1 = $assertType(e, $error, true);
				eof = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1 && $interfaceIsEqual(eof, io.EOF)) {
					errp.$set(eof);
				} else {
					$panic(e);
				}
			}
		}
	};
	ss.ptr.prototype.doScan = function(a) {
		var $ptr, _i, _r, _ref, a, arg, err, numProcessed, r, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; arg = $f.arg; err = $f.err; numProcessed = $f.numProcessed; r = $f.r; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		numProcessed = 0;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([errorHandler, [(err.$ptr || (err.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = s.scanOne(118, arg); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			numProcessed = numProcessed + (1) >> 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if (s.ssave.nlIsEnd) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.ssave.nlIsEnd) { */ case 4:
			/* while (true) { */ case 6:
				_r = s.getRune(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				r = _r;
				if ((r === 10) || (r === -1)) {
					/* break; */ $s = 7; continue;
				}
				if (!isSpace(r)) {
					s.errorString("expected newline");
					/* break; */ $s = 7; continue;
				}
			/* } */ $s = 6; continue; case 7:
		/* } */ case 5:
		$s = -1; return [numProcessed, err[0]];
		return [numProcessed, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [numProcessed, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.doScan }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.err = err; $f.numProcessed = numProcessed; $f.r = r; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.doScan = function(a) { return this.$val.doScan(a); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	ptrType$26.methods = [{prop: "readByte", name: "readByte", pkg: "fmt", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "", exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", exported: false, typ: $Bool, tag: ""}]);
	ScanState.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}]);
	Scanner.init([{prop: "Scan", name: "Scan", pkg: "", typ: $funcType([ScanState, $Int32], [$error], false)}]);
	scanError.init("fmt", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "", exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", exported: false, typ: $Int, tag: ""}]);
	readRune.init("fmt", [{prop: "reader", name: "reader", exported: false, typ: io.Reader, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: arrayType$2, tag: ""}, {prop: "pending", name: "pending", exported: false, typ: $Int, tag: ""}, {prop: "pendBuf", name: "pendBuf", exported: false, typ: arrayType$2, tag: ""}, {prop: "peekRune", name: "peekRune", exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, Writer, sliceType, ptrType, sliceType$1, ptrType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", true, "bufio", true, function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "bufio.Writer", true, "bufio", true, function(err_, buf_, n_, wr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.buf = sliceType.nil;
			this.n = 0;
			this.wr = $ifaceNil;
			return;
		}
		this.err = err_;
		this.buf = buf_;
		this.n = n_;
		this.wr = wr_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	ptrType$1 = $ptrType(Writer);
	NewReaderSize = function(rd, size) {
		var $ptr, _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var $ptr, rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var $ptr, b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var $ptr, _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				$s = -1; return;
				return;
			}
			if (n > 0) {
				$s = -1; return;
				return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var $ptr, b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var $ptr, avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrNegativeCount];
			return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		if (n > b.buf.$length) {
			$s = -1; return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
			return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		$s = -1; return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			$s = -1; return [discarded, err];
			return [discarded, err];
		}
		if (n === 0) {
			$s = -1; return [discarded, err];
			return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				$s = -1; return [discarded, err];
				return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				$s = -1; return [discarded, err];
				return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [discarded, err];
		return [discarded, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
			return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
				return [n, err];
			/* } */ case 4:
			$r = b.fill(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (b.r === b.w) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				$s = -1; return [n, err];
				return [n, err];
			}
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.readErr()];
				return [0, b.readErr()];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		$s = -1; return [c, $ifaceNil];
		return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.$ptr = $ptr; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24)));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r, size, err];
			return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0);
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		$s = -1; return [r, size, err];
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var $ptr, b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + i$1]) >> 0);
			b.lastRuneSize = -1;
		}
		$s = -1; return [line, err];
		return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.$ptr = $ptr; $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			$s = -1; return [line, isPrefix, err];
			return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			$s = -1; return [line, isPrefix, err];
			return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		$s = -1; return [line, isPrefix, err];
		return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		$s = -1; return [buf$1, err];
		return [buf$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var $ptr, _r, _tuple, b, bytes$1, delim, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [$bytesToString(bytes$1), err];
		return [$bytesToString(bytes$1), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
			return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
			return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
			return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
				return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var $ptr, _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		$s = -1; return [new $Int64(0, n), err];
		return [new $Int64(0, n), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	Writer.ptr.prototype.Reset = function(w) {
		var $ptr, b, w;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.Flush = function() {
		var $ptr, _r, b, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.flush = function() {
		var $ptr, _r, _tuple, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return b.err;
			return b.err;
		}
		if (b.n === 0) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		_r = b.wr.Write($subslice(b.buf, 0, b.n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			$s = -1; return err;
			return err;
		}
		b.n = 0;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.flush }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.ptr.prototype.Available = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.ptr.prototype.Write = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, n$1, nn, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = 0;
			/* */ if (b.Buffered() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.Buffered() === 0) { */ case 3:
				_r = b.wr.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				$s = 5; continue;
			/* } else { */ case 4:
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				_r$1 = b.flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn;
			_tmp$1 = b.err;
			nn = _tmp;
			err = _tmp$1;
			$s = -1; return [nn, err];
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn;
		_tmp$3 = $ifaceNil;
		nn = _tmp$2;
		err = _tmp$3;
		$s = -1; return [nn, err];
		return [nn, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.WriteByte = function(c) {
		var $ptr, _r, _v, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return b.err;
			return b.err;
		}
		if (!(b.Available() <= 0)) { _v = false; $s = 3; continue s; }
		_r = b.flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !($interfaceIsEqual(_r, $ifaceNil)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return b.err;
			return b.err;
		/* } */ case 2:
		(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.n = b.n + (1) >> 0;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		size = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (r < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 128) { */ case 1:
			_r = b.WriteByte((r << 24 >>> 24)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				size = _tmp;
				err = _tmp$1;
				$s = -1; return [size, err];
				return [size, err];
			}
			_tmp$2 = 1;
			_tmp$3 = $ifaceNil;
			size = _tmp$2;
			err = _tmp$3;
			$s = -1; return [size, err];
			return [size, err];
		/* } */ case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0;
			_tmp$5 = b.err;
			size = _tmp$4;
			err = _tmp$5;
			$s = -1; return [size, err];
			return [size, err];
		}
		n = b.Available();
		/* */ if (n < 4) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (n < 4) { */ case 4:
			_r$1 = b.flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$6 = 0;
				_tmp$7 = b.err;
				size = _tmp$6;
				err = _tmp$7;
				$s = -1; return [size, err];
				return [size, err];
			}
			n = b.Available();
			/* */ if (n < 4) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (n < 4) { */ case 7:
				_r$2 = b.WriteString($encodeRune(r)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				size = _tuple[0];
				err = _tuple[1];
				$s = -1; return [size, err];
				return [size, err];
			/* } */ case 8:
		/* } */ case 5:
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size;
		_tmp$9 = $ifaceNil;
		size = _tmp$8;
		err = _tmp$9;
		$s = -1; return [size, err];
		return [size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteRune }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, b, n, n$1, nn, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; n$1 = $f.n$1; nn = $f.nn; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		nn = 0;
		/* while (true) { */ case 1:
			/* if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = $substring(s, n);
			_r = b.flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return [nn, b.err];
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		$s = -1; return [nn, $ifaceNil];
		return [nn, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err, err1, m, n, nr, ok, r, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err1 = $f.err1; m = $f.m; n = $f.n; nr = $f.nr; ok = $f.ok; r = $f.r; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		/* */ if (b.Buffered() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.Buffered() === 0) { */ case 1:
			_tuple = $assertType(b.wr, io.ReaderFrom, true);
			w = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = w.ReadFrom(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				n = _tuple$1[0];
				err = _tuple$1[1];
				$s = -1; return [n, err];
				return [n, err];
			/* } */ case 4:
		/* } */ case 2:
		m = 0;
		/* while (true) { */ case 6:
			/* */ if (b.Available() === 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (b.Available() === 0) { */ case 8:
				_r$1 = b.flush(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err1 = _r$1;
				if (!($interfaceIsEqual(err1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err1;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
					return [n, err];
				}
			/* } */ case 9:
			nr = 0;
			/* while (true) { */ case 11:
				/* if (!(nr < 100)) { break; } */ if(!(nr < 100)) { $s = 12; continue; }
				_r$2 = r.Read($subslice(b.buf, b.n)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				m = _tuple$2[0];
				err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 12; continue;
				}
				nr = nr + (1) >> 0;
			/* } */ $s = 11; continue; case 12:
			if (nr === 100) {
				_tmp$2 = n;
				_tmp$3 = io.ErrNoProgress;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* break; */ $s = 7; continue;
			}
		/* } */ $s = 6; continue; case 7:
		/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($interfaceIsEqual(err, io.EOF)) { */ case 14:
			/* */ if (b.Available() === 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (b.Available() === 0) { */ case 16:
				_r$3 = b.flush(); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 18; continue;
			/* } else { */ case 17:
				err = $ifaceNil;
			/* } */ case 18:
		/* } */ case 15:
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err1 = err1; $f.m = m; $f.n = n; $f.nr = nr; $f.ok = ok; $f.r = r; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "flush", name: "flush", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	Reader.init("bufio", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "rd", name: "rd", exported: false, typ: io.Reader, tag: ""}, {prop: "r", name: "r", exported: false, typ: $Int, tag: ""}, {prop: "w", name: "w", exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", exported: false, typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", exported: false, typ: $Int, tag: ""}]);
	Writer.init("bufio", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "n", name: "n", exported: false, typ: $Int, tag: ""}, {prop: "wr", name: "wr", exported: false, typ: io.Writer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, TextMarshaler, TextUnmarshaler, sliceType;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", true, "encoding", true, null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", true, "encoding", true, null);
	sliceType = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Replacer, replacer, trieNode, genericReplacer, appendSliceWriter, stringWriterIface, stringWriter, singleStringReplacer, byteReplacer, byteStringReplacer, stringFinder, arrayType, ptrType, sliceType, arrayType$1, ptrType$1, ptrType$2, sliceType$1, ptrType$3, ptrType$4, arrayType$2, sliceType$2, sliceType$3, ptrType$6, ptrType$7, ptrType$8, IndexByte, Index, LastIndex, Count, NewReplacer, makeGenericReplacer, getStringWriter, makeSingleStringReplacer, makeStringFinder, longestCommonSuffix, max, explode, Contains, ContainsAny, ContainsRune, IndexRune, IndexAny, genSplit, Split, Join, HasPrefix, Map, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, IndexFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace, Replace, EqualFold;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Replacer = $pkg.Replacer = $newType(0, $kindStruct, "strings.Replacer", true, "strings", true, function(r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			return;
		}
		this.r = r_;
	});
	replacer = $pkg.replacer = $newType(8, $kindInterface, "strings.replacer", true, "strings", false, null);
	trieNode = $pkg.trieNode = $newType(0, $kindStruct, "strings.trieNode", true, "strings", false, function(value_, priority_, prefix_, next_, table_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = "";
			this.priority = 0;
			this.prefix = "";
			this.next = ptrType$2.nil;
			this.table = sliceType$1.nil;
			return;
		}
		this.value = value_;
		this.priority = priority_;
		this.prefix = prefix_;
		this.next = next_;
		this.table = table_;
	});
	genericReplacer = $pkg.genericReplacer = $newType(0, $kindStruct, "strings.genericReplacer", true, "strings", false, function(root_, tableSize_, mapping_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			this.tableSize = 0;
			this.mapping = arrayType.zero();
			return;
		}
		this.root = root_;
		this.tableSize = tableSize_;
		this.mapping = mapping_;
	});
	appendSliceWriter = $pkg.appendSliceWriter = $newType(12, $kindSlice, "strings.appendSliceWriter", true, "strings", false, null);
	stringWriterIface = $pkg.stringWriterIface = $newType(8, $kindInterface, "strings.stringWriterIface", true, "strings", false, null);
	stringWriter = $pkg.stringWriter = $newType(0, $kindStruct, "strings.stringWriter", true, "strings", false, function(w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			return;
		}
		this.w = w_;
	});
	singleStringReplacer = $pkg.singleStringReplacer = $newType(0, $kindStruct, "strings.singleStringReplacer", true, "strings", false, function(finder_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.finder = ptrType$4.nil;
			this.value = "";
			return;
		}
		this.finder = finder_;
		this.value = value_;
	});
	byteReplacer = $pkg.byteReplacer = $newType(256, $kindArray, "strings.byteReplacer", true, "strings", false, null);
	byteStringReplacer = $pkg.byteStringReplacer = $newType(4092, $kindArray, "strings.byteStringReplacer", true, "strings", false, null);
	stringFinder = $pkg.stringFinder = $newType(0, $kindStruct, "strings.stringFinder", true, "strings", false, function(pattern_, badCharSkip_, goodSuffixSkip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pattern = "";
			this.badCharSkip = arrayType$2.zero();
			this.goodSuffixSkip = sliceType$2.nil;
			return;
		}
		this.pattern = pattern_;
		this.badCharSkip = badCharSkip_;
		this.goodSuffixSkip = goodSuffixSkip_;
	});
	arrayType = $arrayType($Uint8, 256);
	ptrType = $ptrType(byteReplacer);
	sliceType = $sliceType($Uint8);
	arrayType$1 = $arrayType(sliceType, 256);
	ptrType$1 = $ptrType(byteStringReplacer);
	ptrType$2 = $ptrType(trieNode);
	sliceType$1 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(appendSliceWriter);
	ptrType$4 = $ptrType(stringFinder);
	arrayType$2 = $arrayType($Int, 256);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType($String);
	ptrType$6 = $ptrType(Replacer);
	ptrType$7 = $ptrType(genericReplacer);
	ptrType$8 = $ptrType(singleStringReplacer);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.lastIndexOf(sep)) >> 0;
	};
	$pkg.LastIndex = LastIndex;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	NewReplacer = function(oldnew) {
		var $ptr, _i, _r, _ref, allNewBytes, i, i$1, i$2, i$3, n, n$1, o, o$1, oldnew, r, r$1, x, x$1, x$2;
		if ((_r = oldnew.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			$panic(new $String("strings.NewReplacer: odd argument count"));
		}
		if ((oldnew.$length === 2) && (0 >= oldnew.$length ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 0]).length > 1) {
			return new Replacer.ptr(makeSingleStringReplacer((0 >= oldnew.$length ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 0]), (1 >= oldnew.$length ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 1])));
		}
		allNewBytes = true;
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			if (!((((i < 0 || i >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i]).length === 1))) {
				return new Replacer.ptr(makeGenericReplacer(oldnew));
			}
			if (!(((x = i + 1 >> 0, ((x < 0 || x >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x])).length === 1))) {
				allNewBytes = false;
			}
			i = i + (2) >> 0;
		}
		if (allNewBytes) {
			r = arrayType.zero();
			_ref = r;
			_i = 0;
			while (true) {
				if (!(_i < 256)) { break; }
				i$1 = _i;
				((i$1 < 0 || i$1 >= r.length) ? $throwRuntimeError("index out of range") : r[i$1] = (i$1 << 24 >>> 24));
				_i++;
			}
			i$2 = oldnew.$length - 2 >> 0;
			while (true) {
				if (!(i$2 >= 0)) { break; }
				o = ((i$2 < 0 || i$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$2]).charCodeAt(0);
				n = (x$1 = i$2 + 1 >> 0, ((x$1 < 0 || x$1 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$1])).charCodeAt(0);
				((o < 0 || o >= r.length) ? $throwRuntimeError("index out of range") : r[o] = n);
				i$2 = i$2 - (2) >> 0;
			}
			return new Replacer.ptr(new ptrType(r));
		}
		r$1 = arrayType$1.zero();
		i$3 = oldnew.$length - 2 >> 0;
		while (true) {
			if (!(i$3 >= 0)) { break; }
			o$1 = ((i$3 < 0 || i$3 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$3]).charCodeAt(0);
			n$1 = (x$2 = i$3 + 1 >> 0, ((x$2 < 0 || x$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$2]));
			((o$1 < 0 || o$1 >= r$1.length) ? $throwRuntimeError("index out of range") : r$1[o$1] = new sliceType($stringToBytes(n$1)));
			i$3 = i$3 - (2) >> 0;
		}
		return new Replacer.ptr(new ptrType$1(r$1));
	};
	$pkg.NewReplacer = NewReplacer;
	Replacer.ptr.prototype.Replace = function(s) {
		var $ptr, _r, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.r.Replace(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.Replace }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	Replacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _tuple, err, n, r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; r = $f.r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_r = r.r.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	trieNode.ptr.prototype.add = function(key, val, priority, r) {
		var $ptr, key, keyNode, m, n, next, prefixNode, priority, r, t, val, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (key === "") {
			if (t.priority === 0) {
				t.value = val;
				t.priority = priority;
			}
			return;
		}
		if (!(t.prefix === "")) {
			n = 0;
			while (true) {
				if (!(n < t.prefix.length && n < key.length)) { break; }
				if (!((t.prefix.charCodeAt(n) === key.charCodeAt(n)))) {
					break;
				}
				n = n + (1) >> 0;
			}
			if (n === t.prefix.length) {
				t.next.add($substring(key, n), val, priority, r);
			} else if (n === 0) {
				prefixNode = ptrType$2.nil;
				if (t.prefix.length === 1) {
					prefixNode = t.next;
				} else {
					prefixNode = new trieNode.ptr("", 0, $substring(t.prefix, 1), t.next, sliceType$1.nil);
				}
				keyNode = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
				t.table = $makeSlice(sliceType$1, r.tableSize);
				(x = t.table, x$1 = (x$2 = r.mapping, x$3 = t.prefix.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = prefixNode));
				(x$4 = t.table, x$5 = (x$6 = r.mapping, x$7 = key.charCodeAt(0), ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7])), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = keyNode));
				t.prefix = "";
				t.next = ptrType$2.nil;
				keyNode.add($substring(key, 1), val, priority, r);
			} else {
				next = new trieNode.ptr("", 0, $substring(t.prefix, n), t.next, sliceType$1.nil);
				t.prefix = $substring(t.prefix, 0, n);
				t.next = next;
				next.add($substring(key, n), val, priority, r);
			}
		} else if (!(t.table === sliceType$1.nil)) {
			m = (x$8 = r.mapping, x$9 = key.charCodeAt(0), ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9]));
			if ((x$10 = t.table, ((m < 0 || m >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + m])) === ptrType$2.nil) {
				(x$11 = t.table, ((m < 0 || m >= x$11.$length) ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + m] = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil)));
			}
			(x$12 = t.table, ((m < 0 || m >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + m])).add($substring(key, 1), val, priority, r);
		} else {
			t.prefix = key;
			t.next = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			t.next.add("", val, priority, r);
		}
	};
	trieNode.prototype.add = function(key, val, priority, r) { return this.$val.add(key, val, priority, r); };
	genericReplacer.ptr.prototype.lookup = function(s, ignoreRoot) {
		var $ptr, bestPriority, found, ignoreRoot, index, keylen, n, node, r, s, val, x, x$1, x$2;
		val = "";
		keylen = 0;
		found = false;
		r = this;
		bestPriority = 0;
		node = r.root;
		n = 0;
		while (true) {
			if (!(!(node === ptrType$2.nil))) { break; }
			if (node.priority > bestPriority && !(ignoreRoot && node === r.root)) {
				bestPriority = node.priority;
				val = node.value;
				keylen = n;
				found = true;
			}
			if (s === "") {
				break;
			}
			if (!(node.table === sliceType$1.nil)) {
				index = (x = r.mapping, x$1 = s.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
				if ((index >> 0) === r.tableSize) {
					break;
				}
				node = (x$2 = node.table, ((index < 0 || index >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + index]));
				s = $substring(s, 1);
				n = n + (1) >> 0;
			} else if (!(node.prefix === "") && HasPrefix(s, node.prefix)) {
				n = n + (node.prefix.length) >> 0;
				s = $substring(s, node.prefix.length);
				node = node.next;
			} else {
				break;
			}
		}
		return [val, keylen, found];
	};
	genericReplacer.prototype.lookup = function(s, ignoreRoot) { return this.$val.lookup(s, ignoreRoot); };
	makeGenericReplacer = function(oldnew) {
		var $ptr, _i, _i$1, _ref, _ref$1, b, b$1, i, i$1, i$2, index, j, key, oldnew, r, x, x$1, x$2, x$3, x$4;
		r = new genericReplacer.ptr(new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil), 0, arrayType.zero());
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			key = ((i < 0 || i >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i]);
			j = 0;
			while (true) {
				if (!(j < key.length)) { break; }
				(x = r.mapping, x$1 = key.charCodeAt(j), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = 1));
				j = j + (1) >> 0;
			}
			i = i + (2) >> 0;
		}
		_ref = r.mapping;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			r.tableSize = r.tableSize + ((b >> 0)) >> 0;
			_i++;
		}
		index = 0;
		_ref$1 = r.mapping;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			b$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1[_i$1]);
			if (b$1 === 0) {
				(x$2 = r.mapping, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = (r.tableSize << 24 >>> 24)));
			} else {
				(x$3 = r.mapping, ((i$1 < 0 || i$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i$1] = index));
				index = index + (1) << 24 >>> 24;
			}
			_i$1++;
		}
		r.root.table = $makeSlice(sliceType$1, r.tableSize);
		i$2 = 0;
		while (true) {
			if (!(i$2 < oldnew.$length)) { break; }
			r.root.add(((i$2 < 0 || i$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$2]), (x$4 = i$2 + 1 >> 0, ((x$4 < 0 || x$4 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$4])), oldnew.$length - i$2 >> 0, r);
			i$2 = i$2 + (2) >> 0;
		}
		return r;
	};
	$ptrType(appendSliceWriter).prototype.Write = function(p) {
		var $ptr, p, w;
		w = this;
		w.$set($appendSlice(w.$get(), p));
		return [p.$length, $ifaceNil];
	};
	$ptrType(appendSliceWriter).prototype.WriteString = function(s) {
		var $ptr, s, w;
		w = this;
		w.$set($appendSlice(w.$get(), s));
		return [s.length, $ifaceNil];
	};
	stringWriter.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = $clone(this, stringWriter);
		_r = w.w.Write(new sliceType($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringWriter.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	getStringWriter = function(w) {
		var $ptr, _tuple, ok, sw, w, x;
		_tuple = $assertType(w, stringWriterIface, true);
		sw = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			sw = (x = new stringWriter.ptr(w), new x.constructor.elem(x));
		}
		return sw;
	};
	genericReplacer.ptr.prototype.Replace = function(s) {
		var $ptr, _r, buf, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		r = this;
		buf[0] = $makeSlice(appendSliceWriter, 0, s.length);
		_r = r.WriteString((buf.$ptr || (buf.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, buf))), s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return $bytesToString(buf[0]);
		return $bytesToString(buf[0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.Replace }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	genericReplacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, err, i, index, keylen, last, match, n, prevMatchEmpty, r, s, sw, val, w, wn, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; i = $f.i; index = $f.index; keylen = $f.keylen; last = $f.last; match = $f.match; n = $f.n; prevMatchEmpty = $f.prevMatchEmpty; r = $f.r; s = $f.s; sw = $f.sw; val = $f.val; w = $f.w; wn = $f.wn; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		last = _tmp;
		wn = _tmp$1;
		prevMatchEmpty = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= s.length)) { break; } */ if(!(i <= s.length)) { $s = 2; continue; }
			/* */ if (!((i === s.length)) && (r.root.priority === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i === s.length)) && (r.root.priority === 0)) { */ case 3:
				index = ((x = r.mapping, x$1 = s.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) >> 0);
				if ((index === r.tableSize) || (x$2 = r.root.table, ((index < 0 || index >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + index])) === ptrType$2.nil) {
					i = i + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_tuple = r.lookup($substring(s, i), prevMatchEmpty);
			val = _tuple[0];
			keylen = _tuple[1];
			match = _tuple[2];
			prevMatchEmpty = match && (keylen === 0);
			/* */ if (match) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (match) { */ case 5:
				_r = sw.WriteString($substring(s, last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				wn = _tuple$1[0];
				err = _tuple$1[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, err];
					return [n, err];
				}
				_r$1 = sw.WriteString(val); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				wn = _tuple$2[0];
				err = _tuple$2[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, err];
					return [n, err];
				}
				i = i + (keylen) >> 0;
				last = i;
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			_r$2 = sw.WriteString($substring(s, last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			wn = _tuple$3[0];
			err = _tuple$3[1];
			n = n + (wn) >> 0;
		/* } */ case 10:
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.i = i; $f.index = index; $f.keylen = keylen; $f.last = last; $f.match = match; $f.n = n; $f.prevMatchEmpty = prevMatchEmpty; $f.r = r; $f.s = s; $f.sw = sw; $f.val = val; $f.w = w; $f.wn = wn; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	makeSingleStringReplacer = function(pattern, value) {
		var $ptr, pattern, value;
		return new singleStringReplacer.ptr(makeStringFinder(pattern), value);
	};
	singleStringReplacer.ptr.prototype.Replace = function(s) {
		var $ptr, _tmp, _tmp$1, buf, i, match, matched, r, s;
		r = this;
		buf = sliceType.nil;
		_tmp = 0;
		_tmp$1 = false;
		i = _tmp;
		matched = _tmp$1;
		while (true) {
			match = r.finder.next($substring(s, i));
			if (match === -1) {
				break;
			}
			matched = true;
			buf = $appendSlice(buf, $substring(s, i, (i + match >> 0)));
			buf = $appendSlice(buf, r.value);
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		}
		if (!matched) {
			return s;
		}
		buf = $appendSlice(buf, $substring(s, i));
		return $bytesToString(buf);
	};
	singleStringReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	singleStringReplacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, err, i, match, n, r, s, sw, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; i = $f.i; match = $f.match; n = $f.n; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		wn = _tmp$1;
		/* while (true) { */ case 1:
			match = r.finder.next($substring(s, i));
			if (match === -1) {
				/* break; */ $s = 2; continue;
			}
			_r = sw.WriteString($substring(s, i, (i + match >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
				return [n, err];
			}
			_r$1 = sw.WriteString(r.value); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			wn = _tuple$1[0];
			err = _tuple$1[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
				return [n, err];
			}
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = sw.WriteString($substring(s, i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		wn = _tuple$2[0];
		err = _tuple$2[1];
		n = n + (wn) >> 0;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: singleStringReplacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.i = i; $f.match = match; $f.n = n; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	singleStringReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	byteReplacer.prototype.Replace = function(s) {
		var $ptr, b, buf, i, r, s;
		r = this.$val;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!(((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === b))) {
				if (buf === sliceType.nil) {
					buf = new sliceType($stringToBytes(s));
				}
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])));
			}
			i = i + (1) >> 0;
		}
		if (buf === sliceType.nil) {
			return s;
		}
		return $bytesToString(buf);
	};
	$ptrType(byteReplacer).prototype.Replace = function(s) { return (new byteReplacer(this.$get())).Replace(s); };
	byteReplacer.prototype.WriteString = function(w, s) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, buf, bufsize, err, err$1, i, n, ncopy, r, s, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; buf = $f.buf; bufsize = $f.bufsize; err = $f.err; err$1 = $f.err$1; i = $f.i; n = $f.n; ncopy = $f.ncopy; r = $f.r; s = $f.s; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		bufsize = 32768;
		if (s.length < bufsize) {
			bufsize = s.length;
		}
		buf = $makeSlice(sliceType, bufsize);
		/* while (true) { */ case 1:
			/* if (!(s.length > 0)) { break; } */ if(!(s.length > 0)) { $s = 2; continue; }
			ncopy = $copyString(buf, s);
			s = $substring(s, ncopy);
			_ref = $subslice(buf, 0, ncopy);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])));
				_i++;
			}
			_r = w.Write($subslice(buf, 0, ncopy)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err$1 = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReplacer.prototype.WriteString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.bufsize = bufsize; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.n = n; $f.ncopy = ncopy; $f.r = r; $f.s = s; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteReplacer).prototype.WriteString = function(w, s) { return (new byteReplacer(this.$get())).WriteString(w, s); };
	byteStringReplacer.prototype.Replace = function(s) {
		var $ptr, anyChanges, b, b$1, bi, buf, i, i$1, n, newSize, r, s;
		r = this.$val;
		newSize = s.length;
		anyChanges = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === sliceType.nil)) {
				anyChanges = true;
				newSize = newSize + (((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])).$length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		if (!anyChanges) {
			return s;
		}
		buf = $makeSlice(sliceType, newSize);
		bi = buf;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			b$1 = s.charCodeAt(i$1);
			if (!((r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? $throwRuntimeError("index out of range") : r[b$1])) === sliceType.nil)) {
				n = $copySlice(bi, (r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? $throwRuntimeError("index out of range") : r[b$1])));
				bi = $subslice(bi, n);
			} else {
				(0 >= bi.$length ? $throwRuntimeError("index out of range") : bi.$array[bi.$offset + 0] = b$1);
				bi = $subslice(bi, 1);
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(buf);
	};
	$ptrType(byteStringReplacer).prototype.Replace = function(s) { return (new byteStringReplacer(this.$get())).Replace(s); };
	byteStringReplacer.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, b, err, err$1, err$2, i, last, n, nw, nw$1, nw$2, r, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; last = $f.last; n = $f.n; nw = $f.nw; nw$1 = $f.nw$1; nw$2 = $f.nw$2; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		sw = getStringWriter(w);
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			b = s.charCodeAt(i);
			/* */ if ((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === sliceType.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === sliceType.nil) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (!((last === i))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((last === i))) { */ case 5:
				_r = sw.WriteString($substring(s, last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				nw = _tuple[0];
				err$1 = _tuple[1];
				n = n + (nw) >> 0;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err$1;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
					return [n, err];
				}
			/* } */ case 6:
			last = i + 1 >> 0;
			_r$1 = w.Write((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b]))); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			nw$1 = _tuple$1[0];
			err$2 = _tuple$1[1];
			n = n + (nw$1) >> 0;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = err$2;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			nw$2 = 0;
			_r$2 = sw.WriteString($substring(s, last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			nw$2 = _tuple$2[0];
			err = _tuple$2[1];
			n = n + (nw$2) >> 0;
		/* } */ case 10:
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteStringReplacer.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.last = last; $f.n = n; $f.nw = nw; $f.nw$1 = nw$1; $f.nw$2 = nw$2; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteStringReplacer).prototype.WriteString = function(w, s) { return (new byteStringReplacer(this.$get())).WriteString(w, s); };
	makeStringFinder = function(pattern) {
		var $ptr, _i, _ref, f, i, i$1, i$2, i$3, last, lastPrefix, lenSuffix, pattern, x, x$1, x$2, x$3, x$4, x$5;
		f = new stringFinder.ptr(pattern, arrayType$2.zero(), $makeSlice(sliceType$2, pattern.length));
		last = pattern.length - 1 >> 0;
		_ref = f.badCharSkip;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			i = _i;
			(x = f.badCharSkip, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = pattern.length));
			_i++;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < last)) { break; }
			(x$1 = f.badCharSkip, x$2 = pattern.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (last - i$1 >> 0)));
			i$1 = i$1 + (1) >> 0;
		}
		lastPrefix = last;
		i$2 = last;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (HasPrefix(pattern, $substring(pattern, (i$2 + 1 >> 0)))) {
				lastPrefix = i$2 + 1 >> 0;
			}
			(x$3 = f.goodSuffixSkip, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2] = ((lastPrefix + last >> 0) - i$2 >> 0)));
			i$2 = i$2 - (1) >> 0;
		}
		i$3 = 0;
		while (true) {
			if (!(i$3 < last)) { break; }
			lenSuffix = longestCommonSuffix(pattern, $substring(pattern, 1, (i$3 + 1 >> 0)));
			if (!((pattern.charCodeAt((i$3 - lenSuffix >> 0)) === pattern.charCodeAt((last - lenSuffix >> 0))))) {
				(x$4 = f.goodSuffixSkip, x$5 = last - lenSuffix >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = ((lenSuffix + last >> 0) - i$3 >> 0)));
			}
			i$3 = i$3 + (1) >> 0;
		}
		return f;
	};
	longestCommonSuffix = function(a, b) {
		var $ptr, a, b, i;
		i = 0;
		while (true) {
			if (!(i < a.length && i < b.length)) { break; }
			if (!((a.charCodeAt(((a.length - 1 >> 0) - i >> 0)) === b.charCodeAt(((b.length - 1 >> 0) - i >> 0))))) {
				break;
			}
			i = i + (1) >> 0;
		}
		return i;
	};
	stringFinder.ptr.prototype.next = function(text) {
		var $ptr, f, i, j, text, x, x$1, x$2;
		f = this;
		i = f.pattern.length - 1 >> 0;
		while (true) {
			if (!(i < text.length)) { break; }
			j = f.pattern.length - 1 >> 0;
			while (true) {
				if (!(j >= 0 && (text.charCodeAt(i) === f.pattern.charCodeAt(j)))) { break; }
				i = i - (1) >> 0;
				j = j - (1) >> 0;
			}
			if (j < 0) {
				return i + 1 >> 0;
			}
			i = i + (max((x = f.badCharSkip, x$1 = text.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])), (x$2 = f.goodSuffixSkip, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])))) >> 0;
		}
		return -1;
	};
	stringFinder.prototype.next = function(text) { return this.$val.next(text); };
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	explode = function(s, n) {
		var $ptr, _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	Contains = function(s, substr) {
		var $ptr, s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsAny = function(s, chars) {
		var $ptr, chars, s;
		return IndexAny(s, chars) >= 0;
	};
	$pkg.ContainsAny = ContainsAny;
	ContainsRune = function(s, r) {
		var $ptr, r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexRune = IndexRune;
	IndexAny = function(s, chars) {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, c, chars, i, m, s;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.length)) { break; }
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || $substring(s, i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = $substring(s, start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = $substring(s, start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = function(s, sep) {
		var $ptr, s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var $ptr, _i, _ref, a, b, bp, i, n, s, sep;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, $substring(s, 0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ($imul(maxbytes, 2)) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			$s = -1; return s;
			return s;
		}
		$s = -1; return $bytesToString($subslice(b, 0, nbytes));
		return $bytesToString($subslice(b, 0, nbytes));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return "";
			return "";
		}
		$s = -1; return $substring(s, i);
		return $substring(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $substring(s, 0, i);
		return $substring(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	IndexFunc = function(s, f) {
		var $ptr, _r, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IndexFunc = IndexFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString($substring(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return start;
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString($substring(s, 0, i));
			r = _tuple[0];
			size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	TrimLeft = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
			return s;
		}
		_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeft = TrimLeft;
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
			return s;
		}
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.Replace = Replace;
	EqualFold = function(s, t) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!(s === "") && !(t === ""))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if (s.charCodeAt(0) < 128) {
				_tmp$2 = (s.charCodeAt(0) >> 0);
				_tmp$3 = $substring(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $substring(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if (t.charCodeAt(0) < 128) {
				_tmp$6 = (t.charCodeAt(0) >> 0);
				_tmp$7 = $substring(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRuneInString(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $substring(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s === t;
	};
	$pkg.EqualFold = EqualFold;
	ptrType$6.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$2.methods = [{prop: "add", name: "add", pkg: "strings", typ: $funcType([$String, $String, $Int, ptrType$7], [], false)}];
	ptrType$7.methods = [{prop: "lookup", name: "lookup", pkg: "strings", typ: $funcType([$String, $Bool], [$String, $Int, $Bool], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$3.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	stringWriter.methods = [{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	ptrType$8.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$1.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$4.methods = [{prop: "next", name: "next", pkg: "strings", typ: $funcType([$String], [$Int], false)}];
	Replacer.init("strings", [{prop: "r", name: "r", exported: false, typ: replacer, tag: ""}]);
	replacer.init([{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}]);
	trieNode.init("strings", [{prop: "value", name: "value", exported: false, typ: $String, tag: ""}, {prop: "priority", name: "priority", exported: false, typ: $Int, tag: ""}, {prop: "prefix", name: "prefix", exported: false, typ: $String, tag: ""}, {prop: "next", name: "next", exported: false, typ: ptrType$2, tag: ""}, {prop: "table", name: "table", exported: false, typ: sliceType$1, tag: ""}]);
	genericReplacer.init("strings", [{prop: "root", name: "root", exported: false, typ: trieNode, tag: ""}, {prop: "tableSize", name: "tableSize", exported: false, typ: $Int, tag: ""}, {prop: "mapping", name: "mapping", exported: false, typ: arrayType, tag: ""}]);
	appendSliceWriter.init($Uint8);
	stringWriterIface.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	stringWriter.init("strings", [{prop: "w", name: "w", exported: false, typ: io.Writer, tag: ""}]);
	singleStringReplacer.init("strings", [{prop: "finder", name: "finder", exported: false, typ: ptrType$4, tag: ""}, {prop: "value", name: "value", exported: false, typ: $String, tag: ""}]);
	byteReplacer.init($Uint8, 256);
	byteStringReplacer.init(sliceType, 256);
	stringFinder.init("strings", [{prop: "pattern", name: "pattern", exported: false, typ: $String, tag: ""}, {prop: "badCharSkip", name: "badCharSkip", exported: false, typ: arrayType$2, tag: ""}, {prop: "goodSuffixSkip", name: "goodSuffixSkip", exported: false, typ: sliceType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/xml"] = (function() {
	var $pkg = {}, $init, bufio, bytes, encoding, errors, fmt, io, reflect, strconv, strings, sync, unicode, utf8, Marshaler, MarshalerAttr, Encoder, printer, parentStack, UnsupportedTypeError, UnmarshalError, Unmarshaler, UnmarshalerAttr, typeInfo, fieldInfo, fieldFlags, TagPathError, SyntaxError, Name, Attr, Token, StartElement, EndElement, CharData, Comment, ProcInst, Directive, Decoder, stack, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$1, sliceType$2, sliceType$3, arrayType, arrayType$1, ptrType$6, ptrType$7, sliceType$4, ptrType$8, ptrType$9, sliceType$5, sliceType$6, ptrType$10, ptrType$11, ptrType$12, ptrType$13, sliceType$7, sliceType$8, ptrType$14, mapType, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, funcType, begComment, endComment, endProcInst, marshalerType, marshalerAttrType, textMarshalerType, ddBytes, unmarshalerType, unmarshalerAttrType, textUnmarshalerType, tinfoMap, tinfoLock, nameType, errRawToken, entity, first, second, htmlEntity, htmlAutoClose, esc_quot, esc_apos, esc_amp, esc_lt, esc_gt, esc_tab, esc_nl, esc_cr, esc_fffd, cdataStart, cdataEnd, cdataEscape, _r, _r$1, _r$2, _r$3, _r$4, _r$5, x, isValidDirective, defaultStart, isEmptyValue, receiverType, copyValue, getTypeInfo, structFieldInfo, lookupXMLName, min, addFieldInfo, makeCopy, NewDecoder, isInCharacterRange, isNameByte, isName, isNameString, EscapeText, escapeText, emitCDATA, procInst;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "xml.Marshaler", true, "encoding/xml", true, null);
	MarshalerAttr = $pkg.MarshalerAttr = $newType(8, $kindInterface, "xml.MarshalerAttr", true, "encoding/xml", true, null);
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "xml.Encoder", true, "encoding/xml", true, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = new printer.ptr(ptrType$6.nil, ptrType$7.nil, 0, "", "", 0, false, false, false, false, sliceType$3.nil, sliceType$4.nil);
			return;
		}
		this.p = p_;
	});
	printer = $pkg.printer = $newType(0, $kindStruct, "xml.printer", true, "encoding/xml", false, function(Writer_, encoder_, seq_, indent_, prefix_, depth_, indentedIn_, putNewline_, attrNS_, attrPrefix_, prefixes_, tags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Writer = ptrType$6.nil;
			this.encoder = ptrType$7.nil;
			this.seq = 0;
			this.indent = "";
			this.prefix = "";
			this.depth = 0;
			this.indentedIn = false;
			this.putNewline = false;
			this.attrNS = false;
			this.attrPrefix = false;
			this.prefixes = sliceType$3.nil;
			this.tags = sliceType$4.nil;
			return;
		}
		this.Writer = Writer_;
		this.encoder = encoder_;
		this.seq = seq_;
		this.indent = indent_;
		this.prefix = prefix_;
		this.depth = depth_;
		this.indentedIn = indentedIn_;
		this.putNewline = putNewline_;
		this.attrNS = attrNS_;
		this.attrPrefix = attrPrefix_;
		this.prefixes = prefixes_;
		this.tags = tags_;
	});
	parentStack = $pkg.parentStack = $newType(0, $kindStruct, "xml.parentStack", true, "encoding/xml", false, function(p_, stack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType$10.nil;
			this.stack = sliceType$3.nil;
			return;
		}
		this.p = p_;
		this.stack = stack_;
	});
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "xml.UnsupportedTypeError", true, "encoding/xml", true, function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	UnmarshalError = $pkg.UnmarshalError = $newType(8, $kindString, "xml.UnmarshalError", true, "encoding/xml", true, null);
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "xml.Unmarshaler", true, "encoding/xml", true, null);
	UnmarshalerAttr = $pkg.UnmarshalerAttr = $newType(8, $kindInterface, "xml.UnmarshalerAttr", true, "encoding/xml", true, null);
	typeInfo = $pkg.typeInfo = $newType(0, $kindStruct, "xml.typeInfo", true, "encoding/xml", false, function(xmlname_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xmlname = ptrType$8.nil;
			this.fields = sliceType$7.nil;
			return;
		}
		this.xmlname = xmlname_;
		this.fields = fields_;
	});
	fieldInfo = $pkg.fieldInfo = $newType(0, $kindStruct, "xml.fieldInfo", true, "encoding/xml", false, function(idx_, name_, xmlns_, flags_, parents_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.idx = sliceType$8.nil;
			this.name = "";
			this.xmlns = "";
			this.flags = 0;
			this.parents = sliceType$3.nil;
			return;
		}
		this.idx = idx_;
		this.name = name_;
		this.xmlns = xmlns_;
		this.flags = flags_;
		this.parents = parents_;
	});
	fieldFlags = $pkg.fieldFlags = $newType(4, $kindInt, "xml.fieldFlags", true, "encoding/xml", false, null);
	TagPathError = $pkg.TagPathError = $newType(0, $kindStruct, "xml.TagPathError", true, "encoding/xml", true, function(Struct_, Field1_, Tag1_, Field2_, Tag2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = $ifaceNil;
			this.Field1 = "";
			this.Tag1 = "";
			this.Field2 = "";
			this.Tag2 = "";
			return;
		}
		this.Struct = Struct_;
		this.Field1 = Field1_;
		this.Tag1 = Tag1_;
		this.Field2 = Field2_;
		this.Tag2 = Tag2_;
	});
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "xml.SyntaxError", true, "encoding/xml", true, function(Msg_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Msg = "";
			this.Line = 0;
			return;
		}
		this.Msg = Msg_;
		this.Line = Line_;
	});
	Name = $pkg.Name = $newType(0, $kindStruct, "xml.Name", true, "encoding/xml", true, function(Space_, Local_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Space = "";
			this.Local = "";
			return;
		}
		this.Space = Space_;
		this.Local = Local_;
	});
	Attr = $pkg.Attr = $newType(0, $kindStruct, "xml.Attr", true, "encoding/xml", true, function(Name_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = new Name.ptr("", "");
			this.Value = "";
			return;
		}
		this.Name = Name_;
		this.Value = Value_;
	});
	Token = $pkg.Token = $newType(8, $kindInterface, "xml.Token", true, "encoding/xml", true, null);
	StartElement = $pkg.StartElement = $newType(0, $kindStruct, "xml.StartElement", true, "encoding/xml", true, function(Name_, Attr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = new Name.ptr("", "");
			this.Attr = sliceType$6.nil;
			return;
		}
		this.Name = Name_;
		this.Attr = Attr_;
	});
	EndElement = $pkg.EndElement = $newType(0, $kindStruct, "xml.EndElement", true, "encoding/xml", true, function(Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = new Name.ptr("", "");
			return;
		}
		this.Name = Name_;
	});
	CharData = $pkg.CharData = $newType(12, $kindSlice, "xml.CharData", true, "encoding/xml", true, null);
	Comment = $pkg.Comment = $newType(12, $kindSlice, "xml.Comment", true, "encoding/xml", true, null);
	ProcInst = $pkg.ProcInst = $newType(0, $kindStruct, "xml.ProcInst", true, "encoding/xml", true, function(Target_, Inst_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Target = "";
			this.Inst = sliceType.nil;
			return;
		}
		this.Target = Target_;
		this.Inst = Inst_;
	});
	Directive = $pkg.Directive = $newType(12, $kindSlice, "xml.Directive", true, "encoding/xml", true, null);
	Decoder = $pkg.Decoder = $newType(0, $kindStruct, "xml.Decoder", true, "encoding/xml", true, function(Strict_, AutoClose_, Entity_, CharsetReader_, DefaultSpace_, r_, buf_, saved_, stk_, free_, needClose_, toClose_, nextToken_, nextByte_, ns_, err_, line_, offset_, unmarshalDepth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Strict = false;
			this.AutoClose = sliceType$3.nil;
			this.Entity = false;
			this.CharsetReader = $throwNilPointerError;
			this.DefaultSpace = "";
			this.r = $ifaceNil;
			this.buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			this.saved = ptrType$13.nil;
			this.stk = ptrType$14.nil;
			this.free = ptrType$14.nil;
			this.needClose = false;
			this.toClose = new Name.ptr("", "");
			this.nextToken = $ifaceNil;
			this.nextByte = 0;
			this.ns = false;
			this.err = $ifaceNil;
			this.line = 0;
			this.offset = new $Int64(0, 0);
			this.unmarshalDepth = 0;
			return;
		}
		this.Strict = Strict_;
		this.AutoClose = AutoClose_;
		this.Entity = Entity_;
		this.CharsetReader = CharsetReader_;
		this.DefaultSpace = DefaultSpace_;
		this.r = r_;
		this.buf = buf_;
		this.saved = saved_;
		this.stk = stk_;
		this.free = free_;
		this.needClose = needClose_;
		this.toClose = toClose_;
		this.nextToken = nextToken_;
		this.nextByte = nextByte_;
		this.ns = ns_;
		this.err = err_;
		this.line = line_;
		this.offset = offset_;
		this.unmarshalDepth = unmarshalDepth_;
	});
	stack = $pkg.stack = $newType(0, $kindStruct, "xml.stack", true, "encoding/xml", false, function(next_, kind_, name_, ok_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.next = ptrType$14.nil;
			this.kind = 0;
			this.name = new Name.ptr("", "");
			this.ok = false;
			return;
		}
		this.next = next_;
		this.kind = kind_;
		this.name = name_;
		this.ok = ok_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Marshaler);
	ptrType$1 = $ptrType(MarshalerAttr);
	ptrType$2 = $ptrType(encoding.TextMarshaler);
	ptrType$3 = $ptrType(Unmarshaler);
	ptrType$4 = $ptrType(UnmarshalerAttr);
	ptrType$5 = $ptrType(encoding.TextUnmarshaler);
	sliceType$1 = $sliceType(unicode.Range16);
	sliceType$2 = $sliceType(unicode.Range32);
	sliceType$3 = $sliceType($String);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$6 = $ptrType(bufio.Writer);
	ptrType$7 = $ptrType(Encoder);
	sliceType$4 = $sliceType(Name);
	ptrType$8 = $ptrType(fieldInfo);
	ptrType$9 = $ptrType(StartElement);
	sliceType$5 = $sliceType($emptyInterface);
	sliceType$6 = $sliceType(Attr);
	ptrType$10 = $ptrType(printer);
	ptrType$11 = $ptrType(reflect.rtype);
	ptrType$12 = $ptrType(typeInfo);
	ptrType$13 = $ptrType(bytes.Buffer);
	sliceType$7 = $sliceType(fieldInfo);
	sliceType$8 = $sliceType($Int);
	ptrType$14 = $ptrType(stack);
	mapType = $mapType($String, $String);
	ptrType$15 = $ptrType(parentStack);
	ptrType$16 = $ptrType(UnsupportedTypeError);
	ptrType$17 = $ptrType(Decoder);
	ptrType$18 = $ptrType(TagPathError);
	ptrType$19 = $ptrType(SyntaxError);
	ptrType$20 = $ptrType(Name);
	ptrType$21 = $ptrType(EndElement);
	funcType = $funcType([$String, io.Reader], [io.Reader, $error], false);
	Encoder.ptr.prototype.Indent = function(prefix, indent) {
		var $ptr, enc, indent, prefix;
		enc = this;
		enc.p.prefix = prefix;
		enc.p.indent = indent;
	};
	Encoder.prototype.Indent = function(prefix, indent) { return this.$val.Indent(prefix, indent); };
	Encoder.ptr.prototype.Encode = function(v) {
		var $ptr, _r$6, _r$7, _r$8, enc, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; enc = $f.enc; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r$6 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = enc.p.marshalValue(_r$6, ptrType$8.nil, ptrType$9.nil); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		err = _r$7;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$8 = enc.p.Writer.Flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Encode }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.enc = enc; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Encode = function(v) { return this.$val.Encode(v); };
	Encoder.ptr.prototype.EncodeElement = function(v, start) {
		var $ptr, _r$6, _r$7, _r$8, enc, err, start, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; enc = $f.enc; err = $f.err; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = [start];
		start[0] = $clone(start[0], StartElement);
		enc = this;
		_r$6 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = enc.p.marshalValue(_r$6, ptrType$8.nil, start[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		err = _r$7;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$8 = enc.p.Writer.Flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.EncodeElement }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.enc = enc; $f.err = err; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.EncodeElement = function(v, start) { return this.$val.EncodeElement(v, start); };
	Encoder.ptr.prototype.EncodeToken = function(t) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$6, _r$7, _r$8, _r$9, _ref, enc, err, err$1, p, t, t$1, t$2, t$3, t$4, t$5, t$6, t$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; enc = $f.enc; err = $f.err; err$1 = $f.err$1; p = $f.p; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; t$5 = $f.t$5; t$6 = $f.t$6; t$7 = $f.t$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t$1 = [t$1];
		enc = this;
		p = enc.p;
		_ref = t;
		/* */ if ($assertType(_ref, StartElement, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, EndElement, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, CharData, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, Comment, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ProcInst, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, Directive, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, StartElement, true)[1]) { */ case 1:
			t$1[0] = $clone(_ref.$val, StartElement);
			_r$6 = p.writeStart(t$1[0]); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			$s = 8; continue;
		/* } else if ($assertType(_ref, EndElement, true)[1]) { */ case 2:
			t$2 = $clone(_ref.$val, EndElement);
			_r$7 = p.writeEnd(t$2.Name); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err$1 = _r$7;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
				return err$1;
			}
			$s = 8; continue;
		/* } else if ($assertType(_ref, CharData, true)[1]) { */ case 3:
			t$3 = _ref.$val;
			_r$8 = escapeText(p, $subslice(new sliceType(t$3.$array), t$3.$offset, t$3.$offset + t$3.$length), false); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			$s = 8; continue;
		/* } else if ($assertType(_ref, Comment, true)[1]) { */ case 4:
			t$4 = _ref.$val;
			/* */ if (bytes.Contains($subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length), endComment)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (bytes.Contains($subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length), endComment)) { */ case 12:
				_r$9 = fmt.Errorf("xml: EncodeToken of Comment containing --> marker", new sliceType$5([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$s = -1; return _r$9;
				return _r$9;
			/* } */ case 13:
			_r$10 = p.Writer.WriteString("<!--"); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = p.Writer.Write($subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length)); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			_r$12 = p.Writer.WriteString("-->"); /* */ $s = 17; case 17: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
			_r$13 = p.cachedWriteError(); /* */ $s = 18; case 18: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$s = -1; return _r$13;
			return _r$13;
		/* } else if ($assertType(_ref, ProcInst, true)[1]) { */ case 5:
			t$5 = $clone(_ref.$val, ProcInst);
			/* */ if (t$5.Target === "xml" && !((p.Writer.Buffered() === 0))) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (t$5.Target === "xml" && !((p.Writer.Buffered() === 0))) { */ case 19:
				_r$14 = fmt.Errorf("xml: EncodeToken of ProcInst xml target only valid for xml declaration, first token encoded", new sliceType$5([])); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return _r$14;
				return _r$14;
			/* } */ case 20:
			/* */ if (!isNameString(t$5.Target)) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (!isNameString(t$5.Target)) { */ case 22:
				_r$15 = fmt.Errorf("xml: EncodeToken of ProcInst with invalid Target", new sliceType$5([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$s = -1; return _r$15;
				return _r$15;
			/* } */ case 23:
			/* */ if (bytes.Contains(t$5.Inst, endProcInst)) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (bytes.Contains(t$5.Inst, endProcInst)) { */ case 25:
				_r$16 = fmt.Errorf("xml: EncodeToken of ProcInst containing ?> marker", new sliceType$5([])); /* */ $s = 27; case 27: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				$s = -1; return _r$16;
				return _r$16;
			/* } */ case 26:
			_r$17 = p.Writer.WriteString("<?"); /* */ $s = 28; case 28: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$17;
			_r$18 = p.Writer.WriteString(t$5.Target); /* */ $s = 29; case 29: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$18;
			/* */ if (t$5.Inst.$length > 0) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (t$5.Inst.$length > 0) { */ case 30:
				_r$19 = p.Writer.WriteByte(32); /* */ $s = 32; case 32: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
				_r$20 = p.Writer.Write(t$5.Inst); /* */ $s = 33; case 33: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$20;
			/* } */ case 31:
			_r$21 = p.Writer.WriteString("?>"); /* */ $s = 34; case 34: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$21;
			$s = 8; continue;
		/* } else if ($assertType(_ref, Directive, true)[1]) { */ case 6:
			t$6 = _ref.$val;
			/* */ if (!isValidDirective(t$6)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!isValidDirective(t$6)) { */ case 35:
				_r$22 = fmt.Errorf("xml: EncodeToken of Directive containing wrong < or > markers", new sliceType$5([])); /* */ $s = 37; case 37: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				$s = -1; return _r$22;
				return _r$22;
			/* } */ case 36:
			_r$23 = p.Writer.WriteString("<!"); /* */ $s = 38; case 38: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$23;
			_r$24 = p.Writer.Write($subslice(new sliceType(t$6.$array), t$6.$offset, t$6.$offset + t$6.$length)); /* */ $s = 39; case 39: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$24;
			_r$25 = p.Writer.WriteString(">"); /* */ $s = 40; case 40: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$25;
			$s = 8; continue;
		/* } else { */ case 7:
			t$7 = _ref;
			_r$26 = fmt.Errorf("xml: EncodeToken of invalid token type", new sliceType$5([])); /* */ $s = 41; case 41: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			$s = -1; return _r$26;
			return _r$26;
		/* } */ case 8:
		_r$27 = p.cachedWriteError(); /* */ $s = 42; case 42: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		$s = -1; return _r$27;
		return _r$27;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.EncodeToken }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.enc = enc; $f.err = err; $f.err$1 = err$1; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.t$5 = t$5; $f.t$6 = t$6; $f.t$7 = t$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.EncodeToken = function(t) { return this.$val.EncodeToken(t); };
	isValidDirective = function(dir) {
		var $ptr, _i, _ref, c, depth, dir, i, incomment, inquote, n, x$1, x$2;
		depth = 0;
		inquote = 0;
		incomment = false;
		_ref = dir;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (incomment) {
				if (c === 62) {
					n = (1 + i >> 0) - endComment.$length >> 0;
					if (n >= 0 && bytes.Equal((x$1 = $subslice(dir, n, (i + 1 >> 0)), $subslice(new sliceType(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), endComment)) {
						incomment = false;
					}
				}
			} else if (!((inquote === 0))) {
				if (c === inquote) {
					inquote = 0;
				}
			} else if ((c === 39) || (c === 34)) {
				inquote = c;
			} else if ((c === 60)) {
				if ((i + begComment.$length >> 0) < dir.$length && bytes.Equal((x$2 = $subslice(dir, i, (i + begComment.$length >> 0)), $subslice(new sliceType(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), begComment)) {
					incomment = true;
				} else {
					depth = depth + (1) >> 0;
				}
			} else if ((c === 62)) {
				if (depth === 0) {
					return false;
				}
				depth = depth - (1) >> 0;
			}
			_i++;
		}
		return (depth === 0) && (inquote === 0) && !incomment;
	};
	Encoder.ptr.prototype.Flush = function() {
		var $ptr, _r$6, enc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; enc = $f.enc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r$6 = enc.p.Writer.Flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.enc = enc; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Flush = function() { return this.$val.Flush(); };
	printer.ptr.prototype.createAttrPrefix = function(url) {
		var $ptr, _entry, _entry$1, _entry$2, _key, _key$1, _r$10, _r$11, _r$6, _r$7, _r$8, _r$9, i, id, p, prefix, prefix$1, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; i = $f.i; id = $f.id; p = $f.p; prefix = $f.prefix; prefix$1 = $f.prefix$1; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prefix = (_entry = p.attrPrefix[$String.keyFor(url)], _entry !== undefined ? _entry.v : "");
		if (!(prefix === "")) {
			$s = -1; return prefix;
			return prefix;
		}
		if (url === "http://www.w3.org/XML/1998/namespace") {
			$s = -1; return "xml";
			return "xml";
		}
		if (p.attrPrefix === false) {
			p.attrPrefix = {};
			p.attrNS = {};
		}
		_r$6 = strings.TrimRight(url, "/"); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		prefix$1 = _r$6;
		i = strings.LastIndex(prefix$1, "/");
		if (i >= 0) {
			prefix$1 = $substring(prefix$1, (i + 1 >> 0));
		}
		if (prefix$1 === "" || !isName(new sliceType($stringToBytes(prefix$1))) || strings.Contains(prefix$1, ":")) {
			prefix$1 = "_";
		}
		if (strings.HasPrefix(prefix$1, "xml")) {
			prefix$1 = "_" + prefix$1;
		}
		if (!((_entry$1 = p.attrNS[$String.keyFor(prefix$1)], _entry$1 !== undefined ? _entry$1.v : "") === "")) {
			p.seq = p.seq + (1) >> 0;
			while (true) {
				id = prefix$1 + "_" + strconv.Itoa(p.seq);
				if ((_entry$2 = p.attrNS[$String.keyFor(id)], _entry$2 !== undefined ? _entry$2.v : "") === "") {
					prefix$1 = id;
					break;
				}
				p.seq = p.seq + (1) >> 0;
			}
		}
		_key = url; (p.attrPrefix || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: prefix$1 };
		_key$1 = prefix$1; (p.attrNS || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: url };
		_r$7 = p.Writer.WriteString("xmlns:"); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = p.Writer.WriteString(prefix$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = p.Writer.WriteString("=\""); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		_r$10 = EscapeText(p, new sliceType($stringToBytes(url))); /* */ $s = 5; case 5: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = p.Writer.WriteString("\" "); /* */ $s = 6; case 6: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		p.prefixes = $append(p.prefixes, prefix$1);
		$s = -1; return prefix$1;
		return prefix$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.createAttrPrefix }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.i = i; $f.id = id; $f.p = p; $f.prefix = prefix; $f.prefix$1 = prefix$1; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.createAttrPrefix = function(url) { return this.$val.createAttrPrefix(url); };
	printer.ptr.prototype.deleteAttrPrefix = function(prefix) {
		var $ptr, _entry, p, prefix;
		p = this;
		delete p.attrPrefix[$String.keyFor((_entry = p.attrNS[$String.keyFor(prefix)], _entry !== undefined ? _entry.v : ""))];
		delete p.attrNS[$String.keyFor(prefix)];
	};
	printer.prototype.deleteAttrPrefix = function(prefix) { return this.$val.deleteAttrPrefix(prefix); };
	printer.ptr.prototype.markPrefix = function() {
		var $ptr, p;
		p = this;
		p.prefixes = $append(p.prefixes, "");
	};
	printer.prototype.markPrefix = function() { return this.$val.markPrefix(); };
	printer.ptr.prototype.popPrefix = function() {
		var $ptr, p, prefix, x$1, x$2;
		p = this;
		while (true) {
			if (!(p.prefixes.$length > 0)) { break; }
			prefix = (x$1 = p.prefixes, x$2 = p.prefixes.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2]));
			p.prefixes = $subslice(p.prefixes, 0, (p.prefixes.$length - 1 >> 0));
			if (prefix === "") {
				break;
			}
			p.deleteAttrPrefix(prefix);
		}
	};
	printer.prototype.popPrefix = function() { return this.$val.popPrefix(); };
	printer.ptr.prototype.marshalValue = function(val, finfo, startTemplate) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _v, _v$1, _v$2, _v$3, _v$4, _v$5, _v$6, _v$7, _v$8, attr, attr$1, b, b$1, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err1, finfo, finfo$1, fv, i, i$1, kind, n, name, name$1, ok, p, pv, pv$1, pv$2, pv$3, s, s$1, start, startTemplate, text, text$1, tinfo, typ, v, val, x$1, xmlname, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; _v$7 = $f._v$7; _v$8 = $f._v$8; attr = $f.attr; attr$1 = $f.attr$1; b = $f.b; b$1 = $f.b$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err1 = $f.err1; finfo = $f.finfo; finfo$1 = $f.finfo$1; fv = $f.fv; i = $f.i; i$1 = $f.i$1; kind = $f.kind; n = $f.n; name = $f.name; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pv = $f.pv; pv$1 = $f.pv$1; pv$2 = $f.pv$2; pv$3 = $f.pv$3; s = $f.s; s$1 = $f.s$1; start = $f.start; startTemplate = $f.startTemplate; text = $f.text; text$1 = $f.text$1; tinfo = $f.tinfo; typ = $f.typ; v = $f.v; val = $f.val; x$1 = $f.x$1; xmlname = $f.xmlname; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = [start];
		val = val;
		p = this;
		/* */ if (!(startTemplate === ptrType$9.nil) && startTemplate.Name.Local === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(startTemplate === ptrType$9.nil) && startTemplate.Name.Local === "") { */ case 1:
			_r$6 = fmt.Errorf("xml: EncodeElement of StartElement with missing name", new sliceType$5([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } */ case 2:
		if (!val.IsValid()) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		if (!(finfo === ptrType$8.nil) && !(((finfo.flags & 128) === 0)) && isEmptyValue(val)) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		/* while (true) { */ case 4:
			/* if (!((val.Kind() === 20) || (val.Kind() === 22))) { break; } */ if(!((val.Kind() === 20) || (val.Kind() === 22))) { $s = 5; continue; }
			if (val.IsNil()) {
				$s = -1; return $ifaceNil;
				return $ifaceNil;
			}
			_r$7 = val.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			val = _r$7;
		/* } */ $s = 4; continue; case 5:
		kind = val.Kind();
		typ = val.Type();
		if (!(val.CanInterface())) { _v = false; $s = 9; continue s; }
		_r$8 = typ.Implements(marshalerType); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v = _r$8; case 9:
		/* */ if (_v) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_v) { */ case 7:
			_r$9 = val.Interface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg = $assertType(_r$9, Marshaler);
			_r$10 = defaultStart(typ, finfo, startTemplate); /* */ $s = 12; case 12: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$1 = _r$10;
			_r$11 = p.marshalInterface(_arg, _arg$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			$s = -1; return _r$11;
			return _r$11;
		/* } */ case 8:
		/* */ if (val.CanAddr()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (val.CanAddr()) { */ case 14:
			pv = val.Addr();
			if (!(pv.CanInterface())) { _v$1 = false; $s = 18; continue s; }
			_r$12 = pv.Type().Implements(marshalerType); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_v$1 = _r$12; case 18:
			/* */ if (_v$1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v$1) { */ case 16:
				_r$13 = pv.Interface(); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$2 = $assertType(_r$13, Marshaler);
				_r$14 = defaultStart(pv.Type(), finfo, startTemplate); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$3 = _r$14;
				_r$15 = p.marshalInterface(_arg$2, _arg$3); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$s = -1; return _r$15;
				return _r$15;
			/* } */ case 17:
		/* } */ case 15:
		if (!(val.CanInterface())) { _v$2 = false; $s = 25; continue s; }
		_r$16 = typ.Implements(textMarshalerType); /* */ $s = 26; case 26: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_v$2 = _r$16; case 25:
		/* */ if (_v$2) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (_v$2) { */ case 23:
			_r$17 = val.Interface(); /* */ $s = 27; case 27: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_arg$4 = $assertType(_r$17, encoding.TextMarshaler);
			_r$18 = defaultStart(typ, finfo, startTemplate); /* */ $s = 28; case 28: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_arg$5 = _r$18;
			_r$19 = p.marshalTextInterface(_arg$4, _arg$5); /* */ $s = 29; case 29: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			$s = -1; return _r$19;
			return _r$19;
		/* } */ case 24:
		/* */ if (val.CanAddr()) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (val.CanAddr()) { */ case 30:
			pv$1 = val.Addr();
			if (!(pv$1.CanInterface())) { _v$3 = false; $s = 34; continue s; }
			_r$20 = pv$1.Type().Implements(textMarshalerType); /* */ $s = 35; case 35: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_v$3 = _r$20; case 34:
			/* */ if (_v$3) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (_v$3) { */ case 32:
				_r$21 = pv$1.Interface(); /* */ $s = 36; case 36: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_arg$6 = $assertType(_r$21, encoding.TextMarshaler);
				_r$22 = defaultStart(pv$1.Type(), finfo, startTemplate); /* */ $s = 37; case 37: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_arg$7 = _r$22;
				_r$23 = p.marshalTextInterface(_arg$6, _arg$7); /* */ $s = 38; case 38: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				$s = -1; return _r$23;
				return _r$23;
			/* } */ case 33:
		/* } */ case 31:
		if (!((kind === 23) || (kind === 17))) { _v$4 = false; $s = 41; continue s; }
		_r$24 = typ.Elem(); /* */ $s = 42; case 42: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Kind(); /* */ $s = 43; case 43: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_v$4 = !((_r$25 === 8)); case 41:
		/* */ if (_v$4) { $s = 39; continue; }
		/* */ $s = 40; continue;
		/* if (_v$4) { */ case 39:
			_tmp = 0;
			_tmp$1 = val.Len();
			i = _tmp;
			n = _tmp$1;
			/* while (true) { */ case 44:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 45; continue; }
				_r$26 = val.Index(i); /* */ $s = 46; case 46: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_r$27 = p.marshalValue(_r$26, finfo, startTemplate); /* */ $s = 47; case 47: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				err = _r$27;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
					return err;
				}
				i = i + (1) >> 0;
			/* } */ $s = 44; continue; case 45:
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		/* } */ case 40:
		_r$28 = getTypeInfo(typ); /* */ $s = 48; case 48: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_tuple = _r$28;
		tinfo = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
			return err$1;
		}
		start[0] = new StartElement.ptr(new Name.ptr("", ""), sliceType$6.nil);
		/* */ if (!(startTemplate === ptrType$9.nil)) { $s = 49; continue; }
		/* */ if (!(tinfo.xmlname === ptrType$8.nil)) { $s = 50; continue; }
		/* */ $s = 51; continue;
		/* if (!(startTemplate === ptrType$9.nil)) { */ case 49:
			Name.copy(start[0].Name, startTemplate.Name);
			start[0].Attr = $appendSlice(start[0].Attr, startTemplate.Attr);
			$s = 51; continue;
		/* } else if (!(tinfo.xmlname === ptrType$8.nil)) { */ case 50:
			xmlname = tinfo.xmlname;
			/* */ if (!(xmlname.name === "")) { $s = 52; continue; }
			/* */ $s = 53; continue;
			/* if (!(xmlname.name === "")) { */ case 52:
				_tmp$2 = xmlname.xmlns;
				_tmp$3 = xmlname.name;
				start[0].Name.Space = _tmp$2;
				start[0].Name.Local = _tmp$3;
				$s = 54; continue;
			/* } else { */ case 53:
				_r$29 = xmlname.value(val); /* */ $s = 55; case 55: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$30 = _r$29.Interface(); /* */ $s = 56; case 56: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_tuple$1 = $assertType(_r$30, Name, true);
				v = $clone(_tuple$1[0], Name);
				ok = _tuple$1[1];
				if (ok && !(v.Local === "")) {
					Name.copy(start[0].Name, v);
				}
			/* } */ case 54:
		/* } */ case 51:
		if (start[0].Name.Local === "" && !(finfo === ptrType$8.nil)) {
			_tmp$4 = finfo.xmlns;
			_tmp$5 = finfo.name;
			start[0].Name.Space = _tmp$4;
			start[0].Name.Local = _tmp$5;
		}
		/* */ if (start[0].Name.Local === "") { $s = 57; continue; }
		/* */ $s = 58; continue;
		/* if (start[0].Name.Local === "") { */ case 57:
			_r$31 = typ.Name(); /* */ $s = 59; case 59: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			name = _r$31;
			if (name === "") {
				$s = -1; return new UnsupportedTypeError.ptr(typ);
				return new UnsupportedTypeError.ptr(typ);
			}
			start[0].Name.Local = name;
		/* } */ case 58:
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 60:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 61; continue; }
			i$1 = _i;
			finfo$1 = (x$1 = tinfo.fields, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1]));
			/* */ if ((finfo$1.flags & 2) === 0) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if ((finfo$1.flags & 2) === 0) { */ case 62:
				_i++;
				/* continue; */ $s = 60; continue;
			/* } */ case 63:
			_r$32 = finfo$1.value(val); /* */ $s = 64; case 64: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			fv = _r$32;
			name$1 = new Name.ptr(finfo$1.xmlns, finfo$1.name);
			/* */ if (!(((finfo$1.flags & 128) === 0)) && isEmptyValue(fv)) { $s = 65; continue; }
			/* */ $s = 66; continue;
			/* if (!(((finfo$1.flags & 128) === 0)) && isEmptyValue(fv)) { */ case 65:
				_i++;
				/* continue; */ $s = 60; continue;
			/* } */ case 66:
			/* */ if ((fv.Kind() === 20) && fv.IsNil()) { $s = 67; continue; }
			/* */ $s = 68; continue;
			/* if ((fv.Kind() === 20) && fv.IsNil()) { */ case 67:
				_i++;
				/* continue; */ $s = 60; continue;
			/* } */ case 68:
			if (!(fv.CanInterface())) { _v$5 = false; $s = 71; continue s; }
			_r$33 = fv.Type().Implements(marshalerAttrType); /* */ $s = 72; case 72: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_v$5 = _r$33; case 71:
			/* */ if (_v$5) { $s = 69; continue; }
			/* */ $s = 70; continue;
			/* if (_v$5) { */ case 69:
				_r$34 = fv.Interface(); /* */ $s = 73; case 73: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				_r$35 = $assertType(_r$34, MarshalerAttr).MarshalXMLAttr(name$1); /* */ $s = 74; case 74: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_tuple$2 = _r$35;
				attr = $clone(_tuple$2[0], Attr);
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
					return err$2;
				}
				if (!(attr.Name.Local === "")) {
					start[0].Attr = $append(start[0].Attr, attr);
				}
				_i++;
				/* continue; */ $s = 60; continue;
			/* } */ case 70:
			/* */ if (fv.CanAddr()) { $s = 75; continue; }
			/* */ $s = 76; continue;
			/* if (fv.CanAddr()) { */ case 75:
				pv$2 = fv.Addr();
				if (!(pv$2.CanInterface())) { _v$6 = false; $s = 79; continue s; }
				_r$36 = pv$2.Type().Implements(marshalerAttrType); /* */ $s = 80; case 80: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				_v$6 = _r$36; case 79:
				/* */ if (_v$6) { $s = 77; continue; }
				/* */ $s = 78; continue;
				/* if (_v$6) { */ case 77:
					_r$37 = pv$2.Interface(); /* */ $s = 81; case 81: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					_r$38 = $assertType(_r$37, MarshalerAttr).MarshalXMLAttr(name$1); /* */ $s = 82; case 82: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					_tuple$3 = _r$38;
					attr$1 = $clone(_tuple$3[0], Attr);
					err$3 = _tuple$3[1];
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return err$3;
						return err$3;
					}
					if (!(attr$1.Name.Local === "")) {
						start[0].Attr = $append(start[0].Attr, attr$1);
					}
					_i++;
					/* continue; */ $s = 60; continue;
				/* } */ case 78:
			/* } */ case 76:
			if (!(fv.CanInterface())) { _v$7 = false; $s = 85; continue s; }
			_r$39 = fv.Type().Implements(textMarshalerType); /* */ $s = 86; case 86: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			_v$7 = _r$39; case 85:
			/* */ if (_v$7) { $s = 83; continue; }
			/* */ $s = 84; continue;
			/* if (_v$7) { */ case 83:
				_r$40 = fv.Interface(); /* */ $s = 87; case 87: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				_r$41 = $assertType(_r$40, encoding.TextMarshaler).MarshalText(); /* */ $s = 88; case 88: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				_tuple$4 = _r$41;
				text = _tuple$4[0];
				err$4 = _tuple$4[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return err$4;
					return err$4;
				}
				start[0].Attr = $append(start[0].Attr, new Attr.ptr($clone(name$1, Name), $bytesToString(text)));
				_i++;
				/* continue; */ $s = 60; continue;
			/* } */ case 84:
			/* */ if (fv.CanAddr()) { $s = 89; continue; }
			/* */ $s = 90; continue;
			/* if (fv.CanAddr()) { */ case 89:
				pv$3 = fv.Addr();
				if (!(pv$3.CanInterface())) { _v$8 = false; $s = 93; continue s; }
				_r$42 = pv$3.Type().Implements(textMarshalerType); /* */ $s = 94; case 94: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				_v$8 = _r$42; case 93:
				/* */ if (_v$8) { $s = 91; continue; }
				/* */ $s = 92; continue;
				/* if (_v$8) { */ case 91:
					_r$43 = pv$3.Interface(); /* */ $s = 95; case 95: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
					_r$44 = $assertType(_r$43, encoding.TextMarshaler).MarshalText(); /* */ $s = 96; case 96: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					_tuple$5 = _r$44;
					text$1 = _tuple$5[0];
					err$5 = _tuple$5[1];
					if (!($interfaceIsEqual(err$5, $ifaceNil))) {
						$s = -1; return err$5;
						return err$5;
					}
					start[0].Attr = $append(start[0].Attr, new Attr.ptr($clone(name$1, Name), $bytesToString(text$1)));
					_i++;
					/* continue; */ $s = 60; continue;
				/* } */ case 92:
			/* } */ case 90:
				_1 = fv.Kind();
				/* */ if ((_1 === (22)) || (_1 === (20))) { $s = 98; continue; }
				/* */ $s = 99; continue;
				/* if ((_1 === (22)) || (_1 === (20))) { */ case 98:
					/* */ if (fv.IsNil()) { $s = 100; continue; }
					/* */ $s = 101; continue;
					/* if (fv.IsNil()) { */ case 100:
						_i++;
						/* continue; */ $s = 60; continue;
					/* } */ case 101:
					_r$45 = fv.Elem(); /* */ $s = 102; case 102: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
					fv = _r$45;
				/* } */ case 99:
			case 97:
			_r$46 = p.marshalSimple(fv.Type(), fv); /* */ $s = 103; case 103: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
			_tuple$6 = _r$46;
			s = _tuple$6[0];
			b = _tuple$6[1];
			err$6 = _tuple$6[2];
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				$s = -1; return err$6;
				return err$6;
			}
			if (!(b === sliceType.nil)) {
				s = $bytesToString(b);
			}
			start[0].Attr = $append(start[0].Attr, new Attr.ptr($clone(name$1, Name), s));
			_i++;
		/* } */ $s = 60; continue; case 61:
		_r$47 = p.writeStart(start[0]); /* */ $s = 104; case 104: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
		err$7 = _r$47;
		if (!($interfaceIsEqual(err$7, $ifaceNil))) {
			$s = -1; return err$7;
			return err$7;
		}
		/* */ if (val.Kind() === 25) { $s = 105; continue; }
		/* */ $s = 106; continue;
		/* if (val.Kind() === 25) { */ case 105:
			_r$48 = p.marshalStruct(tinfo, val); /* */ $s = 108; case 108: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			err$1 = _r$48;
			$s = 107; continue;
		/* } else { */ case 106:
			_r$49 = p.marshalSimple(typ, val); /* */ $s = 109; case 109: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
			_tuple$7 = _r$49;
			s$1 = _tuple$7[0];
			b$1 = _tuple$7[1];
			err1 = _tuple$7[2];
			/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 110; continue; }
			/* */ if (!(b$1 === sliceType.nil)) { $s = 111; continue; }
			/* */ $s = 112; continue;
			/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 110:
				err$1 = err1;
				$s = 113; continue;
			/* } else if (!(b$1 === sliceType.nil)) { */ case 111:
				_r$50 = EscapeText(p, b$1); /* */ $s = 114; case 114: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
				_r$50;
				$s = 113; continue;
			/* } else { */ case 112:
				$r = p.EscapeString(s$1); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 113:
		/* } */ case 107:
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
			return err$1;
		}
		_r$51 = p.writeEnd(start[0].Name); /* */ $s = 116; case 116: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
		err$8 = _r$51;
		if (!($interfaceIsEqual(err$8, $ifaceNil))) {
			$s = -1; return err$8;
			return err$8;
		}
		_r$52 = p.cachedWriteError(); /* */ $s = 117; case 117: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
		$s = -1; return _r$52;
		return _r$52;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f._v$7 = _v$7; $f._v$8 = _v$8; $f.attr = attr; $f.attr$1 = attr$1; $f.b = b; $f.b$1 = b$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err1 = err1; $f.finfo = finfo; $f.finfo$1 = finfo$1; $f.fv = fv; $f.i = i; $f.i$1 = i$1; $f.kind = kind; $f.n = n; $f.name = name; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pv = pv; $f.pv$1 = pv$1; $f.pv$2 = pv$2; $f.pv$3 = pv$3; $f.s = s; $f.s$1 = s$1; $f.start = start; $f.startTemplate = startTemplate; $f.text = text; $f.text$1 = text$1; $f.tinfo = tinfo; $f.typ = typ; $f.v = v; $f.val = val; $f.x$1 = x$1; $f.xmlname = xmlname; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalValue = function(val, finfo, startTemplate) { return this.$val.marshalValue(val, finfo, startTemplate); };
	defaultStart = function(typ, finfo, startTemplate) {
		var $ptr, _r$6, _r$7, _r$8, _r$9, finfo, start, startTemplate, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; finfo = $f.finfo; start = $f.start; startTemplate = $f.startTemplate; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = new StartElement.ptr(new Name.ptr("", ""), sliceType$6.nil);
		/* */ if (!(startTemplate === ptrType$9.nil)) { $s = 1; continue; }
		/* */ if (!(finfo === ptrType$8.nil) && !(finfo.name === "")) { $s = 2; continue; }
		_r$6 = typ.Name(); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!(_r$6 === "")) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(startTemplate === ptrType$9.nil)) { */ case 1:
			Name.copy(start.Name, startTemplate.Name);
			start.Attr = $appendSlice(start.Attr, startTemplate.Attr);
			$s = 5; continue;
		/* } else if (!(finfo === ptrType$8.nil) && !(finfo.name === "")) { */ case 2:
			start.Name.Local = finfo.name;
			start.Name.Space = finfo.xmlns;
			$s = 5; continue;
		/* } else if (!(_r$6 === "")) { */ case 3:
			_r$7 = typ.Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			start.Name.Local = _r$7;
			$s = 5; continue;
		/* } else { */ case 4:
			_r$8 = typ.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = _r$8.Name(); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			start.Name.Local = _r$9;
		/* } */ case 5:
		$s = -1; return start;
		return start;
		/* */ } return; } if ($f === undefined) { $f = { $blk: defaultStart }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.finfo = finfo; $f.start = start; $f.startTemplate = startTemplate; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.ptr.prototype.marshalInterface = function(val, start) {
		var $ptr, _arg, _arg$1, _r$6, _r$7, _r$8, err, n, p, start, val, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; err = $f.err; n = $f.n; p = $f.p; start = $f.start; val = $f.val; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = $clone(start, StartElement);
		p = this;
		p.tags = $append(p.tags, new Name.ptr("", ""));
		n = p.tags.$length;
		_r$6 = val.MarshalXML(p.encoder, start); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err = _r$6;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		/* */ if (p.tags.$length > n) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (p.tags.$length > n) { */ case 2:
			_r$7 = receiverType(val); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg = new $String(_r$7);
			_arg$1 = new $String((x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local);
			_r$8 = fmt.Errorf("xml: %s.MarshalXML wrote invalid XML: <%s> not closed", new sliceType$5([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$s = -1; return _r$8;
			return _r$8;
		/* } */ case 3:
		p.tags = $subslice(p.tags, 0, (n - 1 >> 0));
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalInterface }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.err = err; $f.n = n; $f.p = p; $f.start = start; $f.val = val; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalInterface = function(val, start) { return this.$val.marshalInterface(val, start); };
	printer.ptr.prototype.marshalTextInterface = function(val, start) {
		var $ptr, _r$6, _r$7, _r$8, _r$9, _tuple, err, err$1, p, start, text, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; p = $f.p; start = $f.start; text = $f.text; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = [start];
		start[0] = $clone(start[0], StartElement);
		p = this;
		_r$6 = p.writeStart(start[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err = _r$6;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$7 = val.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple = _r$7;
		text = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
			return err$1;
		}
		_r$8 = EscapeText(p, text); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = p.writeEnd(start[0].Name); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$s = -1; return _r$9;
		return _r$9;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalTextInterface }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.p = p; $f.start = start; $f.text = text; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalTextInterface = function(val, start) { return this.$val.marshalTextInterface(val, start); };
	printer.ptr.prototype.writeStart = function(start) {
		var $ptr, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$6, _r$7, _r$8, _r$9, _ref, attr, name, p, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; attr = $f.attr; name = $f.name; p = $f.p; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (start.Name.Local === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (start.Name.Local === "") { */ case 1:
			_r$6 = fmt.Errorf("xml: start tag with no name", new sliceType$5([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } */ case 2:
		p.tags = $append(p.tags, start.Name);
		p.markPrefix();
		$r = p.writeIndent(1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$7 = p.Writer.WriteByte(60); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = p.Writer.WriteString(start.Name.Local); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		/* */ if (!(start.Name.Space === "")) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(start.Name.Space === "")) { */ case 7:
			_r$9 = p.Writer.WriteString(" xmlns=\""); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			$r = p.EscapeString(start.Name.Space); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$10 = p.Writer.WriteByte(34); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
		/* } */ case 8:
		_ref = start.Attr;
		_i = 0;
		/* while (true) { */ case 12:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 13; continue; }
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
			name = $clone(attr.Name, Name);
			/* */ if (name.Local === "") { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (name.Local === "") { */ case 14:
				_i++;
				/* continue; */ $s = 12; continue;
			/* } */ case 15:
			_r$11 = p.Writer.WriteByte(32); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			/* */ if (!(name.Space === "")) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!(name.Space === "")) { */ case 17:
				_r$12 = p.createAttrPrefix(name.Space); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = p.Writer.WriteString(_r$12); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$13;
				_r$14 = p.Writer.WriteByte(58); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
			/* } */ case 18:
			_r$15 = p.Writer.WriteString(name.Local); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$15;
			_r$16 = p.Writer.WriteString("=\""); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			$r = p.EscapeString(attr.Value); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$17 = p.Writer.WriteByte(34); /* */ $s = 25; case 25: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_r$17;
			_i++;
		/* } */ $s = 12; continue; case 13:
		_r$18 = p.Writer.WriteByte(62); /* */ $s = 26; case 26: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_r$18;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeStart }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.attr = attr; $f.name = name; $f.p = p; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeStart = function(start) { return this.$val.writeStart(start); };
	printer.ptr.prototype.writeEnd = function(name) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$6, _r$7, _r$8, _r$9, name, p, top, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; name = $f.name; p = $f.p; top = $f.top; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = $clone(name, Name);
		p = this;
		/* */ if (name.Local === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name.Local === "") { */ case 1:
			_r$6 = fmt.Errorf("xml: end tag with no name", new sliceType$5([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } */ case 2:
		/* */ if ((p.tags.$length === 0) || (x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local === "") { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((p.tags.$length === 0) || (x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local === "") { */ case 4:
			_r$7 = fmt.Errorf("xml: end tag </%s> without start tag", new sliceType$5([new $String(name.Local)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } */ case 5:
		top = $clone((x$3 = p.tags, x$4 = p.tags.$length - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])), Name);
		/* */ if (!($equal(top, name, Name))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($equal(top, name, Name))) { */ case 7:
			/* */ if (!(top.Local === name.Local)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!(top.Local === name.Local)) { */ case 9:
				_r$8 = fmt.Errorf("xml: end tag </%s> does not match start tag <%s>", new sliceType$5([new $String(name.Local), new $String(top.Local)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return _r$8;
				return _r$8;
			/* } */ case 10:
			_r$9 = fmt.Errorf("xml: end tag </%s> in namespace %s does not match start tag <%s> in namespace %s", new sliceType$5([new $String(name.Local), new $String(name.Space), new $String(top.Local), new $String(top.Space)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return _r$9;
			return _r$9;
		/* } */ case 8:
		p.tags = $subslice(p.tags, 0, (p.tags.$length - 1 >> 0));
		$r = p.writeIndent(-1); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$10 = p.Writer.WriteByte(60); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_r$11 = p.Writer.WriteByte(47); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		_r$12 = p.Writer.WriteString(name.Local); /* */ $s = 16; case 16: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		_r$13 = p.Writer.WriteByte(62); /* */ $s = 17; case 17: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		p.popPrefix();
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeEnd }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.name = name; $f.p = p; $f.top = top; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeEnd = function(name) { return this.$val.writeEnd(name); };
	printer.ptr.prototype.marshalSimple = function(typ, val) {
		var $ptr, _1, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$6, _r$7, _r$8, _r$9, bytes$1, p, typ, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; bytes$1 = $f.bytes$1; p = $f.p; typ = $f.typ; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		p = this;
			_1 = val.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if (_1 === (24)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (17)) { $s = 7; continue; }
			/* */ if (_1 === (23)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				$s = -1; return [strconv.FormatInt(val.Int(), 10), sliceType.nil, $ifaceNil];
				return [strconv.FormatInt(val.Int(), 10), sliceType.nil, $ifaceNil];
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				$s = -1; return [strconv.FormatUint(val.Uint(), 10), sliceType.nil, $ifaceNil];
				return [strconv.FormatUint(val.Uint(), 10), sliceType.nil, $ifaceNil];
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_arg = val.Float();
				_r$6 = val.Type().Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$1 = _r$6;
				_r$7 = strconv.FormatFloat(_arg, 103, -1, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return [_r$7, sliceType.nil, $ifaceNil];
				return [_r$7, sliceType.nil, $ifaceNil];
			/* } else if (_1 === (24)) { */ case 5:
				_r$8 = val.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return [_r$8, sliceType.nil, $ifaceNil];
				return [_r$8, sliceType.nil, $ifaceNil];
			/* } else if (_1 === (1)) { */ case 6:
				$s = -1; return [strconv.FormatBool(val.Bool()), sliceType.nil, $ifaceNil];
				return [strconv.FormatBool(val.Bool()), sliceType.nil, $ifaceNil];
			/* } else if (_1 === (17)) { */ case 7:
				_r$9 = typ.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = _r$9.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				/* */ if (!((_r$10 === 8))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!((_r$10 === 8))) { */ case 13:
					/* break; */ $s = 1; continue;
				/* } */ case 14:
				bytes$1 = sliceType.nil;
				/* */ if (val.CanAddr()) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (val.CanAddr()) { */ case 17:
					_r$11 = val.Slice(0, val.Len()); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$12 = _r$11.Bytes(); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					bytes$1 = _r$12;
					$s = 19; continue;
				/* } else { */ case 18:
					bytes$1 = $makeSlice(sliceType, val.Len());
					_r$13 = reflect.ValueOf(bytes$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$14 = reflect.Copy(_r$13, val); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
				/* } */ case 19:
				$s = -1; return ["", bytes$1, $ifaceNil];
				return ["", bytes$1, $ifaceNil];
			/* } else if (_1 === (23)) { */ case 8:
				_r$15 = typ.Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = _r$15.Kind(); /* */ $s = 27; case 27: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ if (!((_r$16 === 8))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!((_r$16 === 8))) { */ case 24:
					/* break; */ $s = 1; continue;
				/* } */ case 25:
				_r$17 = val.Bytes(); /* */ $s = 28; case 28: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$s = -1; return ["", _r$17, $ifaceNil];
				return ["", _r$17, $ifaceNil];
			/* } */ case 9:
		case 1:
		$s = -1; return ["", sliceType.nil, new UnsupportedTypeError.ptr(typ)];
		return ["", sliceType.nil, new UnsupportedTypeError.ptr(typ)];
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalSimple }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.bytes$1 = bytes$1; $f.p = p; $f.typ = typ; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalSimple = function(typ, val) { return this.$val.marshalSimple(typ, val); };
	printer.ptr.prototype.marshalStruct = function(tinfo, val) {
		var $ptr, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _v, _v$1, _v$2, _v$3, b, dashDash, dashLast, data, data$1, elem, emit, err, err$1, err$10, err$11, err$12, err$13, err$14, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, finfo, i, iface, k, ok, p, pv, raw, raw$1, s, s$1, scratch, tinfo, val, vf, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; b = $f.b; dashDash = $f.dashDash; dashLast = $f.dashLast; data = $f.data; data$1 = $f.data$1; elem = $f.elem; emit = $f.emit; err = $f.err; err$1 = $f.err$1; err$10 = $f.err$10; err$11 = $f.err$11; err$12 = $f.err$12; err$13 = $f.err$13; err$14 = $f.err$14; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; finfo = $f.finfo; i = $f.i; iface = $f.iface; k = $f.k; ok = $f.ok; p = $f.p; pv = $f.pv; raw = $f.raw; raw$1 = $f.raw$1; s = $f.s; s$1 = $f.s$1; scratch = $f.scratch; tinfo = $f.tinfo; val = $f.val; vf = $f.vf; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		p = this;
		s = new parentStack.ptr(p, sliceType$3.nil);
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			finfo = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			/* */ if (!(((finfo.flags & 2) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((finfo.flags & 2) === 0))) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$6 = finfo.value(val); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			vf = _r$6;
				_1 = vf.Kind();
				/* */ if ((_1 === (22)) || (_1 === (20))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if ((_1 === (22)) || (_1 === (20))) { */ case 7:
					/* */ if (!vf.IsNil()) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!vf.IsNil()) { */ case 9:
						_r$7 = vf.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						vf = _r$7;
					/* } */ case 10:
				/* } */ case 8:
			case 6:
				_2 = finfo.flags & 127;
				/* */ if ((_2 === (4)) || (_2 === (8))) { $s = 13; continue; }
				/* */ if (_2 === (32)) { $s = 14; continue; }
				/* */ if (_2 === (16)) { $s = 15; continue; }
				/* */ if ((_2 === (1)) || (_2 === (65))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ((_2 === (4)) || (_2 === (8))) { */ case 13:
					emit = EscapeText;
					if ((finfo.flags & 127) === 4) {
						emit = emitCDATA;
					}
					_r$8 = s.trim(finfo.parents); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					err = _r$8;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return err;
						return err;
					}
					if (!(vf.CanInterface())) { _v = false; $s = 21; continue s; }
					_r$9 = vf.Type().Implements(textMarshalerType); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_v = _r$9; case 21:
					/* */ if (_v) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_v) { */ case 19:
						_r$10 = vf.Interface(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$11 = $assertType(_r$10, encoding.TextMarshaler).MarshalText(); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_tuple = _r$11;
						data = _tuple[0];
						err$1 = _tuple[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							$s = -1; return err$1;
							return err$1;
						}
						_r$12 = emit(p, data); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						err$2 = _r$12;
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							$s = -1; return err$2;
							return err$2;
						}
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 20:
					/* */ if (vf.CanAddr()) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (vf.CanAddr()) { */ case 26:
						pv = vf.Addr();
						if (!(pv.CanInterface())) { _v$1 = false; $s = 30; continue s; }
						_r$13 = pv.Type().Implements(textMarshalerType); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_v$1 = _r$13; case 30:
						/* */ if (_v$1) { $s = 28; continue; }
						/* */ $s = 29; continue;
						/* if (_v$1) { */ case 28:
							_r$14 = pv.Interface(); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							_r$15 = $assertType(_r$14, encoding.TextMarshaler).MarshalText(); /* */ $s = 33; case 33: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							_tuple$1 = _r$15;
							data$1 = _tuple$1[0];
							err$3 = _tuple$1[1];
							if (!($interfaceIsEqual(err$3, $ifaceNil))) {
								$s = -1; return err$3;
								return err$3;
							}
							_r$16 = emit(p, data$1); /* */ $s = 34; case 34: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
							err$4 = _r$16;
							if (!($interfaceIsEqual(err$4, $ifaceNil))) {
								$s = -1; return err$4;
								return err$4;
							}
							_i++;
							/* continue; */ $s = 1; continue;
						/* } */ case 29:
					/* } */ case 27:
					scratch = arrayType$1.zero();
						_3 = vf.Kind();
						/* */ if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6))) { $s = 36; continue; }
						/* */ if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) { $s = 37; continue; }
						/* */ if ((_3 === (13)) || (_3 === (14))) { $s = 38; continue; }
						/* */ if (_3 === (1)) { $s = 39; continue; }
						/* */ if (_3 === (24)) { $s = 40; continue; }
						/* */ if (_3 === (23)) { $s = 41; continue; }
						/* */ $s = 42; continue;
						/* if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6))) { */ case 36:
							_r$17 = emit(p, strconv.AppendInt($subslice(new sliceType(scratch), 0, 0), vf.Int(), 10)); /* */ $s = 43; case 43: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
							err$5 = _r$17;
							if (!($interfaceIsEqual(err$5, $ifaceNil))) {
								$s = -1; return err$5;
								return err$5;
							}
							$s = 42; continue;
						/* } else if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) { */ case 37:
							_r$18 = emit(p, strconv.AppendUint($subslice(new sliceType(scratch), 0, 0), vf.Uint(), 10)); /* */ $s = 44; case 44: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							err$6 = _r$18;
							if (!($interfaceIsEqual(err$6, $ifaceNil))) {
								$s = -1; return err$6;
								return err$6;
							}
							$s = 42; continue;
						/* } else if ((_3 === (13)) || (_3 === (14))) { */ case 38:
							_arg = p;
							_arg$1 = $subslice(new sliceType(scratch), 0, 0);
							_arg$2 = vf.Float();
							_r$19 = vf.Type().Bits(); /* */ $s = 45; case 45: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							_arg$3 = _r$19;
							_r$20 = strconv.AppendFloat(_arg$1, _arg$2, 103, -1, _arg$3); /* */ $s = 46; case 46: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							_arg$4 = _r$20;
							_r$21 = emit(_arg, _arg$4); /* */ $s = 47; case 47: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
							err$7 = _r$21;
							if (!($interfaceIsEqual(err$7, $ifaceNil))) {
								$s = -1; return err$7;
								return err$7;
							}
							$s = 42; continue;
						/* } else if (_3 === (1)) { */ case 39:
							_r$22 = emit(p, strconv.AppendBool($subslice(new sliceType(scratch), 0, 0), vf.Bool())); /* */ $s = 48; case 48: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
							err$8 = _r$22;
							if (!($interfaceIsEqual(err$8, $ifaceNil))) {
								$s = -1; return err$8;
								return err$8;
							}
							$s = 42; continue;
						/* } else if (_3 === (24)) { */ case 40:
							_arg$5 = p;
							_r$23 = vf.String(); /* */ $s = 49; case 49: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							_arg$6 = new sliceType($stringToBytes(_r$23));
							_r$24 = emit(_arg$5, _arg$6); /* */ $s = 50; case 50: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
							err$9 = _r$24;
							if (!($interfaceIsEqual(err$9, $ifaceNil))) {
								$s = -1; return err$9;
								return err$9;
							}
							$s = 42; continue;
						/* } else if (_3 === (23)) { */ case 41:
							_r$25 = vf.Interface(); /* */ $s = 51; case 51: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
							_tuple$2 = $assertType(_r$25, sliceType, true);
							elem = _tuple$2[0];
							ok = _tuple$2[1];
							/* */ if (ok) { $s = 52; continue; }
							/* */ $s = 53; continue;
							/* if (ok) { */ case 52:
								_r$26 = emit(p, elem); /* */ $s = 54; case 54: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
								err$10 = _r$26;
								if (!($interfaceIsEqual(err$10, $ifaceNil))) {
									$s = -1; return err$10;
									return err$10;
								}
							/* } */ case 53:
						/* } */ case 42:
					case 35:
					_i++;
					/* continue; */ $s = 1; continue;
					$s = 17; continue;
				/* } else if (_2 === (32)) { */ case 14:
					_r$27 = s.trim(finfo.parents); /* */ $s = 55; case 55: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					err$11 = _r$27;
					if (!($interfaceIsEqual(err$11, $ifaceNil))) {
						$s = -1; return err$11;
						return err$11;
					}
					k = vf.Kind();
					if (k === 24) { _v$2 = true; $s = 58; continue s; }
					if (!(k === 23)) { _v$3 = false; $s = 59; continue s; }
					_r$28 = vf.Type().Elem(); /* */ $s = 60; case 60: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_r$29 = _r$28.Kind(); /* */ $s = 61; case 61: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_v$3 = _r$29 === 8; case 59:
					_v$2 = _v$3; case 58:
					/* */ if (!(_v$2)) { $s = 56; continue; }
					/* */ $s = 57; continue;
					/* if (!(_v$2)) { */ case 56:
						_r$30 = fmt.Errorf("xml: bad type for comment field of %s", new sliceType$5([val.Type()])); /* */ $s = 62; case 62: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						$s = -1; return _r$30;
						return _r$30;
					/* } */ case 57:
					/* */ if (vf.Len() === 0) { $s = 63; continue; }
					/* */ $s = 64; continue;
					/* if (vf.Len() === 0) { */ case 63:
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 64:
					$r = p.writeIndent(0); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$31 = p.Writer.WriteString("<!--"); /* */ $s = 66; case 66: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					_r$31;
					dashDash = false;
					dashLast = false;
						_4 = k;
						/* */ if (_4 === (24)) { $s = 68; continue; }
						/* */ if (_4 === (23)) { $s = 69; continue; }
						/* */ $s = 70; continue;
						/* if (_4 === (24)) { */ case 68:
							_r$32 = vf.String(); /* */ $s = 72; case 72: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
							s$1 = _r$32;
							dashDash = strings.Contains(s$1, "--");
							dashLast = s$1.charCodeAt((s$1.length - 1 >> 0)) === 45;
							/* */ if (!dashDash) { $s = 73; continue; }
							/* */ $s = 74; continue;
							/* if (!dashDash) { */ case 73:
								_r$33 = p.Writer.WriteString(s$1); /* */ $s = 75; case 75: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
								_r$33;
							/* } */ case 74:
							$s = 71; continue;
						/* } else if (_4 === (23)) { */ case 69:
							_r$34 = vf.Bytes(); /* */ $s = 76; case 76: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
							b = _r$34;
							dashDash = bytes.Contains(b, ddBytes);
							dashLast = (x$2 = b.$length - 1 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$2])) === 45;
							/* */ if (!dashDash) { $s = 77; continue; }
							/* */ $s = 78; continue;
							/* if (!dashDash) { */ case 77:
								_r$35 = p.Writer.Write(b); /* */ $s = 79; case 79: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
								_r$35;
							/* } */ case 78:
							$s = 71; continue;
						/* } else { */ case 70:
							$panic(new $String("can't happen"));
						/* } */ case 71:
					case 67:
					/* */ if (dashDash) { $s = 80; continue; }
					/* */ $s = 81; continue;
					/* if (dashDash) { */ case 80:
						_r$36 = fmt.Errorf("xml: comments must not contain \"--\"", new sliceType$5([])); /* */ $s = 82; case 82: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
						$s = -1; return _r$36;
						return _r$36;
					/* } */ case 81:
					/* */ if (dashLast) { $s = 83; continue; }
					/* */ $s = 84; continue;
					/* if (dashLast) { */ case 83:
						_r$37 = p.Writer.WriteByte(32); /* */ $s = 85; case 85: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						_r$37;
					/* } */ case 84:
					_r$38 = p.Writer.WriteString("-->"); /* */ $s = 86; case 86: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					_r$38;
					_i++;
					/* continue; */ $s = 1; continue;
					$s = 17; continue;
				/* } else if (_2 === (16)) { */ case 15:
					_r$39 = vf.Interface(); /* */ $s = 87; case 87: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					iface = _r$39;
					_ref$1 = iface;
					/* */ if ($assertType(_ref$1, sliceType, true)[1]) { $s = 88; continue; }
					/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 89; continue; }
					/* */ $s = 90; continue;
					/* if ($assertType(_ref$1, sliceType, true)[1]) { */ case 88:
						raw = _ref$1.$val;
						_r$40 = p.Writer.Write(raw); /* */ $s = 91; case 91: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						_r$40;
						_i++;
						/* continue; */ $s = 1; continue;
						$s = 90; continue;
					/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 89:
						raw$1 = _ref$1.$val;
						_r$41 = p.Writer.WriteString(raw$1); /* */ $s = 92; case 92: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						_r$41;
						_i++;
						/* continue; */ $s = 1; continue;
					/* } */ case 90:
					$s = 17; continue;
				/* } else if ((_2 === (1)) || (_2 === (65))) { */ case 16:
					_r$42 = s.trim(finfo.parents); /* */ $s = 93; case 93: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
					err$12 = _r$42;
					if (!($interfaceIsEqual(err$12, $ifaceNil))) {
						$s = -1; return err$12;
						return err$12;
					}
					/* */ if (finfo.parents.$length > s.stack.$length) { $s = 94; continue; }
					/* */ $s = 95; continue;
					/* if (finfo.parents.$length > s.stack.$length) { */ case 94:
						/* */ if (!((vf.Kind() === 22)) && !((vf.Kind() === 20)) || !vf.IsNil()) { $s = 96; continue; }
						/* */ $s = 97; continue;
						/* if (!((vf.Kind() === 22)) && !((vf.Kind() === 20)) || !vf.IsNil()) { */ case 96:
							_r$43 = s.push($subslice(finfo.parents, s.stack.$length)); /* */ $s = 98; case 98: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
							err$13 = _r$43;
							if (!($interfaceIsEqual(err$13, $ifaceNil))) {
								$s = -1; return err$13;
								return err$13;
							}
						/* } */ case 97:
					/* } */ case 95:
				/* } */ case 17:
			case 12:
			_r$44 = p.marshalValue(vf, finfo, ptrType$9.nil); /* */ $s = 99; case 99: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
			err$14 = _r$44;
			if (!($interfaceIsEqual(err$14, $ifaceNil))) {
				$s = -1; return err$14;
				return err$14;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$45 = s.trim(sliceType$3.nil); /* */ $s = 100; case 100: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
		_r$45;
		_r$46 = p.cachedWriteError(); /* */ $s = 101; case 101: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
		$s = -1; return _r$46;
		return _r$46;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.marshalStruct }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.b = b; $f.dashDash = dashDash; $f.dashLast = dashLast; $f.data = data; $f.data$1 = data$1; $f.elem = elem; $f.emit = emit; $f.err = err; $f.err$1 = err$1; $f.err$10 = err$10; $f.err$11 = err$11; $f.err$12 = err$12; $f.err$13 = err$13; $f.err$14 = err$14; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.finfo = finfo; $f.i = i; $f.iface = iface; $f.k = k; $f.ok = ok; $f.p = p; $f.pv = pv; $f.raw = raw; $f.raw$1 = raw$1; $f.s = s; $f.s$1 = s$1; $f.scratch = scratch; $f.tinfo = tinfo; $f.val = val; $f.vf = vf; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.marshalStruct = function(tinfo, val) { return this.$val.marshalStruct(tinfo, val); };
	printer.ptr.prototype.cachedWriteError = function() {
		var $ptr, _r$6, _tuple, err, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$6 = p.Writer.Write(sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		err = _tuple[1];
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.cachedWriteError }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.cachedWriteError = function() { return this.$val.cachedWriteError(); };
	printer.ptr.prototype.writeIndent = function(depthDelta) {
		var $ptr, _r$6, _r$7, _r$8, depthDelta, i, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; depthDelta = $f.depthDelta; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if ((p.prefix.length === 0) && (p.indent.length === 0)) {
			$s = -1; return;
			return;
		}
		if (depthDelta < 0) {
			p.depth = p.depth - (1) >> 0;
			if (p.indentedIn) {
				p.indentedIn = false;
				$s = -1; return;
				return;
			}
			p.indentedIn = false;
		}
		/* */ if (p.putNewline) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.putNewline) { */ case 1:
			_r$6 = p.Writer.WriteByte(10); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = 3; continue;
		/* } else { */ case 2:
			p.putNewline = true;
		/* } */ case 3:
		/* */ if (p.prefix.length > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.prefix.length > 0) { */ case 5:
			_r$7 = p.Writer.WriteString(p.prefix); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 6:
		/* */ if (p.indent.length > 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (p.indent.length > 0) { */ case 8:
			i = 0;
			/* while (true) { */ case 10:
				/* if (!(i < p.depth)) { break; } */ if(!(i < p.depth)) { $s = 11; continue; }
				_r$8 = p.Writer.WriteString(p.indent); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				i = i + (1) >> 0;
			/* } */ $s = 10; continue; case 11:
		/* } */ case 9:
		if (depthDelta > 0) {
			p.depth = p.depth + (1) >> 0;
			p.indentedIn = true;
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeIndent }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.depthDelta = depthDelta; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeIndent = function(depthDelta) { return this.$val.writeIndent(depthDelta); };
	parentStack.ptr.prototype.trim = function(parents) {
		var $ptr, _r$6, err, i, parents, s, split, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; err = $f.err; i = $f.i; parents = $f.parents; s = $f.s; split = $f.split; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		split = 0;
		while (true) {
			if (!(split < parents.$length && split < s.stack.$length)) { break; }
			if (!(((split < 0 || split >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + split]) === (x$1 = s.stack, ((split < 0 || split >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + split])))) {
				break;
			}
			split = split + (1) >> 0;
		}
		i = s.stack.$length - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i >= split)) { break; } */ if(!(i >= split)) { $s = 2; continue; }
			_r$6 = s.p.writeEnd(new Name.ptr("", (x$2 = s.stack, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])))); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		s.stack = $subslice(s.stack, 0, split);
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parentStack.ptr.prototype.trim }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.err = err; $f.i = i; $f.parents = parents; $f.s = s; $f.split = split; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parentStack.prototype.trim = function(parents) { return this.$val.trim(parents); };
	parentStack.ptr.prototype.push = function(parents) {
		var $ptr, _r$6, err, i, parents, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; err = $f.err; i = $f.i; parents = $f.parents; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < parents.$length)) { break; } */ if(!(i < parents.$length)) { $s = 2; continue; }
			_r$6 = s.p.writeStart(new StartElement.ptr(new Name.ptr("", ((i < 0 || i >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + i])), sliceType$6.nil)); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		s.stack = $appendSlice(s.stack, parents);
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parentStack.ptr.prototype.push }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.err = err; $f.i = i; $f.parents = parents; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parentStack.prototype.push = function(parents) { return this.$val.push(parents); };
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$6, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$6 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return "xml: unsupported type: " + _r$6;
		return "xml: unsupported type: " + _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnsupportedTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	isEmptyValue = function(v) {
		var $ptr, _1, v, x$1, x$2;
		v = v;
		_1 = v.Kind();
		if ((_1 === (17)) || (_1 === (21)) || (_1 === (23)) || (_1 === (24))) {
			return v.Len() === 0;
		} else if (_1 === (1)) {
			return !v.Bool();
		} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			return (x$1 = v.Int(), (x$1.$high === 0 && x$1.$low === 0));
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			return (x$2 = v.Uint(), (x$2.$high === 0 && x$2.$low === 0));
		} else if ((_1 === (13)) || (_1 === (14))) {
			return v.Float() === 0;
		} else if ((_1 === (20)) || (_1 === (22))) {
			return v.IsNil();
		}
		return false;
	};
	Decoder.ptr.prototype.Decode = function(v) {
		var $ptr, _r$6, d, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; d = $f.d; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$6 = d.DecodeElement(v, ptrType$9.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.d = d; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Decode = function(v) { return this.$val.Decode(v); };
	Decoder.ptr.prototype.DecodeElement = function(v, start) {
		var $ptr, _r$6, _r$7, _r$8, d, start, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; d = $f.d; start = $f.start; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$6 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		val = _r$6;
		if (!((val.Kind() === 22))) {
			$s = -1; return errors.New("non-pointer passed to Unmarshal");
			return errors.New("non-pointer passed to Unmarshal");
		}
		_r$7 = val.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = d.unmarshal(_r$7, start); /* */ $s = 3; case 3: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.DecodeElement }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.d = d; $f.start = start; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.DecodeElement = function(v, start) { return this.$val.DecodeElement(v, start); };
	UnmarshalError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return e;
	};
	$ptrType(UnmarshalError).prototype.Error = function() { return new UnmarshalError(this.$get()).Error(); };
	receiverType = function(val) {
		var $ptr, _r$6, _r$7, _r$8, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = reflect.TypeOf(val);
		_r$6 = t.Name(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!(_r$6 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r$6 === "")) { */ case 1:
			_r$7 = t.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } */ case 2:
		_r$8 = t.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return "(" + _r$8 + ")";
		return "(" + _r$8 + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: receiverType }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.ptr.prototype.unmarshalInterface = function(val, start) {
		var $ptr, _arg, _arg$1, _r$6, _r$7, _r$8, err, p, start, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; err = $f.err; p = $f.p; start = $f.start; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.pushEOF();
		p.unmarshalDepth = p.unmarshalDepth + (1) >> 0;
		_r$6 = val.UnmarshalXML(p, start); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err = _r$6;
		p.unmarshalDepth = p.unmarshalDepth - (1) >> 0;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			p.popEOF();
			$s = -1; return err;
			return err;
		}
		/* */ if (!p.popEOF()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!p.popEOF()) { */ case 2:
			_r$7 = receiverType(val); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg = new $String(_r$7);
			_arg$1 = new $String(start.Name.Local);
			_r$8 = fmt.Errorf("xml: %s.UnmarshalXML did not consume entire <%s> element", new sliceType$5([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$s = -1; return _r$8;
			return _r$8;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalInterface }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.err = err; $f.p = p; $f.start = start; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalInterface = function(val, start) { return this.$val.unmarshalInterface(val, start); };
	Decoder.ptr.prototype.unmarshalTextInterface = function(val, start) {
		var $ptr, _r$6, _r$7, _ref, _tuple, buf, depth, err, p, start, t, t$1, t$2, t$3, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; buf = $f.buf; depth = $f.depth; err = $f.err; p = $f.p; start = $f.start; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		buf = sliceType.nil;
		depth = 1;
		/* while (true) { */ case 1:
			/* if (!(depth > 0)) { break; } */ if(!(depth > 0)) { $s = 2; continue; }
			_r$6 = p.Token(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			t = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			_ref = t;
			if ($assertType(_ref, CharData, true)[1]) {
				t$1 = _ref.$val;
				if (depth === 1) {
					buf = $appendSlice(buf, $subslice(new sliceType(t$1.$array), t$1.$offset, t$1.$offset + t$1.$length));
				}
			} else if ($assertType(_ref, StartElement, true)[1]) {
				t$2 = $clone(_ref.$val, StartElement);
				depth = depth + (1) >> 0;
			} else if ($assertType(_ref, EndElement, true)[1]) {
				t$3 = $clone(_ref.$val, EndElement);
				depth = depth - (1) >> 0;
			}
		/* } */ $s = 1; continue; case 2:
		_r$7 = val.UnmarshalText(buf); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalTextInterface }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.buf = buf; $f.depth = depth; $f.err = err; $f.p = p; $f.start = start; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalTextInterface = function(val, start) { return this.$val.unmarshalTextInterface(val, start); };
	Decoder.ptr.prototype.unmarshalAttr = function(val, attr) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, attr, p, pv, pv$1, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; attr = $f.attr; p = $f.p; pv = $f.pv; pv$1 = $f.pv$1; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		attr = $clone(attr, Attr);
		val = val;
		p = this;
		/* */ if (val.Kind() === 22) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (val.Kind() === 22) { */ case 1:
			/* */ if (val.IsNil()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (val.IsNil()) { */ case 3:
				_r$6 = val.Type().Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = reflect.New(_r$6); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = val.Set(_r$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_r$8 = val.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			val = _r$8;
		/* } */ case 2:
		if (!(val.CanInterface())) { _v = false; $s = 11; continue s; }
		_r$9 = val.Type().Implements(unmarshalerAttrType); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_v = _r$9; case 11:
		/* */ if (_v) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v) { */ case 9:
			_r$10 = val.Interface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $assertType(_r$10, UnmarshalerAttr).UnmarshalXMLAttr(attr); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			$s = -1; return _r$11;
			return _r$11;
		/* } */ case 10:
		/* */ if (val.CanAddr()) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (val.CanAddr()) { */ case 15:
			pv = val.Addr();
			if (!(pv.CanInterface())) { _v$1 = false; $s = 19; continue s; }
			_r$12 = pv.Type().Implements(unmarshalerAttrType); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_v$1 = _r$12; case 19:
			/* */ if (_v$1) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (_v$1) { */ case 17:
				_r$13 = pv.Interface(); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = $assertType(_r$13, UnmarshalerAttr).UnmarshalXMLAttr(attr); /* */ $s = 22; case 22: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return _r$14;
				return _r$14;
			/* } */ case 18:
		/* } */ case 16:
		if (!(val.CanInterface())) { _v$2 = false; $s = 25; continue s; }
		_r$15 = val.Type().Implements(textUnmarshalerType); /* */ $s = 26; case 26: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_v$2 = _r$15; case 25:
		/* */ if (_v$2) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (_v$2) { */ case 23:
			_r$16 = val.Interface(); /* */ $s = 27; case 27: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = $assertType(_r$16, encoding.TextUnmarshaler).UnmarshalText(new sliceType($stringToBytes(attr.Value))); /* */ $s = 28; case 28: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			$s = -1; return _r$17;
			return _r$17;
		/* } */ case 24:
		/* */ if (val.CanAddr()) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (val.CanAddr()) { */ case 29:
			pv$1 = val.Addr();
			if (!(pv$1.CanInterface())) { _v$3 = false; $s = 33; continue s; }
			_r$18 = pv$1.Type().Implements(textUnmarshalerType); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_v$3 = _r$18; case 33:
			/* */ if (_v$3) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_v$3) { */ case 31:
				_r$19 = pv$1.Interface(); /* */ $s = 35; case 35: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$20 = $assertType(_r$19, encoding.TextUnmarshaler).UnmarshalText(new sliceType($stringToBytes(attr.Value))); /* */ $s = 36; case 36: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				$s = -1; return _r$20;
				return _r$20;
			/* } */ case 32:
		/* } */ case 30:
		_r$21 = copyValue(val, new sliceType($stringToBytes(attr.Value))); /* */ $s = 37; case 37: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_r$21;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalAttr }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.attr = attr; $f.p = p; $f.pv = pv; $f.pv$1 = pv$1; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalAttr = function(val, attr) { return this.$val.unmarshalAttr(val, attr); };
	Decoder.ptr.prototype.unmarshal = function(val, start) {
		var $ptr, _1, _2, _3, _4, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, _v$1, _v$2, _v$3, _v$4, _v$5, a, comment, consumed, data, e, e$1, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, finfo, finfo$1, fv, i, n, ncap, new$1, ok, ok$1, p, pv, pv$1, pv$2, saveAny, saveComment, saveData, saveXML, saveXMLData, saveXMLIndex, savedOffset, start, strv, sv, t, t$1, t$2, t$3, t$4, t$5, t$6, tinfo, tok, tok$1, typ, typ$1, v, val, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$54 = $f._r$54; _r$55 = $f._r$55; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; a = $f.a; comment = $f.comment; consumed = $f.consumed; data = $f.data; e = $f.e; e$1 = $f.e$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; finfo = $f.finfo; finfo$1 = $f.finfo$1; fv = $f.fv; i = $f.i; n = $f.n; ncap = $f.ncap; new$1 = $f.new$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pv = $f.pv; pv$1 = $f.pv$1; pv$2 = $f.pv$2; saveAny = $f.saveAny; saveComment = $f.saveComment; saveData = $f.saveData; saveXML = $f.saveXML; saveXMLData = $f.saveXMLData; saveXMLIndex = $f.saveXMLIndex; savedOffset = $f.savedOffset; start = $f.start; strv = $f.strv; sv = $f.sv; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; t$4 = $f.t$4; t$5 = $f.t$5; t$6 = $f.t$6; tinfo = $f.tinfo; tok = $f.tok; tok$1 = $f.tok$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; val = $f.val; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		p = this;
		/* */ if (start === ptrType$9.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (start === ptrType$9.nil) { */ case 1:
			/* while (true) { */ case 3:
				t = [t];
				_r$6 = p.Token(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple = _r$6;
				tok = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
					return err;
				}
				_tuple$1 = $assertType(tok, StartElement, true);
				t[0] = $clone(_tuple$1[0], StartElement);
				ok = _tuple$1[1];
				if (ok) {
					start = t[0];
					/* break; */ $s = 4; continue;
				}
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 6:
			_r$7 = val.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			e = _r$7;
			if ((e.Kind() === 22) && !e.IsNil()) {
				val = e;
			}
		/* } */ case 7:
		/* */ if (val.Kind() === 22) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (val.Kind() === 22) { */ case 9:
			/* */ if (val.IsNil()) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (val.IsNil()) { */ case 11:
				_r$8 = val.Type().Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = reflect.New(_r$8); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = val.Set(_r$9); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			_r$10 = val.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			val = _r$10;
		/* } */ case 10:
		if (!(val.CanInterface())) { _v = false; $s = 19; continue s; }
		_r$11 = val.Type().Implements(unmarshalerType); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_v = _r$11; case 19:
		/* */ if (_v) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (_v) { */ case 17:
			_r$12 = val.Interface(); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = p.unmarshalInterface($assertType(_r$12, Unmarshaler), start); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$s = -1; return _r$13;
			return _r$13;
		/* } */ case 18:
		/* */ if (val.CanAddr()) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (val.CanAddr()) { */ case 23:
			pv = val.Addr();
			if (!(pv.CanInterface())) { _v$1 = false; $s = 27; continue s; }
			_r$14 = pv.Type().Implements(unmarshalerType); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_v$1 = _r$14; case 27:
			/* */ if (_v$1) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_v$1) { */ case 25:
				_r$15 = pv.Interface(); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = p.unmarshalInterface($assertType(_r$15, Unmarshaler), start); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				$s = -1; return _r$16;
				return _r$16;
			/* } */ case 26:
		/* } */ case 24:
		if (!(val.CanInterface())) { _v$2 = false; $s = 33; continue s; }
		_r$17 = val.Type().Implements(textUnmarshalerType); /* */ $s = 34; case 34: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_v$2 = _r$17; case 33:
		/* */ if (_v$2) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (_v$2) { */ case 31:
			_r$18 = val.Interface(); /* */ $s = 35; case 35: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_r$19 = p.unmarshalTextInterface($assertType(_r$18, encoding.TextUnmarshaler), start); /* */ $s = 36; case 36: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			$s = -1; return _r$19;
			return _r$19;
		/* } */ case 32:
		/* */ if (val.CanAddr()) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (val.CanAddr()) { */ case 37:
			pv$1 = val.Addr();
			if (!(pv$1.CanInterface())) { _v$3 = false; $s = 41; continue s; }
			_r$20 = pv$1.Type().Implements(textUnmarshalerType); /* */ $s = 42; case 42: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_v$3 = _r$20; case 41:
			/* */ if (_v$3) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (_v$3) { */ case 39:
				_r$21 = pv$1.Interface(); /* */ $s = 43; case 43: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$22 = p.unmarshalTextInterface($assertType(_r$21, encoding.TextUnmarshaler), start); /* */ $s = 44; case 44: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				$s = -1; return _r$22;
				return _r$22;
			/* } */ case 40:
		/* } */ case 38:
		data = sliceType.nil;
		saveData = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
		comment = sliceType.nil;
		saveComment = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
		saveXML = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
		saveXMLIndex = 0;
		saveXMLData = sliceType.nil;
		saveAny = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
		sv = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
		tinfo = ptrType$12.nil;
		err$1 = $ifaceNil;
			v = val;
			_1 = v.Kind();
			/* */ if (_1 === (20)) { $s = 46; continue; }
			/* */ if (_1 === (23)) { $s = 47; continue; }
			/* */ if ((_1 === (1)) || (_1 === (13)) || (_1 === (14)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (24))) { $s = 48; continue; }
			/* */ if (_1 === (25)) { $s = 49; continue; }
			/* */ $s = 50; continue;
			/* if (_1 === (20)) { */ case 46:
				_r$23 = p.Skip(); /* */ $s = 52; case 52: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				$s = -1; return _r$23;
				return _r$23;
			/* } else if (_1 === (23)) { */ case 47:
				typ = v.Type();
				_r$24 = typ.Elem(); /* */ $s = 55; case 55: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = _r$24.Kind(); /* */ $s = 56; case 56: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				/* */ if (_r$25 === 8) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (_r$25 === 8) { */ case 53:
					saveData = v;
					/* break; */ $s = 45; continue;
				/* } */ case 54:
				n = v.Len();
				/* */ if (n >= v.Cap()) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (n >= v.Cap()) { */ case 57:
					ncap = $imul(2, n);
					if (ncap < 4) {
						ncap = 4;
					}
					_r$26 = reflect.MakeSlice(typ, n, ncap); /* */ $s = 59; case 59: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					new$1 = _r$26;
					_r$27 = reflect.Copy(new$1, v); /* */ $s = 60; case 60: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_r$27;
					$r = v.Set(new$1); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 58:
				v.SetLen(n + 1 >> 0);
				_r$28 = v.Index(n); /* */ $s = 62; case 62: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = p.unmarshal(_r$28, start); /* */ $s = 63; case 63: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				err$2 = _r$29;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					v.SetLen(n);
					$s = -1; return err$2;
					return err$2;
				}
				$s = -1; return $ifaceNil;
				return $ifaceNil;
			/* } else if ((_1 === (1)) || (_1 === (13)) || (_1 === (14)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (24))) { */ case 48:
				saveData = v;
				$s = 51; continue;
			/* } else if (_1 === (25)) { */ case 49:
				typ$1 = v.Type();
				/* */ if ($interfaceIsEqual(typ$1, nameType)) { $s = 64; continue; }
				/* */ $s = 65; continue;
				/* if ($interfaceIsEqual(typ$1, nameType)) { */ case 64:
					_r$30 = reflect.ValueOf((x$1 = start.Name, new x$1.constructor.elem(x$1))); /* */ $s = 66; case 66: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					$r = v.Set(_r$30); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 45; continue;
				/* } */ case 65:
				sv = v;
				_r$31 = getTypeInfo(typ$1); /* */ $s = 68; case 68: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_tuple$2 = _r$31;
				tinfo = _tuple$2[0];
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
					return err$1;
				}
				/* */ if (!(tinfo.xmlname === ptrType$8.nil)) { $s = 69; continue; }
				/* */ $s = 70; continue;
				/* if (!(tinfo.xmlname === ptrType$8.nil)) { */ case 69:
					finfo = tinfo.xmlname;
					if (!(finfo.name === "") && !(finfo.name === start.Name.Local)) {
						$s = -1; return new UnmarshalError("expected element type <" + finfo.name + "> but have <" + start.Name.Local + ">");
						return new UnmarshalError("expected element type <" + finfo.name + "> but have <" + start.Name.Local + ">");
					}
					if (!(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) {
						e$1 = "expected element <" + finfo.name + "> in name space " + finfo.xmlns + " but have ";
						if (start.Name.Space === "") {
							e$1 = e$1 + ("no name space");
						} else {
							e$1 = e$1 + (start.Name.Space);
						}
						$s = -1; return new UnmarshalError(e$1);
						return new UnmarshalError(e$1);
					}
					_r$32 = finfo.value(sv); /* */ $s = 71; case 71: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					fv = _r$32;
					_r$33 = fv.Interface(); /* */ $s = 72; case 72: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_tuple$3 = $assertType(_r$33, Name, true);
					ok$1 = _tuple$3[1];
					/* */ if (ok$1) { $s = 73; continue; }
					/* */ $s = 74; continue;
					/* if (ok$1) { */ case 73:
						_r$34 = reflect.ValueOf((x$2 = start.Name, new x$2.constructor.elem(x$2))); /* */ $s = 75; case 75: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
						$r = fv.Set(_r$34); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 74:
				/* } */ case 70:
				_ref = tinfo.fields;
				_i = 0;
				/* while (true) { */ case 77:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 78; continue; }
					i = _i;
					finfo$1 = (x$3 = tinfo.fields, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i]));
						_2 = finfo$1.flags & 127;
						/* */ if (_2 === (2)) { $s = 80; continue; }
						/* */ if ((_2 === (4)) || (_2 === (8))) { $s = 81; continue; }
						/* */ if (_2 === (32)) { $s = 82; continue; }
						/* */ if ((_2 === (64)) || (_2 === (65))) { $s = 83; continue; }
						/* */ if (_2 === (16)) { $s = 84; continue; }
						/* */ $s = 85; continue;
						/* if (_2 === (2)) { */ case 80:
							_r$35 = finfo$1.value(sv); /* */ $s = 86; case 86: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
							strv = _r$35;
							_ref$1 = start.Attr;
							_i$1 = 0;
							/* while (true) { */ case 87:
								/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 88; continue; }
								a = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Attr);
								/* */ if (a.Name.Local === finfo$1.name && (finfo$1.xmlns === "" || finfo$1.xmlns === a.Name.Space)) { $s = 89; continue; }
								/* */ $s = 90; continue;
								/* if (a.Name.Local === finfo$1.name && (finfo$1.xmlns === "" || finfo$1.xmlns === a.Name.Space)) { */ case 89:
									_r$36 = p.unmarshalAttr(strv, a); /* */ $s = 91; case 91: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
									err$3 = _r$36;
									if (!($interfaceIsEqual(err$3, $ifaceNil))) {
										$s = -1; return err$3;
										return err$3;
									}
									/* break; */ $s = 88; continue;
								/* } */ case 90:
								_i$1++;
							/* } */ $s = 87; continue; case 88:
							$s = 85; continue;
						/* } else if ((_2 === (4)) || (_2 === (8))) { */ case 81:
							/* */ if (!saveData.IsValid()) { $s = 92; continue; }
							/* */ $s = 93; continue;
							/* if (!saveData.IsValid()) { */ case 92:
								_r$37 = finfo$1.value(sv); /* */ $s = 94; case 94: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
								saveData = _r$37;
							/* } */ case 93:
							$s = 85; continue;
						/* } else if (_2 === (32)) { */ case 82:
							/* */ if (!saveComment.IsValid()) { $s = 95; continue; }
							/* */ $s = 96; continue;
							/* if (!saveComment.IsValid()) { */ case 95:
								_r$38 = finfo$1.value(sv); /* */ $s = 97; case 97: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
								saveComment = _r$38;
							/* } */ case 96:
							$s = 85; continue;
						/* } else if ((_2 === (64)) || (_2 === (65))) { */ case 83:
							/* */ if (!saveAny.IsValid()) { $s = 98; continue; }
							/* */ $s = 99; continue;
							/* if (!saveAny.IsValid()) { */ case 98:
								_r$39 = finfo$1.value(sv); /* */ $s = 100; case 100: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
								saveAny = _r$39;
							/* } */ case 99:
							$s = 85; continue;
						/* } else if (_2 === (16)) { */ case 84:
							/* */ if (!saveXML.IsValid()) { $s = 101; continue; }
							/* */ $s = 102; continue;
							/* if (!saveXML.IsValid()) { */ case 101:
								_r$40 = finfo$1.value(sv); /* */ $s = 103; case 103: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
								saveXML = _r$40;
								if (p.saved === ptrType$13.nil) {
									saveXMLIndex = 0;
									p.saved = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
								} else {
									saveXMLIndex = p.savedOffset();
								}
							/* } */ case 102:
						/* } */ case 85:
					case 79:
					_i++;
				/* } */ $s = 77; continue; case 78:
				$s = 51; continue;
			/* } else { */ case 50:
				_r$41 = v.Type().String(); /* */ $s = 104; case 104: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				_r$42 = errors.New("unknown type " + _r$41); /* */ $s = 105; case 105: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				$s = -1; return _r$42;
				return _r$42;
			/* } */ case 51:
		case 45:
		/* while (true) { */ case 106:
			t$1 = [t$1];
			savedOffset = 0;
			if (saveXML.IsValid()) {
				savedOffset = p.savedOffset();
			}
			_r$43 = p.Token(); /* */ $s = 108; case 108: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
			_tuple$4 = _r$43;
			tok$1 = _tuple$4[0];
			err$4 = _tuple$4[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				$s = -1; return err$4;
				return err$4;
			}
			_ref$2 = tok$1;
			/* */ if ($assertType(_ref$2, StartElement, true)[1]) { $s = 109; continue; }
			/* */ if ($assertType(_ref$2, EndElement, true)[1]) { $s = 110; continue; }
			/* */ if ($assertType(_ref$2, CharData, true)[1]) { $s = 111; continue; }
			/* */ if ($assertType(_ref$2, Comment, true)[1]) { $s = 112; continue; }
			/* */ $s = 113; continue;
			/* if ($assertType(_ref$2, StartElement, true)[1]) { */ case 109:
				t$1[0] = $clone(_ref$2.$val, StartElement);
				consumed = false;
				/* */ if (sv.IsValid()) { $s = 114; continue; }
				/* */ $s = 115; continue;
				/* if (sv.IsValid()) { */ case 114:
					_r$44 = p.unmarshalPath(tinfo, sv, sliceType$3.nil, t$1[0]); /* */ $s = 116; case 116: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					_tuple$5 = _r$44;
					consumed = _tuple$5[0];
					err$4 = _tuple$5[1];
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						$s = -1; return err$4;
						return err$4;
					}
					/* */ if (!consumed && saveAny.IsValid()) { $s = 117; continue; }
					/* */ $s = 118; continue;
					/* if (!consumed && saveAny.IsValid()) { */ case 117:
						consumed = true;
						_r$45 = p.unmarshal(saveAny, t$1[0]); /* */ $s = 119; case 119: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
						err$5 = _r$45;
						if (!($interfaceIsEqual(err$5, $ifaceNil))) {
							$s = -1; return err$5;
							return err$5;
						}
					/* } */ case 118:
				/* } */ case 115:
				/* */ if (!consumed) { $s = 120; continue; }
				/* */ $s = 121; continue;
				/* if (!consumed) { */ case 120:
					_r$46 = p.Skip(); /* */ $s = 122; case 122: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
					err$6 = _r$46;
					if (!($interfaceIsEqual(err$6, $ifaceNil))) {
						$s = -1; return err$6;
						return err$6;
					}
				/* } */ case 121:
				$s = 113; continue;
			/* } else if ($assertType(_ref$2, EndElement, true)[1]) { */ case 110:
				t$2 = $clone(_ref$2.$val, EndElement);
				if (saveXML.IsValid()) {
					saveXMLData = $subslice(p.saved.Bytes(), saveXMLIndex, savedOffset);
					if (saveXMLIndex === 0) {
						p.saved = ptrType$13.nil;
					}
				}
				/* break Loop; */ $s = 107; continue s;
				$s = 113; continue;
			/* } else if ($assertType(_ref$2, CharData, true)[1]) { */ case 111:
				t$3 = _ref$2.$val;
				if (saveData.IsValid()) {
					data = $appendSlice(data, $subslice(new sliceType(t$3.$array), t$3.$offset, t$3.$offset + t$3.$length));
				}
				$s = 113; continue;
			/* } else if ($assertType(_ref$2, Comment, true)[1]) { */ case 112:
				t$4 = _ref$2.$val;
				if (saveComment.IsValid()) {
					comment = $appendSlice(comment, $subslice(new sliceType(t$4.$array), t$4.$offset, t$4.$offset + t$4.$length));
				}
			/* } */ case 113:
		/* } */ $s = 106; continue; case 107:
		if (!(saveData.IsValid() && saveData.CanInterface())) { _v$4 = false; $s = 125; continue s; }
		_r$47 = saveData.Type().Implements(textUnmarshalerType); /* */ $s = 126; case 126: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
		_v$4 = _r$47; case 125:
		/* */ if (_v$4) { $s = 123; continue; }
		/* */ $s = 124; continue;
		/* if (_v$4) { */ case 123:
			_r$48 = saveData.Interface(); /* */ $s = 127; case 127: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			_r$49 = $assertType(_r$48, encoding.TextUnmarshaler).UnmarshalText(data); /* */ $s = 128; case 128: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
			err$7 = _r$49;
			if (!($interfaceIsEqual(err$7, $ifaceNil))) {
				$s = -1; return err$7;
				return err$7;
			}
			saveData = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
		/* } */ case 124:
		/* */ if (saveData.IsValid() && saveData.CanAddr()) { $s = 129; continue; }
		/* */ $s = 130; continue;
		/* if (saveData.IsValid() && saveData.CanAddr()) { */ case 129:
			pv$2 = saveData.Addr();
			if (!(pv$2.CanInterface())) { _v$5 = false; $s = 133; continue s; }
			_r$50 = pv$2.Type().Implements(textUnmarshalerType); /* */ $s = 134; case 134: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
			_v$5 = _r$50; case 133:
			/* */ if (_v$5) { $s = 131; continue; }
			/* */ $s = 132; continue;
			/* if (_v$5) { */ case 131:
				_r$51 = pv$2.Interface(); /* */ $s = 135; case 135: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
				_r$52 = $assertType(_r$51, encoding.TextUnmarshaler).UnmarshalText(data); /* */ $s = 136; case 136: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
				err$8 = _r$52;
				if (!($interfaceIsEqual(err$8, $ifaceNil))) {
					$s = -1; return err$8;
					return err$8;
				}
				saveData = new reflect.Value.ptr(ptrType$11.nil, 0, 0);
			/* } */ case 132:
		/* } */ case 130:
		_r$53 = copyValue(saveData, data); /* */ $s = 137; case 137: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
		err$9 = _r$53;
		if (!($interfaceIsEqual(err$9, $ifaceNil))) {
			$s = -1; return err$9;
			return err$9;
		}
			t$5 = saveComment;
			_3 = t$5.Kind();
			/* */ if (_3 === (24)) { $s = 139; continue; }
			/* */ if (_3 === (23)) { $s = 140; continue; }
			/* */ $s = 141; continue;
			/* if (_3 === (24)) { */ case 139:
				t$5.SetString($bytesToString(comment));
				$s = 141; continue;
			/* } else if (_3 === (23)) { */ case 140:
				_r$54 = reflect.ValueOf(comment); /* */ $s = 142; case 142: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
				$r = t$5.Set(_r$54); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 141:
		case 138:
			t$6 = saveXML;
			_4 = t$6.Kind();
			/* */ if (_4 === (24)) { $s = 145; continue; }
			/* */ if (_4 === (23)) { $s = 146; continue; }
			/* */ $s = 147; continue;
			/* if (_4 === (24)) { */ case 145:
				t$6.SetString($bytesToString(saveXMLData));
				$s = 147; continue;
			/* } else if (_4 === (23)) { */ case 146:
				_r$55 = reflect.ValueOf(saveXMLData); /* */ $s = 148; case 148: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
				$r = t$6.Set(_r$55); /* */ $s = 149; case 149: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 147:
		case 144:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshal }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$54 = _r$54; $f._r$55 = _r$55; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f.a = a; $f.comment = comment; $f.consumed = consumed; $f.data = data; $f.e = e; $f.e$1 = e$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.finfo = finfo; $f.finfo$1 = finfo$1; $f.fv = fv; $f.i = i; $f.n = n; $f.ncap = ncap; $f.new$1 = new$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pv = pv; $f.pv$1 = pv$1; $f.pv$2 = pv$2; $f.saveAny = saveAny; $f.saveComment = saveComment; $f.saveData = saveData; $f.saveXML = saveXML; $f.saveXMLData = saveXMLData; $f.saveXMLIndex = saveXMLIndex; $f.savedOffset = savedOffset; $f.start = start; $f.strv = strv; $f.sv = sv; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.t$4 = t$4; $f.t$5 = t$5; $f.t$6 = t$6; $f.tinfo = tinfo; $f.tok = tok; $f.tok$1 = tok$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.val = val; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshal = function(val, start) { return this.$val.unmarshal(val, start); };
	copyValue = function(dst, src) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, dst, dst0, err, err$1, err$2, err$3, err$4, ftmp, itmp, src, utmp, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; dst = $f.dst; dst0 = $f.dst0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; ftmp = $f.ftmp; itmp = $f.itmp; src = $f.src; utmp = $f.utmp; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		dst = dst;
		dst0 = dst;
		/* */ if (dst.Kind() === 22) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dst.Kind() === 22) { */ case 1:
			/* */ if (dst.IsNil()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (dst.IsNil()) { */ case 3:
				_r$6 = dst.Type().Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = reflect.New(_r$6); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = dst.Set(_r$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_r$8 = dst.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			dst = _r$8;
		/* } */ case 2:
			_1 = dst.Kind();
			/* */ if (_1 === (0)) { $s = 10; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 11; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 12; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 13; continue; }
			/* */ if (_1 === (1)) { $s = 14; continue; }
			/* */ if (_1 === (24)) { $s = 15; continue; }
			/* */ if (_1 === (23)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_1 === (0)) { */ case 10:
				$s = 18; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 11:
				_arg = $bytesToString(src);
				_r$9 = dst.Type().Bits(); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$1 = _r$9;
				_r$10 = strconv.ParseInt(_arg, 10, _arg$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple = _r$10;
				itmp = _tuple[0];
				err$1 = _tuple[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					err = err$1;
					$s = -1; return err;
					return err;
				}
				dst.SetInt(itmp);
				$s = 18; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 12:
				_arg$2 = $bytesToString(src);
				_r$11 = dst.Type().Bits(); /* */ $s = 21; case 21: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_arg$3 = _r$11;
				_r$12 = strconv.ParseUint(_arg$2, 10, _arg$3); /* */ $s = 22; case 22: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$1 = _r$12;
				utmp = _tuple$1[0];
				err$2 = _tuple$1[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					err = err$2;
					$s = -1; return err;
					return err;
				}
				dst.SetUint(utmp);
				$s = 18; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 13:
				_arg$4 = $bytesToString(src);
				_r$13 = dst.Type().Bits(); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$5 = _r$13;
				_r$14 = strconv.ParseFloat(_arg$4, _arg$5); /* */ $s = 24; case 24: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_tuple$2 = _r$14;
				ftmp = _tuple$2[0];
				err$3 = _tuple$2[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					err = err$3;
					$s = -1; return err;
					return err;
				}
				dst.SetFloat(ftmp);
				$s = 18; continue;
			/* } else if (_1 === (1)) { */ case 14:
				_r$15 = strings.TrimSpace($bytesToString(src)); /* */ $s = 25; case 25: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = strconv.ParseBool(_r$15); /* */ $s = 26; case 26: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_tuple$3 = _r$16;
				value = _tuple$3[0];
				err$4 = _tuple$3[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					err = err$4;
					$s = -1; return err;
					return err;
				}
				dst.SetBool(value);
				$s = 18; continue;
			/* } else if (_1 === (24)) { */ case 15:
				dst.SetString($bytesToString(src));
				$s = 18; continue;
			/* } else if (_1 === (23)) { */ case 16:
				if (src.$length === 0) {
					src = new sliceType([]);
				}
				$r = dst.SetBytes(src); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				_r$17 = dst0.Type().String(); /* */ $s = 28; case 28: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = errors.New("cannot unmarshal into " + _r$17); /* */ $s = 29; case 29: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				err = _r$18;
				$s = -1; return err;
				return err;
			/* } */ case 18:
		case 9:
		err = $ifaceNil;
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.dst = dst; $f.dst0 = dst0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.ftmp = ftmp; $f.itmp = itmp; $f.src = src; $f.utmp = utmp; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.ptr.prototype.unmarshalPath = function(tinfo, sv, parents, start) {
		var $ptr, _i, _i$1, _r$10, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, consumed, consumed2, err, err$1, err$2, finfo, i, j, p, parents, recurse, start, sv, t, t$1, tinfo, tok, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; consumed = $f.consumed; consumed2 = $f.consumed2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; finfo = $f.finfo; i = $f.i; j = $f.j; p = $f.p; parents = $f.parents; recurse = $f.recurse; start = $f.start; sv = $f.sv; t = $f.t; t$1 = $f.t$1; tinfo = $f.tinfo; tok = $f.tok; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		consumed = false;
		err = $ifaceNil;
		sv = sv;
		p = this;
		recurse = false;
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			finfo = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			/* */ if (((finfo.flags & 1) === 0) || finfo.parents.$length < parents.$length || !(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((finfo.flags & 1) === 0) || finfo.parents.$length < parents.$length || !(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_ref$1 = parents;
			_i$1 = 0;
			/* while (true) { */ case 5:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
				j = _i$1;
				if (!(((j < 0 || j >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + j]) === (x$2 = finfo.parents, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])))) {
					_i++;
					/* continue Loop; */ $s = 1; continue s;
				}
				_i$1++;
			/* } */ $s = 5; continue; case 6:
			/* */ if ((finfo.parents.$length === parents.$length) && finfo.name === start.Name.Local) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((finfo.parents.$length === parents.$length) && finfo.name === start.Name.Local) { */ case 7:
				_tmp = true;
				_r$6 = finfo.value(sv); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = p.unmarshal(_r$6, start); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tmp$1 = _r$7;
				consumed = _tmp;
				err = _tmp$1;
				$s = -1; return [consumed, err];
				return [consumed, err];
			/* } */ case 8:
			if (finfo.parents.$length > parents.$length && (x$3 = finfo.parents, x$4 = parents.$length, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])) === start.Name.Local) {
				recurse = true;
				parents = $subslice(finfo.parents, 0, (parents.$length + 1 >> 0));
				/* break; */ $s = 2; continue;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (!recurse) {
			_tmp$2 = false;
			_tmp$3 = $ifaceNil;
			consumed = _tmp$2;
			err = _tmp$3;
			$s = -1; return [consumed, err];
			return [consumed, err];
		}
		/* while (true) { */ case 11:
			t = [t];
			tok = $ifaceNil;
			_r$8 = p.Token(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple = _r$8;
			tok = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = true;
				_tmp$5 = err;
				consumed = _tmp$4;
				err = _tmp$5;
				$s = -1; return [consumed, err];
				return [consumed, err];
			}
			_ref$2 = tok;
			/* */ if ($assertType(_ref$2, StartElement, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref$2, EndElement, true)[1]) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ($assertType(_ref$2, StartElement, true)[1]) { */ case 14:
				t[0] = $clone(_ref$2.$val, StartElement);
				_r$9 = p.unmarshalPath(tinfo, sv, parents, t[0]); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$1 = _r$9;
				consumed2 = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$6 = true;
					_tmp$7 = err$1;
					consumed = _tmp$6;
					err = _tmp$7;
					$s = -1; return [consumed, err];
					return [consumed, err];
				}
				/* */ if (!consumed2) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!consumed2) { */ case 18:
					_r$10 = p.Skip(); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$2 = _r$10;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						_tmp$8 = true;
						_tmp$9 = err$2;
						consumed = _tmp$8;
						err = _tmp$9;
						$s = -1; return [consumed, err];
						return [consumed, err];
					}
				/* } */ case 19:
				$s = 16; continue;
			/* } else if ($assertType(_ref$2, EndElement, true)[1]) { */ case 15:
				t$1 = $clone(_ref$2.$val, EndElement);
				_tmp$10 = true;
				_tmp$11 = $ifaceNil;
				consumed = _tmp$10;
				err = _tmp$11;
				$s = -1; return [consumed, err];
				return [consumed, err];
			/* } */ case 16:
		/* } */ $s = 11; continue; case 12:
		$s = -1; return [consumed, err];
		return [consumed, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.unmarshalPath }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.consumed = consumed; $f.consumed2 = consumed2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.finfo = finfo; $f.i = i; $f.j = j; $f.p = p; $f.parents = parents; $f.recurse = recurse; $f.start = start; $f.sv = sv; $f.t = t; $f.t$1 = t$1; $f.tinfo = tinfo; $f.tok = tok; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.unmarshalPath = function(tinfo, sv, parents, start) { return this.$val.unmarshalPath(tinfo, sv, parents, start); };
	Decoder.ptr.prototype.Skip = function() {
		var $ptr, _r$6, _r$7, _ref, _tuple, d, err, err$1, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; err = $f.err; err$1 = $f.err$1; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r$6 = d.Token(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			tok = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			_ref = tok;
			/* */ if ($assertType(_ref, StartElement, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, EndElement, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref, StartElement, true)[1]) { */ case 4:
				_r$7 = d.Skip(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err$1 = _r$7;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
					return err$1;
				}
				$s = 6; continue;
			/* } else if ($assertType(_ref, EndElement, true)[1]) { */ case 5:
				$s = -1; return $ifaceNil;
				return $ifaceNil;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Skip }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Skip = function() { return this.$val.Skip(); };
	getTypeInfo = function(typ) {
		var $ptr, _entry, _i, _key, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, err, err$1, err$2, err$3, f, finfo, finfo$1, i, inner, n, ok, t, tinfo, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; finfo = $f.finfo; finfo$1 = $f.finfo$1; i = $f.i; inner = $f.inner; n = $f.n; ok = $f.ok; t = $f.t; tinfo = $f.tinfo; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = tinfoLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = tinfoMap[reflect.Type.keyFor(typ)], _entry !== undefined ? [_entry.v, true] : [ptrType$12.nil, false]);
		tinfo = _tuple[0];
		ok = _tuple[1];
		$r = tinfoLock.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (ok) {
			$s = -1; return [tinfo, $ifaceNil];
			return [tinfo, $ifaceNil];
		}
		tinfo = new typeInfo.ptr(ptrType$8.nil, sliceType$7.nil);
		_r$6 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if ((_r$6 === 25) && !($interfaceIsEqual(typ, nameType))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((_r$6 === 25) && !($interfaceIsEqual(typ, nameType))) { */ case 3:
			_r$7 = typ.NumField(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			n = _r$7;
			i = 0;
			/* while (true) { */ case 7:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 8; continue; }
				f = [f];
				finfo = [finfo];
				_r$8 = typ.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				f[0] = $clone(_r$8, reflect.StructField);
				/* */ if ((!(f[0].PkgPath === "") && !f[0].Anonymous) || new reflect.StructTag(f[0].Tag).Get("xml") === "-") { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ((!(f[0].PkgPath === "") && !f[0].Anonymous) || new reflect.StructTag(f[0].Tag).Get("xml") === "-") { */ case 10:
					i = i + (1) >> 0;
					/* continue; */ $s = 7; continue;
				/* } */ case 11:
				/* */ if (f[0].Anonymous) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (f[0].Anonymous) { */ case 12:
					t = f[0].Type;
					_r$9 = t.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					/* */ if (_r$9 === 22) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$9 === 22) { */ case 14:
						_r$10 = t.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						t = _r$10;
					/* } */ case 15:
					_r$11 = t.Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (_r$11 === 25) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (_r$11 === 25) { */ case 18:
						_r$12 = getTypeInfo(t); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_tuple$1 = _r$12;
						inner = _tuple$1[0];
						err = _tuple$1[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							$s = -1; return [ptrType$12.nil, err];
							return [ptrType$12.nil, err];
						}
						if (tinfo.xmlname === ptrType$8.nil) {
							tinfo.xmlname = inner.xmlname;
						}
						_ref = inner.fields;
						_i = 0;
						/* while (true) { */ case 22:
							/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 23; continue; }
							finfo[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldInfo);
							finfo[0].idx = $appendSlice(new sliceType$8([i]), finfo[0].idx);
							_r$13 = addFieldInfo(typ, tinfo, finfo[0]); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							err$1 = _r$13;
							if (!($interfaceIsEqual(err$1, $ifaceNil))) {
								$s = -1; return [ptrType$12.nil, err$1];
								return [ptrType$12.nil, err$1];
							}
							_i++;
						/* } */ $s = 22; continue; case 23:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 19:
				/* } */ case 13:
				_r$14 = structFieldInfo(typ, f[0]); /* */ $s = 25; case 25: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_tuple$2 = _r$14;
				finfo$1 = _tuple$2[0];
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return [ptrType$12.nil, err$2];
					return [ptrType$12.nil, err$2];
				}
				/* */ if (f[0].Name === "XMLName") { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (f[0].Name === "XMLName") { */ case 26:
					tinfo.xmlname = finfo$1;
					i = i + (1) >> 0;
					/* continue; */ $s = 7; continue;
				/* } */ case 27:
				_r$15 = addFieldInfo(typ, tinfo, finfo$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				err$3 = _r$15;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return [ptrType$12.nil, err$3];
					return [ptrType$12.nil, err$3];
				}
				i = i + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 4:
		$r = tinfoLock.Lock(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = typ; (tinfoMap || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: tinfo };
		$r = tinfoLock.Unlock(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [tinfo, $ifaceNil];
		return [tinfo, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getTypeInfo }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.finfo = finfo; $f.finfo$1 = finfo$1; $f.i = i; $f.inner = inner; $f.n = n; $f.ok = ok; $f.t = t; $f.tinfo = tinfo; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	structFieldInfo = function(typ, f) {
		var $ptr, _1, _2, _i, _r$10, _r$11, _r$12, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, f, finfo, flag, ftyp, i, mode, parents, tag, tokens, typ, valid, x$1, x$2, xmlname, xmlname$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; f = $f.f; finfo = $f.finfo; flag = $f.flag; ftyp = $f.ftyp; i = $f.i; mode = $f.mode; parents = $f.parents; tag = $f.tag; tokens = $f.tokens; typ = $f.typ; valid = $f.valid; x$1 = $f.x$1; x$2 = $f.x$2; xmlname = $f.xmlname; xmlname$1 = $f.xmlname$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		finfo = new fieldInfo.ptr(f.Index, "", "", 0, sliceType$3.nil);
		tag = new reflect.StructTag(f.Tag).Get("xml");
		i = strings.Index(tag, " ");
		if (i >= 0) {
			_tmp = $substring(tag, 0, i);
			_tmp$1 = $substring(tag, (i + 1 >> 0));
			finfo.xmlns = _tmp;
			tag = _tmp$1;
		}
		tokens = strings.Split(tag, ",");
		/* */ if (tokens.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (tokens.$length === 1) { */ case 1:
			finfo.flags = 1;
			$s = 3; continue;
		/* } else { */ case 2:
			tag = (0 >= tokens.$length ? $throwRuntimeError("index out of range") : tokens.$array[tokens.$offset + 0]);
			_ref = $subslice(tokens, 1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_1 = flag;
				if (_1 === ("attr")) {
					finfo.flags = finfo.flags | (2);
				} else if (_1 === ("cdata")) {
					finfo.flags = finfo.flags | (4);
				} else if (_1 === ("chardata")) {
					finfo.flags = finfo.flags | (8);
				} else if (_1 === ("innerxml")) {
					finfo.flags = finfo.flags | (16);
				} else if (_1 === ("comment")) {
					finfo.flags = finfo.flags | (32);
				} else if (_1 === ("any")) {
					finfo.flags = finfo.flags | (64);
				} else if (_1 === ("omitempty")) {
					finfo.flags = finfo.flags | (128);
				}
				_i++;
			}
			valid = true;
			mode = finfo.flags & 127;
			_2 = mode;
			if (_2 === (0)) {
				finfo.flags = finfo.flags | (1);
			} else if ((_2 === (2)) || (_2 === (4)) || (_2 === (8)) || (_2 === (16)) || (_2 === (32)) || (_2 === (64))) {
				if (f.Name === "XMLName" || !(tag === "") && !((mode === 2))) {
					valid = false;
				}
			} else {
				valid = false;
			}
			if ((finfo.flags & 127) === 64) {
				finfo.flags = finfo.flags | (1);
			}
			if (!(((finfo.flags & 128) === 0)) && ((finfo.flags & 3) === 0)) {
				valid = false;
			}
			/* */ if (!valid) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!valid) { */ case 4:
				_r$6 = fmt.Errorf("xml: invalid tag in field %s of type %s: %q", new sliceType$5([new $String(f.Name), typ, new $String(new reflect.StructTag(f.Tag).Get("xml"))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$8.nil, _r$6];
				return [ptrType$8.nil, _r$6];
			/* } */ case 5:
		/* } */ case 3:
		/* */ if (!(finfo.xmlns === "") && tag === "") { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(finfo.xmlns === "") && tag === "") { */ case 7:
			_r$7 = fmt.Errorf("xml: namespace without name in field %s of type %s: %q", new sliceType$5([new $String(f.Name), typ, new $String(new reflect.StructTag(f.Tag).Get("xml"))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$8.nil, _r$7];
			return [ptrType$8.nil, _r$7];
		/* } */ case 8:
		if (f.Name === "XMLName") {
			finfo.name = tag;
			$s = -1; return [finfo, $ifaceNil];
			return [finfo, $ifaceNil];
		}
		/* */ if (tag === "") { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (tag === "") { */ case 10:
			_r$8 = lookupXMLName(f.Type); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			xmlname = _r$8;
			if (!(xmlname === ptrType$8.nil)) {
				_tmp$2 = xmlname.xmlns;
				_tmp$3 = xmlname.name;
				finfo.xmlns = _tmp$2;
				finfo.name = _tmp$3;
			} else {
				finfo.name = f.Name;
			}
			$s = -1; return [finfo, $ifaceNil];
			return [finfo, $ifaceNil];
		/* } */ case 11:
		parents = strings.Split(tag, ">");
		if ((0 >= parents.$length ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + 0]) === "") {
			(0 >= parents.$length ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + 0] = f.Name);
		}
		/* */ if ((x$1 = parents.$length - 1 >> 0, ((x$1 < 0 || x$1 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$1])) === "") { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if ((x$1 = parents.$length - 1 >> 0, ((x$1 < 0 || x$1 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$1])) === "") { */ case 13:
			_r$9 = fmt.Errorf("xml: trailing '>' in field %s of type %s", new sliceType$5([new $String(f.Name), typ])); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$8.nil, _r$9];
			return [ptrType$8.nil, _r$9];
		/* } */ case 14:
		finfo.name = (x$2 = parents.$length - 1 >> 0, ((x$2 < 0 || x$2 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$2]));
		/* */ if (parents.$length > 1) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (parents.$length > 1) { */ case 16:
			/* */ if (((finfo.flags & 1)) === 0) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (((finfo.flags & 1)) === 0) { */ case 18:
				_r$10 = fmt.Errorf("xml: %s chain not valid with %s flag", new sliceType$5([new $String(tag), new $String(strings.Join($subslice(tokens, 1), ","))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$8.nil, _r$10];
				return [ptrType$8.nil, _r$10];
			/* } */ case 19:
			finfo.parents = $subslice(parents, 0, (parents.$length - 1 >> 0));
		/* } */ case 17:
		/* */ if (!(((finfo.flags & 1) === 0))) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (!(((finfo.flags & 1) === 0))) { */ case 21:
			ftyp = f.Type;
			_r$11 = lookupXMLName(ftyp); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			xmlname$1 = _r$11;
			/* */ if (!(xmlname$1 === ptrType$8.nil) && !(xmlname$1.name === finfo.name)) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!(xmlname$1 === ptrType$8.nil) && !(xmlname$1.name === finfo.name)) { */ case 24:
				_r$12 = fmt.Errorf("xml: name %q in tag of %s.%s conflicts with name %q in %s.XMLName", new sliceType$5([new $String(finfo.name), typ, new $String(f.Name), new $String(xmlname$1.name), ftyp])); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$8.nil, _r$12];
				return [ptrType$8.nil, _r$12];
			/* } */ case 25:
		/* } */ case 22:
		$s = -1; return [finfo, $ifaceNil];
		return [finfo, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structFieldInfo }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.f = f; $f.finfo = finfo; $f.flag = flag; $f.ftyp = ftyp; $f.i = i; $f.mode = mode; $f.parents = parents; $f.tag = tag; $f.tokens = tokens; $f.typ = typ; $f.valid = valid; $f.x$1 = x$1; $f.x$2 = x$2; $f.xmlname = xmlname; $f.xmlname$1 = xmlname$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	lookupXMLName = function(typ) {
		var $ptr, _r$10, _r$11, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, err, f, finfo, i, n, typ, xmlname, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; finfo = $f.finfo; i = $f.i; n = $f.n; typ = $f.typ; xmlname = $f.xmlname; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		xmlname = ptrType$8.nil;
		/* while (true) { */ case 1:
			_r$6 = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* if (!(_r$6 === 22)) { break; } */ if(!(_r$6 === 22)) { $s = 2; continue; }
			_r$7 = typ.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			typ = _r$7;
		/* } */ $s = 1; continue; case 2:
		_r$8 = typ.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (!((_r$8 === 25))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((_r$8 === 25))) { */ case 5:
			xmlname = ptrType$8.nil;
			$s = -1; return xmlname;
			return xmlname;
		/* } */ case 6:
		_tmp = 0;
		_r$9 = typ.NumField(); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_tmp$1 = _r$9;
		i = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 10; continue; }
			f = [f];
			_r$10 = typ.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			f[0] = $clone(_r$10, reflect.StructField);
			/* */ if (!(f[0].Name === "XMLName")) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!(f[0].Name === "XMLName")) { */ case 12:
				i = i + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			_r$11 = structFieldInfo(typ, f[0]); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple = _r$11;
			finfo = _tuple[0];
			err = _tuple[1];
			if (!(finfo.name === "") && $interfaceIsEqual(err, $ifaceNil)) {
				xmlname = finfo;
				$s = -1; return xmlname;
				return xmlname;
			}
			/* break; */ $s = 10; continue;
		/* } */ $s = 9; continue; case 10:
		xmlname = ptrType$8.nil;
		$s = -1; return xmlname;
		return xmlname;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lookupXMLName }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.finfo = finfo; $f.i = i; $f.n = n; $f.typ = typ; $f.xmlname = xmlname; $f.$s = $s; $f.$r = $r; return $f;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a <= b) {
			return a;
		}
		return b;
	};
	addFieldInfo = function(typ, tinfo, newf) {
		var $ptr, _i, _i$1, _i$2, _r$6, _r$7, _ref, _ref$1, _ref$2, c, conflicts, f1, f2, i, i$1, i$2, i$3, minl, newf, oldf, oldf$1, p, tinfo, typ, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; c = $f.c; conflicts = $f.conflicts; f1 = $f.f1; f2 = $f.f2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; minl = $f.minl; newf = $f.newf; oldf = $f.oldf; oldf$1 = $f.oldf$1; p = $f.p; tinfo = $f.tinfo; typ = $f.typ; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conflicts = sliceType$8.nil;
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			oldf = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(((oldf.flags & 127) === (newf.flags & 127)))) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!(oldf.xmlns === "") && !(newf.xmlns === "") && !(oldf.xmlns === newf.xmlns)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			minl = min(newf.parents.$length, oldf.parents.$length);
			p = 0;
			while (true) {
				if (!(p < minl)) { break; }
				if (!((x$2 = oldf.parents, ((p < 0 || p >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + p])) === (x$3 = newf.parents, ((p < 0 || p >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + p])))) {
					_i++;
					/* continue Loop; */ $s = 1; continue s;
				}
				p = p + (1) >> 0;
			}
			if (oldf.parents.$length > newf.parents.$length) {
				if ((x$4 = oldf.parents, x$5 = newf.parents.$length, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === newf.name) {
					conflicts = $append(conflicts, i);
				}
			} else if (oldf.parents.$length < newf.parents.$length) {
				if ((x$6 = newf.parents, x$7 = oldf.parents.$length, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7])) === oldf.name) {
					conflicts = $append(conflicts, i);
				}
			} else {
				if (newf.name === oldf.name) {
					conflicts = $append(conflicts, i);
				}
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (conflicts === sliceType$8.nil) {
			tinfo.fields = $append(tinfo.fields, newf);
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		_ref$1 = conflicts;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if ((x$8 = tinfo.fields, ((i$1 < 0 || i$1 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i$1])).idx.$length < newf.idx.$length) {
				$s = -1; return $ifaceNil;
				return $ifaceNil;
			}
			_i$1++;
		}
		_ref$2 = conflicts;
		_i$2 = 0;
		/* while (true) { */ case 3:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 4; continue; }
			i$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			oldf$1 = (x$9 = tinfo.fields, ((i$2 < 0 || i$2 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i$2]));
			/* */ if (oldf$1.idx.$length === newf.idx.$length) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (oldf$1.idx.$length === newf.idx.$length) { */ case 5:
				_r$6 = typ.FieldByIndex(oldf$1.idx); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				f1 = $clone(_r$6, reflect.StructField);
				_r$7 = typ.FieldByIndex(newf.idx); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				f2 = $clone(_r$7, reflect.StructField);
				$s = -1; return new TagPathError.ptr(typ, f1.Name, new reflect.StructTag(f1.Tag).Get("xml"), f2.Name, new reflect.StructTag(f2.Tag).Get("xml"));
				return new TagPathError.ptr(typ, f1.Name, new reflect.StructTag(f1.Tag).Get("xml"), f2.Name, new reflect.StructTag(f2.Tag).Get("xml"));
			/* } */ case 6:
			_i$2++;
		/* } */ $s = 3; continue; case 4:
		c = conflicts.$length - 1 >> 0;
		while (true) {
			if (!(c >= 0)) { break; }
			i$3 = ((c < 0 || c >= conflicts.$length) ? $throwRuntimeError("index out of range") : conflicts.$array[conflicts.$offset + c]);
			$copySlice($subslice(tinfo.fields, i$3), $subslice(tinfo.fields, (i$3 + 1 >> 0)));
			tinfo.fields = $subslice(tinfo.fields, 0, (tinfo.fields.$length - 1 >> 0));
			c = c - (1) >> 0;
		}
		tinfo.fields = $append(tinfo.fields, newf);
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addFieldInfo }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.c = c; $f.conflicts = conflicts; $f.f1 = f1; $f.f2 = f2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.minl = minl; $f.newf = newf; $f.oldf = oldf; $f.oldf$1 = oldf$1; $f.p = p; $f.tinfo = tinfo; $f.typ = typ; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	TagPathError.ptr.prototype.Error = function() {
		var $ptr, _r$6, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$6 = fmt.Sprintf("%s field %q with tag %q conflicts with field %q with tag %q", new sliceType$5([e.Struct, new $String(e.Field1), new $String(e.Tag1), new $String(e.Field2), new $String(e.Tag2)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TagPathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	TagPathError.prototype.Error = function() { return this.$val.Error(); };
	fieldInfo.ptr.prototype.value = function(v) {
		var $ptr, _i, _r$10, _r$11, _r$12, _r$6, _r$7, _r$8, _r$9, _ref, _v, finfo, i, t, v, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _v = $f._v; finfo = $f.finfo; i = $f.i; t = $f.t; v = $f.v; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		finfo = this;
		_ref = finfo.idx;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				t = v.Type();
				_r$6 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				if (!(_r$6 === 22)) { _v = false; $s = 7; continue s; }
				_r$7 = t.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = _r$7.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_v = _r$8 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					/* */ if (v.IsNil()) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (v.IsNil()) { */ case 11:
						_r$9 = v.Type().Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = reflect.New(_r$9); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = v.Set(_r$10); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 12:
					_r$11 = v.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					v = _r$11;
				/* } */ case 6:
			/* } */ case 4:
			_r$12 = v.Field(x$1); /* */ $s = 17; case 17: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			v = _r$12;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return v;
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fieldInfo.ptr.prototype.value }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._v = _v; $f.finfo = finfo; $f.i = i; $f.t = t; $f.v = v; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	fieldInfo.prototype.value = function(v) { return this.$val.value(v); };
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "XML syntax error on line " + strconv.Itoa(e.Line) + ": " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	StartElement.ptr.prototype.Copy = function() {
		var $ptr, attrs, e;
		e = $clone(this, StartElement);
		attrs = $makeSlice(sliceType$6, e.Attr.$length);
		$copySlice(attrs, e.Attr);
		e.Attr = attrs;
		return e;
	};
	StartElement.prototype.Copy = function() { return this.$val.Copy(); };
	StartElement.ptr.prototype.End = function() {
		var $ptr, e;
		e = $clone(this, StartElement);
		return new EndElement.ptr($clone(e.Name, Name));
	};
	StartElement.prototype.End = function() { return this.$val.End(); };
	makeCopy = function(b) {
		var $ptr, b, b1;
		b1 = $makeSlice(sliceType, b.$length);
		$copySlice(b1, b);
		return b1;
	};
	CharData.prototype.Copy = function() {
		var $ptr, c, x$1;
		c = this;
		return (x$1 = makeCopy($subslice(new sliceType(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new CharData(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(CharData).prototype.Copy = function() { return this.$get().Copy(); };
	Comment.prototype.Copy = function() {
		var $ptr, c, x$1;
		c = this;
		return (x$1 = makeCopy($subslice(new sliceType(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new Comment(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(Comment).prototype.Copy = function() { return this.$get().Copy(); };
	ProcInst.ptr.prototype.Copy = function() {
		var $ptr, p;
		p = $clone(this, ProcInst);
		p.Inst = makeCopy(p.Inst);
		return p;
	};
	ProcInst.prototype.Copy = function() { return this.$val.Copy(); };
	Directive.prototype.Copy = function() {
		var $ptr, d, x$1;
		d = this;
		return (x$1 = makeCopy($subslice(new sliceType(d.$array), d.$offset, d.$offset + d.$length)), $subslice(new Directive(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(Directive).prototype.Copy = function() { return this.$get().Copy(); };
	NewDecoder = function(r) {
		var $ptr, d, r;
		d = new Decoder.ptr(true, sliceType$3.nil, false, $throwNilPointerError, "", $ifaceNil, new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0), ptrType$13.nil, ptrType$14.nil, ptrType$14.nil, false, new Name.ptr("", ""), $ifaceNil, -1, {}, $ifaceNil, 1, new $Int64(0, 0), 0);
		d.switchToReader(r);
		return d;
	};
	$pkg.NewDecoder = NewDecoder;
	Decoder.ptr.prototype.Token = function() {
		var $ptr, _entry, _entry$1, _i, _i$1, _key, _key$1, _r$6, _r$7, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, a, d, err, i, ok, ok$1, ok$2, t, t1, t1$1, t1$2, v, v$1, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; d = $f.d; err = $f.err; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; t = $f.t; t1 = $f.t1; t1$1 = $f.t1$1; t1$2 = $f.t1$2; v = $f.v; v$1 = $f.v$1; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t1 = [t1];
		d = this;
		t = $ifaceNil;
		err = $ifaceNil;
		if (!(d.stk === ptrType$14.nil) && (d.stk.kind === 2)) {
			$s = -1; return [$ifaceNil, io.EOF];
			return [$ifaceNil, io.EOF];
		}
		/* */ if (!($interfaceIsEqual(d.nextToken, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(d.nextToken, $ifaceNil))) { */ case 1:
			t = d.nextToken;
			d.nextToken = $ifaceNil;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$6 = d.rawToken(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			t = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF) && !(d.stk === ptrType$14.nil) && !((d.stk.kind === 2))) {
					err = d.syntaxError("unexpected EOF");
				}
				$s = -1; return [t, err];
				return [t, err];
			}
		/* } */ case 3:
		/* */ if (!d.Strict) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!d.Strict) { */ case 5:
			_r$7 = d.autoClose(t); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$1 = _r$7;
			t1$1 = _tuple$1[0];
			ok = _tuple$1[1];
			if (ok) {
				d.nextToken = t;
				t = t1$1;
			}
		/* } */ case 6:
		_ref = t;
		if ($assertType(_ref, StartElement, true)[1]) {
			t1$2 = $clone(_ref.$val, StartElement);
			_ref$1 = t1$2.Attr;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				a = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), Attr);
				if (a.Name.Space === "xmlns") {
					_tuple$2 = (_entry = d.ns[$String.keyFor(a.Name.Local)], _entry !== undefined ? [_entry.v, true] : ["", false]);
					v = _tuple$2[0];
					ok$1 = _tuple$2[1];
					d.pushNs(a.Name.Local, v, ok$1);
					_key = a.Name.Local; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: a.Value };
				}
				if (a.Name.Space === "" && a.Name.Local === "xmlns") {
					_tuple$3 = (_entry$1 = d.ns[$String.keyFor("")], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]);
					v$1 = _tuple$3[0];
					ok$2 = _tuple$3[1];
					d.pushNs("", v$1, ok$2);
					_key$1 = ""; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: a.Value };
				}
				_i++;
			}
			d.translate(t1$2.Name, true);
			_ref$2 = t1$2.Attr;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i = _i$1;
				d.translate((x$1 = t1$2.Attr, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Name, false);
				_i$1++;
			}
			d.pushElement(t1$2.Name);
			t = new t1$2.constructor.elem(t1$2);
		} else if ($assertType(_ref, EndElement, true)[1]) {
			t1[0] = $clone(_ref.$val, EndElement);
			d.translate(t1[0].Name, true);
			if (!d.popElement(t1[0])) {
				$s = -1; return [$ifaceNil, d.err];
				return [$ifaceNil, d.err];
			}
			t = new t1[0].constructor.elem(t1[0]);
		}
		$s = -1; return [t, err];
		return [t, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.d = d; $f.err = err; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.t = t; $f.t1 = t1; $f.t1$1 = t1$1; $f.t1$2 = t1$2; $f.v = v; $f.v$1 = v$1; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Token = function() { return this.$val.Token(); };
	Decoder.ptr.prototype.translate = function(n, isElementName) {
		var $ptr, _entry, _tuple, d, isElementName, n, ok, v;
		d = this;
		if (n.Space === "xmlns") {
			return;
		} else if (n.Space === "" && !isElementName) {
			return;
		} else if (n.Space === "xml") {
			n.Space = "http://www.w3.org/XML/1998/namespace";
		} else if (n.Space === "" && n.Local === "xmlns") {
			return;
		}
		_tuple = (_entry = d.ns[$String.keyFor(n.Space)], _entry !== undefined ? [_entry.v, true] : ["", false]);
		v = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			n.Space = v;
		} else if (n.Space === "") {
			n.Space = d.DefaultSpace;
		}
	};
	Decoder.prototype.translate = function(n, isElementName) { return this.$val.translate(n, isElementName); };
	Decoder.ptr.prototype.switchToReader = function(r) {
		var $ptr, _tuple, d, ok, r, rb;
		d = this;
		_tuple = $assertType(r, io.ByteReader, true);
		rb = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			d.r = rb;
		} else {
			d.r = bufio.NewReader(r);
		}
	};
	Decoder.prototype.switchToReader = function(r) { return this.$val.switchToReader(r); };
	Decoder.ptr.prototype.push = function(kind) {
		var $ptr, d, kind, s;
		d = this;
		s = d.free;
		if (!(s === ptrType$14.nil)) {
			d.free = s.next;
		} else {
			s = new stack.ptr(ptrType$14.nil, 0, new Name.ptr("", ""), false);
		}
		s.next = d.stk;
		s.kind = kind;
		d.stk = s;
		return s;
	};
	Decoder.prototype.push = function(kind) { return this.$val.push(kind); };
	Decoder.ptr.prototype.pop = function() {
		var $ptr, d, s;
		d = this;
		s = d.stk;
		if (!(s === ptrType$14.nil)) {
			d.stk = s.next;
			s.next = d.free;
			d.free = s;
		}
		return s;
	};
	Decoder.prototype.pop = function() { return this.$val.pop(); };
	Decoder.ptr.prototype.pushEOF = function() {
		var $ptr, d, s, start;
		d = this;
		start = d.stk;
		while (true) {
			if (!(!((start.kind === 0)))) { break; }
			start = start.next;
		}
		while (true) {
			if (!(!(start.next === ptrType$14.nil) && (start.next.kind === 1))) { break; }
			start = start.next;
		}
		s = d.free;
		if (!(s === ptrType$14.nil)) {
			d.free = s.next;
		} else {
			s = new stack.ptr(ptrType$14.nil, 0, new Name.ptr("", ""), false);
		}
		s.kind = 2;
		s.next = start.next;
		start.next = s;
	};
	Decoder.prototype.pushEOF = function() { return this.$val.pushEOF(); };
	Decoder.ptr.prototype.popEOF = function() {
		var $ptr, d;
		d = this;
		if (d.stk === ptrType$14.nil || !((d.stk.kind === 2))) {
			return false;
		}
		d.pop();
		return true;
	};
	Decoder.prototype.popEOF = function() { return this.$val.popEOF(); };
	Decoder.ptr.prototype.pushElement = function(name) {
		var $ptr, d, name, s;
		name = $clone(name, Name);
		d = this;
		s = d.push(0);
		Name.copy(s.name, name);
	};
	Decoder.prototype.pushElement = function(name) { return this.$val.pushElement(name); };
	Decoder.ptr.prototype.pushNs = function(local, url, ok) {
		var $ptr, d, local, ok, s, url;
		d = this;
		s = d.push(1);
		s.name.Local = local;
		s.name.Space = url;
		s.ok = ok;
	};
	Decoder.prototype.pushNs = function(local, url, ok) { return this.$val.pushNs(local, url, ok); };
	Decoder.ptr.prototype.syntaxError = function(msg) {
		var $ptr, d, msg;
		d = this;
		return new SyntaxError.ptr(msg, d.line);
	};
	Decoder.prototype.syntaxError = function(msg) { return this.$val.syntaxError(msg); };
	Decoder.ptr.prototype.popElement = function(t) {
		var $ptr, _key, d, name, s, s$1, t;
		d = this;
		s = d.pop();
		name = $clone(t.Name, Name);
		if (s === ptrType$14.nil || !((s.kind === 0))) {
			d.err = d.syntaxError("unexpected end element </" + name.Local + ">");
			return false;
		} else if (!(s.name.Local === name.Local)) {
			if (!d.Strict) {
				d.needClose = true;
				Name.copy(d.toClose, t.Name);
				Name.copy(t.Name, s.name);
				return true;
			}
			d.err = d.syntaxError("element <" + s.name.Local + "> closed by </" + name.Local + ">");
			return false;
		} else if (!(s.name.Space === name.Space)) {
			d.err = d.syntaxError("element <" + s.name.Local + "> in space " + s.name.Space + "closed by </" + name.Local + "> in space " + name.Space);
			return false;
		}
		while (true) {
			if (!(!(d.stk === ptrType$14.nil) && !((d.stk.kind === 0)) && !((d.stk.kind === 2)))) { break; }
			s$1 = d.pop();
			if (s$1.ok) {
				_key = s$1.name.Local; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: s$1.name.Space };
			} else {
				delete d.ns[$String.keyFor(s$1.name.Local)];
			}
		}
		return true;
	};
	Decoder.prototype.popElement = function(t) { return this.$val.popElement(t); };
	Decoder.ptr.prototype.autoClose = function(t) {
		var $ptr, _i, _r$6, _r$7, _ref, _tuple, d, et, name, ok, s, t, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; et = $f.et; name = $f.name; ok = $f.ok; s = $f.s; t = $f.t; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.stk === ptrType$14.nil || !((d.stk.kind === 0))) {
			$s = -1; return [$ifaceNil, false];
			return [$ifaceNil, false];
		}
		_r$6 = strings.ToLower(d.stk.name.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		name = _r$6;
		_ref = d.AutoClose;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$7 = strings.ToLower(s); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7 === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$7 === name) { */ case 4:
				_tuple = $assertType(t, EndElement, true);
				et = $clone(_tuple[0], EndElement);
				ok = _tuple[1];
				if (!ok || !(et.Name.Local === name)) {
					$s = -1; return [(x$1 = new EndElement.ptr($clone(d.stk.name, Name)), new x$1.constructor.elem(x$1)), true];
					return [(x$1 = new EndElement.ptr($clone(d.stk.name, Name)), new x$1.constructor.elem(x$1)), true];
				}
				/* break; */ $s = 3; continue;
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [$ifaceNil, false];
		return [$ifaceNil, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.autoClose }; } $f.$ptr = $ptr; $f._i = _i; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.et = et; $f.name = name; $f.ok = ok; $f.s = s; $f.t = t; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.autoClose = function(t) { return this.$val.autoClose(t); };
	Decoder.ptr.prototype.RawToken = function() {
		var $ptr, _r$6, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.unmarshalDepth > 0) {
			$s = -1; return [$ifaceNil, errRawToken];
			return [$ifaceNil, errRawToken];
		}
		_r$6 = d.rawToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.RawToken }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.RawToken = function() { return this.$val.RawToken(); };
	Decoder.ptr.prototype.rawToken = function() {
		var $ptr, _1, _2, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, attr, b, b0, b0$1, b0$2, b1, b1$1, content, d, data, data$1, data$2, data$3, data$4, depth, empty, enc, err, i, i$1, inquote, j, n, nCap, name, name$1, nattr, newr, ok, s, target, ver, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; a = $f.a; attr = $f.attr; b = $f.b; b0 = $f.b0; b0$1 = $f.b0$1; b0$2 = $f.b0$2; b1 = $f.b1; b1$1 = $f.b1$1; content = $f.content; d = $f.d; data = $f.data; data$1 = $f.data$1; data$2 = $f.data$2; data$3 = $f.data$3; data$4 = $f.data$4; depth = $f.depth; empty = $f.empty; enc = $f.enc; err = $f.err; i = $f.i; i$1 = $f.i$1; inquote = $f.inquote; j = $f.j; n = $f.n; nCap = $f.nCap; name = $f.name; name$1 = $f.name$1; nattr = $f.nattr; newr = $f.newr; ok = $f.ok; s = $f.s; target = $f.target; ver = $f.ver; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, d.err];
			return [$ifaceNil, d.err];
		}
		if (d.needClose) {
			d.needClose = false;
			$s = -1; return [(x$1 = new EndElement.ptr($clone(d.toClose, Name)), new x$1.constructor.elem(x$1)), $ifaceNil];
			return [(x$1 = new EndElement.ptr($clone(d.toClose, Name)), new x$1.constructor.elem(x$1)), $ifaceNil];
		}
		_r$6 = d.getc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return [$ifaceNil, d.err];
			return [$ifaceNil, d.err];
		}
		/* */ if (!((b === 60))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((b === 60))) { */ case 2:
			d.ungetc(b);
			_r$7 = d.text(-1, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			data = _r$7;
			if (data === sliceType.nil) {
				$s = -1; return [$ifaceNil, d.err];
				return [$ifaceNil, d.err];
			}
			$s = -1; return [$subslice(new CharData(data.$array), data.$offset, data.$offset + data.$length), $ifaceNil];
			return [$subslice(new CharData(data.$array), data.$offset, data.$offset + data.$length), $ifaceNil];
		/* } */ case 3:
		_r$8 = d.mustgetc(); /* */ $s = 5; case 5: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$1 = _r$8;
		b = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			$s = -1; return [$ifaceNil, d.err];
			return [$ifaceNil, d.err];
		}
			_1 = b;
			/* */ if (_1 === (47)) { $s = 7; continue; }
			/* */ if (_1 === (63)) { $s = 8; continue; }
			/* */ if (_1 === (33)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (47)) { */ case 7:
				name = new Name.ptr("", "");
				_r$9 = d.nsname(); /* */ $s = 11; case 11: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$2 = _r$9;
				Name.copy(name, _tuple$2[0]);
				ok = _tuple$2[1];
				if (!ok) {
					if ($interfaceIsEqual(d.err, $ifaceNil)) {
						d.err = d.syntaxError("expected element name after </");
					}
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				$r = d.space(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$10 = d.mustgetc(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$3 = _r$10;
				b = _tuple$3[0];
				ok = _tuple$3[1];
				if (!ok) {
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				if (!((b === 62))) {
					d.err = d.syntaxError("invalid characters between </" + name.Local + " and >");
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				$s = -1; return [(x$2 = new EndElement.ptr($clone(name, Name)), new x$2.constructor.elem(x$2)), $ifaceNil];
				return [(x$2 = new EndElement.ptr($clone(name, Name)), new x$2.constructor.elem(x$2)), $ifaceNil];
			/* } else if (_1 === (63)) { */ case 8:
				target = "";
				_r$11 = d.name(); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_tuple$4 = _r$11;
				target = _tuple$4[0];
				ok = _tuple$4[1];
				if (!ok) {
					if ($interfaceIsEqual(d.err, $ifaceNil)) {
						d.err = d.syntaxError("expected target name after <?");
					}
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				$r = d.space(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				d.buf.Reset();
				b0 = 0;
				/* while (true) { */ case 16:
					_r$12 = d.mustgetc(); /* */ $s = 18; case 18: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$5 = _r$12;
					b = _tuple$5[0];
					ok = _tuple$5[1];
					if (!ok) {
						$s = -1; return [$ifaceNil, d.err];
						return [$ifaceNil, d.err];
					}
					d.buf.WriteByte(b);
					if ((b0 === 63) && (b === 62)) {
						/* break; */ $s = 17; continue;
					}
					b0 = b;
				/* } */ $s = 16; continue; case 17:
				data$1 = d.buf.Bytes();
				data$1 = $subslice(data$1, 0, (data$1.$length - 2 >> 0));
				/* */ if (target === "xml") { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (target === "xml") { */ case 19:
					content = $bytesToString(data$1);
					ver = procInst("version", content);
					/* */ if (!(ver === "") && !(ver === "1.0")) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!(ver === "") && !(ver === "1.0")) { */ case 21:
						_r$13 = fmt.Errorf("xml: unsupported version %q; only version 1.0 is supported", new sliceType$5([new $String(ver)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						d.err = _r$13;
						$s = -1; return [$ifaceNil, d.err];
						return [$ifaceNil, d.err];
					/* } */ case 22:
					enc = procInst("encoding", content);
					/* */ if (!(enc === "") && !(enc === "utf-8") && !(enc === "UTF-8") && !strings.EqualFold(enc, "utf-8")) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!(enc === "") && !(enc === "utf-8") && !(enc === "UTF-8") && !strings.EqualFold(enc, "utf-8")) { */ case 24:
						/* */ if (d.CharsetReader === $throwNilPointerError) { $s = 26; continue; }
						/* */ $s = 27; continue;
						/* if (d.CharsetReader === $throwNilPointerError) { */ case 26:
							_r$14 = fmt.Errorf("xml: encoding %q declared but Decoder.CharsetReader is nil", new sliceType$5([new $String(enc)])); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							d.err = _r$14;
							$s = -1; return [$ifaceNil, d.err];
							return [$ifaceNil, d.err];
						/* } */ case 27:
						_r$15 = d.CharsetReader(enc, $assertType(d.r, io.Reader)); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_tuple$6 = _r$15;
						newr = _tuple$6[0];
						err = _tuple$6[1];
						/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 30; continue; }
						/* */ $s = 31; continue;
						/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 30:
							_r$16 = fmt.Errorf("xml: opening charset %q: %v", new sliceType$5([new $String(enc), err])); /* */ $s = 32; case 32: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
							d.err = _r$16;
							$s = -1; return [$ifaceNil, d.err];
							return [$ifaceNil, d.err];
						/* } */ case 31:
						if ($interfaceIsEqual(newr, $ifaceNil)) {
							$panic(new $String("CharsetReader returned a nil Reader for charset " + enc));
						}
						d.switchToReader(newr);
					/* } */ case 25:
				/* } */ case 20:
				$s = -1; return [(x$3 = new ProcInst.ptr(target, data$1), new x$3.constructor.elem(x$3)), $ifaceNil];
				return [(x$3 = new ProcInst.ptr(target, data$1), new x$3.constructor.elem(x$3)), $ifaceNil];
			/* } else if (_1 === (33)) { */ case 9:
				_r$17 = d.mustgetc(); /* */ $s = 33; case 33: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_tuple$7 = _r$17;
				b = _tuple$7[0];
				ok = _tuple$7[1];
				if (!ok) {
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
					_2 = b;
					/* */ if (_2 === (45)) { $s = 35; continue; }
					/* */ if (_2 === (91)) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (_2 === (45)) { */ case 35:
						_r$18 = d.mustgetc(); /* */ $s = 38; case 38: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_tuple$8 = _r$18;
						b = _tuple$8[0];
						ok = _tuple$8[1];
						if (!ok) {
							$s = -1; return [$ifaceNil, d.err];
							return [$ifaceNil, d.err];
						}
						if (!((b === 45))) {
							d.err = d.syntaxError("invalid sequence <!- not part of <!--");
							$s = -1; return [$ifaceNil, d.err];
							return [$ifaceNil, d.err];
						}
						d.buf.Reset();
						_tmp = 0;
						_tmp$1 = 0;
						b0$1 = _tmp;
						b1 = _tmp$1;
						/* while (true) { */ case 39:
							_r$19 = d.mustgetc(); /* */ $s = 41; case 41: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							_tuple$9 = _r$19;
							b = _tuple$9[0];
							ok = _tuple$9[1];
							if (!ok) {
								$s = -1; return [$ifaceNil, d.err];
								return [$ifaceNil, d.err];
							}
							d.buf.WriteByte(b);
							if ((b0$1 === 45) && (b1 === 45)) {
								if (!((b === 62))) {
									d.err = d.syntaxError("invalid sequence \"--\" not allowed in comments");
									$s = -1; return [$ifaceNil, d.err];
									return [$ifaceNil, d.err];
								}
								/* break; */ $s = 40; continue;
							}
							_tmp$2 = b1;
							_tmp$3 = b;
							b0$1 = _tmp$2;
							b1 = _tmp$3;
						/* } */ $s = 39; continue; case 40:
						data$2 = d.buf.Bytes();
						data$2 = $subslice(data$2, 0, (data$2.$length - 3 >> 0));
						$s = -1; return [$subslice(new Comment(data$2.$array), data$2.$offset, data$2.$offset + data$2.$length), $ifaceNil];
						return [$subslice(new Comment(data$2.$array), data$2.$offset, data$2.$offset + data$2.$length), $ifaceNil];
					/* } else if (_2 === (91)) { */ case 36:
						i = 0;
						/* while (true) { */ case 42:
							/* if (!(i < 6)) { break; } */ if(!(i < 6)) { $s = 43; continue; }
							_r$20 = d.mustgetc(); /* */ $s = 44; case 44: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							_tuple$10 = _r$20;
							b = _tuple$10[0];
							ok = _tuple$10[1];
							if (!ok) {
								$s = -1; return [$ifaceNil, d.err];
								return [$ifaceNil, d.err];
							}
							if (!((b === "CDATA[".charCodeAt(i)))) {
								d.err = d.syntaxError("invalid <![ sequence");
								$s = -1; return [$ifaceNil, d.err];
								return [$ifaceNil, d.err];
							}
							i = i + (1) >> 0;
						/* } */ $s = 42; continue; case 43:
						_r$21 = d.text(-1, true); /* */ $s = 45; case 45: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						data$3 = _r$21;
						if (data$3 === sliceType.nil) {
							$s = -1; return [$ifaceNil, d.err];
							return [$ifaceNil, d.err];
						}
						$s = -1; return [$subslice(new CharData(data$3.$array), data$3.$offset, data$3.$offset + data$3.$length), $ifaceNil];
						return [$subslice(new CharData(data$3.$array), data$3.$offset, data$3.$offset + data$3.$length), $ifaceNil];
					/* } */ case 37:
				case 34:
				d.buf.Reset();
				d.buf.WriteByte(b);
				inquote = 0;
				depth = 0;
				/* while (true) { */ case 46:
					_r$22 = d.mustgetc(); /* */ $s = 48; case 48: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_tuple$11 = _r$22;
					b = _tuple$11[0];
					ok = _tuple$11[1];
					if (!ok) {
						$s = -1; return [$ifaceNil, d.err];
						return [$ifaceNil, d.err];
					}
					if ((inquote === 0) && (b === 62) && (depth === 0)) {
						/* break; */ $s = 47; continue;
					}
					/* HandleB: */ case 49:
					d.buf.WriteByte(b);
						/* */ if ((b === inquote)) { $s = 51; continue; }
						/* */ if (!((inquote === 0))) { $s = 52; continue; }
						/* */ if ((b === 39) || (b === 34)) { $s = 53; continue; }
						/* */ if ((b === 62) && (inquote === 0)) { $s = 54; continue; }
						/* */ if ((b === 60) && (inquote === 0)) { $s = 55; continue; }
						/* */ $s = 56; continue;
						/* if ((b === inquote)) { */ case 51:
							inquote = 0;
							$s = 56; continue;
						/* } else if (!((inquote === 0))) { */ case 52:
							$s = 56; continue;
						/* } else if ((b === 39) || (b === 34)) { */ case 53:
							inquote = b;
							$s = 56; continue;
						/* } else if ((b === 62) && (inquote === 0)) { */ case 54:
							depth = depth - (1) >> 0;
							$s = 56; continue;
						/* } else if ((b === 60) && (inquote === 0)) { */ case 55:
							s = "!--";
							i$1 = 0;
							/* while (true) { */ case 57:
								/* if (!(i$1 < s.length)) { break; } */ if(!(i$1 < s.length)) { $s = 58; continue; }
								_r$23 = d.mustgetc(); /* */ $s = 59; case 59: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
								_tuple$12 = _r$23;
								b = _tuple$12[0];
								ok = _tuple$12[1];
								if (!ok) {
									$s = -1; return [$ifaceNil, d.err];
									return [$ifaceNil, d.err];
								}
								/* */ if (!((b === s.charCodeAt(i$1)))) { $s = 60; continue; }
								/* */ $s = 61; continue;
								/* if (!((b === s.charCodeAt(i$1)))) { */ case 60:
									j = 0;
									while (true) {
										if (!(j < i$1)) { break; }
										d.buf.WriteByte(s.charCodeAt(j));
										j = j + (1) >> 0;
									}
									depth = depth + (1) >> 0;
									/* goto HandleB */ $s = 49; continue;
								/* } */ case 61:
								i$1 = i$1 + (1) >> 0;
							/* } */ $s = 57; continue; case 58:
							d.buf.Truncate(d.buf.Len() - 1 >> 0);
							_tmp$4 = 0;
							_tmp$5 = 0;
							b0$2 = _tmp$4;
							b1$1 = _tmp$5;
							/* while (true) { */ case 62:
								_r$24 = d.mustgetc(); /* */ $s = 64; case 64: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
								_tuple$13 = _r$24;
								b = _tuple$13[0];
								ok = _tuple$13[1];
								if (!ok) {
									$s = -1; return [$ifaceNil, d.err];
									return [$ifaceNil, d.err];
								}
								if ((b0$2 === 45) && (b1$1 === 45) && (b === 62)) {
									/* break; */ $s = 63; continue;
								}
								_tmp$6 = b1$1;
								_tmp$7 = b;
								b0$2 = _tmp$6;
								b1$1 = _tmp$7;
							/* } */ $s = 62; continue; case 63:
						/* } */ case 56:
					case 50:
				/* } */ $s = 46; continue; case 47:
				$s = -1; return [(x$4 = d.buf.Bytes(), $subslice(new Directive(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $ifaceNil];
				return [(x$4 = d.buf.Bytes(), $subslice(new Directive(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $ifaceNil];
			/* } */ case 10:
		case 6:
		d.ungetc(b);
		name$1 = new Name.ptr("", "");
		empty = false;
		attr = sliceType$6.nil;
		_r$25 = d.nsname(); /* */ $s = 65; case 65: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_tuple$14 = _r$25;
		Name.copy(name$1, _tuple$14[0]);
		ok = _tuple$14[1];
		if (!ok) {
			if ($interfaceIsEqual(d.err, $ifaceNil)) {
				d.err = d.syntaxError("expected element name after <");
			}
			$s = -1; return [$ifaceNil, d.err];
			return [$ifaceNil, d.err];
		}
		attr = new sliceType$6([]);
		/* while (true) { */ case 66:
			$r = d.space(); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$26 = d.mustgetc(); /* */ $s = 69; case 69: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_tuple$15 = _r$26;
			b = _tuple$15[0];
			ok = _tuple$15[1];
			if (!ok) {
				$s = -1; return [$ifaceNil, d.err];
				return [$ifaceNil, d.err];
			}
			/* */ if (b === 47) { $s = 70; continue; }
			/* */ $s = 71; continue;
			/* if (b === 47) { */ case 70:
				empty = true;
				_r$27 = d.mustgetc(); /* */ $s = 72; case 72: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_tuple$16 = _r$27;
				b = _tuple$16[0];
				ok = _tuple$16[1];
				if (!ok) {
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				if (!((b === 62))) {
					d.err = d.syntaxError("expected /> in element");
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				/* break; */ $s = 67; continue;
			/* } */ case 71:
			if (b === 62) {
				/* break; */ $s = 67; continue;
			}
			d.ungetc(b);
			n = attr.$length;
			if (n >= attr.$capacity) {
				nCap = $imul(2, attr.$capacity);
				if (nCap === 0) {
					nCap = 4;
				}
				nattr = $makeSlice(sliceType$6, n, nCap);
				$copySlice(nattr, attr);
				attr = nattr;
			}
			attr = $subslice(attr, 0, (n + 1 >> 0));
			a = ((n < 0 || n >= attr.$length) ? $throwRuntimeError("index out of range") : attr.$array[attr.$offset + n]);
			_r$28 = d.nsname(); /* */ $s = 73; case 73: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_tuple$17 = _r$28;
			Name.copy(a.Name, _tuple$17[0]);
			ok = _tuple$17[1];
			if (!ok) {
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected attribute name in element");
				}
				$s = -1; return [$ifaceNil, d.err];
				return [$ifaceNil, d.err];
			}
			$r = d.space(); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$29 = d.mustgetc(); /* */ $s = 75; case 75: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			_tuple$18 = _r$29;
			b = _tuple$18[0];
			ok = _tuple$18[1];
			if (!ok) {
				$s = -1; return [$ifaceNil, d.err];
				return [$ifaceNil, d.err];
			}
			/* */ if (!((b === 61))) { $s = 76; continue; }
			/* */ $s = 77; continue;
			/* if (!((b === 61))) { */ case 76:
				if (d.Strict) {
					d.err = d.syntaxError("attribute name without = in element");
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				} else {
					d.ungetc(b);
					a.Value = a.Name.Local;
				}
				$s = 78; continue;
			/* } else { */ case 77:
				$r = d.space(); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$30 = d.attrval(); /* */ $s = 80; case 80: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				data$4 = _r$30;
				if (data$4 === sliceType.nil) {
					$s = -1; return [$ifaceNil, d.err];
					return [$ifaceNil, d.err];
				}
				a.Value = $bytesToString(data$4);
			/* } */ case 78:
		/* } */ $s = 66; continue; case 67:
		if (empty) {
			d.needClose = true;
			Name.copy(d.toClose, name$1);
		}
		$s = -1; return [(x$5 = new StartElement.ptr($clone(name$1, Name), attr), new x$5.constructor.elem(x$5)), $ifaceNil];
		return [(x$5 = new StartElement.ptr($clone(name$1, Name), attr), new x$5.constructor.elem(x$5)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.rawToken }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.a = a; $f.attr = attr; $f.b = b; $f.b0 = b0; $f.b0$1 = b0$1; $f.b0$2 = b0$2; $f.b1 = b1; $f.b1$1 = b1$1; $f.content = content; $f.d = d; $f.data = data; $f.data$1 = data$1; $f.data$2 = data$2; $f.data$3 = data$3; $f.data$4 = data$4; $f.depth = depth; $f.empty = empty; $f.enc = enc; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.inquote = inquote; $f.j = j; $f.n = n; $f.nCap = nCap; $f.name = name; $f.name$1 = name$1; $f.nattr = nattr; $f.newr = newr; $f.ok = ok; $f.s = s; $f.target = target; $f.ver = ver; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.rawToken = function() { return this.$val.rawToken(); };
	Decoder.ptr.prototype.attrval = function() {
		var $ptr, _r$6, _r$7, _r$8, _tuple, _tuple$1, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$6 = d.mustgetc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return sliceType.nil;
			return sliceType.nil;
		}
		/* */ if ((b === 34) || (b === 39)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((b === 34) || (b === 39)) { */ case 2:
			_r$7 = d.text((b >> 0), false); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } */ case 3:
		if (d.Strict) {
			d.err = d.syntaxError("unquoted or missing attribute value in element");
			$s = -1; return sliceType.nil;
			return sliceType.nil;
		}
		d.ungetc(b);
		d.buf.Reset();
		/* while (true) { */ case 5:
			_r$8 = d.mustgetc(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$1 = _r$8;
			b = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				$s = -1; return sliceType.nil;
				return sliceType.nil;
			}
			if (97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || (b === 95) || (b === 58) || (b === 45)) {
				d.buf.WriteByte(b);
			} else {
				d.ungetc(b);
				/* break; */ $s = 6; continue;
			}
		/* } */ $s = 5; continue; case 6:
		$s = -1; return d.buf.Bytes();
		return d.buf.Bytes();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.attrval }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.attrval = function() { return this.$val.attrval(); };
	Decoder.ptr.prototype.space = function() {
		var $ptr, _1, _r$6, _tuple, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$6 = $f._r$6; _tuple = $f._tuple; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r$6 = d.getc(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			b = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				$s = -1; return;
				return;
			}
			_1 = b;
			if ((_1 === (32)) || (_1 === (13)) || (_1 === (10)) || (_1 === (9))) {
			} else {
				d.ungetc(b);
				$s = -1; return;
				return;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.space }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$6 = _r$6; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.space = function() { return this.$val.space(); };
	Decoder.ptr.prototype.getc = function() {
		var $ptr, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, d, ok, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; d = $f.d; ok = $f.ok; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		ok = false;
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = false;
			b = _tmp;
			ok = _tmp$1;
			$s = -1; return [b, ok];
			return [b, ok];
		}
		/* */ if (d.nextByte >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nextByte >= 0) { */ case 1:
			b = (d.nextByte << 24 >>> 24);
			d.nextByte = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$6 = d.r.ReadByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			b = _tuple[0];
			d.err = _tuple[1];
			if (!($interfaceIsEqual(d.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = false;
				b = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [b, ok];
				return [b, ok];
			}
			if (!(d.saved === ptrType$13.nil)) {
				d.saved.WriteByte(b);
			}
		/* } */ case 3:
		if (b === 10) {
			d.line = d.line + (1) >> 0;
		}
		d.offset = (x$1 = d.offset, x$2 = new $Int64(0, 1), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		_tmp$4 = b;
		_tmp$5 = true;
		b = _tmp$4;
		ok = _tmp$5;
		$s = -1; return [b, ok];
		return [b, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.getc }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.ok = ok; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.getc = function() { return this.$val.getc(); };
	Decoder.ptr.prototype.InputOffset = function() {
		var $ptr, d;
		d = this;
		return d.offset;
	};
	Decoder.prototype.InputOffset = function() { return this.$val.InputOffset(); };
	Decoder.ptr.prototype.savedOffset = function() {
		var $ptr, d, n;
		d = this;
		n = d.saved.Len();
		if (d.nextByte >= 0) {
			n = n - (1) >> 0;
		}
		return n;
	};
	Decoder.prototype.savedOffset = function() { return this.$val.savedOffset(); };
	Decoder.ptr.prototype.mustgetc = function() {
		var $ptr, _r$6, _tuple, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tuple = $f._tuple; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		ok = false;
		d = this;
		_r$6 = d.getc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			if ($interfaceIsEqual(d.err, io.EOF)) {
				d.err = d.syntaxError("unexpected EOF");
			}
		}
		$s = -1; return [b, ok];
		return [b, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.mustgetc }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tuple = _tuple; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.mustgetc = function() { return this.$val.mustgetc(); };
	Decoder.ptr.prototype.ungetc = function(b) {
		var $ptr, b, d, x$1, x$2;
		d = this;
		if (b === 10) {
			d.line = d.line - (1) >> 0;
		}
		d.nextByte = (b >> 0);
		d.offset = (x$1 = d.offset, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
	};
	Decoder.prototype.ungetc = function(b) { return this.$val.ungetc(b); };
	Decoder.ptr.prototype.text = function(quote, cdata) {
		var $ptr, _entry, _entry$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, b0, b1, base, before, buf, cdata, d, data, ent, err, haveText, n, name, ok, ok$1, ok$2, quote, r, r$1, s, s$1, size, start, text, trunc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; b = $f.b; b0 = $f.b0; b1 = $f.b1; base = $f.base; before = $f.before; buf = $f.buf; cdata = $f.cdata; d = $f.d; data = $f.data; ent = $f.ent; err = $f.err; haveText = $f.haveText; n = $f.n; name = $f.name; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; quote = $f.quote; r = $f.r; r$1 = $f.r$1; s = $f.s; s$1 = $f.s$1; size = $f.size; start = $f.start; text = $f.text; trunc = $f.trunc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_tmp = 0;
		_tmp$1 = 0;
		b0 = _tmp;
		b1 = _tmp$1;
		trunc = 0;
		d.buf.Reset();
		/* while (true) { */ case 1:
			_r$6 = d.getc(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			b = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				if (cdata) {
					if ($interfaceIsEqual(d.err, io.EOF)) {
						d.err = d.syntaxError("unexpected EOF in CDATA section");
					}
					$s = -1; return sliceType.nil;
					return sliceType.nil;
				}
				/* break Input; */ $s = 2; continue s;
			}
			if ((b0 === 93) && (b1 === 93) && (b === 62)) {
				if (cdata) {
					trunc = 2;
					/* break Input; */ $s = 2; continue s;
				}
				d.err = d.syntaxError("unescaped ]]> not in CDATA section");
				$s = -1; return sliceType.nil;
				return sliceType.nil;
			}
			if ((b === 60) && !cdata) {
				if (quote >= 0) {
					d.err = d.syntaxError("unescaped < inside quoted string");
					$s = -1; return sliceType.nil;
					return sliceType.nil;
				}
				d.ungetc(60);
				/* break Input; */ $s = 2; continue s;
			}
			if (quote >= 0 && (b === (quote << 24 >>> 24))) {
				/* break Input; */ $s = 2; continue s;
			}
			/* */ if ((b === 38) && !cdata) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((b === 38) && !cdata) { */ case 4:
				before = d.buf.Len();
				d.buf.WriteByte(38);
				ok$1 = false;
				text = "";
				haveText = false;
				_r$7 = d.mustgetc(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$1 = _r$7;
				b = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (!ok$1) {
					$s = -1; return sliceType.nil;
					return sliceType.nil;
				}
				/* */ if (b === 35) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (b === 35) { */ case 7:
					d.buf.WriteByte(b);
					_r$8 = d.mustgetc(); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$2 = _r$8;
					b = _tuple$2[0];
					ok$1 = _tuple$2[1];
					if (!ok$1) {
						$s = -1; return sliceType.nil;
						return sliceType.nil;
					}
					base = 10;
					/* */ if (b === 120) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (b === 120) { */ case 11:
						base = 16;
						d.buf.WriteByte(b);
						_r$9 = d.mustgetc(); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_tuple$3 = _r$9;
						b = _tuple$3[0];
						ok$1 = _tuple$3[1];
						if (!ok$1) {
							$s = -1; return sliceType.nil;
							return sliceType.nil;
						}
					/* } */ case 12:
					start = d.buf.Len();
					/* while (true) { */ case 14:
						/* if (!(48 <= b && b <= 57 || (base === 16) && 97 <= b && b <= 102 || (base === 16) && 65 <= b && b <= 70)) { break; } */ if(!(48 <= b && b <= 57 || (base === 16) && 97 <= b && b <= 102 || (base === 16) && 65 <= b && b <= 70)) { $s = 15; continue; }
						d.buf.WriteByte(b);
						_r$10 = d.mustgetc(); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_tuple$4 = _r$10;
						b = _tuple$4[0];
						ok$1 = _tuple$4[1];
						if (!ok$1) {
							$s = -1; return sliceType.nil;
							return sliceType.nil;
						}
					/* } */ $s = 14; continue; case 15:
					if (!((b === 59))) {
						d.ungetc(b);
					} else {
						s = $bytesToString($subslice(d.buf.Bytes(), start));
						d.buf.WriteByte(59);
						_tuple$5 = strconv.ParseUint(s, base, 64);
						n = _tuple$5[0];
						err = _tuple$5[1];
						if ($interfaceIsEqual(err, $ifaceNil) && (n.$high < 0 || (n.$high === 0 && n.$low <= 1114111))) {
							text = $encodeRune(n.$low);
							haveText = true;
						}
					}
					$s = 9; continue;
				/* } else { */ case 8:
					d.ungetc(b);
					_r$11 = d.readName(); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (!_r$11) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!_r$11) { */ case 17:
						if (!($interfaceIsEqual(d.err, $ifaceNil))) {
							$s = -1; return sliceType.nil;
							return sliceType.nil;
						}
						ok$1 = false;
					/* } */ case 18:
					_r$12 = d.mustgetc(); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$6 = _r$12;
					b = _tuple$6[0];
					ok$1 = _tuple$6[1];
					if (!ok$1) {
						$s = -1; return sliceType.nil;
						return sliceType.nil;
					}
					if (!((b === 59))) {
						d.ungetc(b);
					} else {
						name = $subslice(d.buf.Bytes(), (before + 1 >> 0));
						d.buf.WriteByte(59);
						if (isName(name)) {
							s$1 = $bytesToString(name);
							_tuple$7 = (_entry = entity[$String.keyFor(s$1)], _entry !== undefined ? [_entry.v, true] : [0, false]);
							r = _tuple$7[0];
							ok$2 = _tuple$7[1];
							if (ok$2) {
								text = $encodeRune(r);
								haveText = true;
							} else if (!(d.Entity === false)) {
								_tuple$8 = (_entry$1 = d.Entity[$String.keyFor(s$1)], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]);
								text = _tuple$8[0];
								haveText = _tuple$8[1];
							}
						}
					}
				/* } */ case 9:
				if (haveText) {
					d.buf.Truncate(before);
					d.buf.Write(new sliceType($stringToBytes(text)));
					_tmp$2 = 0;
					_tmp$3 = 0;
					b0 = _tmp$2;
					b1 = _tmp$3;
					/* continue Input; */ $s = 1; continue s;
				}
				if (!d.Strict) {
					_tmp$4 = 0;
					_tmp$5 = 0;
					b0 = _tmp$4;
					b1 = _tmp$5;
					/* continue Input; */ $s = 1; continue s;
				}
				ent = $bytesToString($subslice(d.buf.Bytes(), before));
				if (!((ent.charCodeAt((ent.length - 1 >> 0)) === 59))) {
					ent = ent + (" (no semicolon)");
				}
				d.err = d.syntaxError("invalid character entity " + ent);
				$s = -1; return sliceType.nil;
				return sliceType.nil;
			/* } */ case 5:
			if (b === 13) {
				d.buf.WriteByte(10);
			} else if ((b1 === 13) && (b === 10)) {
			} else {
				d.buf.WriteByte(b);
			}
			_tmp$6 = b1;
			_tmp$7 = b;
			b0 = _tmp$6;
			b1 = _tmp$7;
		/* } */ $s = 1; continue; case 2:
		data = d.buf.Bytes();
		data = $subslice(data, 0, (data.$length - trunc >> 0));
		buf = data;
		/* while (true) { */ case 21:
			/* if (!(buf.$length > 0)) { break; } */ if(!(buf.$length > 0)) { $s = 22; continue; }
			_tuple$9 = utf8.DecodeRune(buf);
			r$1 = _tuple$9[0];
			size = _tuple$9[1];
			if ((r$1 === 65533) && (size === 1)) {
				d.err = d.syntaxError("invalid UTF-8");
				$s = -1; return sliceType.nil;
				return sliceType.nil;
			}
			buf = $subslice(buf, size);
			/* */ if (!isInCharacterRange(r$1)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!isInCharacterRange(r$1)) { */ case 23:
				_r$13 = fmt.Sprintf("illegal character code %U", new sliceType$5([new $Int32(r$1)])); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = d.syntaxError(_r$13); /* */ $s = 26; case 26: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				d.err = _r$14;
				$s = -1; return sliceType.nil;
				return sliceType.nil;
			/* } */ case 24:
		/* } */ $s = 21; continue; case 22:
		$s = -1; return data;
		return data;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.text }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.b = b; $f.b0 = b0; $f.b1 = b1; $f.base = base; $f.before = before; $f.buf = buf; $f.cdata = cdata; $f.d = d; $f.data = data; $f.ent = ent; $f.err = err; $f.haveText = haveText; $f.n = n; $f.name = name; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.quote = quote; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.s$1 = s$1; $f.size = size; $f.start = start; $f.text = text; $f.trunc = trunc; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.text = function(quote, cdata) { return this.$val.text(quote, cdata); };
	isInCharacterRange = function(r) {
		var $ptr, inrange, r;
		inrange = false;
		inrange = (r === 9) || (r === 10) || (r === 13) || r >= 32 && r <= 57207 || r >= 57344 && r <= 65533 || r >= 65536 && r <= 1114111;
		return inrange;
	};
	Decoder.ptr.prototype.nsname = function() {
		var $ptr, _r$6, _tmp, _tmp$1, _tuple, d, i, name, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; i = $f.i; name = $f.name; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = new Name.ptr("", "");
		ok = false;
		d = this;
		_r$6 = d.name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		s = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return [name, ok];
			return [name, ok];
		}
		i = strings.Index(s, ":");
		if (i < 0) {
			name.Local = s;
		} else {
			name.Space = $substring(s, 0, i);
			name.Local = $substring(s, (i + 1 >> 0));
		}
		_tmp = $clone(name, Name);
		_tmp$1 = true;
		Name.copy(name, _tmp);
		ok = _tmp$1;
		$s = -1; return [name, ok];
		return [name, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.nsname }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.i = i; $f.name = name; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.nsname = function() { return this.$val.nsname(); };
	Decoder.ptr.prototype.name = function() {
		var $ptr, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, d, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; d = $f.d; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = "";
		ok = false;
		d = this;
		d.buf.Reset();
		_r$6 = d.readName(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!_r$6) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$6) { */ case 1:
			_tmp = "";
			_tmp$1 = false;
			s = _tmp;
			ok = _tmp$1;
			$s = -1; return [s, ok];
			return [s, ok];
		/* } */ case 2:
		b = d.buf.Bytes();
		if (!isName(b)) {
			d.err = d.syntaxError("invalid XML name: " + $bytesToString(b));
			_tmp$2 = "";
			_tmp$3 = false;
			s = _tmp$2;
			ok = _tmp$3;
			$s = -1; return [s, ok];
			return [s, ok];
		}
		_tmp$4 = $bytesToString(b);
		_tmp$5 = true;
		s = _tmp$4;
		ok = _tmp$5;
		$s = -1; return [s, ok];
		return [s, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.name }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.d = d; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.name = function() { return this.$val.name(); };
	Decoder.ptr.prototype.readName = function() {
		var $ptr, _r$6, _r$7, _tuple, _tuple$1, b, d, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; d = $f.d; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ok = false;
		d = this;
		b = 0;
		_r$6 = d.mustgetc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return ok;
			return ok;
		}
		if (b < 128 && !isNameByte(b)) {
			d.ungetc(b);
			ok = false;
			$s = -1; return ok;
			return ok;
		}
		d.buf.WriteByte(b);
		/* while (true) { */ case 2:
			_r$7 = d.mustgetc(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$1 = _r$7;
			b = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				$s = -1; return ok;
				return ok;
			}
			if (b < 128 && !isNameByte(b)) {
				d.ungetc(b);
				/* break; */ $s = 3; continue;
			}
			d.buf.WriteByte(b);
		/* } */ $s = 2; continue; case 3:
		ok = true;
		$s = -1; return ok;
		return ok;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.readName }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.d = d; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.readName = function() { return this.$val.readName(); };
	isNameByte = function(c) {
		var $ptr, c;
		return 65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57 || (c === 95) || (c === 58) || (c === 46) || (c === 45);
	};
	isName = function(s) {
		var $ptr, _tuple, _tuple$1, c, n, s;
		if (s.$length === 0) {
			return false;
		}
		_tuple = utf8.DecodeRune(s);
		c = _tuple[0];
		n = _tuple[1];
		if ((c === 65533) && (n === 1)) {
			return false;
		}
		if (!unicode.Is(first, c)) {
			return false;
		}
		while (true) {
			if (!(n < s.$length)) { break; }
			s = $subslice(s, n);
			_tuple$1 = utf8.DecodeRune(s);
			c = _tuple$1[0];
			n = _tuple$1[1];
			if ((c === 65533) && (n === 1)) {
				return false;
			}
			if (!unicode.Is(first, c) && !unicode.Is(second, c)) {
				return false;
			}
		}
		return true;
	};
	isNameString = function(s) {
		var $ptr, _tuple, _tuple$1, c, n, s;
		if (s.length === 0) {
			return false;
		}
		_tuple = utf8.DecodeRuneInString(s);
		c = _tuple[0];
		n = _tuple[1];
		if ((c === 65533) && (n === 1)) {
			return false;
		}
		if (!unicode.Is(first, c)) {
			return false;
		}
		while (true) {
			if (!(n < s.length)) { break; }
			s = $substring(s, n);
			_tuple$1 = utf8.DecodeRuneInString(s);
			c = _tuple$1[0];
			n = _tuple$1[1];
			if ((c === 65533) && (n === 1)) {
				return false;
			}
			if (!unicode.Is(first, c) && !unicode.Is(second, c)) {
				return false;
			}
		}
		return true;
	};
	EscapeText = function(w, s) {
		var $ptr, _r$6, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$6 = $f._r$6; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$6 = escapeText(w, s, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EscapeText }; } $f.$ptr = $ptr; $f._r$6 = _r$6; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.EscapeText = EscapeText;
	escapeText = function(w, s, escapeNewline) {
		var $ptr, _1, _r$6, _r$7, _r$8, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err$1, err$2, esc, escapeNewline, i, last, r, s, w, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; esc = $f.esc; escapeNewline = $f.escapeNewline; i = $f.i; last = $f.last; r = $f.r; s = $f.s; w = $f.w; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		esc = sliceType.nil;
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.$length)) { break; } */ if(!(i < s.$length)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune($subslice(s, i));
			r = _tuple[0];
			width = _tuple[1];
			i = i + (width) >> 0;
				_1 = r;
				if (_1 === (34)) {
					esc = esc_quot;
				} else if (_1 === (39)) {
					esc = esc_apos;
				} else if (_1 === (38)) {
					esc = esc_amp;
				} else if (_1 === (60)) {
					esc = esc_lt;
				} else if (_1 === (62)) {
					esc = esc_gt;
				} else if (_1 === (9)) {
					esc = esc_tab;
				} else if (_1 === (10)) {
					if (!escapeNewline) {
						/* continue; */ $s = 1; continue;
					}
					esc = esc_nl;
				} else if (_1 === (13)) {
					esc = esc_cr;
				} else {
					if (!isInCharacterRange(r) || ((r === 65533) && (width === 1))) {
						esc = esc_fffd;
						/* break; */ $s = 3; continue;
					}
					/* continue; */ $s = 1; continue;
				}
			case 3:
			_r$6 = w.Write($subslice(s, last, (i - width >> 0))); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$1 = _r$6;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			_r$7 = w.Write(esc); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$2 = _r$7;
			err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
				return err$1;
			}
			last = i;
		/* } */ $s = 1; continue; case 2:
		_r$8 = w.Write($subslice(s, last)); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$3 = _r$8;
		err$2 = _tuple$3[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return err$2;
			return err$2;
		}
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escapeText }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.esc = esc; $f.escapeNewline = escapeNewline; $f.i = i; $f.last = last; $f.r = r; $f.s = s; $f.w = w; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.ptr.prototype.EscapeString = function(s) {
		var $ptr, _1, _r$6, _r$7, _r$8, _tuple, esc, i, last, p, r, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; esc = $f.esc; i = $f.i; last = $f.last; p = $f.p; r = $f.r; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		esc = sliceType.nil;
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			r = _tuple[0];
			width = _tuple[1];
			i = i + (width) >> 0;
				_1 = r;
				if (_1 === (34)) {
					esc = esc_quot;
				} else if (_1 === (39)) {
					esc = esc_apos;
				} else if (_1 === (38)) {
					esc = esc_amp;
				} else if (_1 === (60)) {
					esc = esc_lt;
				} else if (_1 === (62)) {
					esc = esc_gt;
				} else if (_1 === (9)) {
					esc = esc_tab;
				} else if (_1 === (10)) {
					esc = esc_nl;
				} else if (_1 === (13)) {
					esc = esc_cr;
				} else {
					if (!isInCharacterRange(r) || ((r === 65533) && (width === 1))) {
						esc = esc_fffd;
						/* break; */ $s = 3; continue;
					}
					/* continue; */ $s = 1; continue;
				}
			case 3:
			_r$6 = p.Writer.WriteString($substring(s, last, (i - width >> 0))); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_r$7 = p.Writer.Write(esc); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			last = i;
		/* } */ $s = 1; continue; case 2:
		_r$8 = p.Writer.WriteString($substring(s, last)); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.EscapeString }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.esc = esc; $f.i = i; $f.last = last; $f.p = p; $f.r = r; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.EscapeString = function(s) { return this.$val.EscapeString(s); };
	emitCDATA = function(w, s) {
		var $ptr, _r$10, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, err, err$1, err$2, err$3, err$4, i, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; i = $f.i; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s.$length === 0) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		_r$6 = w.Write(cdataStart); /* */ $s = 1; case 1: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple = _r$6;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		/* while (true) { */ case 2:
			i = bytes.Index(s, cdataEnd);
			/* */ if (i >= 0 && (i + cdataEnd.$length >> 0) <= s.$length) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i >= 0 && (i + cdataEnd.$length >> 0) <= s.$length) { */ case 4:
				_r$7 = w.Write($subslice(s, 0, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$1 = _r$7;
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
					return err$1;
				}
				_r$8 = w.Write(cdataEscape); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$2 = _r$8;
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
					return err$2;
				}
				i = i + (cdataEnd.$length) >> 0;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$9 = w.Write(s); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$3 = _r$9;
				err$3 = _tuple$3[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
					return err$3;
				}
				/* break; */ $s = 3; continue;
			/* } */ case 6:
			s = $subslice(s, i);
		/* } */ $s = 2; continue; case 3:
		_r$10 = w.Write(cdataEnd); /* */ $s = 10; case 10: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple$4 = _r$10;
		err$4 = _tuple$4[1];
		if (!($interfaceIsEqual(err$4, $ifaceNil))) {
			$s = -1; return err$4;
			return err$4;
		}
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: emitCDATA }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.i = i; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	procInst = function(param, s) {
		var $ptr, idx, param, s, v;
		param = param + "=";
		idx = strings.Index(s, param);
		if (idx === -1) {
			return "";
		}
		v = $substring(s, (idx + param.length >> 0));
		if (v === "") {
			return "";
		}
		if (!((v.charCodeAt(0) === 39)) && !((v.charCodeAt(0) === 34))) {
			return "";
		}
		idx = strings.IndexRune($substring(v, 1), (v.charCodeAt(0) >> 0));
		if (idx === -1) {
			return "";
		}
		return $substring(v, 1, (idx + 1 >> 0));
	};
	ptrType$7.methods = [{prop: "Indent", name: "Indent", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "EncodeElement", name: "EncodeElement", pkg: "", typ: $funcType([$emptyInterface, StartElement], [$error], false)}, {prop: "EncodeToken", name: "EncodeToken", pkg: "", typ: $funcType([Token], [$error], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$10.methods = [{prop: "createAttrPrefix", name: "createAttrPrefix", pkg: "encoding/xml", typ: $funcType([$String], [$String], false)}, {prop: "deleteAttrPrefix", name: "deleteAttrPrefix", pkg: "encoding/xml", typ: $funcType([$String], [], false)}, {prop: "markPrefix", name: "markPrefix", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "popPrefix", name: "popPrefix", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "marshalValue", name: "marshalValue", pkg: "encoding/xml", typ: $funcType([reflect.Value, ptrType$8, ptrType$9], [$error], false)}, {prop: "marshalInterface", name: "marshalInterface", pkg: "encoding/xml", typ: $funcType([Marshaler, StartElement], [$error], false)}, {prop: "marshalTextInterface", name: "marshalTextInterface", pkg: "encoding/xml", typ: $funcType([encoding.TextMarshaler, StartElement], [$error], false)}, {prop: "writeStart", name: "writeStart", pkg: "encoding/xml", typ: $funcType([ptrType$9], [$error], false)}, {prop: "writeEnd", name: "writeEnd", pkg: "encoding/xml", typ: $funcType([Name], [$error], false)}, {prop: "marshalSimple", name: "marshalSimple", pkg: "encoding/xml", typ: $funcType([reflect.Type, reflect.Value], [$String, sliceType, $error], false)}, {prop: "marshalStruct", name: "marshalStruct", pkg: "encoding/xml", typ: $funcType([ptrType$12, reflect.Value], [$error], false)}, {prop: "cachedWriteError", name: "cachedWriteError", pkg: "encoding/xml", typ: $funcType([], [$error], false)}, {prop: "writeIndent", name: "writeIndent", pkg: "encoding/xml", typ: $funcType([$Int], [], false)}, {prop: "EscapeString", name: "EscapeString", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$15.methods = [{prop: "trim", name: "trim", pkg: "encoding/xml", typ: $funcType([sliceType$3], [$error], false)}, {prop: "push", name: "push", pkg: "encoding/xml", typ: $funcType([sliceType$3], [$error], false)}];
	ptrType$16.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnmarshalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "value", name: "value", pkg: "encoding/xml", typ: $funcType([reflect.Value], [reflect.Value], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$19.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	StartElement.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [StartElement], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [EndElement], false)}];
	CharData.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [CharData], false)}];
	Comment.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Comment], false)}];
	ProcInst.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ProcInst], false)}];
	Directive.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Directive], false)}];
	ptrType$17.methods = [{prop: "Decode", name: "Decode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "DecodeElement", name: "DecodeElement", pkg: "", typ: $funcType([$emptyInterface, ptrType$9], [$error], false)}, {prop: "unmarshalInterface", name: "unmarshalInterface", pkg: "encoding/xml", typ: $funcType([Unmarshaler, ptrType$9], [$error], false)}, {prop: "unmarshalTextInterface", name: "unmarshalTextInterface", pkg: "encoding/xml", typ: $funcType([encoding.TextUnmarshaler, ptrType$9], [$error], false)}, {prop: "unmarshalAttr", name: "unmarshalAttr", pkg: "encoding/xml", typ: $funcType([reflect.Value, Attr], [$error], false)}, {prop: "unmarshal", name: "unmarshal", pkg: "encoding/xml", typ: $funcType([reflect.Value, ptrType$9], [$error], false)}, {prop: "unmarshalPath", name: "unmarshalPath", pkg: "encoding/xml", typ: $funcType([ptrType$12, reflect.Value, sliceType$3, ptrType$9], [$Bool, $error], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "translate", name: "translate", pkg: "encoding/xml", typ: $funcType([ptrType$20, $Bool], [], false)}, {prop: "switchToReader", name: "switchToReader", pkg: "encoding/xml", typ: $funcType([io.Reader], [], false)}, {prop: "push", name: "push", pkg: "encoding/xml", typ: $funcType([$Int], [ptrType$14], false)}, {prop: "pop", name: "pop", pkg: "encoding/xml", typ: $funcType([], [ptrType$14], false)}, {prop: "pushEOF", name: "pushEOF", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "popEOF", name: "popEOF", pkg: "encoding/xml", typ: $funcType([], [$Bool], false)}, {prop: "pushElement", name: "pushElement", pkg: "encoding/xml", typ: $funcType([Name], [], false)}, {prop: "pushNs", name: "pushNs", pkg: "encoding/xml", typ: $funcType([$String, $String, $Bool], [], false)}, {prop: "syntaxError", name: "syntaxError", pkg: "encoding/xml", typ: $funcType([$String], [$error], false)}, {prop: "popElement", name: "popElement", pkg: "encoding/xml", typ: $funcType([ptrType$21], [$Bool], false)}, {prop: "autoClose", name: "autoClose", pkg: "encoding/xml", typ: $funcType([Token], [Token, $Bool], false)}, {prop: "RawToken", name: "RawToken", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "rawToken", name: "rawToken", pkg: "encoding/xml", typ: $funcType([], [Token, $error], false)}, {prop: "attrval", name: "attrval", pkg: "encoding/xml", typ: $funcType([], [sliceType], false)}, {prop: "space", name: "space", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "getc", name: "getc", pkg: "encoding/xml", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "InputOffset", name: "InputOffset", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "savedOffset", name: "savedOffset", pkg: "encoding/xml", typ: $funcType([], [$Int], false)}, {prop: "mustgetc", name: "mustgetc", pkg: "encoding/xml", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "ungetc", name: "ungetc", pkg: "encoding/xml", typ: $funcType([$Uint8], [], false)}, {prop: "text", name: "text", pkg: "encoding/xml", typ: $funcType([$Int, $Bool], [sliceType], false)}, {prop: "nsname", name: "nsname", pkg: "encoding/xml", typ: $funcType([], [Name, $Bool], false)}, {prop: "name", name: "name", pkg: "encoding/xml", typ: $funcType([], [$String, $Bool], false)}, {prop: "readName", name: "readName", pkg: "encoding/xml", typ: $funcType([], [$Bool], false)}];
	Marshaler.init([{prop: "MarshalXML", name: "MarshalXML", pkg: "", typ: $funcType([ptrType$7, StartElement], [$error], false)}]);
	MarshalerAttr.init([{prop: "MarshalXMLAttr", name: "MarshalXMLAttr", pkg: "", typ: $funcType([Name], [Attr, $error], false)}]);
	Encoder.init("encoding/xml", [{prop: "p", name: "p", exported: false, typ: printer, tag: ""}]);
	printer.init("encoding/xml", [{prop: "Writer", name: "", exported: true, typ: ptrType$6, tag: ""}, {prop: "encoder", name: "encoder", exported: false, typ: ptrType$7, tag: ""}, {prop: "seq", name: "seq", exported: false, typ: $Int, tag: ""}, {prop: "indent", name: "indent", exported: false, typ: $String, tag: ""}, {prop: "prefix", name: "prefix", exported: false, typ: $String, tag: ""}, {prop: "depth", name: "depth", exported: false, typ: $Int, tag: ""}, {prop: "indentedIn", name: "indentedIn", exported: false, typ: $Bool, tag: ""}, {prop: "putNewline", name: "putNewline", exported: false, typ: $Bool, tag: ""}, {prop: "attrNS", name: "attrNS", exported: false, typ: mapType, tag: ""}, {prop: "attrPrefix", name: "attrPrefix", exported: false, typ: mapType, tag: ""}, {prop: "prefixes", name: "prefixes", exported: false, typ: sliceType$3, tag: ""}, {prop: "tags", name: "tags", exported: false, typ: sliceType$4, tag: ""}]);
	parentStack.init("encoding/xml", [{prop: "p", name: "p", exported: false, typ: ptrType$10, tag: ""}, {prop: "stack", name: "stack", exported: false, typ: sliceType$3, tag: ""}]);
	UnsupportedTypeError.init("", [{prop: "Type", name: "Type", exported: true, typ: reflect.Type, tag: ""}]);
	Unmarshaler.init([{prop: "UnmarshalXML", name: "UnmarshalXML", pkg: "", typ: $funcType([ptrType$17, StartElement], [$error], false)}]);
	UnmarshalerAttr.init([{prop: "UnmarshalXMLAttr", name: "UnmarshalXMLAttr", pkg: "", typ: $funcType([Attr], [$error], false)}]);
	typeInfo.init("encoding/xml", [{prop: "xmlname", name: "xmlname", exported: false, typ: ptrType$8, tag: ""}, {prop: "fields", name: "fields", exported: false, typ: sliceType$7, tag: ""}]);
	fieldInfo.init("encoding/xml", [{prop: "idx", name: "idx", exported: false, typ: sliceType$8, tag: ""}, {prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "xmlns", name: "xmlns", exported: false, typ: $String, tag: ""}, {prop: "flags", name: "flags", exported: false, typ: fieldFlags, tag: ""}, {prop: "parents", name: "parents", exported: false, typ: sliceType$3, tag: ""}]);
	TagPathError.init("", [{prop: "Struct", name: "Struct", exported: true, typ: reflect.Type, tag: ""}, {prop: "Field1", name: "Field1", exported: true, typ: $String, tag: ""}, {prop: "Tag1", name: "Tag1", exported: true, typ: $String, tag: ""}, {prop: "Field2", name: "Field2", exported: true, typ: $String, tag: ""}, {prop: "Tag2", name: "Tag2", exported: true, typ: $String, tag: ""}]);
	SyntaxError.init("", [{prop: "Msg", name: "Msg", exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}]);
	Name.init("", [{prop: "Space", name: "Space", exported: true, typ: $String, tag: ""}, {prop: "Local", name: "Local", exported: true, typ: $String, tag: ""}]);
	Attr.init("", [{prop: "Name", name: "Name", exported: true, typ: Name, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}]);
	Token.init([]);
	StartElement.init("", [{prop: "Name", name: "Name", exported: true, typ: Name, tag: ""}, {prop: "Attr", name: "Attr", exported: true, typ: sliceType$6, tag: ""}]);
	EndElement.init("", [{prop: "Name", name: "Name", exported: true, typ: Name, tag: ""}]);
	CharData.init($Uint8);
	Comment.init($Uint8);
	ProcInst.init("", [{prop: "Target", name: "Target", exported: true, typ: $String, tag: ""}, {prop: "Inst", name: "Inst", exported: true, typ: sliceType, tag: ""}]);
	Directive.init($Uint8);
	Decoder.init("encoding/xml", [{prop: "Strict", name: "Strict", exported: true, typ: $Bool, tag: ""}, {prop: "AutoClose", name: "AutoClose", exported: true, typ: sliceType$3, tag: ""}, {prop: "Entity", name: "Entity", exported: true, typ: mapType, tag: ""}, {prop: "CharsetReader", name: "CharsetReader", exported: true, typ: funcType, tag: ""}, {prop: "DefaultSpace", name: "DefaultSpace", exported: true, typ: $String, tag: ""}, {prop: "r", name: "r", exported: false, typ: io.ByteReader, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: bytes.Buffer, tag: ""}, {prop: "saved", name: "saved", exported: false, typ: ptrType$13, tag: ""}, {prop: "stk", name: "stk", exported: false, typ: ptrType$14, tag: ""}, {prop: "free", name: "free", exported: false, typ: ptrType$14, tag: ""}, {prop: "needClose", name: "needClose", exported: false, typ: $Bool, tag: ""}, {prop: "toClose", name: "toClose", exported: false, typ: Name, tag: ""}, {prop: "nextToken", name: "nextToken", exported: false, typ: Token, tag: ""}, {prop: "nextByte", name: "nextByte", exported: false, typ: $Int, tag: ""}, {prop: "ns", name: "ns", exported: false, typ: mapType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "line", name: "line", exported: false, typ: $Int, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Int64, tag: ""}, {prop: "unmarshalDepth", name: "unmarshalDepth", exported: false, typ: $Int, tag: ""}]);
	stack.init("encoding/xml", [{prop: "next", name: "next", exported: false, typ: ptrType$14, tag: ""}, {prop: "kind", name: "kind", exported: false, typ: $Int, tag: ""}, {prop: "name", name: "name", exported: false, typ: Name, tag: ""}, {prop: "ok", name: "ok", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		tinfoLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		begComment = new sliceType($stringToBytes("<!--"));
		endComment = new sliceType($stringToBytes("-->"));
		endProcInst = new sliceType($stringToBytes("?>"));
		_r = reflect.TypeOf(ptrType.nil).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		marshalerType = _r;
		_r$1 = reflect.TypeOf(ptrType$1.nil).Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		marshalerAttrType = _r$1;
		_r$2 = reflect.TypeOf(ptrType$2.nil).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		textMarshalerType = _r$2;
		ddBytes = new sliceType($stringToBytes("--"));
		_r$3 = reflect.TypeOf(ptrType$3.nil).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		unmarshalerType = _r$3;
		_r$4 = reflect.TypeOf(ptrType$4.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		unmarshalerAttrType = _r$4;
		_r$5 = reflect.TypeOf(ptrType$5.nil).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		textUnmarshalerType = _r$5;
		tinfoMap = {};
		nameType = reflect.TypeOf((x = new Name.ptr("", ""), new x.constructor.elem(x)));
		errRawToken = errors.New("xml: cannot use RawToken from UnmarshalXML method");
		entity = $makeMap($String.keyFor, [{ k: "lt", v: 60 }, { k: "gt", v: 62 }, { k: "amp", v: 38 }, { k: "apos", v: 39 }, { k: "quot", v: 34 }]);
		first = new unicode.RangeTable.ptr(new sliceType$1([new unicode.Range16.ptr(58, 58, 1), new unicode.Range16.ptr(65, 90, 1), new unicode.Range16.ptr(95, 95, 1), new unicode.Range16.ptr(97, 122, 1), new unicode.Range16.ptr(192, 214, 1), new unicode.Range16.ptr(216, 246, 1), new unicode.Range16.ptr(248, 255, 1), new unicode.Range16.ptr(256, 305, 1), new unicode.Range16.ptr(308, 318, 1), new unicode.Range16.ptr(321, 328, 1), new unicode.Range16.ptr(330, 382, 1), new unicode.Range16.ptr(384, 451, 1), new unicode.Range16.ptr(461, 496, 1), new unicode.Range16.ptr(500, 501, 1), new unicode.Range16.ptr(506, 535, 1), new unicode.Range16.ptr(592, 680, 1), new unicode.Range16.ptr(699, 705, 1), new unicode.Range16.ptr(902, 902, 1), new unicode.Range16.ptr(904, 906, 1), new unicode.Range16.ptr(908, 908, 1), new unicode.Range16.ptr(910, 929, 1), new unicode.Range16.ptr(931, 974, 1), new unicode.Range16.ptr(976, 982, 1), new unicode.Range16.ptr(986, 992, 2), new unicode.Range16.ptr(994, 1011, 1), new unicode.Range16.ptr(1025, 1036, 1), new unicode.Range16.ptr(1038, 1103, 1), new unicode.Range16.ptr(1105, 1116, 1), new unicode.Range16.ptr(1118, 1153, 1), new unicode.Range16.ptr(1168, 1220, 1), new unicode.Range16.ptr(1223, 1224, 1), new unicode.Range16.ptr(1227, 1228, 1), new unicode.Range16.ptr(1232, 1259, 1), new unicode.Range16.ptr(1262, 1269, 1), new unicode.Range16.ptr(1272, 1273, 1), new unicode.Range16.ptr(1329, 1366, 1), new unicode.Range16.ptr(1369, 1369, 1), new unicode.Range16.ptr(1377, 1414, 1), new unicode.Range16.ptr(1488, 1514, 1), new unicode.Range16.ptr(1520, 1522, 1), new unicode.Range16.ptr(1569, 1594, 1), new unicode.Range16.ptr(1601, 1610, 1), new unicode.Range16.ptr(1649, 1719, 1), new unicode.Range16.ptr(1722, 1726, 1), new unicode.Range16.ptr(1728, 1742, 1), new unicode.Range16.ptr(1744, 1747, 1), new unicode.Range16.ptr(1749, 1749, 1), new unicode.Range16.ptr(1765, 1766, 1), new unicode.Range16.ptr(2309, 2361, 1), new unicode.Range16.ptr(2365, 2365, 1), new unicode.Range16.ptr(2392, 2401, 1), new unicode.Range16.ptr(2437, 2444, 1), new unicode.Range16.ptr(2447, 2448, 1), new unicode.Range16.ptr(2451, 2472, 1), new unicode.Range16.ptr(2474, 2480, 1), new unicode.Range16.ptr(2482, 2482, 1), new unicode.Range16.ptr(2486, 2489, 1), new unicode.Range16.ptr(2524, 2525, 1), new unicode.Range16.ptr(2527, 2529, 1), new unicode.Range16.ptr(2544, 2545, 1), new unicode.Range16.ptr(2565, 2570, 1), new unicode.Range16.ptr(2575, 2576, 1), new unicode.Range16.ptr(2579, 2600, 1), new unicode.Range16.ptr(2602, 2608, 1), new unicode.Range16.ptr(2610, 2611, 1), new unicode.Range16.ptr(2613, 2614, 1), new unicode.Range16.ptr(2616, 2617, 1), new unicode.Range16.ptr(2649, 2652, 1), new unicode.Range16.ptr(2654, 2654, 1), new unicode.Range16.ptr(2674, 2676, 1), new unicode.Range16.ptr(2693, 2699, 1), new unicode.Range16.ptr(2701, 2701, 1), new unicode.Range16.ptr(2703, 2705, 1), new unicode.Range16.ptr(2707, 2728, 1), new unicode.Range16.ptr(2730, 2736, 1), new unicode.Range16.ptr(2738, 2739, 1), new unicode.Range16.ptr(2741, 2745, 1), new unicode.Range16.ptr(2749, 2784, 35), new unicode.Range16.ptr(2821, 2828, 1), new unicode.Range16.ptr(2831, 2832, 1), new unicode.Range16.ptr(2835, 2856, 1), new unicode.Range16.ptr(2858, 2864, 1), new unicode.Range16.ptr(2866, 2867, 1), new unicode.Range16.ptr(2870, 2873, 1), new unicode.Range16.ptr(2877, 2877, 1), new unicode.Range16.ptr(2908, 2909, 1), new unicode.Range16.ptr(2911, 2913, 1), new unicode.Range16.ptr(2949, 2954, 1), new unicode.Range16.ptr(2958, 2960, 1), new unicode.Range16.ptr(2962, 2965, 1), new unicode.Range16.ptr(2969, 2970, 1), new unicode.Range16.ptr(2972, 2972, 1), new unicode.Range16.ptr(2974, 2975, 1), new unicode.Range16.ptr(2979, 2980, 1), new unicode.Range16.ptr(2984, 2986, 1), new unicode.Range16.ptr(2990, 2997, 1), new unicode.Range16.ptr(2999, 3001, 1), new unicode.Range16.ptr(3077, 3084, 1), new unicode.Range16.ptr(3086, 3088, 1), new unicode.Range16.ptr(3090, 3112, 1), new unicode.Range16.ptr(3114, 3123, 1), new unicode.Range16.ptr(3125, 3129, 1), new unicode.Range16.ptr(3168, 3169, 1), new unicode.Range16.ptr(3205, 3212, 1), new unicode.Range16.ptr(3214, 3216, 1), new unicode.Range16.ptr(3218, 3240, 1), new unicode.Range16.ptr(3242, 3251, 1), new unicode.Range16.ptr(3253, 3257, 1), new unicode.Range16.ptr(3294, 3294, 1), new unicode.Range16.ptr(3296, 3297, 1), new unicode.Range16.ptr(3333, 3340, 1), new unicode.Range16.ptr(3342, 3344, 1), new unicode.Range16.ptr(3346, 3368, 1), new unicode.Range16.ptr(3370, 3385, 1), new unicode.Range16.ptr(3424, 3425, 1), new unicode.Range16.ptr(3585, 3630, 1), new unicode.Range16.ptr(3632, 3632, 1), new unicode.Range16.ptr(3634, 3635, 1), new unicode.Range16.ptr(3648, 3653, 1), new unicode.Range16.ptr(3713, 3714, 1), new unicode.Range16.ptr(3716, 3716, 1), new unicode.Range16.ptr(3719, 3720, 1), new unicode.Range16.ptr(3722, 3725, 3), new unicode.Range16.ptr(3732, 3735, 1), new unicode.Range16.ptr(3737, 3743, 1), new unicode.Range16.ptr(3745, 3747, 1), new unicode.Range16.ptr(3749, 3751, 2), new unicode.Range16.ptr(3754, 3755, 1), new unicode.Range16.ptr(3757, 3758, 1), new unicode.Range16.ptr(3760, 3760, 1), new unicode.Range16.ptr(3762, 3763, 1), new unicode.Range16.ptr(3773, 3773, 1), new unicode.Range16.ptr(3776, 3780, 1), new unicode.Range16.ptr(3904, 3911, 1), new unicode.Range16.ptr(3913, 3945, 1), new unicode.Range16.ptr(4256, 4293, 1), new unicode.Range16.ptr(4304, 4342, 1), new unicode.Range16.ptr(4352, 4352, 1), new unicode.Range16.ptr(4354, 4355, 1), new unicode.Range16.ptr(4357, 4359, 1), new unicode.Range16.ptr(4361, 4361, 1), new unicode.Range16.ptr(4363, 4364, 1), new unicode.Range16.ptr(4366, 4370, 1), new unicode.Range16.ptr(4412, 4416, 2), new unicode.Range16.ptr(4428, 4432, 2), new unicode.Range16.ptr(4436, 4437, 1), new unicode.Range16.ptr(4441, 4441, 1), new unicode.Range16.ptr(4447, 4449, 1), new unicode.Range16.ptr(4451, 4457, 2), new unicode.Range16.ptr(4461, 4462, 1), new unicode.Range16.ptr(4466, 4467, 1), new unicode.Range16.ptr(4469, 4510, 41), new unicode.Range16.ptr(4520, 4523, 3), new unicode.Range16.ptr(4526, 4527, 1), new unicode.Range16.ptr(4535, 4536, 1), new unicode.Range16.ptr(4538, 4538, 1), new unicode.Range16.ptr(4540, 4546, 1), new unicode.Range16.ptr(4587, 4592, 5), new unicode.Range16.ptr(4601, 4601, 1), new unicode.Range16.ptr(7680, 7835, 1), new unicode.Range16.ptr(7840, 7929, 1), new unicode.Range16.ptr(7936, 7957, 1), new unicode.Range16.ptr(7960, 7965, 1), new unicode.Range16.ptr(7968, 8005, 1), new unicode.Range16.ptr(8008, 8013, 1), new unicode.Range16.ptr(8016, 8023, 1), new unicode.Range16.ptr(8025, 8027, 2), new unicode.Range16.ptr(8029, 8029, 1), new unicode.Range16.ptr(8031, 8061, 1), new unicode.Range16.ptr(8064, 8116, 1), new unicode.Range16.ptr(8118, 8124, 1), new unicode.Range16.ptr(8126, 8126, 1), new unicode.Range16.ptr(8130, 8132, 1), new unicode.Range16.ptr(8134, 8140, 1), new unicode.Range16.ptr(8144, 8147, 1), new unicode.Range16.ptr(8150, 8155, 1), new unicode.Range16.ptr(8160, 8172, 1), new unicode.Range16.ptr(8178, 8180, 1), new unicode.Range16.ptr(8182, 8188, 1), new unicode.Range16.ptr(8486, 8486, 1), new unicode.Range16.ptr(8490, 8491, 1), new unicode.Range16.ptr(8494, 8494, 1), new unicode.Range16.ptr(8576, 8578, 1), new unicode.Range16.ptr(12295, 12295, 1), new unicode.Range16.ptr(12321, 12329, 1), new unicode.Range16.ptr(12353, 12436, 1), new unicode.Range16.ptr(12449, 12538, 1), new unicode.Range16.ptr(12549, 12588, 1), new unicode.Range16.ptr(19968, 40869, 1), new unicode.Range16.ptr(44032, 55203, 1)]), sliceType$2.nil, 0);
		second = new unicode.RangeTable.ptr(new sliceType$1([new unicode.Range16.ptr(45, 46, 1), new unicode.Range16.ptr(48, 57, 1), new unicode.Range16.ptr(183, 183, 1), new unicode.Range16.ptr(720, 721, 1), new unicode.Range16.ptr(768, 837, 1), new unicode.Range16.ptr(864, 865, 1), new unicode.Range16.ptr(903, 903, 1), new unicode.Range16.ptr(1155, 1158, 1), new unicode.Range16.ptr(1425, 1441, 1), new unicode.Range16.ptr(1443, 1465, 1), new unicode.Range16.ptr(1467, 1469, 1), new unicode.Range16.ptr(1471, 1471, 1), new unicode.Range16.ptr(1473, 1474, 1), new unicode.Range16.ptr(1476, 1600, 124), new unicode.Range16.ptr(1611, 1618, 1), new unicode.Range16.ptr(1632, 1641, 1), new unicode.Range16.ptr(1648, 1648, 1), new unicode.Range16.ptr(1750, 1756, 1), new unicode.Range16.ptr(1757, 1759, 1), new unicode.Range16.ptr(1760, 1764, 1), new unicode.Range16.ptr(1767, 1768, 1), new unicode.Range16.ptr(1770, 1773, 1), new unicode.Range16.ptr(1776, 1785, 1), new unicode.Range16.ptr(2305, 2307, 1), new unicode.Range16.ptr(2364, 2364, 1), new unicode.Range16.ptr(2366, 2380, 1), new unicode.Range16.ptr(2381, 2381, 1), new unicode.Range16.ptr(2385, 2388, 1), new unicode.Range16.ptr(2402, 2403, 1), new unicode.Range16.ptr(2406, 2415, 1), new unicode.Range16.ptr(2433, 2435, 1), new unicode.Range16.ptr(2492, 2492, 1), new unicode.Range16.ptr(2494, 2495, 1), new unicode.Range16.ptr(2496, 2500, 1), new unicode.Range16.ptr(2503, 2504, 1), new unicode.Range16.ptr(2507, 2509, 1), new unicode.Range16.ptr(2519, 2519, 1), new unicode.Range16.ptr(2530, 2531, 1), new unicode.Range16.ptr(2534, 2543, 1), new unicode.Range16.ptr(2562, 2620, 58), new unicode.Range16.ptr(2622, 2623, 1), new unicode.Range16.ptr(2624, 2626, 1), new unicode.Range16.ptr(2631, 2632, 1), new unicode.Range16.ptr(2635, 2637, 1), new unicode.Range16.ptr(2662, 2671, 1), new unicode.Range16.ptr(2672, 2673, 1), new unicode.Range16.ptr(2689, 2691, 1), new unicode.Range16.ptr(2748, 2748, 1), new unicode.Range16.ptr(2750, 2757, 1), new unicode.Range16.ptr(2759, 2761, 1), new unicode.Range16.ptr(2763, 2765, 1), new unicode.Range16.ptr(2790, 2799, 1), new unicode.Range16.ptr(2817, 2819, 1), new unicode.Range16.ptr(2876, 2876, 1), new unicode.Range16.ptr(2878, 2883, 1), new unicode.Range16.ptr(2887, 2888, 1), new unicode.Range16.ptr(2891, 2893, 1), new unicode.Range16.ptr(2902, 2903, 1), new unicode.Range16.ptr(2918, 2927, 1), new unicode.Range16.ptr(2946, 2947, 1), new unicode.Range16.ptr(3006, 3010, 1), new unicode.Range16.ptr(3014, 3016, 1), new unicode.Range16.ptr(3018, 3021, 1), new unicode.Range16.ptr(3031, 3031, 1), new unicode.Range16.ptr(3047, 3055, 1), new unicode.Range16.ptr(3073, 3075, 1), new unicode.Range16.ptr(3134, 3140, 1), new unicode.Range16.ptr(3142, 3144, 1), new unicode.Range16.ptr(3146, 3149, 1), new unicode.Range16.ptr(3157, 3158, 1), new unicode.Range16.ptr(3174, 3183, 1), new unicode.Range16.ptr(3202, 3203, 1), new unicode.Range16.ptr(3262, 3268, 1), new unicode.Range16.ptr(3270, 3272, 1), new unicode.Range16.ptr(3274, 3277, 1), new unicode.Range16.ptr(3285, 3286, 1), new unicode.Range16.ptr(3302, 3311, 1), new unicode.Range16.ptr(3330, 3331, 1), new unicode.Range16.ptr(3390, 3395, 1), new unicode.Range16.ptr(3398, 3400, 1), new unicode.Range16.ptr(3402, 3405, 1), new unicode.Range16.ptr(3415, 3415, 1), new unicode.Range16.ptr(3430, 3439, 1), new unicode.Range16.ptr(3633, 3633, 1), new unicode.Range16.ptr(3636, 3642, 1), new unicode.Range16.ptr(3654, 3654, 1), new unicode.Range16.ptr(3655, 3662, 1), new unicode.Range16.ptr(3664, 3673, 1), new unicode.Range16.ptr(3761, 3761, 1), new unicode.Range16.ptr(3764, 3769, 1), new unicode.Range16.ptr(3771, 3772, 1), new unicode.Range16.ptr(3782, 3782, 1), new unicode.Range16.ptr(3784, 3789, 1), new unicode.Range16.ptr(3792, 3801, 1), new unicode.Range16.ptr(3864, 3865, 1), new unicode.Range16.ptr(3872, 3881, 1), new unicode.Range16.ptr(3893, 3897, 2), new unicode.Range16.ptr(3902, 3903, 1), new unicode.Range16.ptr(3953, 3972, 1), new unicode.Range16.ptr(3974, 3979, 1), new unicode.Range16.ptr(3984, 3989, 1), new unicode.Range16.ptr(3991, 3991, 1), new unicode.Range16.ptr(3993, 4013, 1), new unicode.Range16.ptr(4017, 4023, 1), new unicode.Range16.ptr(4025, 4025, 1), new unicode.Range16.ptr(8400, 8412, 1), new unicode.Range16.ptr(8417, 12293, 3876), new unicode.Range16.ptr(12330, 12335, 1), new unicode.Range16.ptr(12337, 12341, 1), new unicode.Range16.ptr(12441, 12442, 1), new unicode.Range16.ptr(12445, 12446, 1), new unicode.Range16.ptr(12540, 12542, 1)]), sliceType$2.nil, 0);
		htmlEntity = $makeMap($String.keyFor, [{ k: "nbsp", v: "\xC2\xA0" }, { k: "iexcl", v: "\xC2\xA1" }, { k: "cent", v: "\xC2\xA2" }, { k: "pound", v: "\xC2\xA3" }, { k: "curren", v: "\xC2\xA4" }, { k: "yen", v: "\xC2\xA5" }, { k: "brvbar", v: "\xC2\xA6" }, { k: "sect", v: "\xC2\xA7" }, { k: "uml", v: "\xC2\xA8" }, { k: "copy", v: "\xC2\xA9" }, { k: "ordf", v: "\xC2\xAA" }, { k: "laquo", v: "\xC2\xAB" }, { k: "not", v: "\xC2\xAC" }, { k: "shy", v: "\xC2\xAD" }, { k: "reg", v: "\xC2\xAE" }, { k: "macr", v: "\xC2\xAF" }, { k: "deg", v: "\xC2\xB0" }, { k: "plusmn", v: "\xC2\xB1" }, { k: "sup2", v: "\xC2\xB2" }, { k: "sup3", v: "\xC2\xB3" }, { k: "acute", v: "\xC2\xB4" }, { k: "micro", v: "\xC2\xB5" }, { k: "para", v: "\xC2\xB6" }, { k: "middot", v: "\xC2\xB7" }, { k: "cedil", v: "\xC2\xB8" }, { k: "sup1", v: "\xC2\xB9" }, { k: "ordm", v: "\xC2\xBA" }, { k: "raquo", v: "\xC2\xBB" }, { k: "frac14", v: "\xC2\xBC" }, { k: "frac12", v: "\xC2\xBD" }, { k: "frac34", v: "\xC2\xBE" }, { k: "iquest", v: "\xC2\xBF" }, { k: "Agrave", v: "\xC3\x80" }, { k: "Aacute", v: "\xC3\x81" }, { k: "Acirc", v: "\xC3\x82" }, { k: "Atilde", v: "\xC3\x83" }, { k: "Auml", v: "\xC3\x84" }, { k: "Aring", v: "\xC3\x85" }, { k: "AElig", v: "\xC3\x86" }, { k: "Ccedil", v: "\xC3\x87" }, { k: "Egrave", v: "\xC3\x88" }, { k: "Eacute", v: "\xC3\x89" }, { k: "Ecirc", v: "\xC3\x8A" }, { k: "Euml", v: "\xC3\x8B" }, { k: "Igrave", v: "\xC3\x8C" }, { k: "Iacute", v: "\xC3\x8D" }, { k: "Icirc", v: "\xC3\x8E" }, { k: "Iuml", v: "\xC3\x8F" }, { k: "ETH", v: "\xC3\x90" }, { k: "Ntilde", v: "\xC3\x91" }, { k: "Ograve", v: "\xC3\x92" }, { k: "Oacute", v: "\xC3\x93" }, { k: "Ocirc", v: "\xC3\x94" }, { k: "Otilde", v: "\xC3\x95" }, { k: "Ouml", v: "\xC3\x96" }, { k: "times", v: "\xC3\x97" }, { k: "Oslash", v: "\xC3\x98" }, { k: "Ugrave", v: "\xC3\x99" }, { k: "Uacute", v: "\xC3\x9A" }, { k: "Ucirc", v: "\xC3\x9B" }, { k: "Uuml", v: "\xC3\x9C" }, { k: "Yacute", v: "\xC3\x9D" }, { k: "THORN", v: "\xC3\x9E" }, { k: "szlig", v: "\xC3\x9F" }, { k: "agrave", v: "\xC3\xA0" }, { k: "aacute", v: "\xC3\xA1" }, { k: "acirc", v: "\xC3\xA2" }, { k: "atilde", v: "\xC3\xA3" }, { k: "auml", v: "\xC3\xA4" }, { k: "aring", v: "\xC3\xA5" }, { k: "aelig", v: "\xC3\xA6" }, { k: "ccedil", v: "\xC3\xA7" }, { k: "egrave", v: "\xC3\xA8" }, { k: "eacute", v: "\xC3\xA9" }, { k: "ecirc", v: "\xC3\xAA" }, { k: "euml", v: "\xC3\xAB" }, { k: "igrave", v: "\xC3\xAC" }, { k: "iacute", v: "\xC3\xAD" }, { k: "icirc", v: "\xC3\xAE" }, { k: "iuml", v: "\xC3\xAF" }, { k: "eth", v: "\xC3\xB0" }, { k: "ntilde", v: "\xC3\xB1" }, { k: "ograve", v: "\xC3\xB2" }, { k: "oacute", v: "\xC3\xB3" }, { k: "ocirc", v: "\xC3\xB4" }, { k: "otilde", v: "\xC3\xB5" }, { k: "ouml", v: "\xC3\xB6" }, { k: "divide", v: "\xC3\xB7" }, { k: "oslash", v: "\xC3\xB8" }, { k: "ugrave", v: "\xC3\xB9" }, { k: "uacute", v: "\xC3\xBA" }, { k: "ucirc", v: "\xC3\xBB" }, { k: "uuml", v: "\xC3\xBC" }, { k: "yacute", v: "\xC3\xBD" }, { k: "thorn", v: "\xC3\xBE" }, { k: "yuml", v: "\xC3\xBF" }, { k: "fnof", v: "\xC6\x92" }, { k: "Alpha", v: "\xCE\x91" }, { k: "Beta", v: "\xCE\x92" }, { k: "Gamma", v: "\xCE\x93" }, { k: "Delta", v: "\xCE\x94" }, { k: "Epsilon", v: "\xCE\x95" }, { k: "Zeta", v: "\xCE\x96" }, { k: "Eta", v: "\xCE\x97" }, { k: "Theta", v: "\xCE\x98" }, { k: "Iota", v: "\xCE\x99" }, { k: "Kappa", v: "\xCE\x9A" }, { k: "Lambda", v: "\xCE\x9B" }, { k: "Mu", v: "\xCE\x9C" }, { k: "Nu", v: "\xCE\x9D" }, { k: "Xi", v: "\xCE\x9E" }, { k: "Omicron", v: "\xCE\x9F" }, { k: "Pi", v: "\xCE\xA0" }, { k: "Rho", v: "\xCE\xA1" }, { k: "Sigma", v: "\xCE\xA3" }, { k: "Tau", v: "\xCE\xA4" }, { k: "Upsilon", v: "\xCE\xA5" }, { k: "Phi", v: "\xCE\xA6" }, { k: "Chi", v: "\xCE\xA7" }, { k: "Psi", v: "\xCE\xA8" }, { k: "Omega", v: "\xCE\xA9" }, { k: "alpha", v: "\xCE\xB1" }, { k: "beta", v: "\xCE\xB2" }, { k: "gamma", v: "\xCE\xB3" }, { k: "delta", v: "\xCE\xB4" }, { k: "epsilon", v: "\xCE\xB5" }, { k: "zeta", v: "\xCE\xB6" }, { k: "eta", v: "\xCE\xB7" }, { k: "theta", v: "\xCE\xB8" }, { k: "iota", v: "\xCE\xB9" }, { k: "kappa", v: "\xCE\xBA" }, { k: "lambda", v: "\xCE\xBB" }, { k: "mu", v: "\xCE\xBC" }, { k: "nu", v: "\xCE\xBD" }, { k: "xi", v: "\xCE\xBE" }, { k: "omicron", v: "\xCE\xBF" }, { k: "pi", v: "\xCF\x80" }, { k: "rho", v: "\xCF\x81" }, { k: "sigmaf", v: "\xCF\x82" }, { k: "sigma", v: "\xCF\x83" }, { k: "tau", v: "\xCF\x84" }, { k: "upsilon", v: "\xCF\x85" }, { k: "phi", v: "\xCF\x86" }, { k: "chi", v: "\xCF\x87" }, { k: "psi", v: "\xCF\x88" }, { k: "omega", v: "\xCF\x89" }, { k: "thetasym", v: "\xCF\x91" }, { k: "upsih", v: "\xCF\x92" }, { k: "piv", v: "\xCF\x96" }, { k: "bull", v: "\xE2\x80\xA2" }, { k: "hellip", v: "\xE2\x80\xA6" }, { k: "prime", v: "\xE2\x80\xB2" }, { k: "Prime", v: "\xE2\x80\xB3" }, { k: "oline", v: "\xE2\x80\xBE" }, { k: "frasl", v: "\xE2\x81\x84" }, { k: "weierp", v: "\xE2\x84\x98" }, { k: "image", v: "\xE2\x84\x91" }, { k: "real", v: "\xE2\x84\x9C" }, { k: "trade", v: "\xE2\x84\xA2" }, { k: "alefsym", v: "\xE2\x84\xB5" }, { k: "larr", v: "\xE2\x86\x90" }, { k: "uarr", v: "\xE2\x86\x91" }, { k: "rarr", v: "\xE2\x86\x92" }, { k: "darr", v: "\xE2\x86\x93" }, { k: "harr", v: "\xE2\x86\x94" }, { k: "crarr", v: "\xE2\x86\xB5" }, { k: "lArr", v: "\xE2\x87\x90" }, { k: "uArr", v: "\xE2\x87\x91" }, { k: "rArr", v: "\xE2\x87\x92" }, { k: "dArr", v: "\xE2\x87\x93" }, { k: "hArr", v: "\xE2\x87\x94" }, { k: "forall", v: "\xE2\x88\x80" }, { k: "part", v: "\xE2\x88\x82" }, { k: "exist", v: "\xE2\x88\x83" }, { k: "empty", v: "\xE2\x88\x85" }, { k: "nabla", v: "\xE2\x88\x87" }, { k: "isin", v: "\xE2\x88\x88" }, { k: "notin", v: "\xE2\x88\x89" }, { k: "ni", v: "\xE2\x88\x8B" }, { k: "prod", v: "\xE2\x88\x8F" }, { k: "sum", v: "\xE2\x88\x91" }, { k: "minus", v: "\xE2\x88\x92" }, { k: "lowast", v: "\xE2\x88\x97" }, { k: "radic", v: "\xE2\x88\x9A" }, { k: "prop", v: "\xE2\x88\x9D" }, { k: "infin", v: "\xE2\x88\x9E" }, { k: "ang", v: "\xE2\x88\xA0" }, { k: "and", v: "\xE2\x88\xA7" }, { k: "or", v: "\xE2\x88\xA8" }, { k: "cap", v: "\xE2\x88\xA9" }, { k: "cup", v: "\xE2\x88\xAA" }, { k: "int", v: "\xE2\x88\xAB" }, { k: "there4", v: "\xE2\x88\xB4" }, { k: "sim", v: "\xE2\x88\xBC" }, { k: "cong", v: "\xE2\x89\x85" }, { k: "asymp", v: "\xE2\x89\x88" }, { k: "ne", v: "\xE2\x89\xA0" }, { k: "equiv", v: "\xE2\x89\xA1" }, { k: "le", v: "\xE2\x89\xA4" }, { k: "ge", v: "\xE2\x89\xA5" }, { k: "sub", v: "\xE2\x8A\x82" }, { k: "sup", v: "\xE2\x8A\x83" }, { k: "nsub", v: "\xE2\x8A\x84" }, { k: "sube", v: "\xE2\x8A\x86" }, { k: "supe", v: "\xE2\x8A\x87" }, { k: "oplus", v: "\xE2\x8A\x95" }, { k: "otimes", v: "\xE2\x8A\x97" }, { k: "perp", v: "\xE2\x8A\xA5" }, { k: "sdot", v: "\xE2\x8B\x85" }, { k: "lceil", v: "\xE2\x8C\x88" }, { k: "rceil", v: "\xE2\x8C\x89" }, { k: "lfloor", v: "\xE2\x8C\x8A" }, { k: "rfloor", v: "\xE2\x8C\x8B" }, { k: "lang", v: "\xE2\x8C\xA9" }, { k: "rang", v: "\xE2\x8C\xAA" }, { k: "loz", v: "\xE2\x97\x8A" }, { k: "spades", v: "\xE2\x99\xA0" }, { k: "clubs", v: "\xE2\x99\xA3" }, { k: "hearts", v: "\xE2\x99\xA5" }, { k: "diams", v: "\xE2\x99\xA6" }, { k: "quot", v: "\"" }, { k: "amp", v: "&" }, { k: "lt", v: "<" }, { k: "gt", v: ">" }, { k: "OElig", v: "\xC5\x92" }, { k: "oelig", v: "\xC5\x93" }, { k: "Scaron", v: "\xC5\xA0" }, { k: "scaron", v: "\xC5\xA1" }, { k: "Yuml", v: "\xC5\xB8" }, { k: "circ", v: "\xCB\x86" }, { k: "tilde", v: "\xCB\x9C" }, { k: "ensp", v: "\xE2\x80\x82" }, { k: "emsp", v: "\xE2\x80\x83" }, { k: "thinsp", v: "\xE2\x80\x89" }, { k: "zwnj", v: "\xE2\x80\x8C" }, { k: "zwj", v: "\xE2\x80\x8D" }, { k: "lrm", v: "\xE2\x80\x8E" }, { k: "rlm", v: "\xE2\x80\x8F" }, { k: "ndash", v: "\xE2\x80\x93" }, { k: "mdash", v: "\xE2\x80\x94" }, { k: "lsquo", v: "\xE2\x80\x98" }, { k: "rsquo", v: "\xE2\x80\x99" }, { k: "sbquo", v: "\xE2\x80\x9A" }, { k: "ldquo", v: "\xE2\x80\x9C" }, { k: "rdquo", v: "\xE2\x80\x9D" }, { k: "bdquo", v: "\xE2\x80\x9E" }, { k: "dagger", v: "\xE2\x80\xA0" }, { k: "Dagger", v: "\xE2\x80\xA1" }, { k: "permil", v: "\xE2\x80\xB0" }, { k: "lsaquo", v: "\xE2\x80\xB9" }, { k: "rsaquo", v: "\xE2\x80\xBA" }, { k: "euro", v: "\xE2\x82\xAC" }]);
		$pkg.HTMLEntity = htmlEntity;
		htmlAutoClose = new sliceType$3(["basefont", "br", "area", "link", "img", "param", "hr", "input", "col", "frame", "isindex", "base", "meta"]);
		$pkg.HTMLAutoClose = htmlAutoClose;
		esc_quot = new sliceType($stringToBytes("&#34;"));
		esc_apos = new sliceType($stringToBytes("&#39;"));
		esc_amp = new sliceType($stringToBytes("&amp;"));
		esc_lt = new sliceType($stringToBytes("&lt;"));
		esc_gt = new sliceType($stringToBytes("&gt;"));
		esc_tab = new sliceType($stringToBytes("&#x9;"));
		esc_nl = new sliceType($stringToBytes("&#xA;"));
		esc_cr = new sliceType($stringToBytes("&#xD;"));
		esc_fffd = new sliceType($stringToBytes("\xEF\xBF\xBD"));
		cdataStart = new sliceType($stringToBytes("<![CDATA["));
		cdataEnd = new sliceType($stringToBytes("]]>"));
		cdataEscape = new sliceType($stringToBytes("]]]]><![CDATA[>"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["honnef.co/go/js/dom"] = (function() {
	var $pkg = {}, $init, js, strings, time, TokenList, Document, DocumentFragment, documentFragment, document, htmlDocument, URLUtils, Location, HTMLElement, Window, window, Selection, Screen, Navigator, Geolocation, PositionError, PositionOptions, Position, Coordinates, History, Console, DocumentType, DOMImplementation, StyleSheet, Node, BasicNode, Element, ClientRect, BasicHTMLElement, BasicElement, HTMLAnchorElement, HTMLAppletElement, HTMLAreaElement, HTMLAudioElement, HTMLBRElement, HTMLBaseElement, HTMLBodyElement, ValidityState, HTMLButtonElement, HTMLCanvasElement, CanvasRenderingContext2D, HTMLDListElement, HTMLDataElement, HTMLDataListElement, HTMLDirectoryElement, HTMLDivElement, HTMLEmbedElement, HTMLFieldSetElement, HTMLFontElement, HTMLFormElement, HTMLFrameElement, HTMLFrameSetElement, HTMLHRElement, HTMLHeadElement, HTMLHeadingElement, HTMLHtmlElement, HTMLIFrameElement, HTMLImageElement, HTMLInputElement, File, HTMLKeygenElement, HTMLLIElement, HTMLLabelElement, HTMLLegendElement, HTMLLinkElement, HTMLMapElement, HTMLMediaElement, HTMLMenuElement, HTMLMetaElement, HTMLMeterElement, HTMLModElement, HTMLOListElement, HTMLObjectElement, HTMLOptGroupElement, HTMLOptionElement, HTMLOutputElement, HTMLParagraphElement, HTMLParamElement, HTMLPreElement, HTMLProgressElement, HTMLQuoteElement, HTMLScriptElement, HTMLSelectElement, HTMLSourceElement, HTMLSpanElement, HTMLStyleElement, HTMLTableCaptionElement, HTMLTableCellElement, HTMLTableColElement, HTMLTableDataCellElement, HTMLTableElement, HTMLTableHeaderCellElement, HTMLTableRowElement, HTMLTableSectionElement, HTMLTextAreaElement, HTMLTimeElement, HTMLTitleElement, TextTrack, HTMLTrackElement, HTMLUListElement, HTMLUnknownElement, HTMLVideoElement, CSSStyleDeclaration, Text, Event, BasicEvent, AnimationEvent, AudioProcessingEvent, BeforeInputEvent, BeforeUnloadEvent, BlobEvent, ClipboardEvent, CloseEvent, CompositionEvent, CSSFontFaceLoadEvent, CustomEvent, DeviceLightEvent, DeviceMotionEvent, DeviceOrientationEvent, DeviceProximityEvent, DOMTransactionEvent, DragEvent, EditingBeforeInputEvent, ErrorEvent, FocusEvent, GamepadEvent, HashChangeEvent, IDBVersionChangeEvent, KeyboardEvent, MediaStreamEvent, MessageEvent, MouseEvent, MutationEvent, OfflineAudioCompletionEvent, PageTransitionEvent, PointerEvent, PopStateEvent, ProgressEvent, RelatedEvent, RTCPeerConnectionIceEvent, SensorEvent, StorageEvent, SVGEvent, SVGZoomEvent, TimeEvent, TouchEvent, TrackEvent, TransitionEvent, UIEvent, UserProximityEvent, WheelEvent, sliceType, ptrType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, sliceType$5, ptrType$7, sliceType$6, sliceType$7, sliceType$8, ptrType$8, ptrType$9, sliceType$9, ptrType$10, sliceType$10, ptrType$11, sliceType$11, ptrType$12, funcType, funcType$1, ptrType$13, sliceType$12, ptrType$14, ptrType$15, sliceType$13, ptrType$16, sliceType$14, ptrType$17, sliceType$15, ptrType$18, ptrType$19, ptrType$20, funcType$2, sliceType$16, ptrType$21, ptrType$22, ptrType$23, ptrType$24, mapType, ptrType$25, ptrType$26, funcType$3, ptrType$27, ptrType$28, funcType$4, funcType$5, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, toString, callRecover, elementConstructor, arrayToObjects, nodeListToObjects, nodeListToNodes, nodeListToElements, nodeListToHTMLElements, WrapNode, wrapDocument, wrapDocumentFragment, wrapNode, wrapElement, wrapHTMLElement, getForm, getLabels, getOptions, GetWindow, wrapDOMHighResTimeStamp, wrapEvent;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	strings = $packages["strings"];
	time = $packages["time"];
	TokenList = $pkg.TokenList = $newType(0, $kindStruct, "dom.TokenList", true, "honnef.co/go/js/dom", true, function(dtl_, o_, sa_, Length_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dtl = null;
			this.o = null;
			this.sa = "";
			this.Length = 0;
			return;
		}
		this.dtl = dtl_;
		this.o = o_;
		this.sa = sa_;
		this.Length = Length_;
	});
	Document = $pkg.Document = $newType(8, $kindInterface, "dom.Document", true, "honnef.co/go/js/dom", true, null);
	DocumentFragment = $pkg.DocumentFragment = $newType(8, $kindInterface, "dom.DocumentFragment", true, "honnef.co/go/js/dom", true, null);
	documentFragment = $pkg.documentFragment = $newType(0, $kindStruct, "dom.documentFragment", true, "honnef.co/go/js/dom", false, function(BasicNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicNode = ptrType$22.nil;
			return;
		}
		this.BasicNode = BasicNode_;
	});
	document = $pkg.document = $newType(0, $kindStruct, "dom.document", true, "honnef.co/go/js/dom", false, function(BasicNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicNode = ptrType$22.nil;
			return;
		}
		this.BasicNode = BasicNode_;
	});
	htmlDocument = $pkg.htmlDocument = $newType(0, $kindStruct, "dom.htmlDocument", true, "honnef.co/go/js/dom", false, function(document_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.document = ptrType$23.nil;
			return;
		}
		this.document = document_;
	});
	URLUtils = $pkg.URLUtils = $newType(0, $kindStruct, "dom.URLUtils", true, "honnef.co/go/js/dom", true, function(Object_, Href_, Protocol_, Host_, Hostname_, Port_, Pathname_, Search_, Hash_, Username_, Password_, Origin_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Href = "";
			this.Protocol = "";
			this.Host = "";
			this.Hostname = "";
			this.Port = "";
			this.Pathname = "";
			this.Search = "";
			this.Hash = "";
			this.Username = "";
			this.Password = "";
			this.Origin = "";
			return;
		}
		this.Object = Object_;
		this.Href = Href_;
		this.Protocol = Protocol_;
		this.Host = Host_;
		this.Hostname = Hostname_;
		this.Port = Port_;
		this.Pathname = Pathname_;
		this.Search = Search_;
		this.Hash = Hash_;
		this.Username = Username_;
		this.Password = Password_;
		this.Origin = Origin_;
	});
	Location = $pkg.Location = $newType(0, $kindStruct, "dom.Location", true, "honnef.co/go/js/dom", true, function(Object_, URLUtils_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.URLUtils = ptrType$2.nil;
			return;
		}
		this.Object = Object_;
		this.URLUtils = URLUtils_;
	});
	HTMLElement = $pkg.HTMLElement = $newType(8, $kindInterface, "dom.HTMLElement", true, "honnef.co/go/js/dom", true, null);
	Window = $pkg.Window = $newType(8, $kindInterface, "dom.Window", true, "honnef.co/go/js/dom", true, null);
	window = $pkg.window = $newType(0, $kindStruct, "dom.window", true, "honnef.co/go/js/dom", false, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	Selection = $pkg.Selection = $newType(8, $kindInterface, "dom.Selection", true, "honnef.co/go/js/dom", true, null);
	Screen = $pkg.Screen = $newType(0, $kindStruct, "dom.Screen", true, "honnef.co/go/js/dom", true, function(Object_, AvailTop_, AvailLeft_, AvailHeight_, AvailWidth_, ColorDepth_, Height_, Left_, PixelDepth_, Top_, Width_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.AvailTop = 0;
			this.AvailLeft = 0;
			this.AvailHeight = 0;
			this.AvailWidth = 0;
			this.ColorDepth = 0;
			this.Height = 0;
			this.Left = 0;
			this.PixelDepth = 0;
			this.Top = 0;
			this.Width = 0;
			return;
		}
		this.Object = Object_;
		this.AvailTop = AvailTop_;
		this.AvailLeft = AvailLeft_;
		this.AvailHeight = AvailHeight_;
		this.AvailWidth = AvailWidth_;
		this.ColorDepth = ColorDepth_;
		this.Height = Height_;
		this.Left = Left_;
		this.PixelDepth = PixelDepth_;
		this.Top = Top_;
		this.Width = Width_;
	});
	Navigator = $pkg.Navigator = $newType(8, $kindInterface, "dom.Navigator", true, "honnef.co/go/js/dom", true, null);
	Geolocation = $pkg.Geolocation = $newType(8, $kindInterface, "dom.Geolocation", true, "honnef.co/go/js/dom", true, null);
	PositionError = $pkg.PositionError = $newType(0, $kindStruct, "dom.PositionError", true, "honnef.co/go/js/dom", true, function(Object_, Code_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Code = 0;
			return;
		}
		this.Object = Object_;
		this.Code = Code_;
	});
	PositionOptions = $pkg.PositionOptions = $newType(0, $kindStruct, "dom.PositionOptions", true, "honnef.co/go/js/dom", true, function(EnableHighAccuracy_, Timeout_, MaximumAge_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.EnableHighAccuracy = false;
			this.Timeout = new time.Duration(0, 0);
			this.MaximumAge = new time.Duration(0, 0);
			return;
		}
		this.EnableHighAccuracy = EnableHighAccuracy_;
		this.Timeout = Timeout_;
		this.MaximumAge = MaximumAge_;
	});
	Position = $pkg.Position = $newType(0, $kindStruct, "dom.Position", true, "honnef.co/go/js/dom", true, function(Coords_, Timestamp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Coords = ptrType$30.nil;
			this.Timestamp = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$4.nil);
			return;
		}
		this.Coords = Coords_;
		this.Timestamp = Timestamp_;
	});
	Coordinates = $pkg.Coordinates = $newType(0, $kindStruct, "dom.Coordinates", true, "honnef.co/go/js/dom", true, function(Object_, Latitude_, Longitude_, Altitude_, Accuracy_, AltitudeAccuracy_, Heading_, Speed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Latitude = 0;
			this.Longitude = 0;
			this.Altitude = 0;
			this.Accuracy = 0;
			this.AltitudeAccuracy = 0;
			this.Heading = 0;
			this.Speed = 0;
			return;
		}
		this.Object = Object_;
		this.Latitude = Latitude_;
		this.Longitude = Longitude_;
		this.Altitude = Altitude_;
		this.Accuracy = Accuracy_;
		this.AltitudeAccuracy = AltitudeAccuracy_;
		this.Heading = Heading_;
		this.Speed = Speed_;
	});
	History = $pkg.History = $newType(8, $kindInterface, "dom.History", true, "honnef.co/go/js/dom", true, null);
	Console = $pkg.Console = $newType(0, $kindStruct, "dom.Console", true, "honnef.co/go/js/dom", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	DocumentType = $pkg.DocumentType = $newType(8, $kindInterface, "dom.DocumentType", true, "honnef.co/go/js/dom", true, null);
	DOMImplementation = $pkg.DOMImplementation = $newType(8, $kindInterface, "dom.DOMImplementation", true, "honnef.co/go/js/dom", true, null);
	StyleSheet = $pkg.StyleSheet = $newType(8, $kindInterface, "dom.StyleSheet", true, "honnef.co/go/js/dom", true, null);
	Node = $pkg.Node = $newType(8, $kindInterface, "dom.Node", true, "honnef.co/go/js/dom", true, null);
	BasicNode = $pkg.BasicNode = $newType(0, $kindStruct, "dom.BasicNode", true, "honnef.co/go/js/dom", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	Element = $pkg.Element = $newType(8, $kindInterface, "dom.Element", true, "honnef.co/go/js/dom", true, null);
	ClientRect = $pkg.ClientRect = $newType(0, $kindStruct, "dom.ClientRect", true, "honnef.co/go/js/dom", true, function(Object_, Height_, Width_, Left_, Right_, Top_, Bottom_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Height = 0;
			this.Width = 0;
			this.Left = 0;
			this.Right = 0;
			this.Top = 0;
			this.Bottom = 0;
			return;
		}
		this.Object = Object_;
		this.Height = Height_;
		this.Width = Width_;
		this.Left = Left_;
		this.Right = Right_;
		this.Top = Top_;
		this.Bottom = Bottom_;
	});
	BasicHTMLElement = $pkg.BasicHTMLElement = $newType(0, $kindStruct, "dom.BasicHTMLElement", true, "honnef.co/go/js/dom", true, function(BasicElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicElement = ptrType$31.nil;
			return;
		}
		this.BasicElement = BasicElement_;
	});
	BasicElement = $pkg.BasicElement = $newType(0, $kindStruct, "dom.BasicElement", true, "honnef.co/go/js/dom", true, function(BasicNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicNode = ptrType$22.nil;
			return;
		}
		this.BasicNode = BasicNode_;
	});
	HTMLAnchorElement = $pkg.HTMLAnchorElement = $newType(0, $kindStruct, "dom.HTMLAnchorElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, URLUtils_, HrefLang_, Media_, TabIndex_, Target_, Text_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.URLUtils = ptrType$2.nil;
			this.HrefLang = "";
			this.Media = "";
			this.TabIndex = 0;
			this.Target = "";
			this.Text = "";
			this.Type = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.URLUtils = URLUtils_;
		this.HrefLang = HrefLang_;
		this.Media = Media_;
		this.TabIndex = TabIndex_;
		this.Target = Target_;
		this.Text = Text_;
		this.Type = Type_;
	});
	HTMLAppletElement = $pkg.HTMLAppletElement = $newType(0, $kindStruct, "dom.HTMLAppletElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Alt_, Coords_, HrefLang_, Media_, Search_, Shape_, TabIndex_, Target_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Alt = "";
			this.Coords = "";
			this.HrefLang = "";
			this.Media = "";
			this.Search = "";
			this.Shape = "";
			this.TabIndex = 0;
			this.Target = "";
			this.Type = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Alt = Alt_;
		this.Coords = Coords_;
		this.HrefLang = HrefLang_;
		this.Media = Media_;
		this.Search = Search_;
		this.Shape = Shape_;
		this.TabIndex = TabIndex_;
		this.Target = Target_;
		this.Type = Type_;
	});
	HTMLAreaElement = $pkg.HTMLAreaElement = $newType(0, $kindStruct, "dom.HTMLAreaElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, URLUtils_, Alt_, Coords_, HrefLang_, Media_, Search_, Shape_, TabIndex_, Target_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.URLUtils = ptrType$2.nil;
			this.Alt = "";
			this.Coords = "";
			this.HrefLang = "";
			this.Media = "";
			this.Search = "";
			this.Shape = "";
			this.TabIndex = 0;
			this.Target = "";
			this.Type = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.URLUtils = URLUtils_;
		this.Alt = Alt_;
		this.Coords = Coords_;
		this.HrefLang = HrefLang_;
		this.Media = Media_;
		this.Search = Search_;
		this.Shape = Shape_;
		this.TabIndex = TabIndex_;
		this.Target = Target_;
		this.Type = Type_;
	});
	HTMLAudioElement = $pkg.HTMLAudioElement = $newType(0, $kindStruct, "dom.HTMLAudioElement", true, "honnef.co/go/js/dom", true, function(HTMLMediaElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.HTMLMediaElement = ptrType$3.nil;
			return;
		}
		this.HTMLMediaElement = HTMLMediaElement_;
	});
	HTMLBRElement = $pkg.HTMLBRElement = $newType(0, $kindStruct, "dom.HTMLBRElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLBaseElement = $pkg.HTMLBaseElement = $newType(0, $kindStruct, "dom.HTMLBaseElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLBodyElement = $pkg.HTMLBodyElement = $newType(0, $kindStruct, "dom.HTMLBodyElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	ValidityState = $pkg.ValidityState = $newType(0, $kindStruct, "dom.ValidityState", true, "honnef.co/go/js/dom", true, function(Object_, CustomError_, PatternMismatch_, RangeOverflow_, RangeUnderflow_, StepMismatch_, TooLong_, TypeMismatch_, Valid_, ValueMissing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.CustomError = false;
			this.PatternMismatch = false;
			this.RangeOverflow = false;
			this.RangeUnderflow = false;
			this.StepMismatch = false;
			this.TooLong = false;
			this.TypeMismatch = false;
			this.Valid = false;
			this.ValueMissing = false;
			return;
		}
		this.Object = Object_;
		this.CustomError = CustomError_;
		this.PatternMismatch = PatternMismatch_;
		this.RangeOverflow = RangeOverflow_;
		this.RangeUnderflow = RangeUnderflow_;
		this.StepMismatch = StepMismatch_;
		this.TooLong = TooLong_;
		this.TypeMismatch = TypeMismatch_;
		this.Valid = Valid_;
		this.ValueMissing = ValueMissing_;
	});
	HTMLButtonElement = $pkg.HTMLButtonElement = $newType(0, $kindStruct, "dom.HTMLButtonElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, AutoFocus_, Disabled_, FormAction_, FormEncType_, FormMethod_, FormNoValidate_, FormTarget_, Name_, TabIndex_, Type_, ValidationMessage_, Value_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.AutoFocus = false;
			this.Disabled = false;
			this.FormAction = "";
			this.FormEncType = "";
			this.FormMethod = "";
			this.FormNoValidate = false;
			this.FormTarget = "";
			this.Name = "";
			this.TabIndex = 0;
			this.Type = "";
			this.ValidationMessage = "";
			this.Value = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.AutoFocus = AutoFocus_;
		this.Disabled = Disabled_;
		this.FormAction = FormAction_;
		this.FormEncType = FormEncType_;
		this.FormMethod = FormMethod_;
		this.FormNoValidate = FormNoValidate_;
		this.FormTarget = FormTarget_;
		this.Name = Name_;
		this.TabIndex = TabIndex_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.Value = Value_;
		this.WillValidate = WillValidate_;
	});
	HTMLCanvasElement = $pkg.HTMLCanvasElement = $newType(0, $kindStruct, "dom.HTMLCanvasElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Height_, Width_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Height = 0;
			this.Width = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Height = Height_;
		this.Width = Width_;
	});
	CanvasRenderingContext2D = $pkg.CanvasRenderingContext2D = $newType(0, $kindStruct, "dom.CanvasRenderingContext2D", true, "honnef.co/go/js/dom", true, function(Object_, FillStyle_, StrokeStyle_, ShadowColor_, ShadowBlur_, ShadowOffsetX_, ShadowOffsetY_, LineCap_, LineJoin_, LineWidth_, MiterLimit_, Font_, TextAlign_, TextBaseline_, GlobalAlpha_, GlobalCompositeOperation_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.FillStyle = "";
			this.StrokeStyle = "";
			this.ShadowColor = "";
			this.ShadowBlur = 0;
			this.ShadowOffsetX = 0;
			this.ShadowOffsetY = 0;
			this.LineCap = "";
			this.LineJoin = "";
			this.LineWidth = 0;
			this.MiterLimit = 0;
			this.Font = "";
			this.TextAlign = "";
			this.TextBaseline = "";
			this.GlobalAlpha = 0;
			this.GlobalCompositeOperation = "";
			return;
		}
		this.Object = Object_;
		this.FillStyle = FillStyle_;
		this.StrokeStyle = StrokeStyle_;
		this.ShadowColor = ShadowColor_;
		this.ShadowBlur = ShadowBlur_;
		this.ShadowOffsetX = ShadowOffsetX_;
		this.ShadowOffsetY = ShadowOffsetY_;
		this.LineCap = LineCap_;
		this.LineJoin = LineJoin_;
		this.LineWidth = LineWidth_;
		this.MiterLimit = MiterLimit_;
		this.Font = Font_;
		this.TextAlign = TextAlign_;
		this.TextBaseline = TextBaseline_;
		this.GlobalAlpha = GlobalAlpha_;
		this.GlobalCompositeOperation = GlobalCompositeOperation_;
	});
	HTMLDListElement = $pkg.HTMLDListElement = $newType(0, $kindStruct, "dom.HTMLDListElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLDataElement = $pkg.HTMLDataElement = $newType(0, $kindStruct, "dom.HTMLDataElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Value = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Value = Value_;
	});
	HTMLDataListElement = $pkg.HTMLDataListElement = $newType(0, $kindStruct, "dom.HTMLDataListElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLDirectoryElement = $pkg.HTMLDirectoryElement = $newType(0, $kindStruct, "dom.HTMLDirectoryElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLDivElement = $pkg.HTMLDivElement = $newType(0, $kindStruct, "dom.HTMLDivElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLEmbedElement = $pkg.HTMLEmbedElement = $newType(0, $kindStruct, "dom.HTMLEmbedElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Src_, Type_, Width_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Src = "";
			this.Type = "";
			this.Width = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Src = Src_;
		this.Type = Type_;
		this.Width = Width_;
	});
	HTMLFieldSetElement = $pkg.HTMLFieldSetElement = $newType(0, $kindStruct, "dom.HTMLFieldSetElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Disabled_, Name_, Type_, ValidationMessage_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Disabled = false;
			this.Name = "";
			this.Type = "";
			this.ValidationMessage = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Disabled = Disabled_;
		this.Name = Name_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.WillValidate = WillValidate_;
	});
	HTMLFontElement = $pkg.HTMLFontElement = $newType(0, $kindStruct, "dom.HTMLFontElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLFormElement = $pkg.HTMLFormElement = $newType(0, $kindStruct, "dom.HTMLFormElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, AcceptCharset_, Action_, Autocomplete_, Encoding_, Enctype_, Length_, Method_, Name_, NoValidate_, Target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.AcceptCharset = "";
			this.Action = "";
			this.Autocomplete = "";
			this.Encoding = "";
			this.Enctype = "";
			this.Length = 0;
			this.Method = "";
			this.Name = "";
			this.NoValidate = false;
			this.Target = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.AcceptCharset = AcceptCharset_;
		this.Action = Action_;
		this.Autocomplete = Autocomplete_;
		this.Encoding = Encoding_;
		this.Enctype = Enctype_;
		this.Length = Length_;
		this.Method = Method_;
		this.Name = Name_;
		this.NoValidate = NoValidate_;
		this.Target = Target_;
	});
	HTMLFrameElement = $pkg.HTMLFrameElement = $newType(0, $kindStruct, "dom.HTMLFrameElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLFrameSetElement = $pkg.HTMLFrameSetElement = $newType(0, $kindStruct, "dom.HTMLFrameSetElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLHRElement = $pkg.HTMLHRElement = $newType(0, $kindStruct, "dom.HTMLHRElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLHeadElement = $pkg.HTMLHeadElement = $newType(0, $kindStruct, "dom.HTMLHeadElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLHeadingElement = $pkg.HTMLHeadingElement = $newType(0, $kindStruct, "dom.HTMLHeadingElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLHtmlElement = $pkg.HTMLHtmlElement = $newType(0, $kindStruct, "dom.HTMLHtmlElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLIFrameElement = $pkg.HTMLIFrameElement = $newType(0, $kindStruct, "dom.HTMLIFrameElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Width_, Height_, Name_, Src_, SrcDoc_, Seamless_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Width = "";
			this.Height = "";
			this.Name = "";
			this.Src = "";
			this.SrcDoc = "";
			this.Seamless = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Width = Width_;
		this.Height = Height_;
		this.Name = Name_;
		this.Src = Src_;
		this.SrcDoc = SrcDoc_;
		this.Seamless = Seamless_;
	});
	HTMLImageElement = $pkg.HTMLImageElement = $newType(0, $kindStruct, "dom.HTMLImageElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Complete_, CrossOrigin_, Height_, IsMap_, NaturalHeight_, NaturalWidth_, Src_, UseMap_, Width_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Complete = false;
			this.CrossOrigin = "";
			this.Height = 0;
			this.IsMap = false;
			this.NaturalHeight = 0;
			this.NaturalWidth = 0;
			this.Src = "";
			this.UseMap = "";
			this.Width = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Complete = Complete_;
		this.CrossOrigin = CrossOrigin_;
		this.Height = Height_;
		this.IsMap = IsMap_;
		this.NaturalHeight = NaturalHeight_;
		this.NaturalWidth = NaturalWidth_;
		this.Src = Src_;
		this.UseMap = UseMap_;
		this.Width = Width_;
	});
	HTMLInputElement = $pkg.HTMLInputElement = $newType(0, $kindStruct, "dom.HTMLInputElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Accept_, Alt_, Autocomplete_, Autofocus_, Checked_, DefaultChecked_, DefaultValue_, DirName_, Disabled_, FormAction_, FormEncType_, FormMethod_, FormNoValidate_, FormTarget_, Height_, Indeterminate_, Max_, MaxLength_, Min_, Multiple_, Name_, Pattern_, Placeholder_, ReadOnly_, Required_, SelectionDirection_, SelectionEnd_, SelectionStart_, Size_, Src_, Step_, TabIndex_, Type_, ValidationMessage_, Value_, ValueAsDate_, ValueAsNumber_, Width_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Accept = "";
			this.Alt = "";
			this.Autocomplete = "";
			this.Autofocus = false;
			this.Checked = false;
			this.DefaultChecked = false;
			this.DefaultValue = "";
			this.DirName = "";
			this.Disabled = false;
			this.FormAction = "";
			this.FormEncType = "";
			this.FormMethod = "";
			this.FormNoValidate = false;
			this.FormTarget = "";
			this.Height = "";
			this.Indeterminate = false;
			this.Max = "";
			this.MaxLength = 0;
			this.Min = "";
			this.Multiple = false;
			this.Name = "";
			this.Pattern = "";
			this.Placeholder = "";
			this.ReadOnly = false;
			this.Required = false;
			this.SelectionDirection = "";
			this.SelectionEnd = 0;
			this.SelectionStart = 0;
			this.Size = 0;
			this.Src = "";
			this.Step = "";
			this.TabIndex = 0;
			this.Type = "";
			this.ValidationMessage = "";
			this.Value = "";
			this.ValueAsDate = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$4.nil);
			this.ValueAsNumber = 0;
			this.Width = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Accept = Accept_;
		this.Alt = Alt_;
		this.Autocomplete = Autocomplete_;
		this.Autofocus = Autofocus_;
		this.Checked = Checked_;
		this.DefaultChecked = DefaultChecked_;
		this.DefaultValue = DefaultValue_;
		this.DirName = DirName_;
		this.Disabled = Disabled_;
		this.FormAction = FormAction_;
		this.FormEncType = FormEncType_;
		this.FormMethod = FormMethod_;
		this.FormNoValidate = FormNoValidate_;
		this.FormTarget = FormTarget_;
		this.Height = Height_;
		this.Indeterminate = Indeterminate_;
		this.Max = Max_;
		this.MaxLength = MaxLength_;
		this.Min = Min_;
		this.Multiple = Multiple_;
		this.Name = Name_;
		this.Pattern = Pattern_;
		this.Placeholder = Placeholder_;
		this.ReadOnly = ReadOnly_;
		this.Required = Required_;
		this.SelectionDirection = SelectionDirection_;
		this.SelectionEnd = SelectionEnd_;
		this.SelectionStart = SelectionStart_;
		this.Size = Size_;
		this.Src = Src_;
		this.Step = Step_;
		this.TabIndex = TabIndex_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.Value = Value_;
		this.ValueAsDate = ValueAsDate_;
		this.ValueAsNumber = ValueAsNumber_;
		this.Width = Width_;
		this.WillValidate = WillValidate_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "dom.File", true, "honnef.co/go/js/dom", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	HTMLKeygenElement = $pkg.HTMLKeygenElement = $newType(0, $kindStruct, "dom.HTMLKeygenElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Autofocus_, Challenge_, Disabled_, Keytype_, Name_, Type_, ValidationMessage_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Autofocus = false;
			this.Challenge = "";
			this.Disabled = false;
			this.Keytype = "";
			this.Name = "";
			this.Type = "";
			this.ValidationMessage = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Autofocus = Autofocus_;
		this.Challenge = Challenge_;
		this.Disabled = Disabled_;
		this.Keytype = Keytype_;
		this.Name = Name_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.WillValidate = WillValidate_;
	});
	HTMLLIElement = $pkg.HTMLLIElement = $newType(0, $kindStruct, "dom.HTMLLIElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Value = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Value = Value_;
	});
	HTMLLabelElement = $pkg.HTMLLabelElement = $newType(0, $kindStruct, "dom.HTMLLabelElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, For_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.For = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.For = For_;
	});
	HTMLLegendElement = $pkg.HTMLLegendElement = $newType(0, $kindStruct, "dom.HTMLLegendElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLLinkElement = $pkg.HTMLLinkElement = $newType(0, $kindStruct, "dom.HTMLLinkElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Disabled_, Href_, HrefLang_, Media_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Disabled = false;
			this.Href = "";
			this.HrefLang = "";
			this.Media = "";
			this.Type = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Disabled = Disabled_;
		this.Href = Href_;
		this.HrefLang = HrefLang_;
		this.Media = Media_;
		this.Type = Type_;
	});
	HTMLMapElement = $pkg.HTMLMapElement = $newType(0, $kindStruct, "dom.HTMLMapElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Name = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Name = Name_;
	});
	HTMLMediaElement = $pkg.HTMLMediaElement = $newType(0, $kindStruct, "dom.HTMLMediaElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Paused_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Paused = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Paused = Paused_;
	});
	HTMLMenuElement = $pkg.HTMLMenuElement = $newType(0, $kindStruct, "dom.HTMLMenuElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLMetaElement = $pkg.HTMLMetaElement = $newType(0, $kindStruct, "dom.HTMLMetaElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Content_, HTTPEquiv_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Content = "";
			this.HTTPEquiv = "";
			this.Name = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Content = Content_;
		this.HTTPEquiv = HTTPEquiv_;
		this.Name = Name_;
	});
	HTMLMeterElement = $pkg.HTMLMeterElement = $newType(0, $kindStruct, "dom.HTMLMeterElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, High_, Low_, Max_, Min_, Optimum_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.High = 0;
			this.Low = 0;
			this.Max = 0;
			this.Min = 0;
			this.Optimum = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.High = High_;
		this.Low = Low_;
		this.Max = Max_;
		this.Min = Min_;
		this.Optimum = Optimum_;
	});
	HTMLModElement = $pkg.HTMLModElement = $newType(0, $kindStruct, "dom.HTMLModElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Cite_, DateTime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Cite = "";
			this.DateTime = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Cite = Cite_;
		this.DateTime = DateTime_;
	});
	HTMLOListElement = $pkg.HTMLOListElement = $newType(0, $kindStruct, "dom.HTMLOListElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Reversed_, Start_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Reversed = false;
			this.Start = 0;
			this.Type = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Reversed = Reversed_;
		this.Start = Start_;
		this.Type = Type_;
	});
	HTMLObjectElement = $pkg.HTMLObjectElement = $newType(0, $kindStruct, "dom.HTMLObjectElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Data_, Height_, Name_, TabIndex_, Type_, TypeMustMatch_, UseMap_, ValidationMessage_, With_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Data = "";
			this.Height = "";
			this.Name = "";
			this.TabIndex = 0;
			this.Type = "";
			this.TypeMustMatch = false;
			this.UseMap = "";
			this.ValidationMessage = "";
			this.With = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Data = Data_;
		this.Height = Height_;
		this.Name = Name_;
		this.TabIndex = TabIndex_;
		this.Type = Type_;
		this.TypeMustMatch = TypeMustMatch_;
		this.UseMap = UseMap_;
		this.ValidationMessage = ValidationMessage_;
		this.With = With_;
		this.WillValidate = WillValidate_;
	});
	HTMLOptGroupElement = $pkg.HTMLOptGroupElement = $newType(0, $kindStruct, "dom.HTMLOptGroupElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Disabled_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Disabled = false;
			this.Label = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Disabled = Disabled_;
		this.Label = Label_;
	});
	HTMLOptionElement = $pkg.HTMLOptionElement = $newType(0, $kindStruct, "dom.HTMLOptionElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, DefaultSelected_, Disabled_, Index_, Label_, Selected_, Text_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.DefaultSelected = false;
			this.Disabled = false;
			this.Index = 0;
			this.Label = "";
			this.Selected = false;
			this.Text = "";
			this.Value = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.DefaultSelected = DefaultSelected_;
		this.Disabled = Disabled_;
		this.Index = Index_;
		this.Label = Label_;
		this.Selected = Selected_;
		this.Text = Text_;
		this.Value = Value_;
	});
	HTMLOutputElement = $pkg.HTMLOutputElement = $newType(0, $kindStruct, "dom.HTMLOutputElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, DefaultValue_, Name_, Type_, ValidationMessage_, Value_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.DefaultValue = "";
			this.Name = "";
			this.Type = "";
			this.ValidationMessage = "";
			this.Value = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.DefaultValue = DefaultValue_;
		this.Name = Name_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.Value = Value_;
		this.WillValidate = WillValidate_;
	});
	HTMLParagraphElement = $pkg.HTMLParagraphElement = $newType(0, $kindStruct, "dom.HTMLParagraphElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLParamElement = $pkg.HTMLParamElement = $newType(0, $kindStruct, "dom.HTMLParamElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Name_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Name = "";
			this.Value = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Name = Name_;
		this.Value = Value_;
	});
	HTMLPreElement = $pkg.HTMLPreElement = $newType(0, $kindStruct, "dom.HTMLPreElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLProgressElement = $pkg.HTMLProgressElement = $newType(0, $kindStruct, "dom.HTMLProgressElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Max_, Position_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Max = 0;
			this.Position = 0;
			this.Value = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Max = Max_;
		this.Position = Position_;
		this.Value = Value_;
	});
	HTMLQuoteElement = $pkg.HTMLQuoteElement = $newType(0, $kindStruct, "dom.HTMLQuoteElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Cite_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Cite = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Cite = Cite_;
	});
	HTMLScriptElement = $pkg.HTMLScriptElement = $newType(0, $kindStruct, "dom.HTMLScriptElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Type_, Src_, Charset_, Async_, Defer_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Type = "";
			this.Src = "";
			this.Charset = "";
			this.Async = false;
			this.Defer = false;
			this.Text = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Type = Type_;
		this.Src = Src_;
		this.Charset = Charset_;
		this.Async = Async_;
		this.Defer = Defer_;
		this.Text = Text_;
	});
	HTMLSelectElement = $pkg.HTMLSelectElement = $newType(0, $kindStruct, "dom.HTMLSelectElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Autofocus_, Disabled_, Length_, Multiple_, Name_, Required_, SelectedIndex_, Size_, Type_, ValidationMessage_, Value_, WillValidate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Autofocus = false;
			this.Disabled = false;
			this.Length = 0;
			this.Multiple = false;
			this.Name = "";
			this.Required = false;
			this.SelectedIndex = 0;
			this.Size = 0;
			this.Type = "";
			this.ValidationMessage = "";
			this.Value = "";
			this.WillValidate = false;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Autofocus = Autofocus_;
		this.Disabled = Disabled_;
		this.Length = Length_;
		this.Multiple = Multiple_;
		this.Name = Name_;
		this.Required = Required_;
		this.SelectedIndex = SelectedIndex_;
		this.Size = Size_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.Value = Value_;
		this.WillValidate = WillValidate_;
	});
	HTMLSourceElement = $pkg.HTMLSourceElement = $newType(0, $kindStruct, "dom.HTMLSourceElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Media_, Src_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Media = "";
			this.Src = "";
			this.Type = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Media = Media_;
		this.Src = Src_;
		this.Type = Type_;
	});
	HTMLSpanElement = $pkg.HTMLSpanElement = $newType(0, $kindStruct, "dom.HTMLSpanElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLStyleElement = $pkg.HTMLStyleElement = $newType(0, $kindStruct, "dom.HTMLStyleElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLTableCaptionElement = $pkg.HTMLTableCaptionElement = $newType(0, $kindStruct, "dom.HTMLTableCaptionElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLTableCellElement = $pkg.HTMLTableCellElement = $newType(0, $kindStruct, "dom.HTMLTableCellElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, ColSpan_, RowSpan_, CellIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.ColSpan = 0;
			this.RowSpan = 0;
			this.CellIndex = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.ColSpan = ColSpan_;
		this.RowSpan = RowSpan_;
		this.CellIndex = CellIndex_;
	});
	HTMLTableColElement = $pkg.HTMLTableColElement = $newType(0, $kindStruct, "dom.HTMLTableColElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Span_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Span = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Span = Span_;
	});
	HTMLTableDataCellElement = $pkg.HTMLTableDataCellElement = $newType(0, $kindStruct, "dom.HTMLTableDataCellElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLTableElement = $pkg.HTMLTableElement = $newType(0, $kindStruct, "dom.HTMLTableElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLTableHeaderCellElement = $pkg.HTMLTableHeaderCellElement = $newType(0, $kindStruct, "dom.HTMLTableHeaderCellElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Abbr_, Scope_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Abbr = "";
			this.Scope = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Abbr = Abbr_;
		this.Scope = Scope_;
	});
	HTMLTableRowElement = $pkg.HTMLTableRowElement = $newType(0, $kindStruct, "dom.HTMLTableRowElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, RowIndex_, SectionRowIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.RowIndex = 0;
			this.SectionRowIndex = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.RowIndex = RowIndex_;
		this.SectionRowIndex = SectionRowIndex_;
	});
	HTMLTableSectionElement = $pkg.HTMLTableSectionElement = $newType(0, $kindStruct, "dom.HTMLTableSectionElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLTextAreaElement = $pkg.HTMLTextAreaElement = $newType(0, $kindStruct, "dom.HTMLTextAreaElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Autocomplete_, Autofocus_, Cols_, DefaultValue_, DirName_, Disabled_, MaxLength_, Name_, Placeholder_, ReadOnly_, Required_, Rows_, SelectionDirection_, SelectionStart_, SelectionEnd_, TabIndex_, TextLength_, Type_, ValidationMessage_, Value_, WillValidate_, Wrap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Autocomplete = "";
			this.Autofocus = false;
			this.Cols = 0;
			this.DefaultValue = "";
			this.DirName = "";
			this.Disabled = false;
			this.MaxLength = 0;
			this.Name = "";
			this.Placeholder = "";
			this.ReadOnly = false;
			this.Required = false;
			this.Rows = 0;
			this.SelectionDirection = "";
			this.SelectionStart = 0;
			this.SelectionEnd = 0;
			this.TabIndex = 0;
			this.TextLength = 0;
			this.Type = "";
			this.ValidationMessage = "";
			this.Value = "";
			this.WillValidate = false;
			this.Wrap = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Autocomplete = Autocomplete_;
		this.Autofocus = Autofocus_;
		this.Cols = Cols_;
		this.DefaultValue = DefaultValue_;
		this.DirName = DirName_;
		this.Disabled = Disabled_;
		this.MaxLength = MaxLength_;
		this.Name = Name_;
		this.Placeholder = Placeholder_;
		this.ReadOnly = ReadOnly_;
		this.Required = Required_;
		this.Rows = Rows_;
		this.SelectionDirection = SelectionDirection_;
		this.SelectionStart = SelectionStart_;
		this.SelectionEnd = SelectionEnd_;
		this.TabIndex = TabIndex_;
		this.TextLength = TextLength_;
		this.Type = Type_;
		this.ValidationMessage = ValidationMessage_;
		this.Value = Value_;
		this.WillValidate = WillValidate_;
		this.Wrap = Wrap_;
	});
	HTMLTimeElement = $pkg.HTMLTimeElement = $newType(0, $kindStruct, "dom.HTMLTimeElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, DateTime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.DateTime = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.DateTime = DateTime_;
	});
	HTMLTitleElement = $pkg.HTMLTitleElement = $newType(0, $kindStruct, "dom.HTMLTitleElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Text = "";
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Text = Text_;
	});
	TextTrack = $pkg.TextTrack = $newType(0, $kindStruct, "dom.TextTrack", true, "honnef.co/go/js/dom", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	HTMLTrackElement = $pkg.HTMLTrackElement = $newType(0, $kindStruct, "dom.HTMLTrackElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_, Kind_, Src_, Srclang_, Label_, Default_, ReadyState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			this.Kind = "";
			this.Src = "";
			this.Srclang = "";
			this.Label = "";
			this.Default = false;
			this.ReadyState = 0;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
		this.Kind = Kind_;
		this.Src = Src_;
		this.Srclang = Srclang_;
		this.Label = Label_;
		this.Default = Default_;
		this.ReadyState = ReadyState_;
	});
	HTMLUListElement = $pkg.HTMLUListElement = $newType(0, $kindStruct, "dom.HTMLUListElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLUnknownElement = $pkg.HTMLUnknownElement = $newType(0, $kindStruct, "dom.HTMLUnknownElement", true, "honnef.co/go/js/dom", true, function(BasicHTMLElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicHTMLElement = ptrType$1.nil;
			return;
		}
		this.BasicHTMLElement = BasicHTMLElement_;
	});
	HTMLVideoElement = $pkg.HTMLVideoElement = $newType(0, $kindStruct, "dom.HTMLVideoElement", true, "honnef.co/go/js/dom", true, function(HTMLMediaElement_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.HTMLMediaElement = ptrType$3.nil;
			return;
		}
		this.HTMLMediaElement = HTMLMediaElement_;
	});
	CSSStyleDeclaration = $pkg.CSSStyleDeclaration = $newType(0, $kindStruct, "dom.CSSStyleDeclaration", true, "honnef.co/go/js/dom", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	Text = $pkg.Text = $newType(0, $kindStruct, "dom.Text", true, "honnef.co/go/js/dom", true, function(BasicNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicNode = ptrType$22.nil;
			return;
		}
		this.BasicNode = BasicNode_;
	});
	Event = $pkg.Event = $newType(8, $kindInterface, "dom.Event", true, "honnef.co/go/js/dom", true, null);
	BasicEvent = $pkg.BasicEvent = $newType(0, $kindStruct, "dom.BasicEvent", true, "honnef.co/go/js/dom", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	AnimationEvent = $pkg.AnimationEvent = $newType(0, $kindStruct, "dom.AnimationEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	AudioProcessingEvent = $pkg.AudioProcessingEvent = $newType(0, $kindStruct, "dom.AudioProcessingEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	BeforeInputEvent = $pkg.BeforeInputEvent = $newType(0, $kindStruct, "dom.BeforeInputEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	BeforeUnloadEvent = $pkg.BeforeUnloadEvent = $newType(0, $kindStruct, "dom.BeforeUnloadEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	BlobEvent = $pkg.BlobEvent = $newType(0, $kindStruct, "dom.BlobEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	ClipboardEvent = $pkg.ClipboardEvent = $newType(0, $kindStruct, "dom.ClipboardEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	CloseEvent = $pkg.CloseEvent = $newType(0, $kindStruct, "dom.CloseEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_, Code_, Reason_, WasClean_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			this.Code = 0;
			this.Reason = "";
			this.WasClean = false;
			return;
		}
		this.BasicEvent = BasicEvent_;
		this.Code = Code_;
		this.Reason = Reason_;
		this.WasClean = WasClean_;
	});
	CompositionEvent = $pkg.CompositionEvent = $newType(0, $kindStruct, "dom.CompositionEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	CSSFontFaceLoadEvent = $pkg.CSSFontFaceLoadEvent = $newType(0, $kindStruct, "dom.CSSFontFaceLoadEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	CustomEvent = $pkg.CustomEvent = $newType(0, $kindStruct, "dom.CustomEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	DeviceLightEvent = $pkg.DeviceLightEvent = $newType(0, $kindStruct, "dom.DeviceLightEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	DeviceMotionEvent = $pkg.DeviceMotionEvent = $newType(0, $kindStruct, "dom.DeviceMotionEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	DeviceOrientationEvent = $pkg.DeviceOrientationEvent = $newType(0, $kindStruct, "dom.DeviceOrientationEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	DeviceProximityEvent = $pkg.DeviceProximityEvent = $newType(0, $kindStruct, "dom.DeviceProximityEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	DOMTransactionEvent = $pkg.DOMTransactionEvent = $newType(0, $kindStruct, "dom.DOMTransactionEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	DragEvent = $pkg.DragEvent = $newType(0, $kindStruct, "dom.DragEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	EditingBeforeInputEvent = $pkg.EditingBeforeInputEvent = $newType(0, $kindStruct, "dom.EditingBeforeInputEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	ErrorEvent = $pkg.ErrorEvent = $newType(0, $kindStruct, "dom.ErrorEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	FocusEvent = $pkg.FocusEvent = $newType(0, $kindStruct, "dom.FocusEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	GamepadEvent = $pkg.GamepadEvent = $newType(0, $kindStruct, "dom.GamepadEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	HashChangeEvent = $pkg.HashChangeEvent = $newType(0, $kindStruct, "dom.HashChangeEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	IDBVersionChangeEvent = $pkg.IDBVersionChangeEvent = $newType(0, $kindStruct, "dom.IDBVersionChangeEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	KeyboardEvent = $pkg.KeyboardEvent = $newType(0, $kindStruct, "dom.KeyboardEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_, AltKey_, CharCode_, CtrlKey_, Key_, KeyIdentifier_, KeyCode_, Locale_, Location_, KeyLocation_, MetaKey_, Repeat_, ShiftKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			this.AltKey = false;
			this.CharCode = 0;
			this.CtrlKey = false;
			this.Key = "";
			this.KeyIdentifier = "";
			this.KeyCode = 0;
			this.Locale = "";
			this.Location = 0;
			this.KeyLocation = 0;
			this.MetaKey = false;
			this.Repeat = false;
			this.ShiftKey = false;
			return;
		}
		this.BasicEvent = BasicEvent_;
		this.AltKey = AltKey_;
		this.CharCode = CharCode_;
		this.CtrlKey = CtrlKey_;
		this.Key = Key_;
		this.KeyIdentifier = KeyIdentifier_;
		this.KeyCode = KeyCode_;
		this.Locale = Locale_;
		this.Location = Location_;
		this.KeyLocation = KeyLocation_;
		this.MetaKey = MetaKey_;
		this.Repeat = Repeat_;
		this.ShiftKey = ShiftKey_;
	});
	MediaStreamEvent = $pkg.MediaStreamEvent = $newType(0, $kindStruct, "dom.MediaStreamEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	MessageEvent = $pkg.MessageEvent = $newType(0, $kindStruct, "dom.MessageEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			this.Data = null;
			return;
		}
		this.BasicEvent = BasicEvent_;
		this.Data = Data_;
	});
	MouseEvent = $pkg.MouseEvent = $newType(0, $kindStruct, "dom.MouseEvent", true, "honnef.co/go/js/dom", true, function(UIEvent_, AltKey_, Button_, ClientX_, ClientY_, CtrlKey_, MetaKey_, MovementX_, MovementY_, ScreenX_, ScreenY_, ShiftKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.UIEvent = ptrType$19.nil;
			this.AltKey = false;
			this.Button = 0;
			this.ClientX = 0;
			this.ClientY = 0;
			this.CtrlKey = false;
			this.MetaKey = false;
			this.MovementX = 0;
			this.MovementY = 0;
			this.ScreenX = 0;
			this.ScreenY = 0;
			this.ShiftKey = false;
			return;
		}
		this.UIEvent = UIEvent_;
		this.AltKey = AltKey_;
		this.Button = Button_;
		this.ClientX = ClientX_;
		this.ClientY = ClientY_;
		this.CtrlKey = CtrlKey_;
		this.MetaKey = MetaKey_;
		this.MovementX = MovementX_;
		this.MovementY = MovementY_;
		this.ScreenX = ScreenX_;
		this.ScreenY = ScreenY_;
		this.ShiftKey = ShiftKey_;
	});
	MutationEvent = $pkg.MutationEvent = $newType(0, $kindStruct, "dom.MutationEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	OfflineAudioCompletionEvent = $pkg.OfflineAudioCompletionEvent = $newType(0, $kindStruct, "dom.OfflineAudioCompletionEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	PageTransitionEvent = $pkg.PageTransitionEvent = $newType(0, $kindStruct, "dom.PageTransitionEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	PointerEvent = $pkg.PointerEvent = $newType(0, $kindStruct, "dom.PointerEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	PopStateEvent = $pkg.PopStateEvent = $newType(0, $kindStruct, "dom.PopStateEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	ProgressEvent = $pkg.ProgressEvent = $newType(0, $kindStruct, "dom.ProgressEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	RelatedEvent = $pkg.RelatedEvent = $newType(0, $kindStruct, "dom.RelatedEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	RTCPeerConnectionIceEvent = $pkg.RTCPeerConnectionIceEvent = $newType(0, $kindStruct, "dom.RTCPeerConnectionIceEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	SensorEvent = $pkg.SensorEvent = $newType(0, $kindStruct, "dom.SensorEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	StorageEvent = $pkg.StorageEvent = $newType(0, $kindStruct, "dom.StorageEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	SVGEvent = $pkg.SVGEvent = $newType(0, $kindStruct, "dom.SVGEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	SVGZoomEvent = $pkg.SVGZoomEvent = $newType(0, $kindStruct, "dom.SVGZoomEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	TimeEvent = $pkg.TimeEvent = $newType(0, $kindStruct, "dom.TimeEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	TouchEvent = $pkg.TouchEvent = $newType(0, $kindStruct, "dom.TouchEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	TrackEvent = $pkg.TrackEvent = $newType(0, $kindStruct, "dom.TrackEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	TransitionEvent = $pkg.TransitionEvent = $newType(0, $kindStruct, "dom.TransitionEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	UIEvent = $pkg.UIEvent = $newType(0, $kindStruct, "dom.UIEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	UserProximityEvent = $pkg.UserProximityEvent = $newType(0, $kindStruct, "dom.UserProximityEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			return;
		}
		this.BasicEvent = BasicEvent_;
	});
	WheelEvent = $pkg.WheelEvent = $newType(0, $kindStruct, "dom.WheelEvent", true, "honnef.co/go/js/dom", true, function(BasicEvent_, DeltaX_, DeltaY_, DeltaZ_, DeltaMode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasicEvent = ptrType$18.nil;
			this.DeltaX = 0;
			this.DeltaY = 0;
			this.DeltaZ = 0;
			this.DeltaMode = 0;
			return;
		}
		this.BasicEvent = BasicEvent_;
		this.DeltaX = DeltaX_;
		this.DeltaY = DeltaY_;
		this.DeltaZ = DeltaZ_;
		this.DeltaMode = DeltaMode_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(js.Object);
	sliceType$1 = $sliceType(ptrType);
	sliceType$2 = $sliceType(Node);
	sliceType$3 = $sliceType(Element);
	sliceType$4 = $sliceType(HTMLElement);
	ptrType$1 = $ptrType(BasicHTMLElement);
	ptrType$2 = $ptrType(URLUtils);
	ptrType$3 = $ptrType(HTMLMediaElement);
	ptrType$4 = $ptrType(time.Location);
	ptrType$5 = $ptrType(HTMLFormElement);
	ptrType$6 = $ptrType(HTMLLabelElement);
	sliceType$5 = $sliceType(ptrType$6);
	ptrType$7 = $ptrType(HTMLOptionElement);
	sliceType$6 = $sliceType(ptrType$7);
	sliceType$7 = $sliceType($String);
	sliceType$8 = $sliceType(ptrType$5);
	ptrType$8 = $ptrType(HTMLHeadElement);
	ptrType$9 = $ptrType(HTMLImageElement);
	sliceType$9 = $sliceType(ptrType$9);
	ptrType$10 = $ptrType(HTMLEmbedElement);
	sliceType$10 = $sliceType(ptrType$10);
	ptrType$11 = $ptrType(HTMLScriptElement);
	sliceType$11 = $sliceType(ptrType$11);
	ptrType$12 = $ptrType(Text);
	funcType = $funcType([], [], false);
	funcType$1 = $funcType([ptrType], [], false);
	ptrType$13 = $ptrType(File);
	sliceType$12 = $sliceType(ptrType$13);
	ptrType$14 = $ptrType(HTMLDataListElement);
	ptrType$15 = $ptrType(HTMLAreaElement);
	sliceType$13 = $sliceType(ptrType$15);
	ptrType$16 = $ptrType(HTMLTableCellElement);
	sliceType$14 = $sliceType(ptrType$16);
	ptrType$17 = $ptrType(HTMLTableRowElement);
	sliceType$15 = $sliceType(ptrType$17);
	ptrType$18 = $ptrType(BasicEvent);
	ptrType$19 = $ptrType(UIEvent);
	ptrType$20 = $ptrType(TokenList);
	funcType$2 = $funcType([Event], [], false);
	sliceType$16 = $sliceType(StyleSheet);
	ptrType$21 = $ptrType(Location);
	ptrType$22 = $ptrType(BasicNode);
	ptrType$23 = $ptrType(document);
	ptrType$24 = $ptrType(htmlDocument);
	mapType = $mapType($String, $String);
	ptrType$25 = $ptrType(CSSStyleDeclaration);
	ptrType$26 = $ptrType(Console);
	funcType$3 = $funcType([time.Duration], [], false);
	ptrType$27 = $ptrType(Screen);
	ptrType$28 = $ptrType(window);
	funcType$4 = $funcType([Position], [], false);
	funcType$5 = $funcType([PositionError], [], false);
	ptrType$29 = $ptrType(PositionError);
	ptrType$30 = $ptrType(Coordinates);
	ptrType$31 = $ptrType(BasicElement);
	ptrType$32 = $ptrType(HTMLAnchorElement);
	ptrType$33 = $ptrType(HTMLAppletElement);
	ptrType$34 = $ptrType(HTMLBaseElement);
	ptrType$35 = $ptrType(ValidityState);
	ptrType$36 = $ptrType(HTMLButtonElement);
	ptrType$37 = $ptrType(CanvasRenderingContext2D);
	ptrType$38 = $ptrType(HTMLCanvasElement);
	ptrType$39 = $ptrType(HTMLFieldSetElement);
	ptrType$40 = $ptrType(HTMLIFrameElement);
	ptrType$41 = $ptrType(HTMLInputElement);
	ptrType$42 = $ptrType(HTMLKeygenElement);
	ptrType$43 = $ptrType(HTMLLegendElement);
	ptrType$44 = $ptrType(HTMLLinkElement);
	ptrType$45 = $ptrType(HTMLMapElement);
	ptrType$46 = $ptrType(HTMLObjectElement);
	ptrType$47 = $ptrType(HTMLOutputElement);
	ptrType$48 = $ptrType(HTMLSelectElement);
	ptrType$49 = $ptrType(HTMLTableSectionElement);
	ptrType$50 = $ptrType(HTMLTextAreaElement);
	ptrType$51 = $ptrType(TextTrack);
	ptrType$52 = $ptrType(HTMLTrackElement);
	ptrType$53 = $ptrType(KeyboardEvent);
	ptrType$54 = $ptrType(MouseEvent);
	toString = function(o) {
		var $ptr, o;
		if (o === null || o === undefined) {
			return "";
		}
		return $internalize(o, $String);
	};
	callRecover = function(o, fn, args) {
		var $ptr, args, err, fn, o, obj, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		$deferred.push([(function() {
			var $ptr, _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && !($interfaceIsEqual(panicErr, $ifaceNil))) {
				err = panicErr;
			} else {
				$panic(e);
			}
		}), []]);
		(obj = o, obj[$externalize(fn, $String)].apply(obj, $externalize(args, sliceType)));
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } }
	};
	elementConstructor = function(o) {
		var $ptr, n, o;
		n = o.node;
		if (!(n === undefined)) {
			return n.constructor;
		}
		return o.constructor;
	};
	arrayToObjects = function(o) {
		var $ptr, i, o, out;
		out = sliceType$1.nil;
		i = 0;
		while (true) {
			if (!(i < $parseInt(o.length))) { break; }
			out = $append(out, o[i]);
			i = i + (1) >> 0;
		}
		return out;
	};
	nodeListToObjects = function(o) {
		var $ptr, i, length, o, out;
		if (o.constructor === $global.Array) {
			return arrayToObjects(o);
		}
		out = sliceType$1.nil;
		length = $parseInt(o.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			out = $append(out, o.item(i));
			i = i + (1) >> 0;
		}
		return out;
	};
	nodeListToNodes = function(o) {
		var $ptr, _i, _ref, o, obj, out;
		out = sliceType$2.nil;
		_ref = nodeListToObjects(o);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			obj = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			out = $append(out, wrapNode(obj));
			_i++;
		}
		return out;
	};
	nodeListToElements = function(o) {
		var $ptr, _i, _ref, o, obj, out;
		out = sliceType$3.nil;
		_ref = nodeListToObjects(o);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			obj = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			out = $append(out, wrapElement(obj));
			_i++;
		}
		return out;
	};
	nodeListToHTMLElements = function(o) {
		var $ptr, _i, _ref, o, obj, out;
		out = sliceType$4.nil;
		_ref = nodeListToObjects(o);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			obj = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			out = $append(out, wrapHTMLElement(obj));
			_i++;
		}
		return out;
	};
	WrapNode = function(o) {
		var $ptr, o;
		return wrapNode(o);
	};
	$pkg.WrapNode = WrapNode;
	wrapDocument = function(o) {
		var $ptr, _1, o;
		_1 = elementConstructor(o);
		if (_1 === ($global.HTMLDocument)) {
			return new htmlDocument.ptr(new document.ptr(new BasicNode.ptr(o)));
		} else {
			return new document.ptr(new BasicNode.ptr(o));
		}
	};
	wrapDocumentFragment = function(o) {
		var $ptr, o;
		elementConstructor(o);
		return new documentFragment.ptr(new BasicNode.ptr(o));
	};
	wrapNode = function(o) {
		var $ptr, _1, o;
		if (o === null || o === undefined) {
			return $ifaceNil;
		}
		_1 = elementConstructor(o);
		if (_1 === ($global.Text)) {
			return new Text.ptr(new BasicNode.ptr(o));
		} else {
			return wrapElement(o);
		}
	};
	wrapElement = function(o) {
		var $ptr, o;
		if (o === null || o === undefined) {
			return $ifaceNil;
		}
		elementConstructor(o);
		return wrapHTMLElement(o);
	};
	wrapHTMLElement = function(o) {
		var $ptr, _1, c, el, o;
		if (o === null || o === undefined) {
			return $ifaceNil;
		}
		el = new BasicHTMLElement.ptr(new BasicElement.ptr(new BasicNode.ptr(o)));
		c = elementConstructor(o);
		_1 = c;
		if (_1 === ($global.HTMLAnchorElement)) {
			return new HTMLAnchorElement.ptr(el, new URLUtils.ptr(o, "", "", "", "", "", "", "", "", "", "", ""), "", "", 0, "", "", "");
		} else if (_1 === ($global.HTMLAppletElement)) {
			return new HTMLAppletElement.ptr(el, "", "", "", "", "", "", 0, "", "");
		} else if (_1 === ($global.HTMLAreaElement)) {
			return new HTMLAreaElement.ptr(el, new URLUtils.ptr(o, "", "", "", "", "", "", "", "", "", "", ""), "", "", "", "", "", "", 0, "", "");
		} else if (_1 === ($global.HTMLAudioElement)) {
			return new HTMLAudioElement.ptr(new HTMLMediaElement.ptr(el, false));
		} else if (_1 === ($global.HTMLBaseElement)) {
			return new HTMLBaseElement.ptr(el);
		} else if (_1 === ($global.HTMLBodyElement)) {
			return new HTMLBodyElement.ptr(el);
		} else if (_1 === ($global.HTMLBRElement)) {
			return new HTMLBRElement.ptr(el);
		} else if (_1 === ($global.HTMLButtonElement)) {
			return new HTMLButtonElement.ptr(el, false, false, "", "", "", false, "", "", 0, "", "", "", false);
		} else if (_1 === ($global.HTMLCanvasElement)) {
			return new HTMLCanvasElement.ptr(el, 0, 0);
		} else if (_1 === ($global.HTMLDataElement)) {
			return new HTMLDataElement.ptr(el, "");
		} else if (_1 === ($global.HTMLDataListElement)) {
			return new HTMLDataListElement.ptr(el);
		} else if (_1 === ($global.HTMLDirectoryElement)) {
			return new HTMLDirectoryElement.ptr(el);
		} else if (_1 === ($global.HTMLDivElement)) {
			return new HTMLDivElement.ptr(el);
		} else if (_1 === ($global.HTMLDListElement)) {
			return new HTMLDListElement.ptr(el);
		} else if (_1 === ($global.HTMLEmbedElement)) {
			return new HTMLEmbedElement.ptr(el, "", "", "");
		} else if (_1 === ($global.HTMLFieldSetElement)) {
			return new HTMLFieldSetElement.ptr(el, false, "", "", "", false);
		} else if (_1 === ($global.HTMLFontElement)) {
			return new HTMLFontElement.ptr(el);
		} else if (_1 === ($global.HTMLFormElement)) {
			return new HTMLFormElement.ptr(el, "", "", "", "", "", 0, "", "", false, "");
		} else if (_1 === ($global.HTMLFrameElement)) {
			return new HTMLFrameElement.ptr(el);
		} else if (_1 === ($global.HTMLFrameSetElement)) {
			return new HTMLFrameSetElement.ptr(el);
		} else if (_1 === ($global.HTMLHeadElement)) {
			return new HTMLHeadElement.ptr(el);
		} else if (_1 === ($global.HTMLHeadingElement)) {
			return new HTMLHeadingElement.ptr(el);
		} else if (_1 === ($global.HTMLHtmlElement)) {
			return new HTMLHtmlElement.ptr(el);
		} else if (_1 === ($global.HTMLHRElement)) {
			return new HTMLHRElement.ptr(el);
		} else if (_1 === ($global.HTMLIFrameElement)) {
			return new HTMLIFrameElement.ptr(el, "", "", "", "", "", false);
		} else if (_1 === ($global.HTMLImageElement)) {
			return new HTMLImageElement.ptr(el, false, "", 0, false, 0, 0, "", "", 0);
		} else if (_1 === ($global.HTMLInputElement)) {
			return new HTMLInputElement.ptr(el, "", "", "", false, false, false, "", "", false, "", "", "", false, "", "", false, "", 0, "", false, "", "", "", false, false, "", 0, 0, 0, "", "", 0, "", "", "", new time.Time.ptr(new $Int64(0, 0), 0, ptrType$4.nil), 0, "", false);
		} else if (_1 === ($global.HTMLKeygenElement)) {
			return new HTMLKeygenElement.ptr(el, false, "", false, "", "", "", "", false);
		} else if (_1 === ($global.HTMLLabelElement)) {
			return new HTMLLabelElement.ptr(el, "");
		} else if (_1 === ($global.HTMLLegendElement)) {
			return new HTMLLegendElement.ptr(el);
		} else if (_1 === ($global.HTMLLIElement)) {
			return new HTMLLIElement.ptr(el, 0);
		} else if (_1 === ($global.HTMLLinkElement)) {
			return new HTMLLinkElement.ptr(el, false, "", "", "", "");
		} else if (_1 === ($global.HTMLMapElement)) {
			return new HTMLMapElement.ptr(el, "");
		} else if (_1 === ($global.HTMLMediaElement)) {
			return new HTMLMediaElement.ptr(el, false);
		} else if (_1 === ($global.HTMLMenuElement)) {
			return new HTMLMenuElement.ptr(el);
		} else if (_1 === ($global.HTMLMetaElement)) {
			return new HTMLMetaElement.ptr(el, "", "", "");
		} else if (_1 === ($global.HTMLMeterElement)) {
			return new HTMLMeterElement.ptr(el, 0, 0, 0, 0, 0);
		} else if (_1 === ($global.HTMLModElement)) {
			return new HTMLModElement.ptr(el, "", "");
		} else if (_1 === ($global.HTMLObjectElement)) {
			return new HTMLObjectElement.ptr(el, "", "", "", 0, "", false, "", "", "", false);
		} else if (_1 === ($global.HTMLOListElement)) {
			return new HTMLOListElement.ptr(el, false, 0, "");
		} else if (_1 === ($global.HTMLOptGroupElement)) {
			return new HTMLOptGroupElement.ptr(el, false, "");
		} else if (_1 === ($global.HTMLOptionElement)) {
			return new HTMLOptionElement.ptr(el, false, false, 0, "", false, "", "");
		} else if (_1 === ($global.HTMLOutputElement)) {
			return new HTMLOutputElement.ptr(el, "", "", "", "", "", false);
		} else if (_1 === ($global.HTMLParagraphElement)) {
			return new HTMLParagraphElement.ptr(el);
		} else if (_1 === ($global.HTMLParamElement)) {
			return new HTMLParamElement.ptr(el, "", "");
		} else if (_1 === ($global.HTMLPreElement)) {
			return new HTMLPreElement.ptr(el);
		} else if (_1 === ($global.HTMLProgressElement)) {
			return new HTMLProgressElement.ptr(el, 0, 0, 0);
		} else if (_1 === ($global.HTMLQuoteElement)) {
			return new HTMLQuoteElement.ptr(el, "");
		} else if (_1 === ($global.HTMLScriptElement)) {
			return new HTMLScriptElement.ptr(el, "", "", "", false, false, "");
		} else if (_1 === ($global.HTMLSelectElement)) {
			return new HTMLSelectElement.ptr(el, false, false, 0, false, "", false, 0, 0, "", "", "", false);
		} else if (_1 === ($global.HTMLSourceElement)) {
			return new HTMLSourceElement.ptr(el, "", "", "");
		} else if (_1 === ($global.HTMLSpanElement)) {
			return new HTMLSpanElement.ptr(el);
		} else if (_1 === ($global.HTMLStyleElement)) {
			return new HTMLStyleElement.ptr(el);
		} else if (_1 === ($global.HTMLTableElement)) {
			return new HTMLTableElement.ptr(el);
		} else if (_1 === ($global.HTMLTableCaptionElement)) {
			return new HTMLTableCaptionElement.ptr(el);
		} else if (_1 === ($global.HTMLTableCellElement)) {
			return new HTMLTableCellElement.ptr(el, 0, 0, 0);
		} else if (_1 === ($global.HTMLTableDataCellElement)) {
			return new HTMLTableDataCellElement.ptr(el);
		} else if (_1 === ($global.HTMLTableHeaderCellElement)) {
			return new HTMLTableHeaderCellElement.ptr(el, "", "");
		} else if (_1 === ($global.HTMLTableColElement)) {
			return new HTMLTableColElement.ptr(el, 0);
		} else if (_1 === ($global.HTMLTableRowElement)) {
			return new HTMLTableRowElement.ptr(el, 0, 0);
		} else if (_1 === ($global.HTMLTableSectionElement)) {
			return new HTMLTableSectionElement.ptr(el);
		} else if (_1 === ($global.HTMLTextAreaElement)) {
			return new HTMLTextAreaElement.ptr(el, "", false, 0, "", "", false, 0, "", "", false, false, 0, "", 0, 0, 0, 0, "", "", "", false, "");
		} else if (_1 === ($global.HTMLTimeElement)) {
			return new HTMLTimeElement.ptr(el, "");
		} else if (_1 === ($global.HTMLTitleElement)) {
			return new HTMLTitleElement.ptr(el, "");
		} else if (_1 === ($global.HTMLTrackElement)) {
			return new HTMLTrackElement.ptr(el, "", "", "", "", false, 0);
		} else if (_1 === ($global.HTMLUListElement)) {
			return new HTMLUListElement.ptr(el);
		} else if (_1 === ($global.HTMLUnknownElement)) {
			return new HTMLUnknownElement.ptr(el);
		} else if (_1 === ($global.HTMLVideoElement)) {
			return new HTMLVideoElement.ptr(new HTMLMediaElement.ptr(el, false));
		} else if (_1 === ($global.HTMLElement)) {
			return el;
		} else {
			return el;
		}
	};
	getForm = function(o) {
		var $ptr, form, o;
		form = wrapHTMLElement(o.form);
		if ($interfaceIsEqual(form, $ifaceNil)) {
			return ptrType$5.nil;
		}
		return $assertType(form, ptrType$5);
	};
	getLabels = function(o) {
		var $ptr, _i, _ref, i, label, labels, o, out;
		labels = nodeListToElements(o.labels);
		out = $makeSlice(sliceType$5, labels.$length);
		_ref = labels;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			label = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = $assertType(label, ptrType$6));
			_i++;
		}
		return out;
	};
	getOptions = function(o, attr) {
		var $ptr, _i, _ref, attr, i, o, option, options, out;
		options = nodeListToElements(o[$externalize(attr, $String)]);
		out = $makeSlice(sliceType$6, options.$length);
		_ref = options;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			option = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = $assertType(option, ptrType$7));
			_i++;
		}
		return out;
	};
	GetWindow = function() {
		var $ptr;
		return new window.ptr($global);
	};
	$pkg.GetWindow = GetWindow;
	TokenList.ptr.prototype.Item = function(idx) {
		var $ptr, idx, o, tl;
		tl = this;
		o = tl.dtl.item(idx);
		return toString(o);
	};
	TokenList.prototype.Item = function(idx) { return this.$val.Item(idx); };
	TokenList.ptr.prototype.Contains = function(token) {
		var $ptr, tl, token;
		tl = this;
		return !!(tl.dtl.contains($externalize(token, $String)));
	};
	TokenList.prototype.Contains = function(token) { return this.$val.Contains(token); };
	TokenList.ptr.prototype.Add = function(token) {
		var $ptr, tl, token;
		tl = this;
		tl.dtl.add($externalize(token, $String));
	};
	TokenList.prototype.Add = function(token) { return this.$val.Add(token); };
	TokenList.ptr.prototype.Remove = function(token) {
		var $ptr, tl, token;
		tl = this;
		tl.dtl.remove($externalize(token, $String));
	};
	TokenList.prototype.Remove = function(token) { return this.$val.Remove(token); };
	TokenList.ptr.prototype.Toggle = function(token) {
		var $ptr, tl, token;
		tl = this;
		tl.dtl.toggle($externalize(token, $String));
	};
	TokenList.prototype.Toggle = function(token) { return this.$val.Toggle(token); };
	TokenList.ptr.prototype.String = function() {
		var $ptr, tl;
		tl = this;
		if (!(tl.sa === "")) {
			return $internalize(tl.o[$externalize(tl.sa, $String)], $String);
		}
		if (tl.dtl.constructor === $global.DOMSettableTokenList) {
			return $internalize(tl.dtl.value, $String);
		}
		return "";
	};
	TokenList.prototype.String = function() { return this.$val.String(); };
	TokenList.ptr.prototype.Slice = function() {
		var $ptr, i, length, out, tl;
		tl = this;
		out = sliceType$7.nil;
		length = $parseInt(tl.dtl.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			out = $append(out, $internalize(tl.dtl.item(i), $String));
			i = i + (1) >> 0;
		}
		return out;
	};
	TokenList.prototype.Slice = function() { return this.$val.Slice(); };
	TokenList.ptr.prototype.SetString = function(s) {
		var $ptr, s, tl;
		tl = this;
		if (!(tl.sa === "")) {
			tl.o[$externalize(tl.sa, $String)] = $externalize(s, $String);
			return;
		}
		if (tl.dtl.constructor === $global.DOMSettableTokenList) {
			tl.dtl.value = $externalize(s, $String);
			return;
		}
		$panic(new $String("no way to SetString on this TokenList"));
	};
	TokenList.prototype.SetString = function(s) { return this.$val.SetString(s); };
	TokenList.ptr.prototype.Set = function(s) {
		var $ptr, s, tl;
		tl = this;
		tl.SetString(strings.Join(s, " "));
	};
	TokenList.prototype.Set = function(s) { return this.$val.Set(s); };
	documentFragment.ptr.prototype.GetElementByID = function(id) {
		var $ptr, d, id;
		d = $clone(this, documentFragment);
		return wrapElement(d.BasicNode.Object.getElementById($externalize(id, $String)));
	};
	documentFragment.prototype.GetElementByID = function(id) { return this.$val.GetElementByID(id); };
	documentFragment.ptr.prototype.QuerySelector = function(sel) {
		var $ptr, d, sel;
		d = $clone(this, documentFragment);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).QuerySelector(sel);
	};
	documentFragment.prototype.QuerySelector = function(sel) { return this.$val.QuerySelector(sel); };
	documentFragment.ptr.prototype.QuerySelectorAll = function(sel) {
		var $ptr, d, sel;
		d = $clone(this, documentFragment);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).QuerySelectorAll(sel);
	};
	documentFragment.prototype.QuerySelectorAll = function(sel) { return this.$val.QuerySelectorAll(sel); };
	htmlDocument.ptr.prototype.ActiveElement = function() {
		var $ptr, d;
		d = this;
		return wrapHTMLElement(d.document.BasicNode.Object.activeElement);
	};
	htmlDocument.prototype.ActiveElement = function() { return this.$val.ActiveElement(); };
	htmlDocument.ptr.prototype.Body = function() {
		var $ptr, d;
		d = this;
		return wrapHTMLElement(d.document.BasicNode.Object.body);
	};
	htmlDocument.prototype.Body = function() { return this.$val.Body(); };
	htmlDocument.ptr.prototype.Cookie = function() {
		var $ptr, d;
		d = this;
		return $internalize(d.document.BasicNode.Object.cookie, $String);
	};
	htmlDocument.prototype.Cookie = function() { return this.$val.Cookie(); };
	htmlDocument.ptr.prototype.SetCookie = function(s) {
		var $ptr, d, s;
		d = this;
		d.document.BasicNode.Object.cookie = $externalize(s, $String);
	};
	htmlDocument.prototype.SetCookie = function(s) { return this.$val.SetCookie(s); };
	htmlDocument.ptr.prototype.DefaultView = function() {
		var $ptr, d;
		d = this;
		return new window.ptr(d.document.BasicNode.Object.defaultView);
	};
	htmlDocument.prototype.DefaultView = function() { return this.$val.DefaultView(); };
	htmlDocument.ptr.prototype.DesignMode = function() {
		var $ptr, d, s;
		d = this;
		s = $internalize(d.document.BasicNode.Object.designMode, $String);
		return !(s === "off");
	};
	htmlDocument.prototype.DesignMode = function() { return this.$val.DesignMode(); };
	htmlDocument.ptr.prototype.SetDesignMode = function(b) {
		var $ptr, b, d, s;
		d = this;
		s = "off";
		if (b) {
			s = "on";
		}
		d.document.BasicNode.Object.designMode = $externalize(s, $String);
	};
	htmlDocument.prototype.SetDesignMode = function(b) { return this.$val.SetDesignMode(b); };
	htmlDocument.ptr.prototype.Domain = function() {
		var $ptr, d;
		d = this;
		return $internalize(d.document.BasicNode.Object.domain, $String);
	};
	htmlDocument.prototype.Domain = function() { return this.$val.Domain(); };
	htmlDocument.ptr.prototype.SetDomain = function(s) {
		var $ptr, d, s;
		d = this;
		d.document.BasicNode.Object.domain = $externalize(s, $String);
	};
	htmlDocument.prototype.SetDomain = function(s) { return this.$val.SetDomain(s); };
	htmlDocument.ptr.prototype.Forms = function() {
		var $ptr, d, els, forms, i, length;
		d = this;
		els = sliceType$8.nil;
		forms = d.document.BasicNode.Object.forms;
		length = $parseInt(forms.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			els = $append(els, $assertType(wrapHTMLElement(forms.item(i)), ptrType$5));
			i = i + (1) >> 0;
		}
		return els;
	};
	htmlDocument.prototype.Forms = function() { return this.$val.Forms(); };
	htmlDocument.ptr.prototype.Head = function() {
		var $ptr, d, head;
		d = this;
		head = wrapElement(d.document.BasicNode.Object.head);
		if ($interfaceIsEqual(head, $ifaceNil)) {
			return ptrType$8.nil;
		}
		return $assertType(head, ptrType$8);
	};
	htmlDocument.prototype.Head = function() { return this.$val.Head(); };
	htmlDocument.ptr.prototype.Images = function() {
		var $ptr, d, els, i, images, length;
		d = this;
		els = sliceType$9.nil;
		images = d.document.BasicNode.Object.images;
		length = $parseInt(images.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			els = $append(els, $assertType(wrapHTMLElement(images.item(i)), ptrType$9));
			i = i + (1) >> 0;
		}
		return els;
	};
	htmlDocument.prototype.Images = function() { return this.$val.Images(); };
	htmlDocument.ptr.prototype.LastModified = function() {
		var $ptr, d;
		d = this;
		return $assertType($internalize(d.document.BasicNode.Object.lastModified, $emptyInterface), time.Time);
	};
	htmlDocument.prototype.LastModified = function() { return this.$val.LastModified(); };
	htmlDocument.ptr.prototype.Links = function() {
		var $ptr, d, els, i, length, links;
		d = this;
		els = sliceType$4.nil;
		links = d.document.BasicNode.Object.links;
		length = $parseInt(links.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			els = $append(els, wrapHTMLElement(links.item(i)));
			i = i + (1) >> 0;
		}
		return els;
	};
	htmlDocument.prototype.Links = function() { return this.$val.Links(); };
	htmlDocument.ptr.prototype.Location = function() {
		var $ptr, d, o;
		d = this;
		o = d.document.BasicNode.Object.location;
		return new Location.ptr(o, new URLUtils.ptr(o, "", "", "", "", "", "", "", "", "", "", ""));
	};
	htmlDocument.prototype.Location = function() { return this.$val.Location(); };
	htmlDocument.ptr.prototype.Plugins = function() {
		var $ptr, d, els, forms, i, length;
		d = this;
		els = sliceType$10.nil;
		forms = d.document.BasicNode.Object.plugins;
		length = $parseInt(forms.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			els = $append(els, $assertType(wrapHTMLElement(forms.item(i)), ptrType$10));
			i = i + (1) >> 0;
		}
		return els;
	};
	htmlDocument.prototype.Plugins = function() { return this.$val.Plugins(); };
	htmlDocument.ptr.prototype.ReadyState = function() {
		var $ptr, d;
		d = this;
		return $internalize(d.document.BasicNode.Object.readyState, $String);
	};
	htmlDocument.prototype.ReadyState = function() { return this.$val.ReadyState(); };
	htmlDocument.ptr.prototype.Referrer = function() {
		var $ptr, d;
		d = this;
		return $internalize(d.document.BasicNode.Object.referrer, $String);
	};
	htmlDocument.prototype.Referrer = function() { return this.$val.Referrer(); };
	htmlDocument.ptr.prototype.Scripts = function() {
		var $ptr, d, els, forms, i, length;
		d = this;
		els = sliceType$11.nil;
		forms = d.document.BasicNode.Object.scripts;
		length = $parseInt(forms.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			els = $append(els, $assertType(wrapHTMLElement(forms.item(i)), ptrType$11));
			i = i + (1) >> 0;
		}
		return els;
	};
	htmlDocument.prototype.Scripts = function() { return this.$val.Scripts(); };
	htmlDocument.ptr.prototype.Title = function() {
		var $ptr, d;
		d = this;
		return $internalize(d.document.BasicNode.Object.title, $String);
	};
	htmlDocument.prototype.Title = function() { return this.$val.Title(); };
	htmlDocument.ptr.prototype.SetTitle = function(s) {
		var $ptr, d, s;
		d = this;
		d.document.BasicNode.Object.title = $externalize(s, $String);
	};
	htmlDocument.prototype.SetTitle = function(s) { return this.$val.SetTitle(s); };
	htmlDocument.ptr.prototype.URL = function() {
		var $ptr, d;
		d = this;
		return $internalize(d.document.BasicNode.Object.URL, $String);
	};
	htmlDocument.prototype.URL = function() { return this.$val.URL(); };
	document.ptr.prototype.Async = function() {
		var $ptr, d;
		d = $clone(this, document);
		return !!(d.BasicNode.Object.async);
	};
	document.prototype.Async = function() { return this.$val.Async(); };
	document.ptr.prototype.SetAsync = function(b) {
		var $ptr, b, d;
		d = $clone(this, document);
		d.BasicNode.Object.async = $externalize(b, $Bool);
	};
	document.prototype.SetAsync = function(b) { return this.$val.SetAsync(b); };
	document.ptr.prototype.Doctype = function() {
		var $ptr, d;
		d = $clone(this, document);
		$panic(new $String("not implemented"));
	};
	document.prototype.Doctype = function() { return this.$val.Doctype(); };
	document.ptr.prototype.DocumentElement = function() {
		var $ptr, d;
		d = $clone(this, document);
		return wrapElement(d.BasicNode.Object.documentElement);
	};
	document.prototype.DocumentElement = function() { return this.$val.DocumentElement(); };
	document.ptr.prototype.DocumentURI = function() {
		var $ptr, d;
		d = $clone(this, document);
		return $internalize(d.BasicNode.Object.documentURI, $String);
	};
	document.prototype.DocumentURI = function() { return this.$val.DocumentURI(); };
	document.ptr.prototype.Implementation = function() {
		var $ptr, d;
		d = $clone(this, document);
		$panic(new $String("not implemented"));
	};
	document.prototype.Implementation = function() { return this.$val.Implementation(); };
	document.ptr.prototype.LastStyleSheetSet = function() {
		var $ptr, d;
		d = $clone(this, document);
		return $internalize(d.BasicNode.Object.lastStyleSheetSet, $String);
	};
	document.prototype.LastStyleSheetSet = function() { return this.$val.LastStyleSheetSet(); };
	document.ptr.prototype.PreferredStyleSheetSet = function() {
		var $ptr, d;
		d = $clone(this, document);
		return $internalize(d.BasicNode.Object.preferredStyleSheetSet, $String);
	};
	document.prototype.PreferredStyleSheetSet = function() { return this.$val.PreferredStyleSheetSet(); };
	document.ptr.prototype.SelectedStyleSheetSet = function() {
		var $ptr, d;
		d = $clone(this, document);
		return $internalize(d.BasicNode.Object.selectedStyleSheetSet, $String);
	};
	document.prototype.SelectedStyleSheetSet = function() { return this.$val.SelectedStyleSheetSet(); };
	document.ptr.prototype.StyleSheets = function() {
		var $ptr, d;
		d = $clone(this, document);
		$panic(new $String("not implemented"));
	};
	document.prototype.StyleSheets = function() { return this.$val.StyleSheets(); };
	document.ptr.prototype.StyleSheetSets = function() {
		var $ptr, d;
		d = $clone(this, document);
		$panic(new $String("not implemented"));
	};
	document.prototype.StyleSheetSets = function() { return this.$val.StyleSheetSets(); };
	document.ptr.prototype.AdoptNode = function(node) {
		var $ptr, _r, _r$1, d, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; d = $f.d; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = $clone(this, document);
		_r = node.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = wrapNode(d.BasicNode.Object.adoptNode(_r)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: document.ptr.prototype.AdoptNode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	document.prototype.AdoptNode = function(node) { return this.$val.AdoptNode(node); };
	document.ptr.prototype.ImportNode = function(node, deep) {
		var $ptr, _r, _r$1, d, deep, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; d = $f.d; deep = $f.deep; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = $clone(this, document);
		_r = node.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = wrapNode(d.BasicNode.Object.importNode(_r, $externalize(deep, $Bool))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: document.ptr.prototype.ImportNode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.deep = deep; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	document.prototype.ImportNode = function(node, deep) { return this.$val.ImportNode(node, deep); };
	document.ptr.prototype.CreateDocumentFragment = function() {
		var $ptr, d;
		d = $clone(this, document);
		return wrapDocumentFragment(d.BasicNode.Object.createDocumentFragment());
	};
	document.prototype.CreateDocumentFragment = function() { return this.$val.CreateDocumentFragment(); };
	document.ptr.prototype.CreateElement = function(name) {
		var $ptr, d, name;
		d = $clone(this, document);
		return wrapElement(d.BasicNode.Object.createElement($externalize(name, $String)));
	};
	document.prototype.CreateElement = function(name) { return this.$val.CreateElement(name); };
	document.ptr.prototype.CreateElementNS = function(ns, name) {
		var $ptr, d, name, ns;
		d = $clone(this, document);
		return wrapElement(d.BasicNode.Object.createElement($externalize(ns, $String), $externalize(name, $String)));
	};
	document.prototype.CreateElementNS = function(ns, name) { return this.$val.CreateElementNS(ns, name); };
	document.ptr.prototype.CreateTextNode = function(s) {
		var $ptr, d, s;
		d = $clone(this, document);
		return $assertType(wrapNode(d.BasicNode.Object.createTextNode($externalize(s, $String))), ptrType$12);
	};
	document.prototype.CreateTextNode = function(s) { return this.$val.CreateTextNode(s); };
	document.ptr.prototype.ElementFromPoint = function(x, y) {
		var $ptr, d, x, y;
		d = $clone(this, document);
		return wrapElement(d.BasicNode.Object.elementFromPoint(x, y));
	};
	document.prototype.ElementFromPoint = function(x, y) { return this.$val.ElementFromPoint(x, y); };
	document.ptr.prototype.EnableStyleSheetsForSet = function(name) {
		var $ptr, d, name;
		d = $clone(this, document);
		d.BasicNode.Object.enableStyleSheetsForSet($externalize(name, $String));
	};
	document.prototype.EnableStyleSheetsForSet = function(name) { return this.$val.EnableStyleSheetsForSet(name); };
	document.ptr.prototype.GetElementsByClassName = function(name) {
		var $ptr, d, name;
		d = $clone(this, document);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).GetElementsByClassName(name);
	};
	document.prototype.GetElementsByClassName = function(name) { return this.$val.GetElementsByClassName(name); };
	document.ptr.prototype.GetElementsByTagName = function(name) {
		var $ptr, d, name;
		d = $clone(this, document);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).GetElementsByTagName(name);
	};
	document.prototype.GetElementsByTagName = function(name) { return this.$val.GetElementsByTagName(name); };
	document.ptr.prototype.GetElementsByTagNameNS = function(ns, name) {
		var $ptr, d, name, ns;
		d = $clone(this, document);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).GetElementsByTagNameNS(ns, name);
	};
	document.prototype.GetElementsByTagNameNS = function(ns, name) { return this.$val.GetElementsByTagNameNS(ns, name); };
	document.ptr.prototype.GetElementByID = function(id) {
		var $ptr, d, id;
		d = $clone(this, document);
		return wrapElement(d.BasicNode.Object.getElementById($externalize(id, $String)));
	};
	document.prototype.GetElementByID = function(id) { return this.$val.GetElementByID(id); };
	document.ptr.prototype.QuerySelector = function(sel) {
		var $ptr, d, sel;
		d = $clone(this, document);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).QuerySelector(sel);
	};
	document.prototype.QuerySelector = function(sel) { return this.$val.QuerySelector(sel); };
	document.ptr.prototype.QuerySelectorAll = function(sel) {
		var $ptr, d, sel;
		d = $clone(this, document);
		return (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).QuerySelectorAll(sel);
	};
	document.prototype.QuerySelectorAll = function(sel) { return this.$val.QuerySelectorAll(sel); };
	window.ptr.prototype.Console = function() {
		var $ptr, w;
		w = this;
		return new Console.ptr(w.Object.console);
	};
	window.prototype.Console = function() { return this.$val.Console(); };
	window.ptr.prototype.Document = function() {
		var $ptr, w;
		w = this;
		return wrapDocument(w.Object.document);
	};
	window.prototype.Document = function() { return this.$val.Document(); };
	window.ptr.prototype.FrameElement = function() {
		var $ptr, w;
		w = this;
		return wrapElement(w.Object.frameElement);
	};
	window.prototype.FrameElement = function() { return this.$val.FrameElement(); };
	window.ptr.prototype.Location = function() {
		var $ptr, o, w;
		w = this;
		o = w.Object.location;
		return new Location.ptr(o, new URLUtils.ptr(o, "", "", "", "", "", "", "", "", "", "", ""));
	};
	window.prototype.Location = function() { return this.$val.Location(); };
	window.ptr.prototype.Name = function() {
		var $ptr, w;
		w = this;
		return $internalize(w.Object.name, $String);
	};
	window.prototype.Name = function() { return this.$val.Name(); };
	window.ptr.prototype.SetName = function(s) {
		var $ptr, s, w;
		w = this;
		w.Object.name = $externalize(s, $String);
	};
	window.prototype.SetName = function(s) { return this.$val.SetName(s); };
	window.ptr.prototype.InnerHeight = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.innerHeight) >> 0;
	};
	window.prototype.InnerHeight = function() { return this.$val.InnerHeight(); };
	window.ptr.prototype.InnerWidth = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.innerWidth) >> 0;
	};
	window.prototype.InnerWidth = function() { return this.$val.InnerWidth(); };
	window.ptr.prototype.Length = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.length) >> 0;
	};
	window.prototype.Length = function() { return this.$val.Length(); };
	window.ptr.prototype.Opener = function() {
		var $ptr, w;
		w = this;
		return new window.ptr(w.Object.opener);
	};
	window.prototype.Opener = function() { return this.$val.Opener(); };
	window.ptr.prototype.OuterHeight = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.outerHeight) >> 0;
	};
	window.prototype.OuterHeight = function() { return this.$val.OuterHeight(); };
	window.ptr.prototype.OuterWidth = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.outerWidth) >> 0;
	};
	window.prototype.OuterWidth = function() { return this.$val.OuterWidth(); };
	window.ptr.prototype.ScrollX = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.scrollX) >> 0;
	};
	window.prototype.ScrollX = function() { return this.$val.ScrollX(); };
	window.ptr.prototype.ScrollY = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.scrollY) >> 0;
	};
	window.prototype.ScrollY = function() { return this.$val.ScrollY(); };
	window.ptr.prototype.Parent = function() {
		var $ptr, w;
		w = this;
		return new window.ptr(w.Object.parent);
	};
	window.prototype.Parent = function() { return this.$val.Parent(); };
	window.ptr.prototype.ScreenX = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.screenX) >> 0;
	};
	window.prototype.ScreenX = function() { return this.$val.ScreenX(); };
	window.ptr.prototype.ScreenY = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.screenY) >> 0;
	};
	window.prototype.ScreenY = function() { return this.$val.ScreenY(); };
	window.ptr.prototype.ScrollMaxX = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.scrollMaxX) >> 0;
	};
	window.prototype.ScrollMaxX = function() { return this.$val.ScrollMaxX(); };
	window.ptr.prototype.ScrollMaxY = function() {
		var $ptr, w;
		w = this;
		return $parseInt(w.Object.scrollMaxY) >> 0;
	};
	window.prototype.ScrollMaxY = function() { return this.$val.ScrollMaxY(); };
	window.ptr.prototype.Top = function() {
		var $ptr, w;
		w = this;
		return new window.ptr(w.Object.top);
	};
	window.prototype.Top = function() { return this.$val.Top(); };
	window.ptr.prototype.History = function() {
		var $ptr, w;
		w = this;
		return $ifaceNil;
	};
	window.prototype.History = function() { return this.$val.History(); };
	window.ptr.prototype.Navigator = function() {
		var $ptr, w;
		w = this;
		$panic(new $String("not implemented"));
	};
	window.prototype.Navigator = function() { return this.$val.Navigator(); };
	window.ptr.prototype.Screen = function() {
		var $ptr, w;
		w = this;
		return new Screen.ptr(w.Object.screen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	};
	window.prototype.Screen = function() { return this.$val.Screen(); };
	window.ptr.prototype.Alert = function(msg) {
		var $ptr, msg, w;
		w = this;
		w.Object.alert($externalize(msg, $String));
	};
	window.prototype.Alert = function(msg) { return this.$val.Alert(msg); };
	window.ptr.prototype.Back = function() {
		var $ptr, w;
		w = this;
		w.Object.back();
	};
	window.prototype.Back = function() { return this.$val.Back(); };
	window.ptr.prototype.Blur = function() {
		var $ptr, w;
		w = this;
		w.Object.blur();
	};
	window.prototype.Blur = function() { return this.$val.Blur(); };
	window.ptr.prototype.ClearInterval = function(id) {
		var $ptr, id, w;
		w = this;
		w.Object.clearInterval(id);
	};
	window.prototype.ClearInterval = function(id) { return this.$val.ClearInterval(id); };
	window.ptr.prototype.ClearTimeout = function(id) {
		var $ptr, id, w;
		w = this;
		w.Object.clearTimeout(id);
	};
	window.prototype.ClearTimeout = function(id) { return this.$val.ClearTimeout(id); };
	window.ptr.prototype.Close = function() {
		var $ptr, w;
		w = this;
		w.Object.close();
	};
	window.prototype.Close = function() { return this.$val.Close(); };
	window.ptr.prototype.Confirm = function(prompt) {
		var $ptr, prompt, w;
		w = this;
		return !!(w.Object.confirm($externalize(prompt, $String)));
	};
	window.prototype.Confirm = function(prompt) { return this.$val.Confirm(prompt); };
	window.ptr.prototype.Focus = function() {
		var $ptr, w;
		w = this;
		w.Object.focus();
	};
	window.prototype.Focus = function() { return this.$val.Focus(); };
	window.ptr.prototype.Forward = function() {
		var $ptr, w;
		w = this;
		w.Object.forward();
	};
	window.prototype.Forward = function() { return this.$val.Forward(); };
	window.ptr.prototype.GetComputedStyle = function(el, pseudoElt) {
		var $ptr, _r, el, optArg, pseudoElt, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; el = $f.el; optArg = $f.optArg; pseudoElt = $f.pseudoElt; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		optArg = $ifaceNil;
		if (!(pseudoElt === "")) {
			optArg = new $String(pseudoElt);
		}
		_r = el.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new CSSStyleDeclaration.ptr(w.Object.getComputedStyle(_r, $externalize(optArg, $emptyInterface)));
		return new CSSStyleDeclaration.ptr(w.Object.getComputedStyle(_r, $externalize(optArg, $emptyInterface)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: window.ptr.prototype.GetComputedStyle }; } $f.$ptr = $ptr; $f._r = _r; $f.el = el; $f.optArg = optArg; $f.pseudoElt = pseudoElt; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	window.prototype.GetComputedStyle = function(el, pseudoElt) { return this.$val.GetComputedStyle(el, pseudoElt); };
	window.ptr.prototype.GetSelection = function() {
		var $ptr, w;
		w = this;
		$panic(new $String("not implemented"));
	};
	window.prototype.GetSelection = function() { return this.$val.GetSelection(); };
	window.ptr.prototype.Home = function() {
		var $ptr, w;
		w = this;
		w.Object.home();
	};
	window.prototype.Home = function() { return this.$val.Home(); };
	window.ptr.prototype.MoveBy = function(dx, dy) {
		var $ptr, dx, dy, w;
		w = this;
		w.Object.moveBy(dx, dy);
	};
	window.prototype.MoveBy = function(dx, dy) { return this.$val.MoveBy(dx, dy); };
	window.ptr.prototype.MoveTo = function(x, y) {
		var $ptr, w, x, y;
		w = this;
		w.Object.moveTo(x, y);
	};
	window.prototype.MoveTo = function(x, y) { return this.$val.MoveTo(x, y); };
	window.ptr.prototype.Open = function(url, name, features) {
		var $ptr, features, name, url, w;
		w = this;
		return new window.ptr(w.Object.open($externalize(url, $String), $externalize(name, $String), $externalize(features, $String)));
	};
	window.prototype.Open = function(url, name, features) { return this.$val.Open(url, name, features); };
	window.ptr.prototype.OpenDialog = function(url, name, features, args) {
		var $ptr, args, features, name, url, w;
		w = this;
		return new window.ptr(w.Object.openDialog($externalize(url, $String), $externalize(name, $String), $externalize(features, $String), $externalize(args, sliceType)));
	};
	window.prototype.OpenDialog = function(url, name, features, args) { return this.$val.OpenDialog(url, name, features, args); };
	window.ptr.prototype.PostMessage = function(message, target, transfer) {
		var $ptr, message, target, transfer, w;
		w = this;
		w.Object.postMessage($externalize(message, $String), $externalize(target, $String), $externalize(transfer, sliceType));
	};
	window.prototype.PostMessage = function(message, target, transfer) { return this.$val.PostMessage(message, target, transfer); };
	window.ptr.prototype.Print = function() {
		var $ptr, w;
		w = this;
		w.Object.print();
	};
	window.prototype.Print = function() { return this.$val.Print(); };
	window.ptr.prototype.Prompt = function(prompt, initial) {
		var $ptr, initial, prompt, w;
		w = this;
		return $internalize(w.Object.prompt($externalize(prompt, $String), $externalize(initial, $String)), $String);
	};
	window.prototype.Prompt = function(prompt, initial) { return this.$val.Prompt(prompt, initial); };
	window.ptr.prototype.ResizeBy = function(dw, dh) {
		var $ptr, dh, dw, w;
		w = this;
		w.Object.resizeBy(dw, dh);
	};
	window.prototype.ResizeBy = function(dw, dh) { return this.$val.ResizeBy(dw, dh); };
	window.ptr.prototype.ResizeTo = function(width, height) {
		var $ptr, height, w, width;
		w = this;
		w.Object.resizeTo(width, height);
	};
	window.prototype.ResizeTo = function(width, height) { return this.$val.ResizeTo(width, height); };
	window.ptr.prototype.Scroll = function(x, y) {
		var $ptr, w, x, y;
		w = this;
		w.Object.scroll(x, y);
	};
	window.prototype.Scroll = function(x, y) { return this.$val.Scroll(x, y); };
	window.ptr.prototype.ScrollBy = function(dx, dy) {
		var $ptr, dx, dy, w;
		w = this;
		w.Object.scrollBy(dx, dy);
	};
	window.prototype.ScrollBy = function(dx, dy) { return this.$val.ScrollBy(dx, dy); };
	window.ptr.prototype.ScrollByLines = function(i) {
		var $ptr, i, w;
		w = this;
		w.Object.scrollByLines(i);
	};
	window.prototype.ScrollByLines = function(i) { return this.$val.ScrollByLines(i); };
	window.ptr.prototype.ScrollTo = function(x, y) {
		var $ptr, w, x, y;
		w = this;
		w.Object.scrollTo(x, y);
	};
	window.prototype.ScrollTo = function(x, y) { return this.$val.ScrollTo(x, y); };
	window.ptr.prototype.SetCursor = function(name) {
		var $ptr, name, w;
		w = this;
		w.Object.setCursor($externalize(name, $String));
	};
	window.prototype.SetCursor = function(name) { return this.$val.SetCursor(name); };
	window.ptr.prototype.SetInterval = function(fn, delay) {
		var $ptr, delay, fn, w;
		w = this;
		return $parseInt(w.Object.setInterval($externalize(fn, funcType), delay)) >> 0;
	};
	window.prototype.SetInterval = function(fn, delay) { return this.$val.SetInterval(fn, delay); };
	window.ptr.prototype.SetTimeout = function(fn, delay) {
		var $ptr, delay, fn, w;
		w = this;
		return $parseInt(w.Object.setTimeout($externalize(fn, funcType), delay)) >> 0;
	};
	window.prototype.SetTimeout = function(fn, delay) { return this.$val.SetTimeout(fn, delay); };
	window.ptr.prototype.Stop = function() {
		var $ptr, w;
		w = this;
		w.Object.stop();
	};
	window.prototype.Stop = function() { return this.$val.Stop(); };
	window.ptr.prototype.AddEventListener = function(typ, useCapture, listener) {
		var $ptr, listener, typ, useCapture, w, wrapper;
		w = this;
		wrapper = (function $b(o) {
			var $ptr, o, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; o = $f.o; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = listener(wrapEvent(o)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.o = o; $f.$s = $s; $f.$r = $r; return $f;
		});
		w.Object.addEventListener($externalize(typ, $String), $externalize(wrapper, funcType$1), $externalize(useCapture, $Bool));
		return wrapper;
	};
	window.prototype.AddEventListener = function(typ, useCapture, listener) { return this.$val.AddEventListener(typ, useCapture, listener); };
	window.ptr.prototype.RemoveEventListener = function(typ, useCapture, listener) {
		var $ptr, listener, typ, useCapture, w;
		w = this;
		w.Object.removeEventListener($externalize(typ, $String), $externalize(listener, funcType$1), $externalize(useCapture, $Bool));
	};
	window.prototype.RemoveEventListener = function(typ, useCapture, listener) { return this.$val.RemoveEventListener(typ, useCapture, listener); };
	window.ptr.prototype.DispatchEvent = function(event) {
		var $ptr, event, w;
		w = this;
		return !!(w.Object.dispatchEvent($externalize(event, Event)));
	};
	window.prototype.DispatchEvent = function(event) { return this.$val.DispatchEvent(event); };
	wrapDOMHighResTimeStamp = function(o) {
		var $ptr, o;
		return new time.Duration(0, $parseFloat(o) * 1e+06);
	};
	window.ptr.prototype.RequestAnimationFrame = function(callback) {
		var $ptr, callback, w, wrapper;
		w = this;
		wrapper = (function $b(o) {
			var $ptr, o, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; o = $f.o; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = callback(wrapDOMHighResTimeStamp(o)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.o = o; $f.$s = $s; $f.$r = $r; return $f;
		});
		return $parseInt(w.Object.requestAnimationFrame($externalize(wrapper, funcType$1))) >> 0;
	};
	window.prototype.RequestAnimationFrame = function(callback) { return this.$val.RequestAnimationFrame(callback); };
	window.ptr.prototype.CancelAnimationFrame = function(requestID) {
		var $ptr, requestID, w;
		w = this;
		w.Object.cancelAnimationFrame(requestID);
	};
	window.prototype.CancelAnimationFrame = function(requestID) { return this.$val.CancelAnimationFrame(requestID); };
	PositionError.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.message(), $String);
	};
	PositionError.prototype.Error = function() { return this.$val.Error(); };
	BasicNode.ptr.prototype.Underlying = function() {
		var $ptr, n;
		n = this;
		return n.Object;
	};
	BasicNode.prototype.Underlying = function() { return this.$val.Underlying(); };
	BasicNode.ptr.prototype.AddEventListener = function(typ, useCapture, listener) {
		var $ptr, listener, n, typ, useCapture, wrapper;
		n = this;
		wrapper = (function $b(o) {
			var $ptr, o, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; o = $f.o; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = listener(wrapEvent(o)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.o = o; $f.$s = $s; $f.$r = $r; return $f;
		});
		n.Object.addEventListener($externalize(typ, $String), $externalize(wrapper, funcType$1), $externalize(useCapture, $Bool));
		return wrapper;
	};
	BasicNode.prototype.AddEventListener = function(typ, useCapture, listener) { return this.$val.AddEventListener(typ, useCapture, listener); };
	BasicNode.ptr.prototype.RemoveEventListener = function(typ, useCapture, listener) {
		var $ptr, listener, n, typ, useCapture;
		n = this;
		n.Object.removeEventListener($externalize(typ, $String), $externalize(listener, funcType$1), $externalize(useCapture, $Bool));
	};
	BasicNode.prototype.RemoveEventListener = function(typ, useCapture, listener) { return this.$val.RemoveEventListener(typ, useCapture, listener); };
	BasicNode.ptr.prototype.DispatchEvent = function(event) {
		var $ptr, event, n;
		n = this;
		return !!(n.Object.dispatchEvent($externalize(event, Event)));
	};
	BasicNode.prototype.DispatchEvent = function(event) { return this.$val.DispatchEvent(event); };
	BasicNode.ptr.prototype.BaseURI = function() {
		var $ptr, n;
		n = this;
		return $internalize(n.Object.baseURI, $String);
	};
	BasicNode.prototype.BaseURI = function() { return this.$val.BaseURI(); };
	BasicNode.ptr.prototype.ChildNodes = function() {
		var $ptr, n;
		n = this;
		return nodeListToNodes(n.Object.childNodes);
	};
	BasicNode.prototype.ChildNodes = function() { return this.$val.ChildNodes(); };
	BasicNode.ptr.prototype.FirstChild = function() {
		var $ptr, n;
		n = this;
		return wrapNode(n.Object.firstChild);
	};
	BasicNode.prototype.FirstChild = function() { return this.$val.FirstChild(); };
	BasicNode.ptr.prototype.LastChild = function() {
		var $ptr, n;
		n = this;
		return wrapNode(n.Object.lastChild);
	};
	BasicNode.prototype.LastChild = function() { return this.$val.LastChild(); };
	BasicNode.ptr.prototype.NextSibling = function() {
		var $ptr, n;
		n = this;
		return wrapNode(n.Object.nextSibling);
	};
	BasicNode.prototype.NextSibling = function() { return this.$val.NextSibling(); };
	BasicNode.ptr.prototype.NodeName = function() {
		var $ptr, n;
		n = this;
		return $internalize(n.Object.nodeName, $String);
	};
	BasicNode.prototype.NodeName = function() { return this.$val.NodeName(); };
	BasicNode.ptr.prototype.NodeType = function() {
		var $ptr, n;
		n = this;
		return $parseInt(n.Object.nodeType) >> 0;
	};
	BasicNode.prototype.NodeType = function() { return this.$val.NodeType(); };
	BasicNode.ptr.prototype.NodeValue = function() {
		var $ptr, n;
		n = this;
		return toString(n.Object.nodeValue);
	};
	BasicNode.prototype.NodeValue = function() { return this.$val.NodeValue(); };
	BasicNode.ptr.prototype.SetNodeValue = function(s) {
		var $ptr, n, s;
		n = this;
		n.Object.nodeValue = $externalize(s, $String);
	};
	BasicNode.prototype.SetNodeValue = function(s) { return this.$val.SetNodeValue(s); };
	BasicNode.ptr.prototype.OwnerDocument = function() {
		var $ptr, n;
		n = this;
		$panic(new $String("not implemented"));
	};
	BasicNode.prototype.OwnerDocument = function() { return this.$val.OwnerDocument(); };
	BasicNode.ptr.prototype.ParentNode = function() {
		var $ptr, n;
		n = this;
		return wrapNode(n.Object.parentNode);
	};
	BasicNode.prototype.ParentNode = function() { return this.$val.ParentNode(); };
	BasicNode.ptr.prototype.ParentElement = function() {
		var $ptr, n;
		n = this;
		return wrapElement(n.Object.parentElement);
	};
	BasicNode.prototype.ParentElement = function() { return this.$val.ParentElement(); };
	BasicNode.ptr.prototype.PreviousSibling = function() {
		var $ptr, n;
		n = this;
		return wrapNode(n.Object.previousSibling);
	};
	BasicNode.prototype.PreviousSibling = function() { return this.$val.PreviousSibling(); };
	BasicNode.ptr.prototype.TextContent = function() {
		var $ptr, n;
		n = this;
		return toString(n.Object.textContent);
	};
	BasicNode.prototype.TextContent = function() { return this.$val.TextContent(); };
	BasicNode.ptr.prototype.SetTextContent = function(s) {
		var $ptr, n, s;
		n = this;
		n.Object.textContent = $externalize(s, $String);
	};
	BasicNode.prototype.SetTextContent = function(s) { return this.$val.SetTextContent(s); };
	BasicNode.ptr.prototype.AppendChild = function(newchild) {
		var $ptr, _r, n, newchild, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; newchild = $f.newchild; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = newchild.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n.Object.appendChild(_r);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.AppendChild }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.newchild = newchild; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.AppendChild = function(newchild) { return this.$val.AppendChild(newchild); };
	BasicNode.ptr.prototype.CloneNode = function(deep) {
		var $ptr, deep, n;
		n = this;
		return wrapNode(n.Object.cloneNode($externalize(deep, $Bool)));
	};
	BasicNode.prototype.CloneNode = function(deep) { return this.$val.CloneNode(deep); };
	BasicNode.ptr.prototype.CompareDocumentPosition = function(other) {
		var $ptr, _r, n, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return $parseInt(n.Object.compareDocumentPosition(_r)) >> 0;
		return $parseInt(n.Object.compareDocumentPosition(_r)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.CompareDocumentPosition }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.CompareDocumentPosition = function(other) { return this.$val.CompareDocumentPosition(other); };
	BasicNode.ptr.prototype.Contains = function(other) {
		var $ptr, _r, n, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !!(n.Object.contains(_r));
		return !!(n.Object.contains(_r));
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.Contains }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.Contains = function(other) { return this.$val.Contains(other); };
	BasicNode.ptr.prototype.HasChildNodes = function() {
		var $ptr, n;
		n = this;
		return !!(n.Object.hasChildNodes());
	};
	BasicNode.prototype.HasChildNodes = function() { return this.$val.HasChildNodes(); };
	BasicNode.ptr.prototype.InsertBefore = function(which, before) {
		var $ptr, _r, _r$1, before, n, o, which, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; before = $f.before; n = $f.n; o = $f.o; which = $f.which; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		o = $ifaceNil;
		/* */ if (!($interfaceIsEqual(before, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(before, $ifaceNil))) { */ case 1:
			_r = before.Underlying(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			o = new $jsObjectPtr(_r);
		/* } */ case 2:
		_r$1 = which.Underlying(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		n.Object.insertBefore(_r$1, $externalize(o, $emptyInterface));
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.InsertBefore }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.before = before; $f.n = n; $f.o = o; $f.which = which; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.InsertBefore = function(which, before) { return this.$val.InsertBefore(which, before); };
	BasicNode.ptr.prototype.IsDefaultNamespace = function(s) {
		var $ptr, n, s;
		n = this;
		return !!(n.Object.isDefaultNamespace($externalize(s, $String)));
	};
	BasicNode.prototype.IsDefaultNamespace = function(s) { return this.$val.IsDefaultNamespace(s); };
	BasicNode.ptr.prototype.IsEqualNode = function(other) {
		var $ptr, _r, n, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !!(n.Object.isEqualNode(_r));
		return !!(n.Object.isEqualNode(_r));
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.IsEqualNode }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.IsEqualNode = function(other) { return this.$val.IsEqualNode(other); };
	BasicNode.ptr.prototype.LookupPrefix = function() {
		var $ptr, n;
		n = this;
		return $internalize(n.Object.lookupPrefix(), $String);
	};
	BasicNode.prototype.LookupPrefix = function() { return this.$val.LookupPrefix(); };
	BasicNode.ptr.prototype.LookupNamespaceURI = function(s) {
		var $ptr, n, s;
		n = this;
		return toString(n.Object.lookupNamespaceURI($externalize(s, $String)));
	};
	BasicNode.prototype.LookupNamespaceURI = function(s) { return this.$val.LookupNamespaceURI(s); };
	BasicNode.ptr.prototype.Normalize = function() {
		var $ptr, n;
		n = this;
		n.Object.normalize();
	};
	BasicNode.prototype.Normalize = function() { return this.$val.Normalize(); };
	BasicNode.ptr.prototype.RemoveChild = function(other) {
		var $ptr, _r, n, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n.Object.removeChild(_r);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.RemoveChild }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.RemoveChild = function(other) { return this.$val.RemoveChild(other); };
	BasicNode.ptr.prototype.ReplaceChild = function(newChild, oldChild) {
		var $ptr, _r, _r$1, n, newChild, oldChild, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; newChild = $f.newChild; oldChild = $f.oldChild; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = newChild.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = oldChild.Underlying(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		n.Object.replaceChild(_r, _r$1);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.ReplaceChild }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.newChild = newChild; $f.oldChild = oldChild; $f.$s = $s; $f.$r = $r; return $f;
	};
	BasicNode.prototype.ReplaceChild = function(newChild, oldChild) { return this.$val.ReplaceChild(newChild, oldChild); };
	BasicHTMLElement.ptr.prototype.AccessKey = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicElement.BasicNode.Object.accessKey, $String);
	};
	BasicHTMLElement.prototype.AccessKey = function() { return this.$val.AccessKey(); };
	BasicHTMLElement.ptr.prototype.Dataset = function() {
		var $ptr, _i, _key, _ref, data, e, key, keys, o;
		e = this;
		o = e.BasicElement.BasicNode.Object.dataset;
		data = $makeMap($String.keyFor, []);
		keys = js.Keys(o);
		_ref = keys;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_key = key; (data || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $internalize(o[$externalize(key, $String)], $String) };
			_i++;
		}
		return data;
	};
	BasicHTMLElement.prototype.Dataset = function() { return this.$val.Dataset(); };
	BasicHTMLElement.ptr.prototype.SetAccessKey = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicElement.BasicNode.Object.accessKey = $externalize(s, $String);
	};
	BasicHTMLElement.prototype.SetAccessKey = function(s) { return this.$val.SetAccessKey(s); };
	BasicHTMLElement.ptr.prototype.AccessKeyLabel = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicElement.BasicNode.Object.accessKeyLabel, $String);
	};
	BasicHTMLElement.prototype.AccessKeyLabel = function() { return this.$val.AccessKeyLabel(); };
	BasicHTMLElement.ptr.prototype.SetAccessKeyLabel = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicElement.BasicNode.Object.accessKeyLabel = $externalize(s, $String);
	};
	BasicHTMLElement.prototype.SetAccessKeyLabel = function(s) { return this.$val.SetAccessKeyLabel(s); };
	BasicHTMLElement.ptr.prototype.ContentEditable = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicElement.BasicNode.Object.contentEditable, $String);
	};
	BasicHTMLElement.prototype.ContentEditable = function() { return this.$val.ContentEditable(); };
	BasicHTMLElement.ptr.prototype.SetContentEditable = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicElement.BasicNode.Object.contentEditable = $externalize(s, $String);
	};
	BasicHTMLElement.prototype.SetContentEditable = function(s) { return this.$val.SetContentEditable(s); };
	BasicHTMLElement.ptr.prototype.IsContentEditable = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicElement.BasicNode.Object.isContentEditable);
	};
	BasicHTMLElement.prototype.IsContentEditable = function() { return this.$val.IsContentEditable(); };
	BasicHTMLElement.ptr.prototype.Dir = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicElement.BasicNode.Object.dir, $String);
	};
	BasicHTMLElement.prototype.Dir = function() { return this.$val.Dir(); };
	BasicHTMLElement.ptr.prototype.SetDir = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicElement.BasicNode.Object.dir = $externalize(s, $String);
	};
	BasicHTMLElement.prototype.SetDir = function(s) { return this.$val.SetDir(s); };
	BasicHTMLElement.ptr.prototype.Draggable = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicElement.BasicNode.Object.draggable);
	};
	BasicHTMLElement.prototype.Draggable = function() { return this.$val.Draggable(); };
	BasicHTMLElement.ptr.prototype.SetDraggable = function(b) {
		var $ptr, b, e;
		e = this;
		e.BasicElement.BasicNode.Object.draggable = $externalize(b, $Bool);
	};
	BasicHTMLElement.prototype.SetDraggable = function(b) { return this.$val.SetDraggable(b); };
	BasicHTMLElement.ptr.prototype.Lang = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicElement.BasicNode.Object.lang, $String);
	};
	BasicHTMLElement.prototype.Lang = function() { return this.$val.Lang(); };
	BasicHTMLElement.ptr.prototype.SetLang = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicElement.BasicNode.Object.lang = $externalize(s, $String);
	};
	BasicHTMLElement.prototype.SetLang = function(s) { return this.$val.SetLang(s); };
	BasicHTMLElement.ptr.prototype.OffsetHeight = function() {
		var $ptr, e;
		e = this;
		return $parseFloat(e.BasicElement.BasicNode.Object.offsetHeight);
	};
	BasicHTMLElement.prototype.OffsetHeight = function() { return this.$val.OffsetHeight(); };
	BasicHTMLElement.ptr.prototype.OffsetLeft = function() {
		var $ptr, e;
		e = this;
		return $parseFloat(e.BasicElement.BasicNode.Object.offsetLeft);
	};
	BasicHTMLElement.prototype.OffsetLeft = function() { return this.$val.OffsetLeft(); };
	BasicHTMLElement.ptr.prototype.OffsetParent = function() {
		var $ptr, e;
		e = this;
		return wrapHTMLElement(e.BasicElement.BasicNode.Object.offsetParent);
	};
	BasicHTMLElement.prototype.OffsetParent = function() { return this.$val.OffsetParent(); };
	BasicHTMLElement.ptr.prototype.OffsetTop = function() {
		var $ptr, e;
		e = this;
		return $parseFloat(e.BasicElement.BasicNode.Object.offsetTop);
	};
	BasicHTMLElement.prototype.OffsetTop = function() { return this.$val.OffsetTop(); };
	BasicHTMLElement.ptr.prototype.OffsetWidth = function() {
		var $ptr, e;
		e = this;
		return $parseFloat(e.BasicElement.BasicNode.Object.offsetWidth);
	};
	BasicHTMLElement.prototype.OffsetWidth = function() { return this.$val.OffsetWidth(); };
	BasicHTMLElement.ptr.prototype.Style = function() {
		var $ptr, e;
		e = this;
		return new CSSStyleDeclaration.ptr(e.BasicElement.BasicNode.Object.style);
	};
	BasicHTMLElement.prototype.Style = function() { return this.$val.Style(); };
	BasicHTMLElement.ptr.prototype.TabIndex = function() {
		var $ptr, e;
		e = this;
		return $parseInt(e.BasicElement.BasicNode.Object.tabIndex) >> 0;
	};
	BasicHTMLElement.prototype.TabIndex = function() { return this.$val.TabIndex(); };
	BasicHTMLElement.ptr.prototype.SetTabIndex = function(i) {
		var $ptr, e, i;
		e = this;
		e.BasicElement.BasicNode.Object.tabIndex = i;
	};
	BasicHTMLElement.prototype.SetTabIndex = function(i) { return this.$val.SetTabIndex(i); };
	BasicHTMLElement.ptr.prototype.Title = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicElement.BasicNode.Object.title, $String);
	};
	BasicHTMLElement.prototype.Title = function() { return this.$val.Title(); };
	BasicHTMLElement.ptr.prototype.SetTitle = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicElement.BasicNode.Object.title = $externalize(s, $String);
	};
	BasicHTMLElement.prototype.SetTitle = function(s) { return this.$val.SetTitle(s); };
	BasicHTMLElement.ptr.prototype.Blur = function() {
		var $ptr, e;
		e = this;
		e.BasicElement.BasicNode.Object.blur();
	};
	BasicHTMLElement.prototype.Blur = function() { return this.$val.Blur(); };
	BasicHTMLElement.ptr.prototype.Click = function() {
		var $ptr, e;
		e = this;
		e.BasicElement.BasicNode.Object.click();
	};
	BasicHTMLElement.prototype.Click = function() { return this.$val.Click(); };
	BasicHTMLElement.ptr.prototype.Focus = function() {
		var $ptr, e;
		e = this;
		e.BasicElement.BasicNode.Object.focus();
	};
	BasicHTMLElement.prototype.Focus = function() { return this.$val.Focus(); };
	BasicElement.ptr.prototype.Attributes = function() {
		var $ptr, _key, attrs, e, i, item, length, o;
		e = this;
		o = e.BasicNode.Object.attributes;
		attrs = $makeMap($String.keyFor, []);
		length = $parseInt(o.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			item = o.item(i);
			_key = $internalize(item.name, $String); (attrs || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $internalize(item.value, $String) };
			i = i + (1) >> 0;
		}
		return attrs;
	};
	BasicElement.prototype.Attributes = function() { return this.$val.Attributes(); };
	BasicElement.ptr.prototype.GetBoundingClientRect = function() {
		var $ptr, e, obj;
		e = this;
		obj = e.BasicNode.Object.getBoundingClientRect();
		return new ClientRect.ptr(obj, 0, 0, 0, 0, 0, 0);
	};
	BasicElement.prototype.GetBoundingClientRect = function() { return this.$val.GetBoundingClientRect(); };
	BasicElement.ptr.prototype.PreviousElementSibling = function() {
		var $ptr, e;
		e = this;
		return wrapElement(e.BasicNode.Object.previousElementSibling);
	};
	BasicElement.prototype.PreviousElementSibling = function() { return this.$val.PreviousElementSibling(); };
	BasicElement.ptr.prototype.NextElementSibling = function() {
		var $ptr, e;
		e = this;
		return wrapElement(e.BasicNode.Object.nextElementSibling);
	};
	BasicElement.prototype.NextElementSibling = function() { return this.$val.NextElementSibling(); };
	BasicElement.ptr.prototype.Class = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.BasicNode.Object.classList, e.BasicNode.Object, "className", 0);
	};
	BasicElement.prototype.Class = function() { return this.$val.Class(); };
	BasicElement.ptr.prototype.SetClass = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicNode.Object.className = $externalize(s, $String);
	};
	BasicElement.prototype.SetClass = function(s) { return this.$val.SetClass(s); };
	BasicElement.ptr.prototype.ID = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicNode.Object.id, $String);
	};
	BasicElement.prototype.ID = function() { return this.$val.ID(); };
	BasicElement.ptr.prototype.SetID = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicNode.Object.id = $externalize(s, $String);
	};
	BasicElement.prototype.SetID = function(s) { return this.$val.SetID(s); };
	BasicElement.ptr.prototype.TagName = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicNode.Object.tagName, $String);
	};
	BasicElement.prototype.TagName = function() { return this.$val.TagName(); };
	BasicElement.ptr.prototype.GetAttribute = function(name) {
		var $ptr, e, name;
		e = this;
		return toString(e.BasicNode.Object.getAttribute($externalize(name, $String)));
	};
	BasicElement.prototype.GetAttribute = function(name) { return this.$val.GetAttribute(name); };
	BasicElement.ptr.prototype.GetAttributeNS = function(ns, name) {
		var $ptr, e, name, ns;
		e = this;
		return toString(e.BasicNode.Object.getAttributeNS($externalize(ns, $String), $externalize(name, $String)));
	};
	BasicElement.prototype.GetAttributeNS = function(ns, name) { return this.$val.GetAttributeNS(ns, name); };
	BasicElement.ptr.prototype.GetElementsByClassName = function(s) {
		var $ptr, e, s;
		e = this;
		return nodeListToElements(e.BasicNode.Object.getElementsByClassName($externalize(s, $String)));
	};
	BasicElement.prototype.GetElementsByClassName = function(s) { return this.$val.GetElementsByClassName(s); };
	BasicElement.ptr.prototype.GetElementsByTagName = function(s) {
		var $ptr, e, s;
		e = this;
		return nodeListToElements(e.BasicNode.Object.getElementsByTagName($externalize(s, $String)));
	};
	BasicElement.prototype.GetElementsByTagName = function(s) { return this.$val.GetElementsByTagName(s); };
	BasicElement.ptr.prototype.GetElementsByTagNameNS = function(ns, name) {
		var $ptr, e, name, ns;
		e = this;
		return nodeListToElements(e.BasicNode.Object.getElementsByTagNameNS($externalize(ns, $String), $externalize(name, $String)));
	};
	BasicElement.prototype.GetElementsByTagNameNS = function(ns, name) { return this.$val.GetElementsByTagNameNS(ns, name); };
	BasicElement.ptr.prototype.HasAttribute = function(s) {
		var $ptr, e, s;
		e = this;
		return !!(e.BasicNode.Object.hasAttribute($externalize(s, $String)));
	};
	BasicElement.prototype.HasAttribute = function(s) { return this.$val.HasAttribute(s); };
	BasicElement.ptr.prototype.HasAttributeNS = function(ns, name) {
		var $ptr, e, name, ns;
		e = this;
		return !!(e.BasicNode.Object.hasAttributeNS($externalize(ns, $String), $externalize(name, $String)));
	};
	BasicElement.prototype.HasAttributeNS = function(ns, name) { return this.$val.HasAttributeNS(ns, name); };
	BasicElement.ptr.prototype.QuerySelector = function(s) {
		var $ptr, e, s;
		e = this;
		return wrapElement(e.BasicNode.Object.querySelector($externalize(s, $String)));
	};
	BasicElement.prototype.QuerySelector = function(s) { return this.$val.QuerySelector(s); };
	BasicElement.ptr.prototype.QuerySelectorAll = function(s) {
		var $ptr, e, s;
		e = this;
		return nodeListToElements(e.BasicNode.Object.querySelectorAll($externalize(s, $String)));
	};
	BasicElement.prototype.QuerySelectorAll = function(s) { return this.$val.QuerySelectorAll(s); };
	BasicElement.ptr.prototype.RemoveAttribute = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicNode.Object.removeAttribute($externalize(s, $String));
	};
	BasicElement.prototype.RemoveAttribute = function(s) { return this.$val.RemoveAttribute(s); };
	BasicElement.ptr.prototype.RemoveAttributeNS = function(ns, name) {
		var $ptr, e, name, ns;
		e = this;
		e.BasicNode.Object.removeAttributeNS($externalize(ns, $String), $externalize(name, $String));
	};
	BasicElement.prototype.RemoveAttributeNS = function(ns, name) { return this.$val.RemoveAttributeNS(ns, name); };
	BasicElement.ptr.prototype.SetAttribute = function(name, value) {
		var $ptr, e, name, value;
		e = this;
		e.BasicNode.Object.setAttribute($externalize(name, $String), $externalize(value, $String));
	};
	BasicElement.prototype.SetAttribute = function(name, value) { return this.$val.SetAttribute(name, value); };
	BasicElement.ptr.prototype.SetAttributeNS = function(ns, name, value) {
		var $ptr, e, name, ns, value;
		e = this;
		e.BasicNode.Object.setAttributeNS($externalize(ns, $String), $externalize(name, $String), $externalize(value, $String));
	};
	BasicElement.prototype.SetAttributeNS = function(ns, name, value) { return this.$val.SetAttributeNS(ns, name, value); };
	BasicElement.ptr.prototype.InnerHTML = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicNode.Object.innerHTML, $String);
	};
	BasicElement.prototype.InnerHTML = function() { return this.$val.InnerHTML(); };
	BasicElement.ptr.prototype.SetInnerHTML = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicNode.Object.innerHTML = $externalize(s, $String);
	};
	BasicElement.prototype.SetInnerHTML = function(s) { return this.$val.SetInnerHTML(s); };
	BasicElement.ptr.prototype.OuterHTML = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicNode.Object.outerHTML, $String);
	};
	BasicElement.prototype.OuterHTML = function() { return this.$val.OuterHTML(); };
	BasicElement.ptr.prototype.SetOuterHTML = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicNode.Object.outerHTML = $externalize(s, $String);
	};
	BasicElement.prototype.SetOuterHTML = function(s) { return this.$val.SetOuterHTML(s); };
	HTMLAnchorElement.ptr.prototype.Rel = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.URLUtils.Object.relList, e.URLUtils.Object, "rel", 0);
	};
	HTMLAnchorElement.prototype.Rel = function() { return this.$val.Rel(); };
	HTMLAppletElement.ptr.prototype.Rel = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.relList, e.BasicHTMLElement.BasicElement.BasicNode.Object, "rel", 0);
	};
	HTMLAppletElement.prototype.Rel = function() { return this.$val.Rel(); };
	HTMLAreaElement.ptr.prototype.Rel = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.URLUtils.Object.relList, e.URLUtils.Object, "rel", 0);
	};
	HTMLAreaElement.prototype.Rel = function() { return this.$val.Rel(); };
	HTMLButtonElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLButtonElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLButtonElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = this;
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLButtonElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLButtonElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLButtonElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLButtonElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLButtonElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLButtonElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLButtonElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLCanvasElement.ptr.prototype.GetContext2d = function() {
		var $ptr, ctx, e;
		e = this;
		ctx = e.GetContext("2d");
		return new CanvasRenderingContext2D.ptr(ctx, "", "", "", 0, 0, 0, "", "", 0, 0, "", "", "", 0, "");
	};
	HTMLCanvasElement.prototype.GetContext2d = function() { return this.$val.GetContext2d(); };
	HTMLCanvasElement.ptr.prototype.GetContext = function(param) {
		var $ptr, e, param;
		e = this;
		return e.BasicHTMLElement.BasicElement.BasicNode.Object.getContext($externalize(param, $String));
	};
	HTMLCanvasElement.prototype.GetContext = function(param) { return this.$val.GetContext(param); };
	CanvasRenderingContext2D.ptr.prototype.CreateLinearGradient = function(x0, y0, x1, y1) {
		var $ptr, ctx, x0, x1, y0, y1;
		ctx = this;
		ctx.Object.createLinearGradient(x0, y0, x1, y1);
	};
	CanvasRenderingContext2D.prototype.CreateLinearGradient = function(x0, y0, x1, y1) { return this.$val.CreateLinearGradient(x0, y0, x1, y1); };
	CanvasRenderingContext2D.ptr.prototype.Rect = function(x, y, width, height) {
		var $ptr, ctx, height, width, x, y;
		ctx = this;
		ctx.Object.rect(x, y, width, height);
	};
	CanvasRenderingContext2D.prototype.Rect = function(x, y, width, height) { return this.$val.Rect(x, y, width, height); };
	CanvasRenderingContext2D.ptr.prototype.FillRect = function(x, y, width, height) {
		var $ptr, ctx, height, width, x, y;
		ctx = this;
		ctx.Object.fillRect(x, y, width, height);
	};
	CanvasRenderingContext2D.prototype.FillRect = function(x, y, width, height) { return this.$val.FillRect(x, y, width, height); };
	CanvasRenderingContext2D.ptr.prototype.StrokeRect = function(x, y, width, height) {
		var $ptr, ctx, height, width, x, y;
		ctx = this;
		ctx.Object.strokeRect(x, y, width, height);
	};
	CanvasRenderingContext2D.prototype.StrokeRect = function(x, y, width, height) { return this.$val.StrokeRect(x, y, width, height); };
	CanvasRenderingContext2D.ptr.prototype.ClearRect = function(x, y, width, height) {
		var $ptr, ctx, height, width, x, y;
		ctx = this;
		ctx.Object.clearRect(x, y, width, height);
	};
	CanvasRenderingContext2D.prototype.ClearRect = function(x, y, width, height) { return this.$val.ClearRect(x, y, width, height); };
	CanvasRenderingContext2D.ptr.prototype.Fill = function() {
		var $ptr, ctx;
		ctx = this;
		ctx.Object.fill();
	};
	CanvasRenderingContext2D.prototype.Fill = function() { return this.$val.Fill(); };
	CanvasRenderingContext2D.ptr.prototype.Stroke = function() {
		var $ptr, ctx;
		ctx = this;
		ctx.Object.stroke();
	};
	CanvasRenderingContext2D.prototype.Stroke = function() { return this.$val.Stroke(); };
	CanvasRenderingContext2D.ptr.prototype.BeginPath = function() {
		var $ptr, ctx;
		ctx = this;
		ctx.Object.beginPath();
	};
	CanvasRenderingContext2D.prototype.BeginPath = function() { return this.$val.BeginPath(); };
	CanvasRenderingContext2D.ptr.prototype.MoveTo = function(x, y) {
		var $ptr, ctx, x, y;
		ctx = this;
		ctx.Object.moveTo(x, y);
	};
	CanvasRenderingContext2D.prototype.MoveTo = function(x, y) { return this.$val.MoveTo(x, y); };
	CanvasRenderingContext2D.ptr.prototype.ClosePath = function() {
		var $ptr, ctx;
		ctx = this;
		ctx.Object.closePath();
	};
	CanvasRenderingContext2D.prototype.ClosePath = function() { return this.$val.ClosePath(); };
	CanvasRenderingContext2D.ptr.prototype.LineTo = function(x, y) {
		var $ptr, ctx, x, y;
		ctx = this;
		ctx.Object.lineTo(x, y);
	};
	CanvasRenderingContext2D.prototype.LineTo = function(x, y) { return this.$val.LineTo(x, y); };
	CanvasRenderingContext2D.ptr.prototype.Clip = function() {
		var $ptr, ctx;
		ctx = this;
		ctx.Object.clip();
	};
	CanvasRenderingContext2D.prototype.Clip = function() { return this.$val.Clip(); };
	CanvasRenderingContext2D.ptr.prototype.QuadraticCurveTo = function(cpx, cpy, x, y) {
		var $ptr, cpx, cpy, ctx, x, y;
		ctx = this;
		ctx.Object.quadraticCurveTo(cpx, cpy, x, y);
	};
	CanvasRenderingContext2D.prototype.QuadraticCurveTo = function(cpx, cpy, x, y) { return this.$val.QuadraticCurveTo(cpx, cpy, x, y); };
	CanvasRenderingContext2D.ptr.prototype.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
		var $ptr, cp1x, cp1y, cp2x, cp2y, ctx, x, y;
		ctx = this;
		ctx.Object.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
	};
	CanvasRenderingContext2D.prototype.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) { return this.$val.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y); };
	CanvasRenderingContext2D.ptr.prototype.Arc = function(x, y, r, sAngle, eAngle, counterclockwise) {
		var $ptr, counterclockwise, ctx, eAngle, r, sAngle, x, y;
		ctx = this;
		ctx.Object.arc(x, y, r, sAngle, eAngle, $externalize(counterclockwise, $Bool));
	};
	CanvasRenderingContext2D.prototype.Arc = function(x, y, r, sAngle, eAngle, counterclockwise) { return this.$val.Arc(x, y, r, sAngle, eAngle, counterclockwise); };
	CanvasRenderingContext2D.ptr.prototype.ArcTo = function(x1, y1, x2, y2, r) {
		var $ptr, ctx, r, x1, x2, y1, y2;
		ctx = this;
		ctx.Object.arcTo(x1, y1, x2, y2, r);
	};
	CanvasRenderingContext2D.prototype.ArcTo = function(x1, y1, x2, y2, r) { return this.$val.ArcTo(x1, y1, x2, y2, r); };
	CanvasRenderingContext2D.ptr.prototype.IsPointInPath = function(x, y) {
		var $ptr, ctx, x, y;
		ctx = this;
		return !!(ctx.Object.isPointInPath(x, y));
	};
	CanvasRenderingContext2D.prototype.IsPointInPath = function(x, y) { return this.$val.IsPointInPath(x, y); };
	CanvasRenderingContext2D.ptr.prototype.Scale = function(scaleWidth, scaleHeight) {
		var $ptr, ctx, scaleHeight, scaleWidth;
		ctx = this;
		ctx.Object.scale(scaleWidth, scaleHeight);
	};
	CanvasRenderingContext2D.prototype.Scale = function(scaleWidth, scaleHeight) { return this.$val.Scale(scaleWidth, scaleHeight); };
	CanvasRenderingContext2D.ptr.prototype.Rotate = function(angle) {
		var $ptr, angle, ctx;
		ctx = this;
		ctx.Object.rotate(angle);
	};
	CanvasRenderingContext2D.prototype.Rotate = function(angle) { return this.$val.Rotate(angle); };
	CanvasRenderingContext2D.ptr.prototype.Translate = function(x, y) {
		var $ptr, ctx, x, y;
		ctx = this;
		ctx.Object.translate(x, y);
	};
	CanvasRenderingContext2D.prototype.Translate = function(x, y) { return this.$val.Translate(x, y); };
	CanvasRenderingContext2D.ptr.prototype.Transform = function(a, b, c, d, e, f) {
		var $ptr, a, b, c, ctx, d, e, f;
		ctx = this;
		ctx.Object.transform(a, b, c, d, e, f);
	};
	CanvasRenderingContext2D.prototype.Transform = function(a, b, c, d, e, f) { return this.$val.Transform(a, b, c, d, e, f); };
	CanvasRenderingContext2D.ptr.prototype.SetTransform = function(a, b, c, d, e, f) {
		var $ptr, a, b, c, ctx, d, e, f;
		ctx = this;
		ctx.Object.setTransform(a, b, c, d, e, f);
	};
	CanvasRenderingContext2D.prototype.SetTransform = function(a, b, c, d, e, f) { return this.$val.SetTransform(a, b, c, d, e, f); };
	CanvasRenderingContext2D.ptr.prototype.FillText = function(text, x, y, maxWidth) {
		var $ptr, ctx, maxWidth, text, x, y;
		ctx = this;
		if (maxWidth === -1) {
			ctx.Object.fillText($externalize(text, $String), x, y);
			return;
		}
		ctx.Object.fillText($externalize(text, $String), x, y, maxWidth);
	};
	CanvasRenderingContext2D.prototype.FillText = function(text, x, y, maxWidth) { return this.$val.FillText(text, x, y, maxWidth); };
	CanvasRenderingContext2D.ptr.prototype.StrokeText = function(text, x, y, maxWidth) {
		var $ptr, ctx, maxWidth, text, x, y;
		ctx = this;
		if (maxWidth === -1) {
			ctx.Object.strokeText($externalize(text, $String), x, y);
			return;
		}
		ctx.Object.strokeText($externalize(text, $String), x, y, maxWidth);
	};
	CanvasRenderingContext2D.prototype.StrokeText = function(text, x, y, maxWidth) { return this.$val.StrokeText(text, x, y, maxWidth); };
	HTMLDataListElement.ptr.prototype.Options = function() {
		var $ptr, e;
		e = this;
		return getOptions(e.BasicHTMLElement.BasicElement.BasicNode.Object, "options");
	};
	HTMLDataListElement.prototype.Options = function() { return this.$val.Options(); };
	HTMLFieldSetElement.ptr.prototype.Elements = function() {
		var $ptr, e;
		e = this;
		return nodeListToHTMLElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.elements);
	};
	HTMLFieldSetElement.prototype.Elements = function() { return this.$val.Elements(); };
	HTMLFieldSetElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLFieldSetElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLFieldSetElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLFieldSetElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLFieldSetElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLFieldSetElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLFieldSetElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLFieldSetElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLFormElement.ptr.prototype.Elements = function() {
		var $ptr, e;
		e = this;
		return nodeListToHTMLElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.elements);
	};
	HTMLFormElement.prototype.Elements = function() { return this.$val.Elements(); };
	HTMLFormElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLFormElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLFormElement.ptr.prototype.Submit = function() {
		var $ptr, e;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.submit();
	};
	HTMLFormElement.prototype.Submit = function() { return this.$val.Submit(); };
	HTMLFormElement.ptr.prototype.Reset = function() {
		var $ptr, e;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.reset();
	};
	HTMLFormElement.prototype.Reset = function() { return this.$val.Reset(); };
	HTMLFormElement.ptr.prototype.Item = function(index) {
		var $ptr, e, index;
		e = this;
		return wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.item(index));
	};
	HTMLFormElement.prototype.Item = function(index) { return this.$val.Item(index); };
	HTMLFormElement.ptr.prototype.NamedItem = function(name) {
		var $ptr, e, name;
		e = this;
		return wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.namedItem($externalize(name, $String)));
	};
	HTMLFormElement.prototype.NamedItem = function(name) { return this.$val.NamedItem(name); };
	HTMLIFrameElement.ptr.prototype.ContentDocument = function() {
		var $ptr, e;
		e = this;
		return wrapDocument(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentDocument);
	};
	HTMLIFrameElement.prototype.ContentDocument = function() { return this.$val.ContentDocument(); };
	HTMLIFrameElement.ptr.prototype.ContentWindow = function() {
		var $ptr, e;
		e = this;
		return new window.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentWindow);
	};
	HTMLIFrameElement.prototype.ContentWindow = function() { return this.$val.ContentWindow(); };
	HTMLInputElement.ptr.prototype.Files = function() {
		var $ptr, _i, _ref, e, files, i, out;
		e = this;
		files = e.BasicHTMLElement.BasicElement.BasicNode.Object.files;
		out = $makeSlice(sliceType$12, ($parseInt(files.length) >> 0));
		_ref = out;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = new File.ptr(files.item(i)));
			_i++;
		}
		return out;
	};
	HTMLInputElement.prototype.Files = function() { return this.$val.Files(); };
	HTMLInputElement.ptr.prototype.List = function() {
		var $ptr, e, list;
		e = this;
		list = wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.list);
		if ($interfaceIsEqual(list, $ifaceNil)) {
			return ptrType$14.nil;
		}
		return $assertType(list, ptrType$14);
	};
	HTMLInputElement.prototype.List = function() { return this.$val.List(); };
	HTMLInputElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = this;
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLInputElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLInputElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLInputElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLInputElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLInputElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLInputElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLInputElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLInputElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLInputElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLInputElement.ptr.prototype.Select = function() {
		var $ptr, e;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.select();
	};
	HTMLInputElement.prototype.Select = function() { return this.$val.Select(); };
	HTMLInputElement.ptr.prototype.SetSelectionRange = function(start, end, direction) {
		var $ptr, direction, e, end, start;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setSelectionRange(start, end, $externalize(direction, $String));
	};
	HTMLInputElement.prototype.SetSelectionRange = function(start, end, direction) { return this.$val.SetSelectionRange(start, end, direction); };
	HTMLInputElement.ptr.prototype.StepDown = function(n) {
		var $ptr, e, n;
		e = this;
		return callRecover(e.BasicHTMLElement.BasicElement.BasicNode.Object, "stepDown", new sliceType([new $Int(n)]));
	};
	HTMLInputElement.prototype.StepDown = function(n) { return this.$val.StepDown(n); };
	HTMLInputElement.ptr.prototype.StepUp = function(n) {
		var $ptr, e, n;
		e = this;
		return callRecover(e.BasicHTMLElement.BasicElement.BasicNode.Object, "stepUp", new sliceType([new $Int(n)]));
	};
	HTMLInputElement.prototype.StepUp = function(n) { return this.$val.StepUp(n); };
	HTMLKeygenElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLKeygenElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLKeygenElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = this;
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLKeygenElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLKeygenElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLKeygenElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLKeygenElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLKeygenElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLKeygenElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLKeygenElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLLabelElement.ptr.prototype.Control = function() {
		var $ptr, e;
		e = this;
		return wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.control);
	};
	HTMLLabelElement.prototype.Control = function() { return this.$val.Control(); };
	HTMLLabelElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLLabelElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLLegendElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLLegendElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLLinkElement.ptr.prototype.Rel = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.relList, e.BasicHTMLElement.BasicElement.BasicNode.Object, "rel", 0);
	};
	HTMLLinkElement.prototype.Rel = function() { return this.$val.Rel(); };
	HTMLLinkElement.ptr.prototype.Sizes = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.sizes, e.BasicHTMLElement.BasicElement.BasicNode.Object, "", 0);
	};
	HTMLLinkElement.prototype.Sizes = function() { return this.$val.Sizes(); };
	HTMLLinkElement.ptr.prototype.Sheet = function() {
		var $ptr, e;
		e = this;
		$panic(new $String("not implemented"));
	};
	HTMLLinkElement.prototype.Sheet = function() { return this.$val.Sheet(); };
	HTMLMapElement.ptr.prototype.Areas = function() {
		var $ptr, _i, _ref, area, areas, e, i, out;
		e = this;
		areas = nodeListToElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.areas);
		out = $makeSlice(sliceType$13, areas.$length);
		_ref = areas;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			area = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = $assertType(area, ptrType$15));
			_i++;
		}
		return out;
	};
	HTMLMapElement.prototype.Areas = function() { return this.$val.Areas(); };
	HTMLMapElement.ptr.prototype.Images = function() {
		var $ptr, e;
		e = this;
		return nodeListToHTMLElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.areas);
	};
	HTMLMapElement.prototype.Images = function() { return this.$val.Images(); };
	HTMLMediaElement.ptr.prototype.Play = function() {
		var $ptr, e;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.play();
	};
	HTMLMediaElement.prototype.Play = function() { return this.$val.Play(); };
	HTMLMediaElement.ptr.prototype.Pause = function() {
		var $ptr, e;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.pause();
	};
	HTMLMediaElement.prototype.Pause = function() { return this.$val.Pause(); };
	HTMLMeterElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = $clone(this, HTMLMeterElement);
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLMeterElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLObjectElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLObjectElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLObjectElement.ptr.prototype.ContentDocument = function() {
		var $ptr, e;
		e = this;
		return wrapDocument(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentDocument);
	};
	HTMLObjectElement.prototype.ContentDocument = function() { return this.$val.ContentDocument(); };
	HTMLObjectElement.ptr.prototype.ContentWindow = function() {
		var $ptr, e;
		e = this;
		return new window.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentWindow);
	};
	HTMLObjectElement.prototype.ContentWindow = function() { return this.$val.ContentWindow(); };
	HTMLObjectElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLObjectElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLObjectElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLObjectElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLObjectElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLObjectElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLOptionElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLOptionElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLOutputElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLOutputElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLOutputElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = this;
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLOutputElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLOutputElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLOutputElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLOutputElement.ptr.prototype.For = function() {
		var $ptr, e;
		e = this;
		return new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.htmlFor, e.BasicHTMLElement.BasicElement.BasicNode.Object, "", 0);
	};
	HTMLOutputElement.prototype.For = function() { return this.$val.For(); };
	HTMLOutputElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLOutputElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLOutputElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLOutputElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLProgressElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = $clone(this, HTMLProgressElement);
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLProgressElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLSelectElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = this;
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLSelectElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLSelectElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLSelectElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLSelectElement.ptr.prototype.Options = function() {
		var $ptr, e;
		e = this;
		return getOptions(e.BasicHTMLElement.BasicElement.BasicNode.Object, "options");
	};
	HTMLSelectElement.prototype.Options = function() { return this.$val.Options(); };
	HTMLSelectElement.ptr.prototype.SelectedOptions = function() {
		var $ptr, e;
		e = this;
		return getOptions(e.BasicHTMLElement.BasicElement.BasicNode.Object, "selectedOptions");
	};
	HTMLSelectElement.prototype.SelectedOptions = function() { return this.$val.SelectedOptions(); };
	HTMLSelectElement.ptr.prototype.Item = function(index) {
		var $ptr, e, el, index;
		e = this;
		el = wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.item(index));
		if ($interfaceIsEqual(el, $ifaceNil)) {
			return ptrType$7.nil;
		}
		return $assertType(el, ptrType$7);
	};
	HTMLSelectElement.prototype.Item = function(index) { return this.$val.Item(index); };
	HTMLSelectElement.ptr.prototype.NamedItem = function(name) {
		var $ptr, e, el, name;
		e = this;
		el = wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.namedItem($externalize(name, $String)));
		if ($interfaceIsEqual(el, $ifaceNil)) {
			return ptrType$7.nil;
		}
		return $assertType(el, ptrType$7);
	};
	HTMLSelectElement.prototype.NamedItem = function(name) { return this.$val.NamedItem(name); };
	HTMLSelectElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLSelectElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLSelectElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLSelectElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLSelectElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLSelectElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLTableRowElement.ptr.prototype.Cells = function() {
		var $ptr, _i, _ref, cell, cells, e, i, out;
		e = this;
		cells = nodeListToElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.cells);
		out = $makeSlice(sliceType$14, cells.$length);
		_ref = cells;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			cell = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = $assertType(cell, ptrType$16));
			_i++;
		}
		return out;
	};
	HTMLTableRowElement.prototype.Cells = function() { return this.$val.Cells(); };
	HTMLTableRowElement.ptr.prototype.InsertCell = function(index) {
		var $ptr, e, index;
		e = this;
		return $assertType(wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.insertCell(index)), ptrType$16);
	};
	HTMLTableRowElement.prototype.InsertCell = function(index) { return this.$val.InsertCell(index); };
	HTMLTableRowElement.ptr.prototype.DeleteCell = function(index) {
		var $ptr, e, index;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.deleteCell(index);
	};
	HTMLTableRowElement.prototype.DeleteCell = function(index) { return this.$val.DeleteCell(index); };
	HTMLTableSectionElement.ptr.prototype.Rows = function() {
		var $ptr, _i, _ref, e, i, out, row, rows;
		e = this;
		rows = nodeListToElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.rows);
		out = $makeSlice(sliceType$15, rows.$length);
		_ref = rows;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			row = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = $assertType(row, ptrType$17));
			_i++;
		}
		return out;
	};
	HTMLTableSectionElement.prototype.Rows = function() { return this.$val.Rows(); };
	HTMLTableSectionElement.ptr.prototype.DeleteRow = function(index) {
		var $ptr, e, index;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.deleteRow(index);
	};
	HTMLTableSectionElement.prototype.DeleteRow = function(index) { return this.$val.DeleteRow(index); };
	HTMLTableSectionElement.ptr.prototype.InsertRow = function(index) {
		var $ptr, e, index;
		e = this;
		return $assertType(wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.insertRow(index)), ptrType$17);
	};
	HTMLTableSectionElement.prototype.InsertRow = function(index) { return this.$val.InsertRow(index); };
	HTMLTextAreaElement.ptr.prototype.Form = function() {
		var $ptr, e;
		e = this;
		return getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLTextAreaElement.prototype.Form = function() { return this.$val.Form(); };
	HTMLTextAreaElement.ptr.prototype.Labels = function() {
		var $ptr, e;
		e = this;
		return getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);
	};
	HTMLTextAreaElement.prototype.Labels = function() { return this.$val.Labels(); };
	HTMLTextAreaElement.ptr.prototype.Validity = function() {
		var $ptr, e;
		e = this;
		return new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);
	};
	HTMLTextAreaElement.prototype.Validity = function() { return this.$val.Validity(); };
	HTMLTextAreaElement.ptr.prototype.CheckValidity = function() {
		var $ptr, e;
		e = this;
		return !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());
	};
	HTMLTextAreaElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };
	HTMLTextAreaElement.ptr.prototype.SetCustomValidity = function(s) {
		var $ptr, e, s;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));
	};
	HTMLTextAreaElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };
	HTMLTextAreaElement.ptr.prototype.Select = function() {
		var $ptr, e;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.select();
	};
	HTMLTextAreaElement.prototype.Select = function() { return this.$val.Select(); };
	HTMLTextAreaElement.ptr.prototype.SetSelectionRange = function(start, end, direction) {
		var $ptr, direction, e, end, start;
		e = this;
		e.BasicHTMLElement.BasicElement.BasicNode.Object.setSelectionRange(start, end, $externalize(direction, $String));
	};
	HTMLTextAreaElement.prototype.SetSelectionRange = function(start, end, direction) { return this.$val.SetSelectionRange(start, end, direction); };
	HTMLTrackElement.ptr.prototype.Track = function() {
		var $ptr, e;
		e = this;
		return new TextTrack.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.track);
	};
	HTMLTrackElement.prototype.Track = function() { return this.$val.Track(); };
	HTMLBaseElement.ptr.prototype.Href = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicHTMLElement.BasicElement.BasicNode.Object.href, $String);
	};
	HTMLBaseElement.prototype.Href = function() { return this.$val.Href(); };
	HTMLBaseElement.ptr.prototype.Target = function() {
		var $ptr, e;
		e = this;
		return $internalize(e.BasicHTMLElement.BasicElement.BasicNode.Object.target, $String);
	};
	HTMLBaseElement.prototype.Target = function() { return this.$val.Target(); };
	CSSStyleDeclaration.ptr.prototype.ToMap = function() {
		var $ptr, N, _key, css, i, m, name, value;
		css = this;
		m = {};
		N = $parseInt(css.Object.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < N)) { break; }
			name = $internalize(css.Object.item(i), $String);
			value = $internalize(css.Object.getPropertyValue($externalize(name, $String)), $String);
			_key = name; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
			i = i + (1) >> 0;
		}
		return m;
	};
	CSSStyleDeclaration.prototype.ToMap = function() { return this.$val.ToMap(); };
	CSSStyleDeclaration.ptr.prototype.RemoveProperty = function(name) {
		var $ptr, css, name;
		css = this;
		css.Object.removeProperty($externalize(name, $String));
	};
	CSSStyleDeclaration.prototype.RemoveProperty = function(name) { return this.$val.RemoveProperty(name); };
	CSSStyleDeclaration.ptr.prototype.GetPropertyValue = function(name) {
		var $ptr, css, name;
		css = this;
		return toString(css.Object.getPropertyValue($externalize(name, $String)));
	};
	CSSStyleDeclaration.prototype.GetPropertyValue = function(name) { return this.$val.GetPropertyValue(name); };
	CSSStyleDeclaration.ptr.prototype.GetPropertyPriority = function(name) {
		var $ptr, css, name;
		css = this;
		return toString(css.Object.getPropertyPriority($externalize(name, $String)));
	};
	CSSStyleDeclaration.prototype.GetPropertyPriority = function(name) { return this.$val.GetPropertyPriority(name); };
	CSSStyleDeclaration.ptr.prototype.SetProperty = function(name, value, priority) {
		var $ptr, css, name, priority, value;
		css = this;
		css.Object.setProperty($externalize(name, $String), $externalize(value, $String), $externalize(priority, $String));
	};
	CSSStyleDeclaration.prototype.SetProperty = function(name, value, priority) { return this.$val.SetProperty(name, value, priority); };
	CSSStyleDeclaration.ptr.prototype.Index = function(idx) {
		var $ptr, css, idx;
		css = this;
		return $internalize(css.Object.index(idx), $String);
	};
	CSSStyleDeclaration.prototype.Index = function(idx) { return this.$val.Index(idx); };
	CSSStyleDeclaration.ptr.prototype.Length = function() {
		var $ptr, css;
		css = this;
		return $parseInt(css.Object.length) >> 0;
	};
	CSSStyleDeclaration.prototype.Length = function() { return this.$val.Length(); };
	wrapEvent = function(o) {
		var $ptr, _1, c, ev, o;
		if (o === null || o === undefined) {
			return $ifaceNil;
		}
		ev = new BasicEvent.ptr(o);
		c = o.constructor;
		_1 = c;
		if (_1 === ($global.AnimationEvent)) {
			return new AnimationEvent.ptr(ev);
		} else if (_1 === ($global.AudioProcessingEvent)) {
			return new AudioProcessingEvent.ptr(ev);
		} else if (_1 === ($global.BeforeInputEvent)) {
			return new BeforeInputEvent.ptr(ev);
		} else if (_1 === ($global.BeforeUnloadEvent)) {
			return new BeforeUnloadEvent.ptr(ev);
		} else if (_1 === ($global.BlobEvent)) {
			return new BlobEvent.ptr(ev);
		} else if (_1 === ($global.ClipboardEvent)) {
			return new ClipboardEvent.ptr(ev);
		} else if (_1 === ($global.CloseEvent)) {
			return new CloseEvent.ptr(ev, 0, "", false);
		} else if (_1 === ($global.CompositionEvent)) {
			return new CompositionEvent.ptr(ev);
		} else if (_1 === ($global.CSSFontFaceLoadEvent)) {
			return new CSSFontFaceLoadEvent.ptr(ev);
		} else if (_1 === ($global.CustomEvent)) {
			return new CustomEvent.ptr(ev);
		} else if (_1 === ($global.DeviceLightEvent)) {
			return new DeviceLightEvent.ptr(ev);
		} else if (_1 === ($global.DeviceMotionEvent)) {
			return new DeviceMotionEvent.ptr(ev);
		} else if (_1 === ($global.DeviceOrientationEvent)) {
			return new DeviceOrientationEvent.ptr(ev);
		} else if (_1 === ($global.DeviceProximityEvent)) {
			return new DeviceProximityEvent.ptr(ev);
		} else if (_1 === ($global.DOMTransactionEvent)) {
			return new DOMTransactionEvent.ptr(ev);
		} else if (_1 === ($global.DragEvent)) {
			return new DragEvent.ptr(ev);
		} else if (_1 === ($global.EditingBeforeInputEvent)) {
			return new EditingBeforeInputEvent.ptr(ev);
		} else if (_1 === ($global.ErrorEvent)) {
			return new ErrorEvent.ptr(ev);
		} else if (_1 === ($global.FocusEvent)) {
			return new FocusEvent.ptr(ev);
		} else if (_1 === ($global.GamepadEvent)) {
			return new GamepadEvent.ptr(ev);
		} else if (_1 === ($global.HashChangeEvent)) {
			return new HashChangeEvent.ptr(ev);
		} else if (_1 === ($global.IDBVersionChangeEvent)) {
			return new IDBVersionChangeEvent.ptr(ev);
		} else if (_1 === ($global.KeyboardEvent)) {
			return new KeyboardEvent.ptr(ev, false, 0, false, "", "", 0, "", 0, 0, false, false, false);
		} else if (_1 === ($global.MediaStreamEvent)) {
			return new MediaStreamEvent.ptr(ev);
		} else if (_1 === ($global.MessageEvent)) {
			return new MessageEvent.ptr(ev, null);
		} else if (_1 === ($global.MouseEvent)) {
			return new MouseEvent.ptr(new UIEvent.ptr(ev), false, 0, 0, 0, false, false, 0, 0, 0, 0, false);
		} else if (_1 === ($global.MutationEvent)) {
			return new MutationEvent.ptr(ev);
		} else if (_1 === ($global.OfflineAudioCompletionEvent)) {
			return new OfflineAudioCompletionEvent.ptr(ev);
		} else if (_1 === ($global.PageTransitionEvent)) {
			return new PageTransitionEvent.ptr(ev);
		} else if (_1 === ($global.PointerEvent)) {
			return new PointerEvent.ptr(ev);
		} else if (_1 === ($global.PopStateEvent)) {
			return new PopStateEvent.ptr(ev);
		} else if (_1 === ($global.ProgressEvent)) {
			return new ProgressEvent.ptr(ev);
		} else if (_1 === ($global.RelatedEvent)) {
			return new RelatedEvent.ptr(ev);
		} else if (_1 === ($global.RTCPeerConnectionIceEvent)) {
			return new RTCPeerConnectionIceEvent.ptr(ev);
		} else if (_1 === ($global.SensorEvent)) {
			return new SensorEvent.ptr(ev);
		} else if (_1 === ($global.StorageEvent)) {
			return new StorageEvent.ptr(ev);
		} else if (_1 === ($global.SVGEvent)) {
			return new SVGEvent.ptr(ev);
		} else if (_1 === ($global.SVGZoomEvent)) {
			return new SVGZoomEvent.ptr(ev);
		} else if (_1 === ($global.TimeEvent)) {
			return new TimeEvent.ptr(ev);
		} else if (_1 === ($global.TouchEvent)) {
			return new TouchEvent.ptr(ev);
		} else if (_1 === ($global.TrackEvent)) {
			return new TrackEvent.ptr(ev);
		} else if (_1 === ($global.TransitionEvent)) {
			return new TransitionEvent.ptr(ev);
		} else if (_1 === ($global.UIEvent)) {
			return new UIEvent.ptr(ev);
		} else if (_1 === ($global.UserProximityEvent)) {
			return new UserProximityEvent.ptr(ev);
		} else if (_1 === ($global.WheelEvent)) {
			return new WheelEvent.ptr(ev, 0, 0, 0, 0);
		} else {
			return ev;
		}
	};
	BasicEvent.ptr.prototype.Bubbles = function() {
		var $ptr, ev;
		ev = this;
		return !!(ev.Object.bubbles);
	};
	BasicEvent.prototype.Bubbles = function() { return this.$val.Bubbles(); };
	BasicEvent.ptr.prototype.Cancelable = function() {
		var $ptr, ev;
		ev = this;
		return !!(ev.Object.cancelable);
	};
	BasicEvent.prototype.Cancelable = function() { return this.$val.Cancelable(); };
	BasicEvent.ptr.prototype.CurrentTarget = function() {
		var $ptr, ev;
		ev = this;
		return wrapElement(ev.Object.currentTarget);
	};
	BasicEvent.prototype.CurrentTarget = function() { return this.$val.CurrentTarget(); };
	BasicEvent.ptr.prototype.DefaultPrevented = function() {
		var $ptr, ev;
		ev = this;
		return !!(ev.Object.defaultPrevented);
	};
	BasicEvent.prototype.DefaultPrevented = function() { return this.$val.DefaultPrevented(); };
	BasicEvent.ptr.prototype.EventPhase = function() {
		var $ptr, ev;
		ev = this;
		return $parseInt(ev.Object.eventPhase) >> 0;
	};
	BasicEvent.prototype.EventPhase = function() { return this.$val.EventPhase(); };
	BasicEvent.ptr.prototype.Target = function() {
		var $ptr, ev;
		ev = this;
		return wrapElement(ev.Object.target);
	};
	BasicEvent.prototype.Target = function() { return this.$val.Target(); };
	BasicEvent.ptr.prototype.Timestamp = function() {
		var $ptr, _q, _r, ev, ms, ns, s;
		ev = this;
		ms = $parseInt(ev.Object.timeStamp) >> 0;
		s = (_q = ms / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		ns = ($imul((_r = ms % 1000, _r === _r ? _r : $throwRuntimeError("integer divide by zero")), 1000000));
		return time.Unix(new $Int64(0, s), new $Int64(0, ns));
	};
	BasicEvent.prototype.Timestamp = function() { return this.$val.Timestamp(); };
	BasicEvent.ptr.prototype.Type = function() {
		var $ptr, ev;
		ev = this;
		return $internalize(ev.Object.type, $String);
	};
	BasicEvent.prototype.Type = function() { return this.$val.Type(); };
	BasicEvent.ptr.prototype.PreventDefault = function() {
		var $ptr, ev;
		ev = this;
		ev.Object.preventDefault();
	};
	BasicEvent.prototype.PreventDefault = function() { return this.$val.PreventDefault(); };
	BasicEvent.ptr.prototype.StopImmediatePropagation = function() {
		var $ptr, ev;
		ev = this;
		ev.Object.stopImmediatePropagation();
	};
	BasicEvent.prototype.StopImmediatePropagation = function() { return this.$val.StopImmediatePropagation(); };
	BasicEvent.ptr.prototype.StopPropagation = function() {
		var $ptr, ev;
		ev = this;
		ev.Object.stopPropagation();
	};
	BasicEvent.prototype.StopPropagation = function() { return this.$val.StopPropagation(); };
	BasicEvent.ptr.prototype.Underlying = function() {
		var $ptr, ev;
		ev = this;
		return ev.Object;
	};
	BasicEvent.prototype.Underlying = function() { return this.$val.Underlying(); };
	KeyboardEvent.ptr.prototype.ModifierState = function(mod) {
		var $ptr, ev, mod;
		ev = this;
		return !!(ev.BasicEvent.Object.getModifierState($externalize(mod, $String)));
	};
	KeyboardEvent.prototype.ModifierState = function(mod) { return this.$val.ModifierState(mod); };
	MouseEvent.ptr.prototype.RelatedTarget = function() {
		var $ptr, ev;
		ev = this;
		return wrapElement(ev.UIEvent.BasicEvent.Object.target);
	};
	MouseEvent.prototype.RelatedTarget = function() { return this.$val.RelatedTarget(); };
	MouseEvent.ptr.prototype.ModifierState = function(mod) {
		var $ptr, ev, mod;
		ev = this;
		return !!(ev.UIEvent.BasicEvent.Object.getModifierState($externalize(mod, $String)));
	};
	MouseEvent.prototype.ModifierState = function(mod) { return this.$val.ModifierState(mod); };
	ptrType$20.methods = [{prop: "Item", name: "Item", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Toggle", name: "Toggle", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([sliceType$7], [], false)}];
	documentFragment.methods = [{prop: "GetElementByID", name: "GetElementByID", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}];
	document.methods = [{prop: "Async", name: "Async", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAsync", name: "SetAsync", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Doctype", name: "Doctype", pkg: "", typ: $funcType([], [DocumentType], false)}, {prop: "DocumentElement", name: "DocumentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "DocumentURI", name: "DocumentURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Implementation", name: "Implementation", pkg: "", typ: $funcType([], [DOMImplementation], false)}, {prop: "LastStyleSheetSet", name: "LastStyleSheetSet", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PreferredStyleSheetSet", name: "PreferredStyleSheetSet", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SelectedStyleSheetSet", name: "SelectedStyleSheetSet", pkg: "", typ: $funcType([], [$String], false)}, {prop: "StyleSheets", name: "StyleSheets", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "StyleSheetSets", name: "StyleSheetSets", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "AdoptNode", name: "AdoptNode", pkg: "", typ: $funcType([Node], [Node], false)}, {prop: "ImportNode", name: "ImportNode", pkg: "", typ: $funcType([Node, $Bool], [Node], false)}, {prop: "CreateDocumentFragment", name: "CreateDocumentFragment", pkg: "", typ: $funcType([], [DocumentFragment], false)}, {prop: "CreateElement", name: "CreateElement", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "CreateElementNS", name: "CreateElementNS", pkg: "", typ: $funcType([$String, $String], [Element], false)}, {prop: "CreateTextNode", name: "CreateTextNode", pkg: "", typ: $funcType([$String], [ptrType$12], false)}, {prop: "ElementFromPoint", name: "ElementFromPoint", pkg: "", typ: $funcType([$Int, $Int], [Element], false)}, {prop: "EnableStyleSheetsForSet", name: "EnableStyleSheetsForSet", pkg: "", typ: $funcType([$String], [], false)}, {prop: "GetElementsByClassName", name: "GetElementsByClassName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagName", name: "GetElementsByTagName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagNameNS", name: "GetElementsByTagNameNS", pkg: "", typ: $funcType([$String, $String], [sliceType$3], false)}, {prop: "GetElementByID", name: "GetElementByID", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}];
	ptrType$24.methods = [{prop: "ActiveElement", name: "ActiveElement", pkg: "", typ: $funcType([], [HTMLElement], false)}, {prop: "Body", name: "Body", pkg: "", typ: $funcType([], [HTMLElement], false)}, {prop: "Cookie", name: "Cookie", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetCookie", name: "SetCookie", pkg: "", typ: $funcType([$String], [], false)}, {prop: "DefaultView", name: "DefaultView", pkg: "", typ: $funcType([], [Window], false)}, {prop: "DesignMode", name: "DesignMode", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetDesignMode", name: "SetDesignMode", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Domain", name: "Domain", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetDomain", name: "SetDomain", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Forms", name: "Forms", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Head", name: "Head", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Images", name: "Images", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "LastModified", name: "LastModified", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Links", name: "Links", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$21], false)}, {prop: "Plugins", name: "Plugins", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "ReadyState", name: "ReadyState", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Referrer", name: "Referrer", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Scripts", name: "Scripts", pkg: "", typ: $funcType([], [sliceType$11], false)}, {prop: "Title", name: "Title", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetTitle", name: "SetTitle", pkg: "", typ: $funcType([$String], [], false)}, {prop: "URL", name: "URL", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$28.methods = [{prop: "Console", name: "Console", pkg: "", typ: $funcType([], [ptrType$26], false)}, {prop: "Document", name: "Document", pkg: "", typ: $funcType([], [Document], false)}, {prop: "FrameElement", name: "FrameElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$21], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [], false)}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Opener", name: "Opener", pkg: "", typ: $funcType([], [Window], false)}, {prop: "OuterHeight", name: "OuterHeight", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OuterWidth", name: "OuterWidth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollX", name: "ScrollX", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollY", name: "ScrollY", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Window], false)}, {prop: "ScreenX", name: "ScreenX", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScreenY", name: "ScreenY", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollMaxX", name: "ScrollMaxX", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollMaxY", name: "ScrollMaxY", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Top", name: "Top", pkg: "", typ: $funcType([], [Window], false)}, {prop: "History", name: "History", pkg: "", typ: $funcType([], [History], false)}, {prop: "Navigator", name: "Navigator", pkg: "", typ: $funcType([], [Navigator], false)}, {prop: "Screen", name: "Screen", pkg: "", typ: $funcType([], [ptrType$27], false)}, {prop: "Alert", name: "Alert", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Back", name: "Back", pkg: "", typ: $funcType([], [], false)}, {prop: "Blur", name: "Blur", pkg: "", typ: $funcType([], [], false)}, {prop: "ClearInterval", name: "ClearInterval", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ClearTimeout", name: "ClearTimeout", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "Confirm", name: "Confirm", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Focus", name: "Focus", pkg: "", typ: $funcType([], [], false)}, {prop: "Forward", name: "Forward", pkg: "", typ: $funcType([], [], false)}, {prop: "GetComputedStyle", name: "GetComputedStyle", pkg: "", typ: $funcType([Element, $String], [ptrType$25], false)}, {prop: "GetSelection", name: "GetSelection", pkg: "", typ: $funcType([], [Selection], false)}, {prop: "Home", name: "Home", pkg: "", typ: $funcType([], [], false)}, {prop: "MoveBy", name: "MoveBy", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "MoveTo", name: "MoveTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String, $String, $String], [Window], false)}, {prop: "OpenDialog", name: "OpenDialog", pkg: "", typ: $funcType([$String, $String, $String, sliceType], [Window], false)}, {prop: "PostMessage", name: "PostMessage", pkg: "", typ: $funcType([$String, $String, sliceType], [], false)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([], [], false)}, {prop: "Prompt", name: "Prompt", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ResizeBy", name: "ResizeBy", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ResizeTo", name: "ResizeTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Scroll", name: "Scroll", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ScrollBy", name: "ScrollBy", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ScrollByLines", name: "ScrollByLines", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ScrollTo", name: "ScrollTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "SetCursor", name: "SetCursor", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetInterval", name: "SetInterval", pkg: "", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: "SetTimeout", name: "SetTimeout", pkg: "", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [], false)}, {prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "RequestAnimationFrame", name: "RequestAnimationFrame", pkg: "", typ: $funcType([funcType$3], [$Int], false)}, {prop: "CancelAnimationFrame", name: "CancelAnimationFrame", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$29.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$22.methods = [{prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "LastChild", name: "LastChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NodeType", name: "NodeType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetNodeValue", name: "SetNodeValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: $funcType([], [Node], false)}, {prop: "ParentElement", name: "ParentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetTextContent", name: "SetTextContent", pkg: "", typ: $funcType([$String], [], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: $funcType([$Bool], [Node], false)}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: $funcType([Node], [$Int], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: $funcType([Node, Node], [], false)}];
	ptrType$1.methods = [{prop: "AccessKey", name: "AccessKey", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Dataset", name: "Dataset", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "SetAccessKey", name: "SetAccessKey", pkg: "", typ: $funcType([$String], [], false)}, {prop: "AccessKeyLabel", name: "AccessKeyLabel", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetAccessKeyLabel", name: "SetAccessKeyLabel", pkg: "", typ: $funcType([$String], [], false)}, {prop: "ContentEditable", name: "ContentEditable", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetContentEditable", name: "SetContentEditable", pkg: "", typ: $funcType([$String], [], false)}, {prop: "IsContentEditable", name: "IsContentEditable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Dir", name: "Dir", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetDir", name: "SetDir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Draggable", name: "Draggable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetDraggable", name: "SetDraggable", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Lang", name: "Lang", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetLang", name: "SetLang", pkg: "", typ: $funcType([$String], [], false)}, {prop: "OffsetHeight", name: "OffsetHeight", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OffsetLeft", name: "OffsetLeft", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OffsetParent", name: "OffsetParent", pkg: "", typ: $funcType([], [HTMLElement], false)}, {prop: "OffsetTop", name: "OffsetTop", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OffsetWidth", name: "OffsetWidth", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Style", name: "Style", pkg: "", typ: $funcType([], [ptrType$25], false)}, {prop: "TabIndex", name: "TabIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetTabIndex", name: "SetTabIndex", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Title", name: "Title", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetTitle", name: "SetTitle", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Blur", name: "Blur", pkg: "", typ: $funcType([], [], false)}, {prop: "Click", name: "Click", pkg: "", typ: $funcType([], [], false)}, {prop: "Focus", name: "Focus", pkg: "", typ: $funcType([], [], false)}];
	ptrType$31.methods = [{prop: "Attributes", name: "Attributes", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "GetBoundingClientRect", name: "GetBoundingClientRect", pkg: "", typ: $funcType([], [ClientRect], false)}, {prop: "PreviousElementSibling", name: "PreviousElementSibling", pkg: "", typ: $funcType([], [Element], false)}, {prop: "NextElementSibling", name: "NextElementSibling", pkg: "", typ: $funcType([], [Element], false)}, {prop: "Class", name: "Class", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "SetClass", name: "SetClass", pkg: "", typ: $funcType([$String], [], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetID", name: "SetID", pkg: "", typ: $funcType([$String], [], false)}, {prop: "TagName", name: "TagName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetAttribute", name: "GetAttribute", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "GetAttributeNS", name: "GetAttributeNS", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "GetElementsByClassName", name: "GetElementsByClassName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagName", name: "GetElementsByTagName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagNameNS", name: "GetElementsByTagNameNS", pkg: "", typ: $funcType([$String, $String], [sliceType$3], false)}, {prop: "HasAttribute", name: "HasAttribute", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "HasAttributeNS", name: "HasAttributeNS", pkg: "", typ: $funcType([$String, $String], [$Bool], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "RemoveAttribute", name: "RemoveAttribute", pkg: "", typ: $funcType([$String], [], false)}, {prop: "RemoveAttributeNS", name: "RemoveAttributeNS", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "SetAttribute", name: "SetAttribute", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "SetAttributeNS", name: "SetAttributeNS", pkg: "", typ: $funcType([$String, $String, $String], [], false)}, {prop: "InnerHTML", name: "InnerHTML", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetInnerHTML", name: "SetInnerHTML", pkg: "", typ: $funcType([$String], [], false)}, {prop: "OuterHTML", name: "OuterHTML", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetOuterHTML", name: "SetOuterHTML", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$32.methods = [{prop: "Rel", name: "Rel", pkg: "", typ: $funcType([], [ptrType$20], false)}];
	ptrType$33.methods = [{prop: "Rel", name: "Rel", pkg: "", typ: $funcType([], [ptrType$20], false)}];
	ptrType$15.methods = [{prop: "Rel", name: "Rel", pkg: "", typ: $funcType([], [ptrType$20], false)}];
	ptrType$34.methods = [{prop: "Href", name: "Href", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$36.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$38.methods = [{prop: "GetContext2d", name: "GetContext2d", pkg: "", typ: $funcType([], [ptrType$37], false)}, {prop: "GetContext", name: "GetContext", pkg: "", typ: $funcType([$String], [ptrType], false)}];
	ptrType$37.methods = [{prop: "CreateLinearGradient", name: "CreateLinearGradient", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "Rect", name: "Rect", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "FillRect", name: "FillRect", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "StrokeRect", name: "StrokeRect", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "ClearRect", name: "ClearRect", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([], [], false)}, {prop: "Stroke", name: "Stroke", pkg: "", typ: $funcType([], [], false)}, {prop: "BeginPath", name: "BeginPath", pkg: "", typ: $funcType([], [], false)}, {prop: "MoveTo", name: "MoveTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ClosePath", name: "ClosePath", pkg: "", typ: $funcType([], [], false)}, {prop: "LineTo", name: "LineTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Clip", name: "Clip", pkg: "", typ: $funcType([], [], false)}, {prop: "QuadraticCurveTo", name: "QuadraticCurveTo", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "BezierCurveTo", name: "BezierCurveTo", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "Arc", name: "Arc", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Bool], [], false)}, {prop: "ArcTo", name: "ArcTo", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "IsPointInPath", name: "IsPointInPath", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Rotate", name: "Rotate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Transform", name: "Transform", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "SetTransform", name: "SetTransform", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "FillText", name: "FillText", pkg: "", typ: $funcType([$String, $Int, $Int, $Int], [], false)}, {prop: "StrokeText", name: "StrokeText", pkg: "", typ: $funcType([$String, $Int, $Int, $Int], [], false)}];
	ptrType$14.methods = [{prop: "Options", name: "Options", pkg: "", typ: $funcType([], [sliceType$6], false)}];
	ptrType$39.methods = [{prop: "Elements", name: "Elements", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$5.methods = [{prop: "Elements", name: "Elements", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Submit", name: "Submit", pkg: "", typ: $funcType([], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Item", name: "Item", pkg: "", typ: $funcType([$Int], [HTMLElement], false)}, {prop: "NamedItem", name: "NamedItem", pkg: "", typ: $funcType([$String], [HTMLElement], false)}];
	ptrType$40.methods = [{prop: "ContentDocument", name: "ContentDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ContentWindow", name: "ContentWindow", pkg: "", typ: $funcType([], [Window], false)}];
	ptrType$41.methods = [{prop: "Files", name: "Files", pkg: "", typ: $funcType([], [sliceType$12], false)}, {prop: "List", name: "List", pkg: "", typ: $funcType([], [ptrType$14], false)}, {prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([], [], false)}, {prop: "SetSelectionRange", name: "SetSelectionRange", pkg: "", typ: $funcType([$Int, $Int, $String], [], false)}, {prop: "StepDown", name: "StepDown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "StepUp", name: "StepUp", pkg: "", typ: $funcType([$Int], [$error], false)}];
	ptrType$42.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$6.methods = [{prop: "Control", name: "Control", pkg: "", typ: $funcType([], [HTMLElement], false)}, {prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}];
	ptrType$43.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}];
	ptrType$44.methods = [{prop: "Rel", name: "Rel", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Sizes", name: "Sizes", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Sheet", name: "Sheet", pkg: "", typ: $funcType([], [StyleSheet], false)}];
	ptrType$45.methods = [{prop: "Areas", name: "Areas", pkg: "", typ: $funcType([], [sliceType$13], false)}, {prop: "Images", name: "Images", pkg: "", typ: $funcType([], [sliceType$4], false)}];
	ptrType$3.methods = [{prop: "Play", name: "Play", pkg: "", typ: $funcType([], [], false)}, {prop: "Pause", name: "Pause", pkg: "", typ: $funcType([], [], false)}];
	HTMLMeterElement.methods = [{prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}];
	ptrType$46.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "ContentDocument", name: "ContentDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ContentWindow", name: "ContentWindow", pkg: "", typ: $funcType([], [Window], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$7.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}];
	ptrType$47.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "For", name: "For", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}];
	HTMLProgressElement.methods = [{prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}];
	ptrType$48.methods = [{prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Options", name: "Options", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "SelectedOptions", name: "SelectedOptions", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "Item", name: "Item", pkg: "", typ: $funcType([$Int], [ptrType$7], false)}, {prop: "NamedItem", name: "NamedItem", pkg: "", typ: $funcType([$String], [ptrType$7], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$17.methods = [{prop: "Cells", name: "Cells", pkg: "", typ: $funcType([], [sliceType$14], false)}, {prop: "InsertCell", name: "InsertCell", pkg: "", typ: $funcType([$Int], [ptrType$16], false)}, {prop: "DeleteCell", name: "DeleteCell", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$49.methods = [{prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "DeleteRow", name: "DeleteRow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "InsertRow", name: "InsertRow", pkg: "", typ: $funcType([$Int], [ptrType$17], false)}];
	ptrType$50.methods = [{prop: "Form", name: "Form", pkg: "", typ: $funcType([], [ptrType$5], false)}, {prop: "Labels", name: "Labels", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Validity", name: "Validity", pkg: "", typ: $funcType([], [ptrType$35], false)}, {prop: "CheckValidity", name: "CheckValidity", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetCustomValidity", name: "SetCustomValidity", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([], [], false)}, {prop: "SetSelectionRange", name: "SetSelectionRange", pkg: "", typ: $funcType([$Int, $Int, $String], [], false)}];
	ptrType$52.methods = [{prop: "Track", name: "Track", pkg: "", typ: $funcType([], [ptrType$51], false)}];
	ptrType$25.methods = [{prop: "ToMap", name: "ToMap", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "RemoveProperty", name: "RemoveProperty", pkg: "", typ: $funcType([$String], [], false)}, {prop: "GetPropertyValue", name: "GetPropertyValue", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "GetPropertyPriority", name: "GetPropertyPriority", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "SetProperty", name: "SetProperty", pkg: "", typ: $funcType([$String, $String, $String], [], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$18.methods = [{prop: "Bubbles", name: "Bubbles", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Cancelable", name: "Cancelable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CurrentTarget", name: "CurrentTarget", pkg: "", typ: $funcType([], [Element], false)}, {prop: "DefaultPrevented", name: "DefaultPrevented", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "EventPhase", name: "EventPhase", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [Element], false)}, {prop: "Timestamp", name: "Timestamp", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PreventDefault", name: "PreventDefault", pkg: "", typ: $funcType([], [], false)}, {prop: "StopImmediatePropagation", name: "StopImmediatePropagation", pkg: "", typ: $funcType([], [], false)}, {prop: "StopPropagation", name: "StopPropagation", pkg: "", typ: $funcType([], [], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}];
	ptrType$53.methods = [{prop: "ModifierState", name: "ModifierState", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	ptrType$54.methods = [{prop: "RelatedTarget", name: "RelatedTarget", pkg: "", typ: $funcType([], [Element], false)}, {prop: "ModifierState", name: "ModifierState", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	TokenList.init("honnef.co/go/js/dom", [{prop: "dtl", name: "dtl", exported: false, typ: ptrType, tag: ""}, {prop: "o", name: "o", exported: false, typ: ptrType, tag: ""}, {prop: "sa", name: "sa", exported: false, typ: $String, tag: ""}, {prop: "Length", name: "Length", exported: true, typ: $Int, tag: "js:\"length\""}]);
	Document.init([{prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "AdoptNode", name: "AdoptNode", pkg: "", typ: $funcType([Node], [Node], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "Async", name: "Async", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: $funcType([$Bool], [Node], false)}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: $funcType([Node], [$Int], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "CreateDocumentFragment", name: "CreateDocumentFragment", pkg: "", typ: $funcType([], [DocumentFragment], false)}, {prop: "CreateElement", name: "CreateElement", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "CreateElementNS", name: "CreateElementNS", pkg: "", typ: $funcType([$String, $String], [Element], false)}, {prop: "CreateTextNode", name: "CreateTextNode", pkg: "", typ: $funcType([$String], [ptrType$12], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "Doctype", name: "Doctype", pkg: "", typ: $funcType([], [DocumentType], false)}, {prop: "DocumentElement", name: "DocumentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "DocumentURI", name: "DocumentURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ElementFromPoint", name: "ElementFromPoint", pkg: "", typ: $funcType([$Int, $Int], [Element], false)}, {prop: "EnableStyleSheetsForSet", name: "EnableStyleSheetsForSet", pkg: "", typ: $funcType([$String], [], false)}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "GetElementByID", name: "GetElementByID", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "GetElementsByClassName", name: "GetElementsByClassName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagName", name: "GetElementsByTagName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagNameNS", name: "GetElementsByTagNameNS", pkg: "", typ: $funcType([$String, $String], [sliceType$3], false)}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Implementation", name: "Implementation", pkg: "", typ: $funcType([], [DOMImplementation], false)}, {prop: "ImportNode", name: "ImportNode", pkg: "", typ: $funcType([Node, $Bool], [Node], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "LastChild", name: "LastChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "LastStyleSheetSet", name: "LastStyleSheetSet", pkg: "", typ: $funcType([], [$String], false)}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NodeType", name: "NodeType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [], false)}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ParentElement", name: "ParentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: $funcType([], [Node], false)}, {prop: "PreferredStyleSheetSet", name: "PreferredStyleSheetSet", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "SelectedStyleSheetSet", name: "SelectedStyleSheetSet", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetAsync", name: "SetAsync", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetNodeValue", name: "SetNodeValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTextContent", name: "SetTextContent", pkg: "", typ: $funcType([$String], [], false)}, {prop: "StyleSheetSets", name: "StyleSheetSets", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "StyleSheets", name: "StyleSheets", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}]);
	DocumentFragment.init([{prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: $funcType([$Bool], [Node], false)}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: $funcType([Node], [$Int], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "GetElementByID", name: "GetElementByID", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "LastChild", name: "LastChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NodeType", name: "NodeType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [], false)}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ParentElement", name: "ParentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: $funcType([], [Node], false)}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "SetNodeValue", name: "SetNodeValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTextContent", name: "SetTextContent", pkg: "", typ: $funcType([$String], [], false)}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}]);
	documentFragment.init("", [{prop: "BasicNode", name: "", exported: true, typ: ptrType$22, tag: ""}]);
	document.init("", [{prop: "BasicNode", name: "", exported: true, typ: ptrType$22, tag: ""}]);
	htmlDocument.init("honnef.co/go/js/dom", [{prop: "document", name: "", exported: false, typ: ptrType$23, tag: ""}]);
	URLUtils.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "Href", name: "Href", exported: true, typ: $String, tag: "js:\"href\""}, {prop: "Protocol", name: "Protocol", exported: true, typ: $String, tag: "js:\"protocol\""}, {prop: "Host", name: "Host", exported: true, typ: $String, tag: "js:\"host\""}, {prop: "Hostname", name: "Hostname", exported: true, typ: $String, tag: "js:\"hostname\""}, {prop: "Port", name: "Port", exported: true, typ: $String, tag: "js:\"port\""}, {prop: "Pathname", name: "Pathname", exported: true, typ: $String, tag: "js:\"pathname\""}, {prop: "Search", name: "Search", exported: true, typ: $String, tag: "js:\"search\""}, {prop: "Hash", name: "Hash", exported: true, typ: $String, tag: "js:\"hash\""}, {prop: "Username", name: "Username", exported: true, typ: $String, tag: "js:\"username\""}, {prop: "Password", name: "Password", exported: true, typ: $String, tag: "js:\"password\""}, {prop: "Origin", name: "Origin", exported: true, typ: $String, tag: "js:\"origin\""}]);
	Location.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "URLUtils", name: "", exported: true, typ: ptrType$2, tag: ""}]);
	HTMLElement.init([{prop: "AccessKey", name: "AccessKey", pkg: "", typ: $funcType([], [$String], false)}, {prop: "AccessKeyLabel", name: "AccessKeyLabel", pkg: "", typ: $funcType([], [$String], false)}, {prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "Attributes", name: "Attributes", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Blur", name: "Blur", pkg: "", typ: $funcType([], [], false)}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "Class", name: "Class", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "Click", name: "Click", pkg: "", typ: $funcType([], [], false)}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: $funcType([$Bool], [Node], false)}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: $funcType([Node], [$Int], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "ContentEditable", name: "ContentEditable", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Dataset", name: "Dataset", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "Dir", name: "Dir", pkg: "", typ: $funcType([], [$String], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "Draggable", name: "Draggable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Focus", name: "Focus", pkg: "", typ: $funcType([], [], false)}, {prop: "GetAttribute", name: "GetAttribute", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "GetAttributeNS", name: "GetAttributeNS", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "GetBoundingClientRect", name: "GetBoundingClientRect", pkg: "", typ: $funcType([], [ClientRect], false)}, {prop: "GetElementsByClassName", name: "GetElementsByClassName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagName", name: "GetElementsByTagName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagNameNS", name: "GetElementsByTagNameNS", pkg: "", typ: $funcType([$String, $String], [sliceType$3], false)}, {prop: "HasAttribute", name: "HasAttribute", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "HasAttributeNS", name: "HasAttributeNS", pkg: "", typ: $funcType([$String, $String], [$Bool], false)}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$String], false)}, {prop: "InnerHTML", name: "InnerHTML", pkg: "", typ: $funcType([], [$String], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "IsContentEditable", name: "IsContentEditable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "Lang", name: "Lang", pkg: "", typ: $funcType([], [$String], false)}, {prop: "LastChild", name: "LastChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NextElementSibling", name: "NextElementSibling", pkg: "", typ: $funcType([], [Element], false)}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NodeType", name: "NodeType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [], false)}, {prop: "OffsetHeight", name: "OffsetHeight", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OffsetLeft", name: "OffsetLeft", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OffsetParent", name: "OffsetParent", pkg: "", typ: $funcType([], [HTMLElement], false)}, {prop: "OffsetTop", name: "OffsetTop", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OffsetWidth", name: "OffsetWidth", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OuterHTML", name: "OuterHTML", pkg: "", typ: $funcType([], [$String], false)}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ParentElement", name: "ParentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: $funcType([], [Node], false)}, {prop: "PreviousElementSibling", name: "PreviousElementSibling", pkg: "", typ: $funcType([], [Element], false)}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "RemoveAttribute", name: "RemoveAttribute", pkg: "", typ: $funcType([$String], [], false)}, {prop: "RemoveAttributeNS", name: "RemoveAttributeNS", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "SetAccessKey", name: "SetAccessKey", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetAccessKeyLabel", name: "SetAccessKeyLabel", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetAttribute", name: "SetAttribute", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "SetAttributeNS", name: "SetAttributeNS", pkg: "", typ: $funcType([$String, $String, $String], [], false)}, {prop: "SetContentEditable", name: "SetContentEditable", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetDir", name: "SetDir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetDraggable", name: "SetDraggable", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetID", name: "SetID", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetInnerHTML", name: "SetInnerHTML", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetLang", name: "SetLang", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetNodeValue", name: "SetNodeValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetOuterHTML", name: "SetOuterHTML", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTextContent", name: "SetTextContent", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTitle", name: "SetTitle", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Style", name: "Style", pkg: "", typ: $funcType([], [ptrType$25], false)}, {prop: "TagName", name: "TagName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Title", name: "Title", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}]);
	Window.init([{prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "Alert", name: "Alert", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Back", name: "Back", pkg: "", typ: $funcType([], [], false)}, {prop: "Blur", name: "Blur", pkg: "", typ: $funcType([], [], false)}, {prop: "CancelAnimationFrame", name: "CancelAnimationFrame", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ClearInterval", name: "ClearInterval", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ClearTimeout", name: "ClearTimeout", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "Confirm", name: "Confirm", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Console", name: "Console", pkg: "", typ: $funcType([], [ptrType$26], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "Document", name: "Document", pkg: "", typ: $funcType([], [Document], false)}, {prop: "Focus", name: "Focus", pkg: "", typ: $funcType([], [], false)}, {prop: "Forward", name: "Forward", pkg: "", typ: $funcType([], [], false)}, {prop: "FrameElement", name: "FrameElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "GetComputedStyle", name: "GetComputedStyle", pkg: "", typ: $funcType([Element, $String], [ptrType$25], false)}, {prop: "GetSelection", name: "GetSelection", pkg: "", typ: $funcType([], [Selection], false)}, {prop: "History", name: "History", pkg: "", typ: $funcType([], [History], false)}, {prop: "Home", name: "Home", pkg: "", typ: $funcType([], [], false)}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$21], false)}, {prop: "MoveBy", name: "MoveBy", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "MoveTo", name: "MoveTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Navigator", name: "Navigator", pkg: "", typ: $funcType([], [Navigator], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String, $String, $String], [Window], false)}, {prop: "OpenDialog", name: "OpenDialog", pkg: "", typ: $funcType([$String, $String, $String, sliceType], [Window], false)}, {prop: "Opener", name: "Opener", pkg: "", typ: $funcType([], [Window], false)}, {prop: "OuterHeight", name: "OuterHeight", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OuterWidth", name: "OuterWidth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Window], false)}, {prop: "PostMessage", name: "PostMessage", pkg: "", typ: $funcType([$String, $String, sliceType], [], false)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([], [], false)}, {prop: "Prompt", name: "Prompt", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "RequestAnimationFrame", name: "RequestAnimationFrame", pkg: "", typ: $funcType([funcType$3], [$Int], false)}, {prop: "ResizeBy", name: "ResizeBy", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ResizeTo", name: "ResizeTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Screen", name: "Screen", pkg: "", typ: $funcType([], [ptrType$27], false)}, {prop: "ScreenX", name: "ScreenX", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScreenY", name: "ScreenY", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Scroll", name: "Scroll", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ScrollBy", name: "ScrollBy", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ScrollByLines", name: "ScrollByLines", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ScrollMaxX", name: "ScrollMaxX", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollMaxY", name: "ScrollMaxY", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollTo", name: "ScrollTo", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "ScrollX", name: "ScrollX", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ScrollY", name: "ScrollY", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetCursor", name: "SetCursor", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetInterval", name: "SetInterval", pkg: "", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: "SetName", name: "SetName", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTimeout", name: "SetTimeout", pkg: "", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [], false)}, {prop: "Top", name: "Top", pkg: "", typ: $funcType([], [Window], false)}]);
	window.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	Selection.init([]);
	Screen.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "AvailTop", name: "AvailTop", exported: true, typ: $Int, tag: "js:\"availTop\""}, {prop: "AvailLeft", name: "AvailLeft", exported: true, typ: $Int, tag: "js:\"availLeft\""}, {prop: "AvailHeight", name: "AvailHeight", exported: true, typ: $Int, tag: "js:\"availHeight\""}, {prop: "AvailWidth", name: "AvailWidth", exported: true, typ: $Int, tag: "js:\"availWidth\""}, {prop: "ColorDepth", name: "ColorDepth", exported: true, typ: $Int, tag: "js:\"colorDepth\""}, {prop: "Height", name: "Height", exported: true, typ: $Int, tag: "js:\"height\""}, {prop: "Left", name: "Left", exported: true, typ: $Int, tag: "js:\"left\""}, {prop: "PixelDepth", name: "PixelDepth", exported: true, typ: $Int, tag: "js:\"pixelDepth\""}, {prop: "Top", name: "Top", exported: true, typ: $Int, tag: "js:\"top\""}, {prop: "Width", name: "Width", exported: true, typ: $Int, tag: "js:\"width\""}]);
	Navigator.init([{prop: "AppName", name: "AppName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "AppVersion", name: "AppVersion", pkg: "", typ: $funcType([], [$String], false)}, {prop: "CookieEnabled", name: "CookieEnabled", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "DoNotTrack", name: "DoNotTrack", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Geolocation", name: "Geolocation", pkg: "", typ: $funcType([], [Geolocation], false)}, {prop: "Language", name: "Language", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Online", name: "Online", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Platform", name: "Platform", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Product", name: "Product", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RegisterProtocolHandler", name: "RegisterProtocolHandler", pkg: "", typ: $funcType([$String, $String, $String], [], false)}, {prop: "UserAgent", name: "UserAgent", pkg: "", typ: $funcType([], [$String], false)}]);
	Geolocation.init([{prop: "ClearWatch", name: "ClearWatch", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "CurrentPosition", name: "CurrentPosition", pkg: "", typ: $funcType([funcType$4, funcType$5, PositionOptions], [Position], false)}, {prop: "WatchPosition", name: "WatchPosition", pkg: "", typ: $funcType([funcType$4, funcType$5, PositionOptions], [$Int], false)}]);
	PositionError.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "Code", name: "Code", exported: true, typ: $Int, tag: "js:\"code\""}]);
	PositionOptions.init("", [{prop: "EnableHighAccuracy", name: "EnableHighAccuracy", exported: true, typ: $Bool, tag: ""}, {prop: "Timeout", name: "Timeout", exported: true, typ: time.Duration, tag: ""}, {prop: "MaximumAge", name: "MaximumAge", exported: true, typ: time.Duration, tag: ""}]);
	Position.init("", [{prop: "Coords", name: "Coords", exported: true, typ: ptrType$30, tag: ""}, {prop: "Timestamp", name: "Timestamp", exported: true, typ: time.Time, tag: ""}]);
	Coordinates.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "Latitude", name: "Latitude", exported: true, typ: $Float64, tag: "js:\"latitude\""}, {prop: "Longitude", name: "Longitude", exported: true, typ: $Float64, tag: "js:\"longitude\""}, {prop: "Altitude", name: "Altitude", exported: true, typ: $Float64, tag: "js:\"altitude\""}, {prop: "Accuracy", name: "Accuracy", exported: true, typ: $Float64, tag: "js:\"accuracy\""}, {prop: "AltitudeAccuracy", name: "AltitudeAccuracy", exported: true, typ: $Float64, tag: "js:\"altitudeAccuracy\""}, {prop: "Heading", name: "Heading", exported: true, typ: $Float64, tag: "js:\"heading\""}, {prop: "Speed", name: "Speed", exported: true, typ: $Float64, tag: "js:\"speed\""}]);
	History.init([{prop: "Back", name: "Back", pkg: "", typ: $funcType([], [], false)}, {prop: "Forward", name: "Forward", pkg: "", typ: $funcType([], [], false)}, {prop: "Go", name: "Go", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "PushState", name: "PushState", pkg: "", typ: $funcType([$emptyInterface, $String, $String], [], false)}, {prop: "ReplaceState", name: "ReplaceState", pkg: "", typ: $funcType([$emptyInterface, $String, $String], [], false)}, {prop: "State", name: "State", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	Console.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	DocumentType.init([]);
	DOMImplementation.init([]);
	StyleSheet.init([]);
	Node.init([{prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: $funcType([$Bool], [Node], false)}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: $funcType([Node], [$Int], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "LastChild", name: "LastChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NodeType", name: "NodeType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [], false)}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ParentElement", name: "ParentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: $funcType([], [Node], false)}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "SetNodeValue", name: "SetNodeValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTextContent", name: "SetTextContent", pkg: "", typ: $funcType([$String], [], false)}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}]);
	BasicNode.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	Element.init([{prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "Attributes", name: "Attributes", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "Class", name: "Class", pkg: "", typ: $funcType([], [ptrType$20], false)}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: $funcType([$Bool], [Node], false)}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: $funcType([Node], [$Int], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: $funcType([Event], [$Bool], false)}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "GetAttribute", name: "GetAttribute", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "GetAttributeNS", name: "GetAttributeNS", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "GetBoundingClientRect", name: "GetBoundingClientRect", pkg: "", typ: $funcType([], [ClientRect], false)}, {prop: "GetElementsByClassName", name: "GetElementsByClassName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagName", name: "GetElementsByTagName", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "GetElementsByTagNameNS", name: "GetElementsByTagNameNS", pkg: "", typ: $funcType([$String, $String], [sliceType$3], false)}, {prop: "HasAttribute", name: "HasAttribute", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "HasAttributeNS", name: "HasAttributeNS", pkg: "", typ: $funcType([$String, $String], [$Bool], false)}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$String], false)}, {prop: "InnerHTML", name: "InnerHTML", pkg: "", typ: $funcType([], [$String], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: $funcType([Node], [$Bool], false)}, {prop: "LastChild", name: "LastChild", pkg: "", typ: $funcType([], [Node], false)}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NextElementSibling", name: "NextElementSibling", pkg: "", typ: $funcType([], [Element], false)}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NodeType", name: "NodeType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [], false)}, {prop: "OuterHTML", name: "OuterHTML", pkg: "", typ: $funcType([], [$String], false)}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: $funcType([], [Document], false)}, {prop: "ParentElement", name: "ParentElement", pkg: "", typ: $funcType([], [Element], false)}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: $funcType([], [Node], false)}, {prop: "PreviousElementSibling", name: "PreviousElementSibling", pkg: "", typ: $funcType([], [Element], false)}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: $funcType([], [Node], false)}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: $funcType([$String], [Element], false)}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "RemoveAttribute", name: "RemoveAttribute", pkg: "", typ: $funcType([$String], [], false)}, {prop: "RemoveAttributeNS", name: "RemoveAttributeNS", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([Node], [], false)}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: $funcType([Node, Node], [], false)}, {prop: "SetAttribute", name: "SetAttribute", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "SetAttributeNS", name: "SetAttributeNS", pkg: "", typ: $funcType([$String, $String, $String], [], false)}, {prop: "SetID", name: "SetID", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetInnerHTML", name: "SetInnerHTML", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetNodeValue", name: "SetNodeValue", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetOuterHTML", name: "SetOuterHTML", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTextContent", name: "SetTextContent", pkg: "", typ: $funcType([$String], [], false)}, {prop: "TagName", name: "TagName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}]);
	ClientRect.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "Height", name: "Height", exported: true, typ: $Float64, tag: "js:\"height\""}, {prop: "Width", name: "Width", exported: true, typ: $Float64, tag: "js:\"width\""}, {prop: "Left", name: "Left", exported: true, typ: $Float64, tag: "js:\"left\""}, {prop: "Right", name: "Right", exported: true, typ: $Float64, tag: "js:\"right\""}, {prop: "Top", name: "Top", exported: true, typ: $Float64, tag: "js:\"top\""}, {prop: "Bottom", name: "Bottom", exported: true, typ: $Float64, tag: "js:\"bottom\""}]);
	BasicHTMLElement.init("", [{prop: "BasicElement", name: "", exported: true, typ: ptrType$31, tag: ""}]);
	BasicElement.init("", [{prop: "BasicNode", name: "", exported: true, typ: ptrType$22, tag: ""}]);
	HTMLAnchorElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "URLUtils", name: "", exported: true, typ: ptrType$2, tag: ""}, {prop: "HrefLang", name: "HrefLang", exported: true, typ: $String, tag: "js:\"hreflang\""}, {prop: "Media", name: "Media", exported: true, typ: $String, tag: "js:\"media\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "Target", name: "Target", exported: true, typ: $String, tag: "js:\"target\""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: "js:\"text\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	HTMLAppletElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Alt", name: "Alt", exported: true, typ: $String, tag: "js:\"alt\""}, {prop: "Coords", name: "Coords", exported: true, typ: $String, tag: "js:\"coords\""}, {prop: "HrefLang", name: "HrefLang", exported: true, typ: $String, tag: "js:\"hreflang\""}, {prop: "Media", name: "Media", exported: true, typ: $String, tag: "js:\"media\""}, {prop: "Search", name: "Search", exported: true, typ: $String, tag: "js:\"search\""}, {prop: "Shape", name: "Shape", exported: true, typ: $String, tag: "js:\"shape\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "Target", name: "Target", exported: true, typ: $String, tag: "js:\"target\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	HTMLAreaElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "URLUtils", name: "", exported: true, typ: ptrType$2, tag: ""}, {prop: "Alt", name: "Alt", exported: true, typ: $String, tag: "js:\"alt\""}, {prop: "Coords", name: "Coords", exported: true, typ: $String, tag: "js:\"coords\""}, {prop: "HrefLang", name: "HrefLang", exported: true, typ: $String, tag: "js:\"hreflang\""}, {prop: "Media", name: "Media", exported: true, typ: $String, tag: "js:\"media\""}, {prop: "Search", name: "Search", exported: true, typ: $String, tag: "js:\"search\""}, {prop: "Shape", name: "Shape", exported: true, typ: $String, tag: "js:\"shape\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "Target", name: "Target", exported: true, typ: $String, tag: "js:\"target\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	HTMLAudioElement.init("", [{prop: "HTMLMediaElement", name: "", exported: true, typ: ptrType$3, tag: ""}]);
	HTMLBRElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLBaseElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLBodyElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	ValidityState.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "CustomError", name: "CustomError", exported: true, typ: $Bool, tag: "js:\"customError\""}, {prop: "PatternMismatch", name: "PatternMismatch", exported: true, typ: $Bool, tag: "js:\"patternMismatch\""}, {prop: "RangeOverflow", name: "RangeOverflow", exported: true, typ: $Bool, tag: "js:\"rangeOverflow\""}, {prop: "RangeUnderflow", name: "RangeUnderflow", exported: true, typ: $Bool, tag: "js:\"rangeUnderflow\""}, {prop: "StepMismatch", name: "StepMismatch", exported: true, typ: $Bool, tag: "js:\"stepMismatch\""}, {prop: "TooLong", name: "TooLong", exported: true, typ: $Bool, tag: "js:\"tooLong\""}, {prop: "TypeMismatch", name: "TypeMismatch", exported: true, typ: $Bool, tag: "js:\"typeMismatch\""}, {prop: "Valid", name: "Valid", exported: true, typ: $Bool, tag: "js:\"valid\""}, {prop: "ValueMissing", name: "ValueMissing", exported: true, typ: $Bool, tag: "js:\"valueMissing\""}]);
	HTMLButtonElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "AutoFocus", name: "AutoFocus", exported: true, typ: $Bool, tag: "js:\"autofocus\""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "FormAction", name: "FormAction", exported: true, typ: $String, tag: "js:\"formAction\""}, {prop: "FormEncType", name: "FormEncType", exported: true, typ: $String, tag: "js:\"formEncType\""}, {prop: "FormMethod", name: "FormMethod", exported: true, typ: $String, tag: "js:\"formMethod\""}, {prop: "FormNoValidate", name: "FormNoValidate", exported: true, typ: $Bool, tag: "js:\"formNoValidate\""}, {prop: "FormTarget", name: "FormTarget", exported: true, typ: $String, tag: "js:\"formTarget\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	HTMLCanvasElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Height", name: "Height", exported: true, typ: $Int, tag: "js:\"height\""}, {prop: "Width", name: "Width", exported: true, typ: $Int, tag: "js:\"width\""}]);
	CanvasRenderingContext2D.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}, {prop: "FillStyle", name: "FillStyle", exported: true, typ: $String, tag: "js:\"fillStyle\""}, {prop: "StrokeStyle", name: "StrokeStyle", exported: true, typ: $String, tag: "js:\"strokeStyle\""}, {prop: "ShadowColor", name: "ShadowColor", exported: true, typ: $String, tag: "js:\"shadowColor\""}, {prop: "ShadowBlur", name: "ShadowBlur", exported: true, typ: $Int, tag: "js:\"shadowBlur\""}, {prop: "ShadowOffsetX", name: "ShadowOffsetX", exported: true, typ: $Int, tag: "js:\"shadowOffsetX\""}, {prop: "ShadowOffsetY", name: "ShadowOffsetY", exported: true, typ: $Int, tag: "js:\"shadowOffsetY\""}, {prop: "LineCap", name: "LineCap", exported: true, typ: $String, tag: "js:\"lineCap\""}, {prop: "LineJoin", name: "LineJoin", exported: true, typ: $String, tag: "js:\"lineJoin\""}, {prop: "LineWidth", name: "LineWidth", exported: true, typ: $Int, tag: "js:\"lineWidth\""}, {prop: "MiterLimit", name: "MiterLimit", exported: true, typ: $Int, tag: "js:\"miterLimit\""}, {prop: "Font", name: "Font", exported: true, typ: $String, tag: "js:\"font\""}, {prop: "TextAlign", name: "TextAlign", exported: true, typ: $String, tag: "js:\"textAlign\""}, {prop: "TextBaseline", name: "TextBaseline", exported: true, typ: $String, tag: "js:\"textBaseline\""}, {prop: "GlobalAlpha", name: "GlobalAlpha", exported: true, typ: $Float64, tag: "js:\"globalAlpha\""}, {prop: "GlobalCompositeOperation", name: "GlobalCompositeOperation", exported: true, typ: $String, tag: "js:\"globalCompositeOperation\""}]);
	HTMLDListElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLDataElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}]);
	HTMLDataListElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLDirectoryElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLDivElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLEmbedElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "Width", name: "Width", exported: true, typ: $String, tag: "js:\"width\""}]);
	HTMLFieldSetElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	HTMLFontElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLFormElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "AcceptCharset", name: "AcceptCharset", exported: true, typ: $String, tag: "js:\"acceptCharset\""}, {prop: "Action", name: "Action", exported: true, typ: $String, tag: "js:\"action\""}, {prop: "Autocomplete", name: "Autocomplete", exported: true, typ: $String, tag: "js:\"autocomplete\""}, {prop: "Encoding", name: "Encoding", exported: true, typ: $String, tag: "js:\"encoding\""}, {prop: "Enctype", name: "Enctype", exported: true, typ: $String, tag: "js:\"enctype\""}, {prop: "Length", name: "Length", exported: true, typ: $Int, tag: "js:\"length\""}, {prop: "Method", name: "Method", exported: true, typ: $String, tag: "js:\"method\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "NoValidate", name: "NoValidate", exported: true, typ: $Bool, tag: "js:\"noValidate\""}, {prop: "Target", name: "Target", exported: true, typ: $String, tag: "js:\"target\""}]);
	HTMLFrameElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLFrameSetElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLHRElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLHeadElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLHeadingElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLHtmlElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLIFrameElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Width", name: "Width", exported: true, typ: $String, tag: "js:\"width\""}, {prop: "Height", name: "Height", exported: true, typ: $String, tag: "js:\"height\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "SrcDoc", name: "SrcDoc", exported: true, typ: $String, tag: "js:\"srcdoc\""}, {prop: "Seamless", name: "Seamless", exported: true, typ: $Bool, tag: "js:\"seamless\""}]);
	HTMLImageElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Complete", name: "Complete", exported: true, typ: $Bool, tag: "js:\"complete\""}, {prop: "CrossOrigin", name: "CrossOrigin", exported: true, typ: $String, tag: "js:\"crossOrigin\""}, {prop: "Height", name: "Height", exported: true, typ: $Int, tag: "js:\"height\""}, {prop: "IsMap", name: "IsMap", exported: true, typ: $Bool, tag: "js:\"isMap\""}, {prop: "NaturalHeight", name: "NaturalHeight", exported: true, typ: $Int, tag: "js:\"naturalHeight\""}, {prop: "NaturalWidth", name: "NaturalWidth", exported: true, typ: $Int, tag: "js:\"naturalWidth\""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "UseMap", name: "UseMap", exported: true, typ: $String, tag: "js:\"useMap\""}, {prop: "Width", name: "Width", exported: true, typ: $Int, tag: "js:\"width\""}]);
	HTMLInputElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Accept", name: "Accept", exported: true, typ: $String, tag: "js:\"accept\""}, {prop: "Alt", name: "Alt", exported: true, typ: $String, tag: "js:\"alt\""}, {prop: "Autocomplete", name: "Autocomplete", exported: true, typ: $String, tag: "js:\"autocomplete\""}, {prop: "Autofocus", name: "Autofocus", exported: true, typ: $Bool, tag: "js:\"autofocus\""}, {prop: "Checked", name: "Checked", exported: true, typ: $Bool, tag: "js:\"checked\""}, {prop: "DefaultChecked", name: "DefaultChecked", exported: true, typ: $Bool, tag: "js:\"defaultChecked\""}, {prop: "DefaultValue", name: "DefaultValue", exported: true, typ: $String, tag: "js:\"defaultValue\""}, {prop: "DirName", name: "DirName", exported: true, typ: $String, tag: "js:\"dirName\""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "FormAction", name: "FormAction", exported: true, typ: $String, tag: "js:\"formAction\""}, {prop: "FormEncType", name: "FormEncType", exported: true, typ: $String, tag: "js:\"formEncType\""}, {prop: "FormMethod", name: "FormMethod", exported: true, typ: $String, tag: "js:\"formMethod\""}, {prop: "FormNoValidate", name: "FormNoValidate", exported: true, typ: $Bool, tag: "js:\"formNoValidate\""}, {prop: "FormTarget", name: "FormTarget", exported: true, typ: $String, tag: "js:\"formTarget\""}, {prop: "Height", name: "Height", exported: true, typ: $String, tag: "js:\"height\""}, {prop: "Indeterminate", name: "Indeterminate", exported: true, typ: $Bool, tag: "js:\"indeterminate\""}, {prop: "Max", name: "Max", exported: true, typ: $String, tag: "js:\"max\""}, {prop: "MaxLength", name: "MaxLength", exported: true, typ: $Int, tag: "js:\"maxLength\""}, {prop: "Min", name: "Min", exported: true, typ: $String, tag: "js:\"min\""}, {prop: "Multiple", name: "Multiple", exported: true, typ: $Bool, tag: "js:\"multiple\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Pattern", name: "Pattern", exported: true, typ: $String, tag: "js:\"pattern\""}, {prop: "Placeholder", name: "Placeholder", exported: true, typ: $String, tag: "js:\"placeholder\""}, {prop: "ReadOnly", name: "ReadOnly", exported: true, typ: $Bool, tag: "js:\"readOnly\""}, {prop: "Required", name: "Required", exported: true, typ: $Bool, tag: "js:\"required\""}, {prop: "SelectionDirection", name: "SelectionDirection", exported: true, typ: $String, tag: "js:\"selectionDirection\""}, {prop: "SelectionEnd", name: "SelectionEnd", exported: true, typ: $Int, tag: "js:\"selectionEnd\""}, {prop: "SelectionStart", name: "SelectionStart", exported: true, typ: $Int, tag: "js:\"selectionStart\""}, {prop: "Size", name: "Size", exported: true, typ: $Int, tag: "js:\"size\""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "Step", name: "Step", exported: true, typ: $String, tag: "js:\"step\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}, {prop: "ValueAsDate", name: "ValueAsDate", exported: true, typ: time.Time, tag: "js:\"valueAsDate\""}, {prop: "ValueAsNumber", name: "ValueAsNumber", exported: true, typ: $Float64, tag: "js:\"valueAsNumber\""}, {prop: "Width", name: "Width", exported: true, typ: $String, tag: "js:\"width\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	File.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	HTMLKeygenElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Autofocus", name: "Autofocus", exported: true, typ: $Bool, tag: "js:\"autofocus\""}, {prop: "Challenge", name: "Challenge", exported: true, typ: $String, tag: "js:\"challenge\""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "Keytype", name: "Keytype", exported: true, typ: $String, tag: "js:\"keytype\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	HTMLLIElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $Int, tag: "js:\"value\""}]);
	HTMLLabelElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "For", name: "For", exported: true, typ: $String, tag: "js:\"htmlFor\""}]);
	HTMLLegendElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLLinkElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "Href", name: "Href", exported: true, typ: $String, tag: "js:\"href\""}, {prop: "HrefLang", name: "HrefLang", exported: true, typ: $String, tag: "js:\"hrefLang\""}, {prop: "Media", name: "Media", exported: true, typ: $String, tag: "js:\"media\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	HTMLMapElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}]);
	HTMLMediaElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Paused", name: "Paused", exported: true, typ: $Bool, tag: "js:\"paused\""}]);
	HTMLMenuElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLMetaElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Content", name: "Content", exported: true, typ: $String, tag: "js:\"content\""}, {prop: "HTTPEquiv", name: "HTTPEquiv", exported: true, typ: $String, tag: "js:\"httpEquiv\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}]);
	HTMLMeterElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "High", name: "High", exported: true, typ: $Float64, tag: "js:\"high\""}, {prop: "Low", name: "Low", exported: true, typ: $Float64, tag: "js:\"low\""}, {prop: "Max", name: "Max", exported: true, typ: $Float64, tag: "js:\"max\""}, {prop: "Min", name: "Min", exported: true, typ: $Float64, tag: "js:\"min\""}, {prop: "Optimum", name: "Optimum", exported: true, typ: $Float64, tag: "js:\"optimum\""}]);
	HTMLModElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Cite", name: "Cite", exported: true, typ: $String, tag: "js:\"cite\""}, {prop: "DateTime", name: "DateTime", exported: true, typ: $String, tag: "js:\"dateTime\""}]);
	HTMLOListElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Reversed", name: "Reversed", exported: true, typ: $Bool, tag: "js:\"reversed\""}, {prop: "Start", name: "Start", exported: true, typ: $Int, tag: "js:\"start\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	HTMLObjectElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Data", name: "Data", exported: true, typ: $String, tag: "js:\"data\""}, {prop: "Height", name: "Height", exported: true, typ: $String, tag: "js:\"height\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "TypeMustMatch", name: "TypeMustMatch", exported: true, typ: $Bool, tag: "js:\"typeMustMatch\""}, {prop: "UseMap", name: "UseMap", exported: true, typ: $String, tag: "js:\"useMap\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "With", name: "With", exported: true, typ: $String, tag: "js:\"with\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	HTMLOptGroupElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "Label", name: "Label", exported: true, typ: $String, tag: "js:\"label\""}]);
	HTMLOptionElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "DefaultSelected", name: "DefaultSelected", exported: true, typ: $Bool, tag: "js:\"defaultSelected\""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: "js:\"index\""}, {prop: "Label", name: "Label", exported: true, typ: $String, tag: "js:\"label\""}, {prop: "Selected", name: "Selected", exported: true, typ: $Bool, tag: "js:\"selected\""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: "js:\"text\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}]);
	HTMLOutputElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "DefaultValue", name: "DefaultValue", exported: true, typ: $String, tag: "js:\"defaultValue\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	HTMLParagraphElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLParamElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}]);
	HTMLPreElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLProgressElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Max", name: "Max", exported: true, typ: $Float64, tag: "js:\"max\""}, {prop: "Position", name: "Position", exported: true, typ: $Float64, tag: "js:\"position\""}, {prop: "Value", name: "Value", exported: true, typ: $Float64, tag: "js:\"value\""}]);
	HTMLQuoteElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Cite", name: "Cite", exported: true, typ: $String, tag: "js:\"cite\""}]);
	HTMLScriptElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "Charset", name: "Charset", exported: true, typ: $String, tag: "js:\"charset\""}, {prop: "Async", name: "Async", exported: true, typ: $Bool, tag: "js:\"async\""}, {prop: "Defer", name: "Defer", exported: true, typ: $Bool, tag: "js:\"defer\""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: "js:\"text\""}]);
	HTMLSelectElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Autofocus", name: "Autofocus", exported: true, typ: $Bool, tag: "js:\"autofocus\""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "Length", name: "Length", exported: true, typ: $Int, tag: "js:\"length\""}, {prop: "Multiple", name: "Multiple", exported: true, typ: $Bool, tag: "js:\"multiple\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Required", name: "Required", exported: true, typ: $Bool, tag: "js:\"required\""}, {prop: "SelectedIndex", name: "SelectedIndex", exported: true, typ: $Int, tag: "js:\"selectedIndex\""}, {prop: "Size", name: "Size", exported: true, typ: $Int, tag: "js:\"size\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}]);
	HTMLSourceElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Media", name: "Media", exported: true, typ: $String, tag: "js:\"media\""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}]);
	HTMLSpanElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLStyleElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLTableCaptionElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLTableCellElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "ColSpan", name: "ColSpan", exported: true, typ: $Int, tag: "js:\"colSpan\""}, {prop: "RowSpan", name: "RowSpan", exported: true, typ: $Int, tag: "js:\"rowSpan\""}, {prop: "CellIndex", name: "CellIndex", exported: true, typ: $Int, tag: "js:\"cellIndex\""}]);
	HTMLTableColElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Span", name: "Span", exported: true, typ: $Int, tag: "js:\"span\""}]);
	HTMLTableDataCellElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLTableElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLTableHeaderCellElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Abbr", name: "Abbr", exported: true, typ: $String, tag: "js:\"abbr\""}, {prop: "Scope", name: "Scope", exported: true, typ: $String, tag: "js:\"scope\""}]);
	HTMLTableRowElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "RowIndex", name: "RowIndex", exported: true, typ: $Int, tag: "js:\"rowIndex\""}, {prop: "SectionRowIndex", name: "SectionRowIndex", exported: true, typ: $Int, tag: "js:\"sectionRowIndex\""}]);
	HTMLTableSectionElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLTextAreaElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Autocomplete", name: "Autocomplete", exported: true, typ: $String, tag: "js:\"autocomplete\""}, {prop: "Autofocus", name: "Autofocus", exported: true, typ: $Bool, tag: "js:\"autofocus\""}, {prop: "Cols", name: "Cols", exported: true, typ: $Int, tag: "js:\"cols\""}, {prop: "DefaultValue", name: "DefaultValue", exported: true, typ: $String, tag: "js:\"defaultValue\""}, {prop: "DirName", name: "DirName", exported: true, typ: $String, tag: "js:\"dirName\""}, {prop: "Disabled", name: "Disabled", exported: true, typ: $Bool, tag: "js:\"disabled\""}, {prop: "MaxLength", name: "MaxLength", exported: true, typ: $Int, tag: "js:\"maxLength\""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: "js:\"name\""}, {prop: "Placeholder", name: "Placeholder", exported: true, typ: $String, tag: "js:\"placeholder\""}, {prop: "ReadOnly", name: "ReadOnly", exported: true, typ: $Bool, tag: "js:\"readOnly\""}, {prop: "Required", name: "Required", exported: true, typ: $Bool, tag: "js:\"required\""}, {prop: "Rows", name: "Rows", exported: true, typ: $Int, tag: "js:\"rows\""}, {prop: "SelectionDirection", name: "SelectionDirection", exported: true, typ: $String, tag: "js:\"selectionDirection\""}, {prop: "SelectionStart", name: "SelectionStart", exported: true, typ: $Int, tag: "js:\"selectionStart\""}, {prop: "SelectionEnd", name: "SelectionEnd", exported: true, typ: $Int, tag: "js:\"selectionEnd\""}, {prop: "TabIndex", name: "TabIndex", exported: true, typ: $Int, tag: "js:\"tabIndex\""}, {prop: "TextLength", name: "TextLength", exported: true, typ: $Int, tag: "js:\"textLength\""}, {prop: "Type", name: "Type", exported: true, typ: $String, tag: "js:\"type\""}, {prop: "ValidationMessage", name: "ValidationMessage", exported: true, typ: $String, tag: "js:\"validationMessage\""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: "js:\"value\""}, {prop: "WillValidate", name: "WillValidate", exported: true, typ: $Bool, tag: "js:\"willValidate\""}, {prop: "Wrap", name: "Wrap", exported: true, typ: $String, tag: "js:\"wrap\""}]);
	HTMLTimeElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "DateTime", name: "DateTime", exported: true, typ: $String, tag: "js:\"dateTime\""}]);
	HTMLTitleElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: "js:\"text\""}]);
	TextTrack.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	HTMLTrackElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}, {prop: "Kind", name: "Kind", exported: true, typ: $String, tag: "js:\"kind\""}, {prop: "Src", name: "Src", exported: true, typ: $String, tag: "js:\"src\""}, {prop: "Srclang", name: "Srclang", exported: true, typ: $String, tag: "js:\"srclang\""}, {prop: "Label", name: "Label", exported: true, typ: $String, tag: "js:\"label\""}, {prop: "Default", name: "Default", exported: true, typ: $Bool, tag: "js:\"default\""}, {prop: "ReadyState", name: "ReadyState", exported: true, typ: $Int, tag: "js:\"readyState\""}]);
	HTMLUListElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLUnknownElement.init("", [{prop: "BasicHTMLElement", name: "", exported: true, typ: ptrType$1, tag: ""}]);
	HTMLVideoElement.init("", [{prop: "HTMLMediaElement", name: "", exported: true, typ: ptrType$3, tag: ""}]);
	CSSStyleDeclaration.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	Text.init("", [{prop: "BasicNode", name: "", exported: true, typ: ptrType$22, tag: ""}]);
	Event.init([{prop: "Bubbles", name: "Bubbles", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Cancelable", name: "Cancelable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CurrentTarget", name: "CurrentTarget", pkg: "", typ: $funcType([], [Element], false)}, {prop: "DefaultPrevented", name: "DefaultPrevented", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "EventPhase", name: "EventPhase", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "PreventDefault", name: "PreventDefault", pkg: "", typ: $funcType([], [], false)}, {prop: "StopImmediatePropagation", name: "StopImmediatePropagation", pkg: "", typ: $funcType([], [], false)}, {prop: "StopPropagation", name: "StopPropagation", pkg: "", typ: $funcType([], [], false)}, {prop: "Target", name: "Target", pkg: "", typ: $funcType([], [Element], false)}, {prop: "Timestamp", name: "Timestamp", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}]);
	BasicEvent.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	AnimationEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	AudioProcessingEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	BeforeInputEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	BeforeUnloadEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	BlobEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	ClipboardEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	CloseEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}, {prop: "Code", name: "Code", exported: true, typ: $Int, tag: "js:\"code\""}, {prop: "Reason", name: "Reason", exported: true, typ: $String, tag: "js:\"reason\""}, {prop: "WasClean", name: "WasClean", exported: true, typ: $Bool, tag: "js:\"wasClean\""}]);
	CompositionEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	CSSFontFaceLoadEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	CustomEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	DeviceLightEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	DeviceMotionEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	DeviceOrientationEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	DeviceProximityEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	DOMTransactionEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	DragEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	EditingBeforeInputEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	ErrorEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	FocusEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	GamepadEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	HashChangeEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	IDBVersionChangeEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	KeyboardEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}, {prop: "AltKey", name: "AltKey", exported: true, typ: $Bool, tag: "js:\"altKey\""}, {prop: "CharCode", name: "CharCode", exported: true, typ: $Int, tag: "js:\"charCode\""}, {prop: "CtrlKey", name: "CtrlKey", exported: true, typ: $Bool, tag: "js:\"ctrlKey\""}, {prop: "Key", name: "Key", exported: true, typ: $String, tag: "js:\"key\""}, {prop: "KeyIdentifier", name: "KeyIdentifier", exported: true, typ: $String, tag: "js:\"keyIdentifier\""}, {prop: "KeyCode", name: "KeyCode", exported: true, typ: $Int, tag: "js:\"keyCode\""}, {prop: "Locale", name: "Locale", exported: true, typ: $String, tag: "js:\"locale\""}, {prop: "Location", name: "Location", exported: true, typ: $Int, tag: "js:\"location\""}, {prop: "KeyLocation", name: "KeyLocation", exported: true, typ: $Int, tag: "js:\"keyLocation\""}, {prop: "MetaKey", name: "MetaKey", exported: true, typ: $Bool, tag: "js:\"metaKey\""}, {prop: "Repeat", name: "Repeat", exported: true, typ: $Bool, tag: "js:\"repeat\""}, {prop: "ShiftKey", name: "ShiftKey", exported: true, typ: $Bool, tag: "js:\"shiftKey\""}]);
	MediaStreamEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	MessageEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}, {prop: "Data", name: "Data", exported: true, typ: ptrType, tag: "js:\"data\""}]);
	MouseEvent.init("", [{prop: "UIEvent", name: "", exported: true, typ: ptrType$19, tag: ""}, {prop: "AltKey", name: "AltKey", exported: true, typ: $Bool, tag: "js:\"altKey\""}, {prop: "Button", name: "Button", exported: true, typ: $Int, tag: "js:\"button\""}, {prop: "ClientX", name: "ClientX", exported: true, typ: $Int, tag: "js:\"clientX\""}, {prop: "ClientY", name: "ClientY", exported: true, typ: $Int, tag: "js:\"clientY\""}, {prop: "CtrlKey", name: "CtrlKey", exported: true, typ: $Bool, tag: "js:\"ctrlKey\""}, {prop: "MetaKey", name: "MetaKey", exported: true, typ: $Bool, tag: "js:\"metaKey\""}, {prop: "MovementX", name: "MovementX", exported: true, typ: $Int, tag: "js:\"movementX\""}, {prop: "MovementY", name: "MovementY", exported: true, typ: $Int, tag: "js:\"movementY\""}, {prop: "ScreenX", name: "ScreenX", exported: true, typ: $Int, tag: "js:\"screenX\""}, {prop: "ScreenY", name: "ScreenY", exported: true, typ: $Int, tag: "js:\"screenY\""}, {prop: "ShiftKey", name: "ShiftKey", exported: true, typ: $Bool, tag: "js:\"shiftKey\""}]);
	MutationEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	OfflineAudioCompletionEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	PageTransitionEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	PointerEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	PopStateEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	ProgressEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	RelatedEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	RTCPeerConnectionIceEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	SensorEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	StorageEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	SVGEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	SVGZoomEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	TimeEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	TouchEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	TrackEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	TransitionEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	UIEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	UserProximityEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}]);
	WheelEvent.init("", [{prop: "BasicEvent", name: "", exported: true, typ: ptrType$18, tag: ""}, {prop: "DeltaX", name: "DeltaX", exported: true, typ: $Float64, tag: "js:\"deltaX\""}, {prop: "DeltaY", name: "DeltaY", exported: true, typ: $Float64, tag: "js:\"deltaY\""}, {prop: "DeltaZ", name: "DeltaZ", exported: true, typ: $Float64, tag: "js:\"deltaZ\""}, {prop: "DeltaMode", name: "DeltaMode", exported: true, typ: $Int, tag: "js:\"deltaMode\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["html"] = (function() {
	var $pkg = {}, $init, strings, utf8, sliceType, arrayType, sliceType$1, entity, entity2, replacementTable, htmlEscaper, unescapeEntity, UnescapeString;
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($String);
	arrayType = $arrayType($Int32, 2);
	sliceType$1 = $sliceType($Uint8);
	unescapeEntity = function(b, dst, src) {
		var $ptr, _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, c, c$1, dst, dst1, dst1$1, entityName, hex, i, j, maxLen, s, src, src1, x, x$1, x$2, x$3, x$4, x$5;
		dst1 = 0;
		src1 = 0;
		_tmp = 1;
		_tmp$1 = $subslice(b, src);
		i = _tmp;
		s = _tmp$1;
		if (s.$length <= 1) {
			((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
			_tmp$2 = dst + 1 >> 0;
			_tmp$3 = src + 1 >> 0;
			dst1 = _tmp$2;
			src1 = _tmp$3;
			return [dst1, src1];
		}
		if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 35) {
			if (s.$length <= 3) {
				((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
				_tmp$4 = dst + 1 >> 0;
				_tmp$5 = src + 1 >> 0;
				dst1 = _tmp$4;
				src1 = _tmp$5;
				return [dst1, src1];
			}
			i = i + (1) >> 0;
			c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			hex = false;
			if ((c === 120) || (c === 88)) {
				hex = true;
				i = i + (1) >> 0;
			}
			x = 0;
			while (true) {
				if (!(i < s.$length)) { break; }
				c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
				i = i + (1) >> 0;
				if (hex) {
					if (48 <= c && c <= 57) {
						x = (($imul(16, x)) + (c >> 0) >> 0) - 48 >> 0;
						continue;
					} else if (97 <= c && c <= 102) {
						x = ((($imul(16, x)) + (c >> 0) >> 0) - 97 >> 0) + 10 >> 0;
						continue;
					} else if (65 <= c && c <= 70) {
						x = ((($imul(16, x)) + (c >> 0) >> 0) - 65 >> 0) + 10 >> 0;
						continue;
					}
				} else if (48 <= c && c <= 57) {
					x = (($imul(10, x)) + (c >> 0) >> 0) - 48 >> 0;
					continue;
				}
				if (!((c === 59))) {
					i = i - (1) >> 0;
				}
				break;
			}
			if (i <= 3) {
				((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
				_tmp$6 = dst + 1 >> 0;
				_tmp$7 = src + 1 >> 0;
				dst1 = _tmp$6;
				src1 = _tmp$7;
				return [dst1, src1];
			}
			if (128 <= x && x <= 159) {
				x = (x$1 = x - 128 >> 0, ((x$1 < 0 || x$1 >= replacementTable.length) ? $throwRuntimeError("index out of range") : replacementTable[x$1]));
			} else if ((x === 0) || (55296 <= x && x <= 57343) || x > 1114111) {
				x = 65533;
			}
			_tmp$8 = dst + utf8.EncodeRune($subslice(b, dst), x) >> 0;
			_tmp$9 = src + i >> 0;
			dst1 = _tmp$8;
			src1 = _tmp$9;
			return [dst1, src1];
		}
		while (true) {
			if (!(i < s.$length)) { break; }
			c$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			i = i + (1) >> 0;
			if (97 <= c$1 && c$1 <= 122 || 65 <= c$1 && c$1 <= 90 || 48 <= c$1 && c$1 <= 57) {
				continue;
			}
			if (!((c$1 === 59))) {
				i = i - (1) >> 0;
			}
			break;
		}
		entityName = $subslice(s, 1, i);
		if (entityName.$length === 0) {
		} else if (false && !(((x$2 = entityName.$length - 1 >> 0, ((x$2 < 0 || x$2 >= entityName.$length) ? $throwRuntimeError("index out of range") : entityName.$array[entityName.$offset + x$2])) === 59)) && s.$length > i && (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 61)) {
		} else {
			x$3 = (_entry = entity[$String.keyFor($bytesToString(entityName))], _entry !== undefined ? _entry.v : 0);
			if (!((x$3 === 0))) {
				_tmp$10 = dst + utf8.EncodeRune($subslice(b, dst), x$3) >> 0;
				_tmp$11 = src + i >> 0;
				dst1 = _tmp$10;
				src1 = _tmp$11;
				return [dst1, src1];
			} else {
				x$4 = $clone((_entry$1 = entity2[$String.keyFor($bytesToString(entityName))], _entry$1 !== undefined ? _entry$1.v : arrayType.zero()), arrayType);
				if (!((x$4[0] === 0))) {
					dst1$1 = dst + utf8.EncodeRune($subslice(b, dst), x$4[0]) >> 0;
					_tmp$12 = dst1$1 + utf8.EncodeRune($subslice(b, dst1$1), x$4[1]) >> 0;
					_tmp$13 = src + i >> 0;
					dst1 = _tmp$12;
					src1 = _tmp$13;
					return [dst1, src1];
				} else if (true) {
					maxLen = entityName.$length - 1 >> 0;
					if (maxLen > 6) {
						maxLen = 6;
					}
					j = maxLen;
					while (true) {
						if (!(j > 1)) { break; }
						x$5 = (_entry$2 = entity[$String.keyFor($bytesToString($subslice(entityName, 0, j)))], _entry$2 !== undefined ? _entry$2.v : 0);
						if (!((x$5 === 0))) {
							_tmp$14 = dst + utf8.EncodeRune($subslice(b, dst), x$5) >> 0;
							_tmp$15 = (src + j >> 0) + 1 >> 0;
							dst1 = _tmp$14;
							src1 = _tmp$15;
							return [dst1, src1];
						}
						j = j - (1) >> 0;
					}
				}
			}
		}
		_tmp$16 = dst + i >> 0;
		_tmp$17 = src + i >> 0;
		dst1 = _tmp$16;
		src1 = _tmp$17;
		$copySlice($subslice(b, dst, dst1), $subslice(b, src, src1));
		_tmp$18 = dst1;
		_tmp$19 = src1;
		dst1 = _tmp$18;
		src1 = _tmp$19;
		return [dst1, src1];
	};
	UnescapeString = function(s) {
		var $ptr, _tuple, _tuple$1, b, dst, i, s, src;
		i = strings.IndexByte(s, 38);
		if (i < 0) {
			return s;
		}
		b = new sliceType$1($stringToBytes(s));
		_tuple = unescapeEntity(b, i, i);
		dst = _tuple[0];
		src = _tuple[1];
		while (true) {
			if (!($substring(s, src).length > 0)) { break; }
			if (s.charCodeAt(src) === 38) {
				i = 0;
			} else {
				i = strings.IndexByte($substring(s, src), 38);
			}
			if (i < 0) {
				dst = dst + ($copyString($subslice(b, dst), $substring(s, src))) >> 0;
				break;
			}
			if (i > 0) {
				$copyString($subslice(b, dst), $substring(s, src, (src + i >> 0)));
			}
			_tuple$1 = unescapeEntity(b, dst + i >> 0, src + i >> 0);
			dst = _tuple$1[0];
			src = _tuple$1[1];
		}
		return $bytesToString($subslice(b, 0, dst));
	};
	$pkg.UnescapeString = UnescapeString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = strings.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		entity = $makeMap($String.keyFor, [{ k: "AElig;", v: 198 }, { k: "AMP;", v: 38 }, { k: "Aacute;", v: 193 }, { k: "Abreve;", v: 258 }, { k: "Acirc;", v: 194 }, { k: "Acy;", v: 1040 }, { k: "Afr;", v: 120068 }, { k: "Agrave;", v: 192 }, { k: "Alpha;", v: 913 }, { k: "Amacr;", v: 256 }, { k: "And;", v: 10835 }, { k: "Aogon;", v: 260 }, { k: "Aopf;", v: 120120 }, { k: "ApplyFunction;", v: 8289 }, { k: "Aring;", v: 197 }, { k: "Ascr;", v: 119964 }, { k: "Assign;", v: 8788 }, { k: "Atilde;", v: 195 }, { k: "Auml;", v: 196 }, { k: "Backslash;", v: 8726 }, { k: "Barv;", v: 10983 }, { k: "Barwed;", v: 8966 }, { k: "Bcy;", v: 1041 }, { k: "Because;", v: 8757 }, { k: "Bernoullis;", v: 8492 }, { k: "Beta;", v: 914 }, { k: "Bfr;", v: 120069 }, { k: "Bopf;", v: 120121 }, { k: "Breve;", v: 728 }, { k: "Bscr;", v: 8492 }, { k: "Bumpeq;", v: 8782 }, { k: "CHcy;", v: 1063 }, { k: "COPY;", v: 169 }, { k: "Cacute;", v: 262 }, { k: "Cap;", v: 8914 }, { k: "CapitalDifferentialD;", v: 8517 }, { k: "Cayleys;", v: 8493 }, { k: "Ccaron;", v: 268 }, { k: "Ccedil;", v: 199 }, { k: "Ccirc;", v: 264 }, { k: "Cconint;", v: 8752 }, { k: "Cdot;", v: 266 }, { k: "Cedilla;", v: 184 }, { k: "CenterDot;", v: 183 }, { k: "Cfr;", v: 8493 }, { k: "Chi;", v: 935 }, { k: "CircleDot;", v: 8857 }, { k: "CircleMinus;", v: 8854 }, { k: "CirclePlus;", v: 8853 }, { k: "CircleTimes;", v: 8855 }, { k: "ClockwiseContourIntegral;", v: 8754 }, { k: "CloseCurlyDoubleQuote;", v: 8221 }, { k: "CloseCurlyQuote;", v: 8217 }, { k: "Colon;", v: 8759 }, { k: "Colone;", v: 10868 }, { k: "Congruent;", v: 8801 }, { k: "Conint;", v: 8751 }, { k: "ContourIntegral;", v: 8750 }, { k: "Copf;", v: 8450 }, { k: "Coproduct;", v: 8720 }, { k: "CounterClockwiseContourIntegral;", v: 8755 }, { k: "Cross;", v: 10799 }, { k: "Cscr;", v: 119966 }, { k: "Cup;", v: 8915 }, { k: "CupCap;", v: 8781 }, { k: "DD;", v: 8517 }, { k: "DDotrahd;", v: 10513 }, { k: "DJcy;", v: 1026 }, { k: "DScy;", v: 1029 }, { k: "DZcy;", v: 1039 }, { k: "Dagger;", v: 8225 }, { k: "Darr;", v: 8609 }, { k: "Dashv;", v: 10980 }, { k: "Dcaron;", v: 270 }, { k: "Dcy;", v: 1044 }, { k: "Del;", v: 8711 }, { k: "Delta;", v: 916 }, { k: "Dfr;", v: 120071 }, { k: "DiacriticalAcute;", v: 180 }, { k: "DiacriticalDot;", v: 729 }, { k: "DiacriticalDoubleAcute;", v: 733 }, { k: "DiacriticalGrave;", v: 96 }, { k: "DiacriticalTilde;", v: 732 }, { k: "Diamond;", v: 8900 }, { k: "DifferentialD;", v: 8518 }, { k: "Dopf;", v: 120123 }, { k: "Dot;", v: 168 }, { k: "DotDot;", v: 8412 }, { k: "DotEqual;", v: 8784 }, { k: "DoubleContourIntegral;", v: 8751 }, { k: "DoubleDot;", v: 168 }, { k: "DoubleDownArrow;", v: 8659 }, { k: "DoubleLeftArrow;", v: 8656 }, { k: "DoubleLeftRightArrow;", v: 8660 }, { k: "DoubleLeftTee;", v: 10980 }, { k: "DoubleLongLeftArrow;", v: 10232 }, { k: "DoubleLongLeftRightArrow;", v: 10234 }, { k: "DoubleLongRightArrow;", v: 10233 }, { k: "DoubleRightArrow;", v: 8658 }, { k: "DoubleRightTee;", v: 8872 }, { k: "DoubleUpArrow;", v: 8657 }, { k: "DoubleUpDownArrow;", v: 8661 }, { k: "DoubleVerticalBar;", v: 8741 }, { k: "DownArrow;", v: 8595 }, { k: "DownArrowBar;", v: 10515 }, { k: "DownArrowUpArrow;", v: 8693 }, { k: "DownBreve;", v: 785 }, { k: "DownLeftRightVector;", v: 10576 }, { k: "DownLeftTeeVector;", v: 10590 }, { k: "DownLeftVector;", v: 8637 }, { k: "DownLeftVectorBar;", v: 10582 }, { k: "DownRightTeeVector;", v: 10591 }, { k: "DownRightVector;", v: 8641 }, { k: "DownRightVectorBar;", v: 10583 }, { k: "DownTee;", v: 8868 }, { k: "DownTeeArrow;", v: 8615 }, { k: "Downarrow;", v: 8659 }, { k: "Dscr;", v: 119967 }, { k: "Dstrok;", v: 272 }, { k: "ENG;", v: 330 }, { k: "ETH;", v: 208 }, { k: "Eacute;", v: 201 }, { k: "Ecaron;", v: 282 }, { k: "Ecirc;", v: 202 }, { k: "Ecy;", v: 1069 }, { k: "Edot;", v: 278 }, { k: "Efr;", v: 120072 }, { k: "Egrave;", v: 200 }, { k: "Element;", v: 8712 }, { k: "Emacr;", v: 274 }, { k: "EmptySmallSquare;", v: 9723 }, { k: "EmptyVerySmallSquare;", v: 9643 }, { k: "Eogon;", v: 280 }, { k: "Eopf;", v: 120124 }, { k: "Epsilon;", v: 917 }, { k: "Equal;", v: 10869 }, { k: "EqualTilde;", v: 8770 }, { k: "Equilibrium;", v: 8652 }, { k: "Escr;", v: 8496 }, { k: "Esim;", v: 10867 }, { k: "Eta;", v: 919 }, { k: "Euml;", v: 203 }, { k: "Exists;", v: 8707 }, { k: "ExponentialE;", v: 8519 }, { k: "Fcy;", v: 1060 }, { k: "Ffr;", v: 120073 }, { k: "FilledSmallSquare;", v: 9724 }, { k: "FilledVerySmallSquare;", v: 9642 }, { k: "Fopf;", v: 120125 }, { k: "ForAll;", v: 8704 }, { k: "Fouriertrf;", v: 8497 }, { k: "Fscr;", v: 8497 }, { k: "GJcy;", v: 1027 }, { k: "GT;", v: 62 }, { k: "Gamma;", v: 915 }, { k: "Gammad;", v: 988 }, { k: "Gbreve;", v: 286 }, { k: "Gcedil;", v: 290 }, { k: "Gcirc;", v: 284 }, { k: "Gcy;", v: 1043 }, { k: "Gdot;", v: 288 }, { k: "Gfr;", v: 120074 }, { k: "Gg;", v: 8921 }, { k: "Gopf;", v: 120126 }, { k: "GreaterEqual;", v: 8805 }, { k: "GreaterEqualLess;", v: 8923 }, { k: "GreaterFullEqual;", v: 8807 }, { k: "GreaterGreater;", v: 10914 }, { k: "GreaterLess;", v: 8823 }, { k: "GreaterSlantEqual;", v: 10878 }, { k: "GreaterTilde;", v: 8819 }, { k: "Gscr;", v: 119970 }, { k: "Gt;", v: 8811 }, { k: "HARDcy;", v: 1066 }, { k: "Hacek;", v: 711 }, { k: "Hat;", v: 94 }, { k: "Hcirc;", v: 292 }, { k: "Hfr;", v: 8460 }, { k: "HilbertSpace;", v: 8459 }, { k: "Hopf;", v: 8461 }, { k: "HorizontalLine;", v: 9472 }, { k: "Hscr;", v: 8459 }, { k: "Hstrok;", v: 294 }, { k: "HumpDownHump;", v: 8782 }, { k: "HumpEqual;", v: 8783 }, { k: "IEcy;", v: 1045 }, { k: "IJlig;", v: 306 }, { k: "IOcy;", v: 1025 }, { k: "Iacute;", v: 205 }, { k: "Icirc;", v: 206 }, { k: "Icy;", v: 1048 }, { k: "Idot;", v: 304 }, { k: "Ifr;", v: 8465 }, { k: "Igrave;", v: 204 }, { k: "Im;", v: 8465 }, { k: "Imacr;", v: 298 }, { k: "ImaginaryI;", v: 8520 }, { k: "Implies;", v: 8658 }, { k: "Int;", v: 8748 }, { k: "Integral;", v: 8747 }, { k: "Intersection;", v: 8898 }, { k: "InvisibleComma;", v: 8291 }, { k: "InvisibleTimes;", v: 8290 }, { k: "Iogon;", v: 302 }, { k: "Iopf;", v: 120128 }, { k: "Iota;", v: 921 }, { k: "Iscr;", v: 8464 }, { k: "Itilde;", v: 296 }, { k: "Iukcy;", v: 1030 }, { k: "Iuml;", v: 207 }, { k: "Jcirc;", v: 308 }, { k: "Jcy;", v: 1049 }, { k: "Jfr;", v: 120077 }, { k: "Jopf;", v: 120129 }, { k: "Jscr;", v: 119973 }, { k: "Jsercy;", v: 1032 }, { k: "Jukcy;", v: 1028 }, { k: "KHcy;", v: 1061 }, { k: "KJcy;", v: 1036 }, { k: "Kappa;", v: 922 }, { k: "Kcedil;", v: 310 }, { k: "Kcy;", v: 1050 }, { k: "Kfr;", v: 120078 }, { k: "Kopf;", v: 120130 }, { k: "Kscr;", v: 119974 }, { k: "LJcy;", v: 1033 }, { k: "LT;", v: 60 }, { k: "Lacute;", v: 313 }, { k: "Lambda;", v: 923 }, { k: "Lang;", v: 10218 }, { k: "Laplacetrf;", v: 8466 }, { k: "Larr;", v: 8606 }, { k: "Lcaron;", v: 317 }, { k: "Lcedil;", v: 315 }, { k: "Lcy;", v: 1051 }, { k: "LeftAngleBracket;", v: 10216 }, { k: "LeftArrow;", v: 8592 }, { k: "LeftArrowBar;", v: 8676 }, { k: "LeftArrowRightArrow;", v: 8646 }, { k: "LeftCeiling;", v: 8968 }, { k: "LeftDoubleBracket;", v: 10214 }, { k: "LeftDownTeeVector;", v: 10593 }, { k: "LeftDownVector;", v: 8643 }, { k: "LeftDownVectorBar;", v: 10585 }, { k: "LeftFloor;", v: 8970 }, { k: "LeftRightArrow;", v: 8596 }, { k: "LeftRightVector;", v: 10574 }, { k: "LeftTee;", v: 8867 }, { k: "LeftTeeArrow;", v: 8612 }, { k: "LeftTeeVector;", v: 10586 }, { k: "LeftTriangle;", v: 8882 }, { k: "LeftTriangleBar;", v: 10703 }, { k: "LeftTriangleEqual;", v: 8884 }, { k: "LeftUpDownVector;", v: 10577 }, { k: "LeftUpTeeVector;", v: 10592 }, { k: "LeftUpVector;", v: 8639 }, { k: "LeftUpVectorBar;", v: 10584 }, { k: "LeftVector;", v: 8636 }, { k: "LeftVectorBar;", v: 10578 }, { k: "Leftarrow;", v: 8656 }, { k: "Leftrightarrow;", v: 8660 }, { k: "LessEqualGreater;", v: 8922 }, { k: "LessFullEqual;", v: 8806 }, { k: "LessGreater;", v: 8822 }, { k: "LessLess;", v: 10913 }, { k: "LessSlantEqual;", v: 10877 }, { k: "LessTilde;", v: 8818 }, { k: "Lfr;", v: 120079 }, { k: "Ll;", v: 8920 }, { k: "Lleftarrow;", v: 8666 }, { k: "Lmidot;", v: 319 }, { k: "LongLeftArrow;", v: 10229 }, { k: "LongLeftRightArrow;", v: 10231 }, { k: "LongRightArrow;", v: 10230 }, { k: "Longleftarrow;", v: 10232 }, { k: "Longleftrightarrow;", v: 10234 }, { k: "Longrightarrow;", v: 10233 }, { k: "Lopf;", v: 120131 }, { k: "LowerLeftArrow;", v: 8601 }, { k: "LowerRightArrow;", v: 8600 }, { k: "Lscr;", v: 8466 }, { k: "Lsh;", v: 8624 }, { k: "Lstrok;", v: 321 }, { k: "Lt;", v: 8810 }, { k: "Map;", v: 10501 }, { k: "Mcy;", v: 1052 }, { k: "MediumSpace;", v: 8287 }, { k: "Mellintrf;", v: 8499 }, { k: "Mfr;", v: 120080 }, { k: "MinusPlus;", v: 8723 }, { k: "Mopf;", v: 120132 }, { k: "Mscr;", v: 8499 }, { k: "Mu;", v: 924 }, { k: "NJcy;", v: 1034 }, { k: "Nacute;", v: 323 }, { k: "Ncaron;", v: 327 }, { k: "Ncedil;", v: 325 }, { k: "Ncy;", v: 1053 }, { k: "NegativeMediumSpace;", v: 8203 }, { k: "NegativeThickSpace;", v: 8203 }, { k: "NegativeThinSpace;", v: 8203 }, { k: "NegativeVeryThinSpace;", v: 8203 }, { k: "NestedGreaterGreater;", v: 8811 }, { k: "NestedLessLess;", v: 8810 }, { k: "NewLine;", v: 10 }, { k: "Nfr;", v: 120081 }, { k: "NoBreak;", v: 8288 }, { k: "NonBreakingSpace;", v: 160 }, { k: "Nopf;", v: 8469 }, { k: "Not;", v: 10988 }, { k: "NotCongruent;", v: 8802 }, { k: "NotCupCap;", v: 8813 }, { k: "NotDoubleVerticalBar;", v: 8742 }, { k: "NotElement;", v: 8713 }, { k: "NotEqual;", v: 8800 }, { k: "NotExists;", v: 8708 }, { k: "NotGreater;", v: 8815 }, { k: "NotGreaterEqual;", v: 8817 }, { k: "NotGreaterLess;", v: 8825 }, { k: "NotGreaterTilde;", v: 8821 }, { k: "NotLeftTriangle;", v: 8938 }, { k: "NotLeftTriangleEqual;", v: 8940 }, { k: "NotLess;", v: 8814 }, { k: "NotLessEqual;", v: 8816 }, { k: "NotLessGreater;", v: 8824 }, { k: "NotLessTilde;", v: 8820 }, { k: "NotPrecedes;", v: 8832 }, { k: "NotPrecedesSlantEqual;", v: 8928 }, { k: "NotReverseElement;", v: 8716 }, { k: "NotRightTriangle;", v: 8939 }, { k: "NotRightTriangleEqual;", v: 8941 }, { k: "NotSquareSubsetEqual;", v: 8930 }, { k: "NotSquareSupersetEqual;", v: 8931 }, { k: "NotSubsetEqual;", v: 8840 }, { k: "NotSucceeds;", v: 8833 }, { k: "NotSucceedsSlantEqual;", v: 8929 }, { k: "NotSupersetEqual;", v: 8841 }, { k: "NotTilde;", v: 8769 }, { k: "NotTildeEqual;", v: 8772 }, { k: "NotTildeFullEqual;", v: 8775 }, { k: "NotTildeTilde;", v: 8777 }, { k: "NotVerticalBar;", v: 8740 }, { k: "Nscr;", v: 119977 }, { k: "Ntilde;", v: 209 }, { k: "Nu;", v: 925 }, { k: "OElig;", v: 338 }, { k: "Oacute;", v: 211 }, { k: "Ocirc;", v: 212 }, { k: "Ocy;", v: 1054 }, { k: "Odblac;", v: 336 }, { k: "Ofr;", v: 120082 }, { k: "Ograve;", v: 210 }, { k: "Omacr;", v: 332 }, { k: "Omega;", v: 937 }, { k: "Omicron;", v: 927 }, { k: "Oopf;", v: 120134 }, { k: "OpenCurlyDoubleQuote;", v: 8220 }, { k: "OpenCurlyQuote;", v: 8216 }, { k: "Or;", v: 10836 }, { k: "Oscr;", v: 119978 }, { k: "Oslash;", v: 216 }, { k: "Otilde;", v: 213 }, { k: "Otimes;", v: 10807 }, { k: "Ouml;", v: 214 }, { k: "OverBar;", v: 8254 }, { k: "OverBrace;", v: 9182 }, { k: "OverBracket;", v: 9140 }, { k: "OverParenthesis;", v: 9180 }, { k: "PartialD;", v: 8706 }, { k: "Pcy;", v: 1055 }, { k: "Pfr;", v: 120083 }, { k: "Phi;", v: 934 }, { k: "Pi;", v: 928 }, { k: "PlusMinus;", v: 177 }, { k: "Poincareplane;", v: 8460 }, { k: "Popf;", v: 8473 }, { k: "Pr;", v: 10939 }, { k: "Precedes;", v: 8826 }, { k: "PrecedesEqual;", v: 10927 }, { k: "PrecedesSlantEqual;", v: 8828 }, { k: "PrecedesTilde;", v: 8830 }, { k: "Prime;", v: 8243 }, { k: "Product;", v: 8719 }, { k: "Proportion;", v: 8759 }, { k: "Proportional;", v: 8733 }, { k: "Pscr;", v: 119979 }, { k: "Psi;", v: 936 }, { k: "QUOT;", v: 34 }, { k: "Qfr;", v: 120084 }, { k: "Qopf;", v: 8474 }, { k: "Qscr;", v: 119980 }, { k: "RBarr;", v: 10512 }, { k: "REG;", v: 174 }, { k: "Racute;", v: 340 }, { k: "Rang;", v: 10219 }, { k: "Rarr;", v: 8608 }, { k: "Rarrtl;", v: 10518 }, { k: "Rcaron;", v: 344 }, { k: "Rcedil;", v: 342 }, { k: "Rcy;", v: 1056 }, { k: "Re;", v: 8476 }, { k: "ReverseElement;", v: 8715 }, { k: "ReverseEquilibrium;", v: 8651 }, { k: "ReverseUpEquilibrium;", v: 10607 }, { k: "Rfr;", v: 8476 }, { k: "Rho;", v: 929 }, { k: "RightAngleBracket;", v: 10217 }, { k: "RightArrow;", v: 8594 }, { k: "RightArrowBar;", v: 8677 }, { k: "RightArrowLeftArrow;", v: 8644 }, { k: "RightCeiling;", v: 8969 }, { k: "RightDoubleBracket;", v: 10215 }, { k: "RightDownTeeVector;", v: 10589 }, { k: "RightDownVector;", v: 8642 }, { k: "RightDownVectorBar;", v: 10581 }, { k: "RightFloor;", v: 8971 }, { k: "RightTee;", v: 8866 }, { k: "RightTeeArrow;", v: 8614 }, { k: "RightTeeVector;", v: 10587 }, { k: "RightTriangle;", v: 8883 }, { k: "RightTriangleBar;", v: 10704 }, { k: "RightTriangleEqual;", v: 8885 }, { k: "RightUpDownVector;", v: 10575 }, { k: "RightUpTeeVector;", v: 10588 }, { k: "RightUpVector;", v: 8638 }, { k: "RightUpVectorBar;", v: 10580 }, { k: "RightVector;", v: 8640 }, { k: "RightVectorBar;", v: 10579 }, { k: "Rightarrow;", v: 8658 }, { k: "Ropf;", v: 8477 }, { k: "RoundImplies;", v: 10608 }, { k: "Rrightarrow;", v: 8667 }, { k: "Rscr;", v: 8475 }, { k: "Rsh;", v: 8625 }, { k: "RuleDelayed;", v: 10740 }, { k: "SHCHcy;", v: 1065 }, { k: "SHcy;", v: 1064 }, { k: "SOFTcy;", v: 1068 }, { k: "Sacute;", v: 346 }, { k: "Sc;", v: 10940 }, { k: "Scaron;", v: 352 }, { k: "Scedil;", v: 350 }, { k: "Scirc;", v: 348 }, { k: "Scy;", v: 1057 }, { k: "Sfr;", v: 120086 }, { k: "ShortDownArrow;", v: 8595 }, { k: "ShortLeftArrow;", v: 8592 }, { k: "ShortRightArrow;", v: 8594 }, { k: "ShortUpArrow;", v: 8593 }, { k: "Sigma;", v: 931 }, { k: "SmallCircle;", v: 8728 }, { k: "Sopf;", v: 120138 }, { k: "Sqrt;", v: 8730 }, { k: "Square;", v: 9633 }, { k: "SquareIntersection;", v: 8851 }, { k: "SquareSubset;", v: 8847 }, { k: "SquareSubsetEqual;", v: 8849 }, { k: "SquareSuperset;", v: 8848 }, { k: "SquareSupersetEqual;", v: 8850 }, { k: "SquareUnion;", v: 8852 }, { k: "Sscr;", v: 119982 }, { k: "Star;", v: 8902 }, { k: "Sub;", v: 8912 }, { k: "Subset;", v: 8912 }, { k: "SubsetEqual;", v: 8838 }, { k: "Succeeds;", v: 8827 }, { k: "SucceedsEqual;", v: 10928 }, { k: "SucceedsSlantEqual;", v: 8829 }, { k: "SucceedsTilde;", v: 8831 }, { k: "SuchThat;", v: 8715 }, { k: "Sum;", v: 8721 }, { k: "Sup;", v: 8913 }, { k: "Superset;", v: 8835 }, { k: "SupersetEqual;", v: 8839 }, { k: "Supset;", v: 8913 }, { k: "THORN;", v: 222 }, { k: "TRADE;", v: 8482 }, { k: "TSHcy;", v: 1035 }, { k: "TScy;", v: 1062 }, { k: "Tab;", v: 9 }, { k: "Tau;", v: 932 }, { k: "Tcaron;", v: 356 }, { k: "Tcedil;", v: 354 }, { k: "Tcy;", v: 1058 }, { k: "Tfr;", v: 120087 }, { k: "Therefore;", v: 8756 }, { k: "Theta;", v: 920 }, { k: "ThinSpace;", v: 8201 }, { k: "Tilde;", v: 8764 }, { k: "TildeEqual;", v: 8771 }, { k: "TildeFullEqual;", v: 8773 }, { k: "TildeTilde;", v: 8776 }, { k: "Topf;", v: 120139 }, { k: "TripleDot;", v: 8411 }, { k: "Tscr;", v: 119983 }, { k: "Tstrok;", v: 358 }, { k: "Uacute;", v: 218 }, { k: "Uarr;", v: 8607 }, { k: "Uarrocir;", v: 10569 }, { k: "Ubrcy;", v: 1038 }, { k: "Ubreve;", v: 364 }, { k: "Ucirc;", v: 219 }, { k: "Ucy;", v: 1059 }, { k: "Udblac;", v: 368 }, { k: "Ufr;", v: 120088 }, { k: "Ugrave;", v: 217 }, { k: "Umacr;", v: 362 }, { k: "UnderBar;", v: 95 }, { k: "UnderBrace;", v: 9183 }, { k: "UnderBracket;", v: 9141 }, { k: "UnderParenthesis;", v: 9181 }, { k: "Union;", v: 8899 }, { k: "UnionPlus;", v: 8846 }, { k: "Uogon;", v: 370 }, { k: "Uopf;", v: 120140 }, { k: "UpArrow;", v: 8593 }, { k: "UpArrowBar;", v: 10514 }, { k: "UpArrowDownArrow;", v: 8645 }, { k: "UpDownArrow;", v: 8597 }, { k: "UpEquilibrium;", v: 10606 }, { k: "UpTee;", v: 8869 }, { k: "UpTeeArrow;", v: 8613 }, { k: "Uparrow;", v: 8657 }, { k: "Updownarrow;", v: 8661 }, { k: "UpperLeftArrow;", v: 8598 }, { k: "UpperRightArrow;", v: 8599 }, { k: "Upsi;", v: 978 }, { k: "Upsilon;", v: 933 }, { k: "Uring;", v: 366 }, { k: "Uscr;", v: 119984 }, { k: "Utilde;", v: 360 }, { k: "Uuml;", v: 220 }, { k: "VDash;", v: 8875 }, { k: "Vbar;", v: 10987 }, { k: "Vcy;", v: 1042 }, { k: "Vdash;", v: 8873 }, { k: "Vdashl;", v: 10982 }, { k: "Vee;", v: 8897 }, { k: "Verbar;", v: 8214 }, { k: "Vert;", v: 8214 }, { k: "VerticalBar;", v: 8739 }, { k: "VerticalLine;", v: 124 }, { k: "VerticalSeparator;", v: 10072 }, { k: "VerticalTilde;", v: 8768 }, { k: "VeryThinSpace;", v: 8202 }, { k: "Vfr;", v: 120089 }, { k: "Vopf;", v: 120141 }, { k: "Vscr;", v: 119985 }, { k: "Vvdash;", v: 8874 }, { k: "Wcirc;", v: 372 }, { k: "Wedge;", v: 8896 }, { k: "Wfr;", v: 120090 }, { k: "Wopf;", v: 120142 }, { k: "Wscr;", v: 119986 }, { k: "Xfr;", v: 120091 }, { k: "Xi;", v: 926 }, { k: "Xopf;", v: 120143 }, { k: "Xscr;", v: 119987 }, { k: "YAcy;", v: 1071 }, { k: "YIcy;", v: 1031 }, { k: "YUcy;", v: 1070 }, { k: "Yacute;", v: 221 }, { k: "Ycirc;", v: 374 }, { k: "Ycy;", v: 1067 }, { k: "Yfr;", v: 120092 }, { k: "Yopf;", v: 120144 }, { k: "Yscr;", v: 119988 }, { k: "Yuml;", v: 376 }, { k: "ZHcy;", v: 1046 }, { k: "Zacute;", v: 377 }, { k: "Zcaron;", v: 381 }, { k: "Zcy;", v: 1047 }, { k: "Zdot;", v: 379 }, { k: "ZeroWidthSpace;", v: 8203 }, { k: "Zeta;", v: 918 }, { k: "Zfr;", v: 8488 }, { k: "Zopf;", v: 8484 }, { k: "Zscr;", v: 119989 }, { k: "aacute;", v: 225 }, { k: "abreve;", v: 259 }, { k: "ac;", v: 8766 }, { k: "acd;", v: 8767 }, { k: "acirc;", v: 226 }, { k: "acute;", v: 180 }, { k: "acy;", v: 1072 }, { k: "aelig;", v: 230 }, { k: "af;", v: 8289 }, { k: "afr;", v: 120094 }, { k: "agrave;", v: 224 }, { k: "alefsym;", v: 8501 }, { k: "aleph;", v: 8501 }, { k: "alpha;", v: 945 }, { k: "amacr;", v: 257 }, { k: "amalg;", v: 10815 }, { k: "amp;", v: 38 }, { k: "and;", v: 8743 }, { k: "andand;", v: 10837 }, { k: "andd;", v: 10844 }, { k: "andslope;", v: 10840 }, { k: "andv;", v: 10842 }, { k: "ang;", v: 8736 }, { k: "ange;", v: 10660 }, { k: "angle;", v: 8736 }, { k: "angmsd;", v: 8737 }, { k: "angmsdaa;", v: 10664 }, { k: "angmsdab;", v: 10665 }, { k: "angmsdac;", v: 10666 }, { k: "angmsdad;", v: 10667 }, { k: "angmsdae;", v: 10668 }, { k: "angmsdaf;", v: 10669 }, { k: "angmsdag;", v: 10670 }, { k: "angmsdah;", v: 10671 }, { k: "angrt;", v: 8735 }, { k: "angrtvb;", v: 8894 }, { k: "angrtvbd;", v: 10653 }, { k: "angsph;", v: 8738 }, { k: "angst;", v: 197 }, { k: "angzarr;", v: 9084 }, { k: "aogon;", v: 261 }, { k: "aopf;", v: 120146 }, { k: "ap;", v: 8776 }, { k: "apE;", v: 10864 }, { k: "apacir;", v: 10863 }, { k: "ape;", v: 8778 }, { k: "apid;", v: 8779 }, { k: "apos;", v: 39 }, { k: "approx;", v: 8776 }, { k: "approxeq;", v: 8778 }, { k: "aring;", v: 229 }, { k: "ascr;", v: 119990 }, { k: "ast;", v: 42 }, { k: "asymp;", v: 8776 }, { k: "asympeq;", v: 8781 }, { k: "atilde;", v: 227 }, { k: "auml;", v: 228 }, { k: "awconint;", v: 8755 }, { k: "awint;", v: 10769 }, { k: "bNot;", v: 10989 }, { k: "backcong;", v: 8780 }, { k: "backepsilon;", v: 1014 }, { k: "backprime;", v: 8245 }, { k: "backsim;", v: 8765 }, { k: "backsimeq;", v: 8909 }, { k: "barvee;", v: 8893 }, { k: "barwed;", v: 8965 }, { k: "barwedge;", v: 8965 }, { k: "bbrk;", v: 9141 }, { k: "bbrktbrk;", v: 9142 }, { k: "bcong;", v: 8780 }, { k: "bcy;", v: 1073 }, { k: "bdquo;", v: 8222 }, { k: "becaus;", v: 8757 }, { k: "because;", v: 8757 }, { k: "bemptyv;", v: 10672 }, { k: "bepsi;", v: 1014 }, { k: "bernou;", v: 8492 }, { k: "beta;", v: 946 }, { k: "beth;", v: 8502 }, { k: "between;", v: 8812 }, { k: "bfr;", v: 120095 }, { k: "bigcap;", v: 8898 }, { k: "bigcirc;", v: 9711 }, { k: "bigcup;", v: 8899 }, { k: "bigodot;", v: 10752 }, { k: "bigoplus;", v: 10753 }, { k: "bigotimes;", v: 10754 }, { k: "bigsqcup;", v: 10758 }, { k: "bigstar;", v: 9733 }, { k: "bigtriangledown;", v: 9661 }, { k: "bigtriangleup;", v: 9651 }, { k: "biguplus;", v: 10756 }, { k: "bigvee;", v: 8897 }, { k: "bigwedge;", v: 8896 }, { k: "bkarow;", v: 10509 }, { k: "blacklozenge;", v: 10731 }, { k: "blacksquare;", v: 9642 }, { k: "blacktriangle;", v: 9652 }, { k: "blacktriangledown;", v: 9662 }, { k: "blacktriangleleft;", v: 9666 }, { k: "blacktriangleright;", v: 9656 }, { k: "blank;", v: 9251 }, { k: "blk12;", v: 9618 }, { k: "blk14;", v: 9617 }, { k: "blk34;", v: 9619 }, { k: "block;", v: 9608 }, { k: "bnot;", v: 8976 }, { k: "bopf;", v: 120147 }, { k: "bot;", v: 8869 }, { k: "bottom;", v: 8869 }, { k: "bowtie;", v: 8904 }, { k: "boxDL;", v: 9559 }, { k: "boxDR;", v: 9556 }, { k: "boxDl;", v: 9558 }, { k: "boxDr;", v: 9555 }, { k: "boxH;", v: 9552 }, { k: "boxHD;", v: 9574 }, { k: "boxHU;", v: 9577 }, { k: "boxHd;", v: 9572 }, { k: "boxHu;", v: 9575 }, { k: "boxUL;", v: 9565 }, { k: "boxUR;", v: 9562 }, { k: "boxUl;", v: 9564 }, { k: "boxUr;", v: 9561 }, { k: "boxV;", v: 9553 }, { k: "boxVH;", v: 9580 }, { k: "boxVL;", v: 9571 }, { k: "boxVR;", v: 9568 }, { k: "boxVh;", v: 9579 }, { k: "boxVl;", v: 9570 }, { k: "boxVr;", v: 9567 }, { k: "boxbox;", v: 10697 }, { k: "boxdL;", v: 9557 }, { k: "boxdR;", v: 9554 }, { k: "boxdl;", v: 9488 }, { k: "boxdr;", v: 9484 }, { k: "boxh;", v: 9472 }, { k: "boxhD;", v: 9573 }, { k: "boxhU;", v: 9576 }, { k: "boxhd;", v: 9516 }, { k: "boxhu;", v: 9524 }, { k: "boxminus;", v: 8863 }, { k: "boxplus;", v: 8862 }, { k: "boxtimes;", v: 8864 }, { k: "boxuL;", v: 9563 }, { k: "boxuR;", v: 9560 }, { k: "boxul;", v: 9496 }, { k: "boxur;", v: 9492 }, { k: "boxv;", v: 9474 }, { k: "boxvH;", v: 9578 }, { k: "boxvL;", v: 9569 }, { k: "boxvR;", v: 9566 }, { k: "boxvh;", v: 9532 }, { k: "boxvl;", v: 9508 }, { k: "boxvr;", v: 9500 }, { k: "bprime;", v: 8245 }, { k: "breve;", v: 728 }, { k: "brvbar;", v: 166 }, { k: "bscr;", v: 119991 }, { k: "bsemi;", v: 8271 }, { k: "bsim;", v: 8765 }, { k: "bsime;", v: 8909 }, { k: "bsol;", v: 92 }, { k: "bsolb;", v: 10693 }, { k: "bsolhsub;", v: 10184 }, { k: "bull;", v: 8226 }, { k: "bullet;", v: 8226 }, { k: "bump;", v: 8782 }, { k: "bumpE;", v: 10926 }, { k: "bumpe;", v: 8783 }, { k: "bumpeq;", v: 8783 }, { k: "cacute;", v: 263 }, { k: "cap;", v: 8745 }, { k: "capand;", v: 10820 }, { k: "capbrcup;", v: 10825 }, { k: "capcap;", v: 10827 }, { k: "capcup;", v: 10823 }, { k: "capdot;", v: 10816 }, { k: "caret;", v: 8257 }, { k: "caron;", v: 711 }, { k: "ccaps;", v: 10829 }, { k: "ccaron;", v: 269 }, { k: "ccedil;", v: 231 }, { k: "ccirc;", v: 265 }, { k: "ccups;", v: 10828 }, { k: "ccupssm;", v: 10832 }, { k: "cdot;", v: 267 }, { k: "cedil;", v: 184 }, { k: "cemptyv;", v: 10674 }, { k: "cent;", v: 162 }, { k: "centerdot;", v: 183 }, { k: "cfr;", v: 120096 }, { k: "chcy;", v: 1095 }, { k: "check;", v: 10003 }, { k: "checkmark;", v: 10003 }, { k: "chi;", v: 967 }, { k: "cir;", v: 9675 }, { k: "cirE;", v: 10691 }, { k: "circ;", v: 710 }, { k: "circeq;", v: 8791 }, { k: "circlearrowleft;", v: 8634 }, { k: "circlearrowright;", v: 8635 }, { k: "circledR;", v: 174 }, { k: "circledS;", v: 9416 }, { k: "circledast;", v: 8859 }, { k: "circledcirc;", v: 8858 }, { k: "circleddash;", v: 8861 }, { k: "cire;", v: 8791 }, { k: "cirfnint;", v: 10768 }, { k: "cirmid;", v: 10991 }, { k: "cirscir;", v: 10690 }, { k: "clubs;", v: 9827 }, { k: "clubsuit;", v: 9827 }, { k: "colon;", v: 58 }, { k: "colone;", v: 8788 }, { k: "coloneq;", v: 8788 }, { k: "comma;", v: 44 }, { k: "commat;", v: 64 }, { k: "comp;", v: 8705 }, { k: "compfn;", v: 8728 }, { k: "complement;", v: 8705 }, { k: "complexes;", v: 8450 }, { k: "cong;", v: 8773 }, { k: "congdot;", v: 10861 }, { k: "conint;", v: 8750 }, { k: "copf;", v: 120148 }, { k: "coprod;", v: 8720 }, { k: "copy;", v: 169 }, { k: "copysr;", v: 8471 }, { k: "crarr;", v: 8629 }, { k: "cross;", v: 10007 }, { k: "cscr;", v: 119992 }, { k: "csub;", v: 10959 }, { k: "csube;", v: 10961 }, { k: "csup;", v: 10960 }, { k: "csupe;", v: 10962 }, { k: "ctdot;", v: 8943 }, { k: "cudarrl;", v: 10552 }, { k: "cudarrr;", v: 10549 }, { k: "cuepr;", v: 8926 }, { k: "cuesc;", v: 8927 }, { k: "cularr;", v: 8630 }, { k: "cularrp;", v: 10557 }, { k: "cup;", v: 8746 }, { k: "cupbrcap;", v: 10824 }, { k: "cupcap;", v: 10822 }, { k: "cupcup;", v: 10826 }, { k: "cupdot;", v: 8845 }, { k: "cupor;", v: 10821 }, { k: "curarr;", v: 8631 }, { k: "curarrm;", v: 10556 }, { k: "curlyeqprec;", v: 8926 }, { k: "curlyeqsucc;", v: 8927 }, { k: "curlyvee;", v: 8910 }, { k: "curlywedge;", v: 8911 }, { k: "curren;", v: 164 }, { k: "curvearrowleft;", v: 8630 }, { k: "curvearrowright;", v: 8631 }, { k: "cuvee;", v: 8910 }, { k: "cuwed;", v: 8911 }, { k: "cwconint;", v: 8754 }, { k: "cwint;", v: 8753 }, { k: "cylcty;", v: 9005 }, { k: "dArr;", v: 8659 }, { k: "dHar;", v: 10597 }, { k: "dagger;", v: 8224 }, { k: "daleth;", v: 8504 }, { k: "darr;", v: 8595 }, { k: "dash;", v: 8208 }, { k: "dashv;", v: 8867 }, { k: "dbkarow;", v: 10511 }, { k: "dblac;", v: 733 }, { k: "dcaron;", v: 271 }, { k: "dcy;", v: 1076 }, { k: "dd;", v: 8518 }, { k: "ddagger;", v: 8225 }, { k: "ddarr;", v: 8650 }, { k: "ddotseq;", v: 10871 }, { k: "deg;", v: 176 }, { k: "delta;", v: 948 }, { k: "demptyv;", v: 10673 }, { k: "dfisht;", v: 10623 }, { k: "dfr;", v: 120097 }, { k: "dharl;", v: 8643 }, { k: "dharr;", v: 8642 }, { k: "diam;", v: 8900 }, { k: "diamond;", v: 8900 }, { k: "diamondsuit;", v: 9830 }, { k: "diams;", v: 9830 }, { k: "die;", v: 168 }, { k: "digamma;", v: 989 }, { k: "disin;", v: 8946 }, { k: "div;", v: 247 }, { k: "divide;", v: 247 }, { k: "divideontimes;", v: 8903 }, { k: "divonx;", v: 8903 }, { k: "djcy;", v: 1106 }, { k: "dlcorn;", v: 8990 }, { k: "dlcrop;", v: 8973 }, { k: "dollar;", v: 36 }, { k: "dopf;", v: 120149 }, { k: "dot;", v: 729 }, { k: "doteq;", v: 8784 }, { k: "doteqdot;", v: 8785 }, { k: "dotminus;", v: 8760 }, { k: "dotplus;", v: 8724 }, { k: "dotsquare;", v: 8865 }, { k: "doublebarwedge;", v: 8966 }, { k: "downarrow;", v: 8595 }, { k: "downdownarrows;", v: 8650 }, { k: "downharpoonleft;", v: 8643 }, { k: "downharpoonright;", v: 8642 }, { k: "drbkarow;", v: 10512 }, { k: "drcorn;", v: 8991 }, { k: "drcrop;", v: 8972 }, { k: "dscr;", v: 119993 }, { k: "dscy;", v: 1109 }, { k: "dsol;", v: 10742 }, { k: "dstrok;", v: 273 }, { k: "dtdot;", v: 8945 }, { k: "dtri;", v: 9663 }, { k: "dtrif;", v: 9662 }, { k: "duarr;", v: 8693 }, { k: "duhar;", v: 10607 }, { k: "dwangle;", v: 10662 }, { k: "dzcy;", v: 1119 }, { k: "dzigrarr;", v: 10239 }, { k: "eDDot;", v: 10871 }, { k: "eDot;", v: 8785 }, { k: "eacute;", v: 233 }, { k: "easter;", v: 10862 }, { k: "ecaron;", v: 283 }, { k: "ecir;", v: 8790 }, { k: "ecirc;", v: 234 }, { k: "ecolon;", v: 8789 }, { k: "ecy;", v: 1101 }, { k: "edot;", v: 279 }, { k: "ee;", v: 8519 }, { k: "efDot;", v: 8786 }, { k: "efr;", v: 120098 }, { k: "eg;", v: 10906 }, { k: "egrave;", v: 232 }, { k: "egs;", v: 10902 }, { k: "egsdot;", v: 10904 }, { k: "el;", v: 10905 }, { k: "elinters;", v: 9191 }, { k: "ell;", v: 8467 }, { k: "els;", v: 10901 }, { k: "elsdot;", v: 10903 }, { k: "emacr;", v: 275 }, { k: "empty;", v: 8709 }, { k: "emptyset;", v: 8709 }, { k: "emptyv;", v: 8709 }, { k: "emsp;", v: 8195 }, { k: "emsp13;", v: 8196 }, { k: "emsp14;", v: 8197 }, { k: "eng;", v: 331 }, { k: "ensp;", v: 8194 }, { k: "eogon;", v: 281 }, { k: "eopf;", v: 120150 }, { k: "epar;", v: 8917 }, { k: "eparsl;", v: 10723 }, { k: "eplus;", v: 10865 }, { k: "epsi;", v: 949 }, { k: "epsilon;", v: 949 }, { k: "epsiv;", v: 1013 }, { k: "eqcirc;", v: 8790 }, { k: "eqcolon;", v: 8789 }, { k: "eqsim;", v: 8770 }, { k: "eqslantgtr;", v: 10902 }, { k: "eqslantless;", v: 10901 }, { k: "equals;", v: 61 }, { k: "equest;", v: 8799 }, { k: "equiv;", v: 8801 }, { k: "equivDD;", v: 10872 }, { k: "eqvparsl;", v: 10725 }, { k: "erDot;", v: 8787 }, { k: "erarr;", v: 10609 }, { k: "escr;", v: 8495 }, { k: "esdot;", v: 8784 }, { k: "esim;", v: 8770 }, { k: "eta;", v: 951 }, { k: "eth;", v: 240 }, { k: "euml;", v: 235 }, { k: "euro;", v: 8364 }, { k: "excl;", v: 33 }, { k: "exist;", v: 8707 }, { k: "expectation;", v: 8496 }, { k: "exponentiale;", v: 8519 }, { k: "fallingdotseq;", v: 8786 }, { k: "fcy;", v: 1092 }, { k: "female;", v: 9792 }, { k: "ffilig;", v: 64259 }, { k: "fflig;", v: 64256 }, { k: "ffllig;", v: 64260 }, { k: "ffr;", v: 120099 }, { k: "filig;", v: 64257 }, { k: "flat;", v: 9837 }, { k: "fllig;", v: 64258 }, { k: "fltns;", v: 9649 }, { k: "fnof;", v: 402 }, { k: "fopf;", v: 120151 }, { k: "forall;", v: 8704 }, { k: "fork;", v: 8916 }, { k: "forkv;", v: 10969 }, { k: "fpartint;", v: 10765 }, { k: "frac12;", v: 189 }, { k: "frac13;", v: 8531 }, { k: "frac14;", v: 188 }, { k: "frac15;", v: 8533 }, { k: "frac16;", v: 8537 }, { k: "frac18;", v: 8539 }, { k: "frac23;", v: 8532 }, { k: "frac25;", v: 8534 }, { k: "frac34;", v: 190 }, { k: "frac35;", v: 8535 }, { k: "frac38;", v: 8540 }, { k: "frac45;", v: 8536 }, { k: "frac56;", v: 8538 }, { k: "frac58;", v: 8541 }, { k: "frac78;", v: 8542 }, { k: "frasl;", v: 8260 }, { k: "frown;", v: 8994 }, { k: "fscr;", v: 119995 }, { k: "gE;", v: 8807 }, { k: "gEl;", v: 10892 }, { k: "gacute;", v: 501 }, { k: "gamma;", v: 947 }, { k: "gammad;", v: 989 }, { k: "gap;", v: 10886 }, { k: "gbreve;", v: 287 }, { k: "gcirc;", v: 285 }, { k: "gcy;", v: 1075 }, { k: "gdot;", v: 289 }, { k: "ge;", v: 8805 }, { k: "gel;", v: 8923 }, { k: "geq;", v: 8805 }, { k: "geqq;", v: 8807 }, { k: "geqslant;", v: 10878 }, { k: "ges;", v: 10878 }, { k: "gescc;", v: 10921 }, { k: "gesdot;", v: 10880 }, { k: "gesdoto;", v: 10882 }, { k: "gesdotol;", v: 10884 }, { k: "gesles;", v: 10900 }, { k: "gfr;", v: 120100 }, { k: "gg;", v: 8811 }, { k: "ggg;", v: 8921 }, { k: "gimel;", v: 8503 }, { k: "gjcy;", v: 1107 }, { k: "gl;", v: 8823 }, { k: "glE;", v: 10898 }, { k: "gla;", v: 10917 }, { k: "glj;", v: 10916 }, { k: "gnE;", v: 8809 }, { k: "gnap;", v: 10890 }, { k: "gnapprox;", v: 10890 }, { k: "gne;", v: 10888 }, { k: "gneq;", v: 10888 }, { k: "gneqq;", v: 8809 }, { k: "gnsim;", v: 8935 }, { k: "gopf;", v: 120152 }, { k: "grave;", v: 96 }, { k: "gscr;", v: 8458 }, { k: "gsim;", v: 8819 }, { k: "gsime;", v: 10894 }, { k: "gsiml;", v: 10896 }, { k: "gt;", v: 62 }, { k: "gtcc;", v: 10919 }, { k: "gtcir;", v: 10874 }, { k: "gtdot;", v: 8919 }, { k: "gtlPar;", v: 10645 }, { k: "gtquest;", v: 10876 }, { k: "gtrapprox;", v: 10886 }, { k: "gtrarr;", v: 10616 }, { k: "gtrdot;", v: 8919 }, { k: "gtreqless;", v: 8923 }, { k: "gtreqqless;", v: 10892 }, { k: "gtrless;", v: 8823 }, { k: "gtrsim;", v: 8819 }, { k: "hArr;", v: 8660 }, { k: "hairsp;", v: 8202 }, { k: "half;", v: 189 }, { k: "hamilt;", v: 8459 }, { k: "hardcy;", v: 1098 }, { k: "harr;", v: 8596 }, { k: "harrcir;", v: 10568 }, { k: "harrw;", v: 8621 }, { k: "hbar;", v: 8463 }, { k: "hcirc;", v: 293 }, { k: "hearts;", v: 9829 }, { k: "heartsuit;", v: 9829 }, { k: "hellip;", v: 8230 }, { k: "hercon;", v: 8889 }, { k: "hfr;", v: 120101 }, { k: "hksearow;", v: 10533 }, { k: "hkswarow;", v: 10534 }, { k: "hoarr;", v: 8703 }, { k: "homtht;", v: 8763 }, { k: "hookleftarrow;", v: 8617 }, { k: "hookrightarrow;", v: 8618 }, { k: "hopf;", v: 120153 }, { k: "horbar;", v: 8213 }, { k: "hscr;", v: 119997 }, { k: "hslash;", v: 8463 }, { k: "hstrok;", v: 295 }, { k: "hybull;", v: 8259 }, { k: "hyphen;", v: 8208 }, { k: "iacute;", v: 237 }, { k: "ic;", v: 8291 }, { k: "icirc;", v: 238 }, { k: "icy;", v: 1080 }, { k: "iecy;", v: 1077 }, { k: "iexcl;", v: 161 }, { k: "iff;", v: 8660 }, { k: "ifr;", v: 120102 }, { k: "igrave;", v: 236 }, { k: "ii;", v: 8520 }, { k: "iiiint;", v: 10764 }, { k: "iiint;", v: 8749 }, { k: "iinfin;", v: 10716 }, { k: "iiota;", v: 8489 }, { k: "ijlig;", v: 307 }, { k: "imacr;", v: 299 }, { k: "image;", v: 8465 }, { k: "imagline;", v: 8464 }, { k: "imagpart;", v: 8465 }, { k: "imath;", v: 305 }, { k: "imof;", v: 8887 }, { k: "imped;", v: 437 }, { k: "in;", v: 8712 }, { k: "incare;", v: 8453 }, { k: "infin;", v: 8734 }, { k: "infintie;", v: 10717 }, { k: "inodot;", v: 305 }, { k: "int;", v: 8747 }, { k: "intcal;", v: 8890 }, { k: "integers;", v: 8484 }, { k: "intercal;", v: 8890 }, { k: "intlarhk;", v: 10775 }, { k: "intprod;", v: 10812 }, { k: "iocy;", v: 1105 }, { k: "iogon;", v: 303 }, { k: "iopf;", v: 120154 }, { k: "iota;", v: 953 }, { k: "iprod;", v: 10812 }, { k: "iquest;", v: 191 }, { k: "iscr;", v: 119998 }, { k: "isin;", v: 8712 }, { k: "isinE;", v: 8953 }, { k: "isindot;", v: 8949 }, { k: "isins;", v: 8948 }, { k: "isinsv;", v: 8947 }, { k: "isinv;", v: 8712 }, { k: "it;", v: 8290 }, { k: "itilde;", v: 297 }, { k: "iukcy;", v: 1110 }, { k: "iuml;", v: 239 }, { k: "jcirc;", v: 309 }, { k: "jcy;", v: 1081 }, { k: "jfr;", v: 120103 }, { k: "jmath;", v: 567 }, { k: "jopf;", v: 120155 }, { k: "jscr;", v: 119999 }, { k: "jsercy;", v: 1112 }, { k: "jukcy;", v: 1108 }, { k: "kappa;", v: 954 }, { k: "kappav;", v: 1008 }, { k: "kcedil;", v: 311 }, { k: "kcy;", v: 1082 }, { k: "kfr;", v: 120104 }, { k: "kgreen;", v: 312 }, { k: "khcy;", v: 1093 }, { k: "kjcy;", v: 1116 }, { k: "kopf;", v: 120156 }, { k: "kscr;", v: 120000 }, { k: "lAarr;", v: 8666 }, { k: "lArr;", v: 8656 }, { k: "lAtail;", v: 10523 }, { k: "lBarr;", v: 10510 }, { k: "lE;", v: 8806 }, { k: "lEg;", v: 10891 }, { k: "lHar;", v: 10594 }, { k: "lacute;", v: 314 }, { k: "laemptyv;", v: 10676 }, { k: "lagran;", v: 8466 }, { k: "lambda;", v: 955 }, { k: "lang;", v: 10216 }, { k: "langd;", v: 10641 }, { k: "langle;", v: 10216 }, { k: "lap;", v: 10885 }, { k: "laquo;", v: 171 }, { k: "larr;", v: 8592 }, { k: "larrb;", v: 8676 }, { k: "larrbfs;", v: 10527 }, { k: "larrfs;", v: 10525 }, { k: "larrhk;", v: 8617 }, { k: "larrlp;", v: 8619 }, { k: "larrpl;", v: 10553 }, { k: "larrsim;", v: 10611 }, { k: "larrtl;", v: 8610 }, { k: "lat;", v: 10923 }, { k: "latail;", v: 10521 }, { k: "late;", v: 10925 }, { k: "lbarr;", v: 10508 }, { k: "lbbrk;", v: 10098 }, { k: "lbrace;", v: 123 }, { k: "lbrack;", v: 91 }, { k: "lbrke;", v: 10635 }, { k: "lbrksld;", v: 10639 }, { k: "lbrkslu;", v: 10637 }, { k: "lcaron;", v: 318 }, { k: "lcedil;", v: 316 }, { k: "lceil;", v: 8968 }, { k: "lcub;", v: 123 }, { k: "lcy;", v: 1083 }, { k: "ldca;", v: 10550 }, { k: "ldquo;", v: 8220 }, { k: "ldquor;", v: 8222 }, { k: "ldrdhar;", v: 10599 }, { k: "ldrushar;", v: 10571 }, { k: "ldsh;", v: 8626 }, { k: "le;", v: 8804 }, { k: "leftarrow;", v: 8592 }, { k: "leftarrowtail;", v: 8610 }, { k: "leftharpoondown;", v: 8637 }, { k: "leftharpoonup;", v: 8636 }, { k: "leftleftarrows;", v: 8647 }, { k: "leftrightarrow;", v: 8596 }, { k: "leftrightarrows;", v: 8646 }, { k: "leftrightharpoons;", v: 8651 }, { k: "leftrightsquigarrow;", v: 8621 }, { k: "leftthreetimes;", v: 8907 }, { k: "leg;", v: 8922 }, { k: "leq;", v: 8804 }, { k: "leqq;", v: 8806 }, { k: "leqslant;", v: 10877 }, { k: "les;", v: 10877 }, { k: "lescc;", v: 10920 }, { k: "lesdot;", v: 10879 }, { k: "lesdoto;", v: 10881 }, { k: "lesdotor;", v: 10883 }, { k: "lesges;", v: 10899 }, { k: "lessapprox;", v: 10885 }, { k: "lessdot;", v: 8918 }, { k: "lesseqgtr;", v: 8922 }, { k: "lesseqqgtr;", v: 10891 }, { k: "lessgtr;", v: 8822 }, { k: "lesssim;", v: 8818 }, { k: "lfisht;", v: 10620 }, { k: "lfloor;", v: 8970 }, { k: "lfr;", v: 120105 }, { k: "lg;", v: 8822 }, { k: "lgE;", v: 10897 }, { k: "lhard;", v: 8637 }, { k: "lharu;", v: 8636 }, { k: "lharul;", v: 10602 }, { k: "lhblk;", v: 9604 }, { k: "ljcy;", v: 1113 }, { k: "ll;", v: 8810 }, { k: "llarr;", v: 8647 }, { k: "llcorner;", v: 8990 }, { k: "llhard;", v: 10603 }, { k: "lltri;", v: 9722 }, { k: "lmidot;", v: 320 }, { k: "lmoust;", v: 9136 }, { k: "lmoustache;", v: 9136 }, { k: "lnE;", v: 8808 }, { k: "lnap;", v: 10889 }, { k: "lnapprox;", v: 10889 }, { k: "lne;", v: 10887 }, { k: "lneq;", v: 10887 }, { k: "lneqq;", v: 8808 }, { k: "lnsim;", v: 8934 }, { k: "loang;", v: 10220 }, { k: "loarr;", v: 8701 }, { k: "lobrk;", v: 10214 }, { k: "longleftarrow;", v: 10229 }, { k: "longleftrightarrow;", v: 10231 }, { k: "longmapsto;", v: 10236 }, { k: "longrightarrow;", v: 10230 }, { k: "looparrowleft;", v: 8619 }, { k: "looparrowright;", v: 8620 }, { k: "lopar;", v: 10629 }, { k: "lopf;", v: 120157 }, { k: "loplus;", v: 10797 }, { k: "lotimes;", v: 10804 }, { k: "lowast;", v: 8727 }, { k: "lowbar;", v: 95 }, { k: "loz;", v: 9674 }, { k: "lozenge;", v: 9674 }, { k: "lozf;", v: 10731 }, { k: "lpar;", v: 40 }, { k: "lparlt;", v: 10643 }, { k: "lrarr;", v: 8646 }, { k: "lrcorner;", v: 8991 }, { k: "lrhar;", v: 8651 }, { k: "lrhard;", v: 10605 }, { k: "lrm;", v: 8206 }, { k: "lrtri;", v: 8895 }, { k: "lsaquo;", v: 8249 }, { k: "lscr;", v: 120001 }, { k: "lsh;", v: 8624 }, { k: "lsim;", v: 8818 }, { k: "lsime;", v: 10893 }, { k: "lsimg;", v: 10895 }, { k: "lsqb;", v: 91 }, { k: "lsquo;", v: 8216 }, { k: "lsquor;", v: 8218 }, { k: "lstrok;", v: 322 }, { k: "lt;", v: 60 }, { k: "ltcc;", v: 10918 }, { k: "ltcir;", v: 10873 }, { k: "ltdot;", v: 8918 }, { k: "lthree;", v: 8907 }, { k: "ltimes;", v: 8905 }, { k: "ltlarr;", v: 10614 }, { k: "ltquest;", v: 10875 }, { k: "ltrPar;", v: 10646 }, { k: "ltri;", v: 9667 }, { k: "ltrie;", v: 8884 }, { k: "ltrif;", v: 9666 }, { k: "lurdshar;", v: 10570 }, { k: "luruhar;", v: 10598 }, { k: "mDDot;", v: 8762 }, { k: "macr;", v: 175 }, { k: "male;", v: 9794 }, { k: "malt;", v: 10016 }, { k: "maltese;", v: 10016 }, { k: "map;", v: 8614 }, { k: "mapsto;", v: 8614 }, { k: "mapstodown;", v: 8615 }, { k: "mapstoleft;", v: 8612 }, { k: "mapstoup;", v: 8613 }, { k: "marker;", v: 9646 }, { k: "mcomma;", v: 10793 }, { k: "mcy;", v: 1084 }, { k: "mdash;", v: 8212 }, { k: "measuredangle;", v: 8737 }, { k: "mfr;", v: 120106 }, { k: "mho;", v: 8487 }, { k: "micro;", v: 181 }, { k: "mid;", v: 8739 }, { k: "midast;", v: 42 }, { k: "midcir;", v: 10992 }, { k: "middot;", v: 183 }, { k: "minus;", v: 8722 }, { k: "minusb;", v: 8863 }, { k: "minusd;", v: 8760 }, { k: "minusdu;", v: 10794 }, { k: "mlcp;", v: 10971 }, { k: "mldr;", v: 8230 }, { k: "mnplus;", v: 8723 }, { k: "models;", v: 8871 }, { k: "mopf;", v: 120158 }, { k: "mp;", v: 8723 }, { k: "mscr;", v: 120002 }, { k: "mstpos;", v: 8766 }, { k: "mu;", v: 956 }, { k: "multimap;", v: 8888 }, { k: "mumap;", v: 8888 }, { k: "nLeftarrow;", v: 8653 }, { k: "nLeftrightarrow;", v: 8654 }, { k: "nRightarrow;", v: 8655 }, { k: "nVDash;", v: 8879 }, { k: "nVdash;", v: 8878 }, { k: "nabla;", v: 8711 }, { k: "nacute;", v: 324 }, { k: "nap;", v: 8777 }, { k: "napos;", v: 329 }, { k: "napprox;", v: 8777 }, { k: "natur;", v: 9838 }, { k: "natural;", v: 9838 }, { k: "naturals;", v: 8469 }, { k: "nbsp;", v: 160 }, { k: "ncap;", v: 10819 }, { k: "ncaron;", v: 328 }, { k: "ncedil;", v: 326 }, { k: "ncong;", v: 8775 }, { k: "ncup;", v: 10818 }, { k: "ncy;", v: 1085 }, { k: "ndash;", v: 8211 }, { k: "ne;", v: 8800 }, { k: "neArr;", v: 8663 }, { k: "nearhk;", v: 10532 }, { k: "nearr;", v: 8599 }, { k: "nearrow;", v: 8599 }, { k: "nequiv;", v: 8802 }, { k: "nesear;", v: 10536 }, { k: "nexist;", v: 8708 }, { k: "nexists;", v: 8708 }, { k: "nfr;", v: 120107 }, { k: "nge;", v: 8817 }, { k: "ngeq;", v: 8817 }, { k: "ngsim;", v: 8821 }, { k: "ngt;", v: 8815 }, { k: "ngtr;", v: 8815 }, { k: "nhArr;", v: 8654 }, { k: "nharr;", v: 8622 }, { k: "nhpar;", v: 10994 }, { k: "ni;", v: 8715 }, { k: "nis;", v: 8956 }, { k: "nisd;", v: 8954 }, { k: "niv;", v: 8715 }, { k: "njcy;", v: 1114 }, { k: "nlArr;", v: 8653 }, { k: "nlarr;", v: 8602 }, { k: "nldr;", v: 8229 }, { k: "nle;", v: 8816 }, { k: "nleftarrow;", v: 8602 }, { k: "nleftrightarrow;", v: 8622 }, { k: "nleq;", v: 8816 }, { k: "nless;", v: 8814 }, { k: "nlsim;", v: 8820 }, { k: "nlt;", v: 8814 }, { k: "nltri;", v: 8938 }, { k: "nltrie;", v: 8940 }, { k: "nmid;", v: 8740 }, { k: "nopf;", v: 120159 }, { k: "not;", v: 172 }, { k: "notin;", v: 8713 }, { k: "notinva;", v: 8713 }, { k: "notinvb;", v: 8951 }, { k: "notinvc;", v: 8950 }, { k: "notni;", v: 8716 }, { k: "notniva;", v: 8716 }, { k: "notnivb;", v: 8958 }, { k: "notnivc;", v: 8957 }, { k: "npar;", v: 8742 }, { k: "nparallel;", v: 8742 }, { k: "npolint;", v: 10772 }, { k: "npr;", v: 8832 }, { k: "nprcue;", v: 8928 }, { k: "nprec;", v: 8832 }, { k: "nrArr;", v: 8655 }, { k: "nrarr;", v: 8603 }, { k: "nrightarrow;", v: 8603 }, { k: "nrtri;", v: 8939 }, { k: "nrtrie;", v: 8941 }, { k: "nsc;", v: 8833 }, { k: "nsccue;", v: 8929 }, { k: "nscr;", v: 120003 }, { k: "nshortmid;", v: 8740 }, { k: "nshortparallel;", v: 8742 }, { k: "nsim;", v: 8769 }, { k: "nsime;", v: 8772 }, { k: "nsimeq;", v: 8772 }, { k: "nsmid;", v: 8740 }, { k: "nspar;", v: 8742 }, { k: "nsqsube;", v: 8930 }, { k: "nsqsupe;", v: 8931 }, { k: "nsub;", v: 8836 }, { k: "nsube;", v: 8840 }, { k: "nsubseteq;", v: 8840 }, { k: "nsucc;", v: 8833 }, { k: "nsup;", v: 8837 }, { k: "nsupe;", v: 8841 }, { k: "nsupseteq;", v: 8841 }, { k: "ntgl;", v: 8825 }, { k: "ntilde;", v: 241 }, { k: "ntlg;", v: 8824 }, { k: "ntriangleleft;", v: 8938 }, { k: "ntrianglelefteq;", v: 8940 }, { k: "ntriangleright;", v: 8939 }, { k: "ntrianglerighteq;", v: 8941 }, { k: "nu;", v: 957 }, { k: "num;", v: 35 }, { k: "numero;", v: 8470 }, { k: "numsp;", v: 8199 }, { k: "nvDash;", v: 8877 }, { k: "nvHarr;", v: 10500 }, { k: "nvdash;", v: 8876 }, { k: "nvinfin;", v: 10718 }, { k: "nvlArr;", v: 10498 }, { k: "nvrArr;", v: 10499 }, { k: "nwArr;", v: 8662 }, { k: "nwarhk;", v: 10531 }, { k: "nwarr;", v: 8598 }, { k: "nwarrow;", v: 8598 }, { k: "nwnear;", v: 10535 }, { k: "oS;", v: 9416 }, { k: "oacute;", v: 243 }, { k: "oast;", v: 8859 }, { k: "ocir;", v: 8858 }, { k: "ocirc;", v: 244 }, { k: "ocy;", v: 1086 }, { k: "odash;", v: 8861 }, { k: "odblac;", v: 337 }, { k: "odiv;", v: 10808 }, { k: "odot;", v: 8857 }, { k: "odsold;", v: 10684 }, { k: "oelig;", v: 339 }, { k: "ofcir;", v: 10687 }, { k: "ofr;", v: 120108 }, { k: "ogon;", v: 731 }, { k: "ograve;", v: 242 }, { k: "ogt;", v: 10689 }, { k: "ohbar;", v: 10677 }, { k: "ohm;", v: 937 }, { k: "oint;", v: 8750 }, { k: "olarr;", v: 8634 }, { k: "olcir;", v: 10686 }, { k: "olcross;", v: 10683 }, { k: "oline;", v: 8254 }, { k: "olt;", v: 10688 }, { k: "omacr;", v: 333 }, { k: "omega;", v: 969 }, { k: "omicron;", v: 959 }, { k: "omid;", v: 10678 }, { k: "ominus;", v: 8854 }, { k: "oopf;", v: 120160 }, { k: "opar;", v: 10679 }, { k: "operp;", v: 10681 }, { k: "oplus;", v: 8853 }, { k: "or;", v: 8744 }, { k: "orarr;", v: 8635 }, { k: "ord;", v: 10845 }, { k: "order;", v: 8500 }, { k: "orderof;", v: 8500 }, { k: "ordf;", v: 170 }, { k: "ordm;", v: 186 }, { k: "origof;", v: 8886 }, { k: "oror;", v: 10838 }, { k: "orslope;", v: 10839 }, { k: "orv;", v: 10843 }, { k: "oscr;", v: 8500 }, { k: "oslash;", v: 248 }, { k: "osol;", v: 8856 }, { k: "otilde;", v: 245 }, { k: "otimes;", v: 8855 }, { k: "otimesas;", v: 10806 }, { k: "ouml;", v: 246 }, { k: "ovbar;", v: 9021 }, { k: "par;", v: 8741 }, { k: "para;", v: 182 }, { k: "parallel;", v: 8741 }, { k: "parsim;", v: 10995 }, { k: "parsl;", v: 11005 }, { k: "part;", v: 8706 }, { k: "pcy;", v: 1087 }, { k: "percnt;", v: 37 }, { k: "period;", v: 46 }, { k: "permil;", v: 8240 }, { k: "perp;", v: 8869 }, { k: "pertenk;", v: 8241 }, { k: "pfr;", v: 120109 }, { k: "phi;", v: 966 }, { k: "phiv;", v: 981 }, { k: "phmmat;", v: 8499 }, { k: "phone;", v: 9742 }, { k: "pi;", v: 960 }, { k: "pitchfork;", v: 8916 }, { k: "piv;", v: 982 }, { k: "planck;", v: 8463 }, { k: "planckh;", v: 8462 }, { k: "plankv;", v: 8463 }, { k: "plus;", v: 43 }, { k: "plusacir;", v: 10787 }, { k: "plusb;", v: 8862 }, { k: "pluscir;", v: 10786 }, { k: "plusdo;", v: 8724 }, { k: "plusdu;", v: 10789 }, { k: "pluse;", v: 10866 }, { k: "plusmn;", v: 177 }, { k: "plussim;", v: 10790 }, { k: "plustwo;", v: 10791 }, { k: "pm;", v: 177 }, { k: "pointint;", v: 10773 }, { k: "popf;", v: 120161 }, { k: "pound;", v: 163 }, { k: "pr;", v: 8826 }, { k: "prE;", v: 10931 }, { k: "prap;", v: 10935 }, { k: "prcue;", v: 8828 }, { k: "pre;", v: 10927 }, { k: "prec;", v: 8826 }, { k: "precapprox;", v: 10935 }, { k: "preccurlyeq;", v: 8828 }, { k: "preceq;", v: 10927 }, { k: "precnapprox;", v: 10937 }, { k: "precneqq;", v: 10933 }, { k: "precnsim;", v: 8936 }, { k: "precsim;", v: 8830 }, { k: "prime;", v: 8242 }, { k: "primes;", v: 8473 }, { k: "prnE;", v: 10933 }, { k: "prnap;", v: 10937 }, { k: "prnsim;", v: 8936 }, { k: "prod;", v: 8719 }, { k: "profalar;", v: 9006 }, { k: "profline;", v: 8978 }, { k: "profsurf;", v: 8979 }, { k: "prop;", v: 8733 }, { k: "propto;", v: 8733 }, { k: "prsim;", v: 8830 }, { k: "prurel;", v: 8880 }, { k: "pscr;", v: 120005 }, { k: "psi;", v: 968 }, { k: "puncsp;", v: 8200 }, { k: "qfr;", v: 120110 }, { k: "qint;", v: 10764 }, { k: "qopf;", v: 120162 }, { k: "qprime;", v: 8279 }, { k: "qscr;", v: 120006 }, { k: "quaternions;", v: 8461 }, { k: "quatint;", v: 10774 }, { k: "quest;", v: 63 }, { k: "questeq;", v: 8799 }, { k: "quot;", v: 34 }, { k: "rAarr;", v: 8667 }, { k: "rArr;", v: 8658 }, { k: "rAtail;", v: 10524 }, { k: "rBarr;", v: 10511 }, { k: "rHar;", v: 10596 }, { k: "racute;", v: 341 }, { k: "radic;", v: 8730 }, { k: "raemptyv;", v: 10675 }, { k: "rang;", v: 10217 }, { k: "rangd;", v: 10642 }, { k: "range;", v: 10661 }, { k: "rangle;", v: 10217 }, { k: "raquo;", v: 187 }, { k: "rarr;", v: 8594 }, { k: "rarrap;", v: 10613 }, { k: "rarrb;", v: 8677 }, { k: "rarrbfs;", v: 10528 }, { k: "rarrc;", v: 10547 }, { k: "rarrfs;", v: 10526 }, { k: "rarrhk;", v: 8618 }, { k: "rarrlp;", v: 8620 }, { k: "rarrpl;", v: 10565 }, { k: "rarrsim;", v: 10612 }, { k: "rarrtl;", v: 8611 }, { k: "rarrw;", v: 8605 }, { k: "ratail;", v: 10522 }, { k: "ratio;", v: 8758 }, { k: "rationals;", v: 8474 }, { k: "rbarr;", v: 10509 }, { k: "rbbrk;", v: 10099 }, { k: "rbrace;", v: 125 }, { k: "rbrack;", v: 93 }, { k: "rbrke;", v: 10636 }, { k: "rbrksld;", v: 10638 }, { k: "rbrkslu;", v: 10640 }, { k: "rcaron;", v: 345 }, { k: "rcedil;", v: 343 }, { k: "rceil;", v: 8969 }, { k: "rcub;", v: 125 }, { k: "rcy;", v: 1088 }, { k: "rdca;", v: 10551 }, { k: "rdldhar;", v: 10601 }, { k: "rdquo;", v: 8221 }, { k: "rdquor;", v: 8221 }, { k: "rdsh;", v: 8627 }, { k: "real;", v: 8476 }, { k: "realine;", v: 8475 }, { k: "realpart;", v: 8476 }, { k: "reals;", v: 8477 }, { k: "rect;", v: 9645 }, { k: "reg;", v: 174 }, { k: "rfisht;", v: 10621 }, { k: "rfloor;", v: 8971 }, { k: "rfr;", v: 120111 }, { k: "rhard;", v: 8641 }, { k: "rharu;", v: 8640 }, { k: "rharul;", v: 10604 }, { k: "rho;", v: 961 }, { k: "rhov;", v: 1009 }, { k: "rightarrow;", v: 8594 }, { k: "rightarrowtail;", v: 8611 }, { k: "rightharpoondown;", v: 8641 }, { k: "rightharpoonup;", v: 8640 }, { k: "rightleftarrows;", v: 8644 }, { k: "rightleftharpoons;", v: 8652 }, { k: "rightrightarrows;", v: 8649 }, { k: "rightsquigarrow;", v: 8605 }, { k: "rightthreetimes;", v: 8908 }, { k: "ring;", v: 730 }, { k: "risingdotseq;", v: 8787 }, { k: "rlarr;", v: 8644 }, { k: "rlhar;", v: 8652 }, { k: "rlm;", v: 8207 }, { k: "rmoust;", v: 9137 }, { k: "rmoustache;", v: 9137 }, { k: "rnmid;", v: 10990 }, { k: "roang;", v: 10221 }, { k: "roarr;", v: 8702 }, { k: "robrk;", v: 10215 }, { k: "ropar;", v: 10630 }, { k: "ropf;", v: 120163 }, { k: "roplus;", v: 10798 }, { k: "rotimes;", v: 10805 }, { k: "rpar;", v: 41 }, { k: "rpargt;", v: 10644 }, { k: "rppolint;", v: 10770 }, { k: "rrarr;", v: 8649 }, { k: "rsaquo;", v: 8250 }, { k: "rscr;", v: 120007 }, { k: "rsh;", v: 8625 }, { k: "rsqb;", v: 93 }, { k: "rsquo;", v: 8217 }, { k: "rsquor;", v: 8217 }, { k: "rthree;", v: 8908 }, { k: "rtimes;", v: 8906 }, { k: "rtri;", v: 9657 }, { k: "rtrie;", v: 8885 }, { k: "rtrif;", v: 9656 }, { k: "rtriltri;", v: 10702 }, { k: "ruluhar;", v: 10600 }, { k: "rx;", v: 8478 }, { k: "sacute;", v: 347 }, { k: "sbquo;", v: 8218 }, { k: "sc;", v: 8827 }, { k: "scE;", v: 10932 }, { k: "scap;", v: 10936 }, { k: "scaron;", v: 353 }, { k: "sccue;", v: 8829 }, { k: "sce;", v: 10928 }, { k: "scedil;", v: 351 }, { k: "scirc;", v: 349 }, { k: "scnE;", v: 10934 }, { k: "scnap;", v: 10938 }, { k: "scnsim;", v: 8937 }, { k: "scpolint;", v: 10771 }, { k: "scsim;", v: 8831 }, { k: "scy;", v: 1089 }, { k: "sdot;", v: 8901 }, { k: "sdotb;", v: 8865 }, { k: "sdote;", v: 10854 }, { k: "seArr;", v: 8664 }, { k: "searhk;", v: 10533 }, { k: "searr;", v: 8600 }, { k: "searrow;", v: 8600 }, { k: "sect;", v: 167 }, { k: "semi;", v: 59 }, { k: "seswar;", v: 10537 }, { k: "setminus;", v: 8726 }, { k: "setmn;", v: 8726 }, { k: "sext;", v: 10038 }, { k: "sfr;", v: 120112 }, { k: "sfrown;", v: 8994 }, { k: "sharp;", v: 9839 }, { k: "shchcy;", v: 1097 }, { k: "shcy;", v: 1096 }, { k: "shortmid;", v: 8739 }, { k: "shortparallel;", v: 8741 }, { k: "shy;", v: 173 }, { k: "sigma;", v: 963 }, { k: "sigmaf;", v: 962 }, { k: "sigmav;", v: 962 }, { k: "sim;", v: 8764 }, { k: "simdot;", v: 10858 }, { k: "sime;", v: 8771 }, { k: "simeq;", v: 8771 }, { k: "simg;", v: 10910 }, { k: "simgE;", v: 10912 }, { k: "siml;", v: 10909 }, { k: "simlE;", v: 10911 }, { k: "simne;", v: 8774 }, { k: "simplus;", v: 10788 }, { k: "simrarr;", v: 10610 }, { k: "slarr;", v: 8592 }, { k: "smallsetminus;", v: 8726 }, { k: "smashp;", v: 10803 }, { k: "smeparsl;", v: 10724 }, { k: "smid;", v: 8739 }, { k: "smile;", v: 8995 }, { k: "smt;", v: 10922 }, { k: "smte;", v: 10924 }, { k: "softcy;", v: 1100 }, { k: "sol;", v: 47 }, { k: "solb;", v: 10692 }, { k: "solbar;", v: 9023 }, { k: "sopf;", v: 120164 }, { k: "spades;", v: 9824 }, { k: "spadesuit;", v: 9824 }, { k: "spar;", v: 8741 }, { k: "sqcap;", v: 8851 }, { k: "sqcup;", v: 8852 }, { k: "sqsub;", v: 8847 }, { k: "sqsube;", v: 8849 }, { k: "sqsubset;", v: 8847 }, { k: "sqsubseteq;", v: 8849 }, { k: "sqsup;", v: 8848 }, { k: "sqsupe;", v: 8850 }, { k: "sqsupset;", v: 8848 }, { k: "sqsupseteq;", v: 8850 }, { k: "squ;", v: 9633 }, { k: "square;", v: 9633 }, { k: "squarf;", v: 9642 }, { k: "squf;", v: 9642 }, { k: "srarr;", v: 8594 }, { k: "sscr;", v: 120008 }, { k: "ssetmn;", v: 8726 }, { k: "ssmile;", v: 8995 }, { k: "sstarf;", v: 8902 }, { k: "star;", v: 9734 }, { k: "starf;", v: 9733 }, { k: "straightepsilon;", v: 1013 }, { k: "straightphi;", v: 981 }, { k: "strns;", v: 175 }, { k: "sub;", v: 8834 }, { k: "subE;", v: 10949 }, { k: "subdot;", v: 10941 }, { k: "sube;", v: 8838 }, { k: "subedot;", v: 10947 }, { k: "submult;", v: 10945 }, { k: "subnE;", v: 10955 }, { k: "subne;", v: 8842 }, { k: "subplus;", v: 10943 }, { k: "subrarr;", v: 10617 }, { k: "subset;", v: 8834 }, { k: "subseteq;", v: 8838 }, { k: "subseteqq;", v: 10949 }, { k: "subsetneq;", v: 8842 }, { k: "subsetneqq;", v: 10955 }, { k: "subsim;", v: 10951 }, { k: "subsub;", v: 10965 }, { k: "subsup;", v: 10963 }, { k: "succ;", v: 8827 }, { k: "succapprox;", v: 10936 }, { k: "succcurlyeq;", v: 8829 }, { k: "succeq;", v: 10928 }, { k: "succnapprox;", v: 10938 }, { k: "succneqq;", v: 10934 }, { k: "succnsim;", v: 8937 }, { k: "succsim;", v: 8831 }, { k: "sum;", v: 8721 }, { k: "sung;", v: 9834 }, { k: "sup;", v: 8835 }, { k: "sup1;", v: 185 }, { k: "sup2;", v: 178 }, { k: "sup3;", v: 179 }, { k: "supE;", v: 10950 }, { k: "supdot;", v: 10942 }, { k: "supdsub;", v: 10968 }, { k: "supe;", v: 8839 }, { k: "supedot;", v: 10948 }, { k: "suphsol;", v: 10185 }, { k: "suphsub;", v: 10967 }, { k: "suplarr;", v: 10619 }, { k: "supmult;", v: 10946 }, { k: "supnE;", v: 10956 }, { k: "supne;", v: 8843 }, { k: "supplus;", v: 10944 }, { k: "supset;", v: 8835 }, { k: "supseteq;", v: 8839 }, { k: "supseteqq;", v: 10950 }, { k: "supsetneq;", v: 8843 }, { k: "supsetneqq;", v: 10956 }, { k: "supsim;", v: 10952 }, { k: "supsub;", v: 10964 }, { k: "supsup;", v: 10966 }, { k: "swArr;", v: 8665 }, { k: "swarhk;", v: 10534 }, { k: "swarr;", v: 8601 }, { k: "swarrow;", v: 8601 }, { k: "swnwar;", v: 10538 }, { k: "szlig;", v: 223 }, { k: "target;", v: 8982 }, { k: "tau;", v: 964 }, { k: "tbrk;", v: 9140 }, { k: "tcaron;", v: 357 }, { k: "tcedil;", v: 355 }, { k: "tcy;", v: 1090 }, { k: "tdot;", v: 8411 }, { k: "telrec;", v: 8981 }, { k: "tfr;", v: 120113 }, { k: "there4;", v: 8756 }, { k: "therefore;", v: 8756 }, { k: "theta;", v: 952 }, { k: "thetasym;", v: 977 }, { k: "thetav;", v: 977 }, { k: "thickapprox;", v: 8776 }, { k: "thicksim;", v: 8764 }, { k: "thinsp;", v: 8201 }, { k: "thkap;", v: 8776 }, { k: "thksim;", v: 8764 }, { k: "thorn;", v: 254 }, { k: "tilde;", v: 732 }, { k: "times;", v: 215 }, { k: "timesb;", v: 8864 }, { k: "timesbar;", v: 10801 }, { k: "timesd;", v: 10800 }, { k: "tint;", v: 8749 }, { k: "toea;", v: 10536 }, { k: "top;", v: 8868 }, { k: "topbot;", v: 9014 }, { k: "topcir;", v: 10993 }, { k: "topf;", v: 120165 }, { k: "topfork;", v: 10970 }, { k: "tosa;", v: 10537 }, { k: "tprime;", v: 8244 }, { k: "trade;", v: 8482 }, { k: "triangle;", v: 9653 }, { k: "triangledown;", v: 9663 }, { k: "triangleleft;", v: 9667 }, { k: "trianglelefteq;", v: 8884 }, { k: "triangleq;", v: 8796 }, { k: "triangleright;", v: 9657 }, { k: "trianglerighteq;", v: 8885 }, { k: "tridot;", v: 9708 }, { k: "trie;", v: 8796 }, { k: "triminus;", v: 10810 }, { k: "triplus;", v: 10809 }, { k: "trisb;", v: 10701 }, { k: "tritime;", v: 10811 }, { k: "trpezium;", v: 9186 }, { k: "tscr;", v: 120009 }, { k: "tscy;", v: 1094 }, { k: "tshcy;", v: 1115 }, { k: "tstrok;", v: 359 }, { k: "twixt;", v: 8812 }, { k: "twoheadleftarrow;", v: 8606 }, { k: "twoheadrightarrow;", v: 8608 }, { k: "uArr;", v: 8657 }, { k: "uHar;", v: 10595 }, { k: "uacute;", v: 250 }, { k: "uarr;", v: 8593 }, { k: "ubrcy;", v: 1118 }, { k: "ubreve;", v: 365 }, { k: "ucirc;", v: 251 }, { k: "ucy;", v: 1091 }, { k: "udarr;", v: 8645 }, { k: "udblac;", v: 369 }, { k: "udhar;", v: 10606 }, { k: "ufisht;", v: 10622 }, { k: "ufr;", v: 120114 }, { k: "ugrave;", v: 249 }, { k: "uharl;", v: 8639 }, { k: "uharr;", v: 8638 }, { k: "uhblk;", v: 9600 }, { k: "ulcorn;", v: 8988 }, { k: "ulcorner;", v: 8988 }, { k: "ulcrop;", v: 8975 }, { k: "ultri;", v: 9720 }, { k: "umacr;", v: 363 }, { k: "uml;", v: 168 }, { k: "uogon;", v: 371 }, { k: "uopf;", v: 120166 }, { k: "uparrow;", v: 8593 }, { k: "updownarrow;", v: 8597 }, { k: "upharpoonleft;", v: 8639 }, { k: "upharpoonright;", v: 8638 }, { k: "uplus;", v: 8846 }, { k: "upsi;", v: 965 }, { k: "upsih;", v: 978 }, { k: "upsilon;", v: 965 }, { k: "upuparrows;", v: 8648 }, { k: "urcorn;", v: 8989 }, { k: "urcorner;", v: 8989 }, { k: "urcrop;", v: 8974 }, { k: "uring;", v: 367 }, { k: "urtri;", v: 9721 }, { k: "uscr;", v: 120010 }, { k: "utdot;", v: 8944 }, { k: "utilde;", v: 361 }, { k: "utri;", v: 9653 }, { k: "utrif;", v: 9652 }, { k: "uuarr;", v: 8648 }, { k: "uuml;", v: 252 }, { k: "uwangle;", v: 10663 }, { k: "vArr;", v: 8661 }, { k: "vBar;", v: 10984 }, { k: "vBarv;", v: 10985 }, { k: "vDash;", v: 8872 }, { k: "vangrt;", v: 10652 }, { k: "varepsilon;", v: 1013 }, { k: "varkappa;", v: 1008 }, { k: "varnothing;", v: 8709 }, { k: "varphi;", v: 981 }, { k: "varpi;", v: 982 }, { k: "varpropto;", v: 8733 }, { k: "varr;", v: 8597 }, { k: "varrho;", v: 1009 }, { k: "varsigma;", v: 962 }, { k: "vartheta;", v: 977 }, { k: "vartriangleleft;", v: 8882 }, { k: "vartriangleright;", v: 8883 }, { k: "vcy;", v: 1074 }, { k: "vdash;", v: 8866 }, { k: "vee;", v: 8744 }, { k: "veebar;", v: 8891 }, { k: "veeeq;", v: 8794 }, { k: "vellip;", v: 8942 }, { k: "verbar;", v: 124 }, { k: "vert;", v: 124 }, { k: "vfr;", v: 120115 }, { k: "vltri;", v: 8882 }, { k: "vopf;", v: 120167 }, { k: "vprop;", v: 8733 }, { k: "vrtri;", v: 8883 }, { k: "vscr;", v: 120011 }, { k: "vzigzag;", v: 10650 }, { k: "wcirc;", v: 373 }, { k: "wedbar;", v: 10847 }, { k: "wedge;", v: 8743 }, { k: "wedgeq;", v: 8793 }, { k: "weierp;", v: 8472 }, { k: "wfr;", v: 120116 }, { k: "wopf;", v: 120168 }, { k: "wp;", v: 8472 }, { k: "wr;", v: 8768 }, { k: "wreath;", v: 8768 }, { k: "wscr;", v: 120012 }, { k: "xcap;", v: 8898 }, { k: "xcirc;", v: 9711 }, { k: "xcup;", v: 8899 }, { k: "xdtri;", v: 9661 }, { k: "xfr;", v: 120117 }, { k: "xhArr;", v: 10234 }, { k: "xharr;", v: 10231 }, { k: "xi;", v: 958 }, { k: "xlArr;", v: 10232 }, { k: "xlarr;", v: 10229 }, { k: "xmap;", v: 10236 }, { k: "xnis;", v: 8955 }, { k: "xodot;", v: 10752 }, { k: "xopf;", v: 120169 }, { k: "xoplus;", v: 10753 }, { k: "xotime;", v: 10754 }, { k: "xrArr;", v: 10233 }, { k: "xrarr;", v: 10230 }, { k: "xscr;", v: 120013 }, { k: "xsqcup;", v: 10758 }, { k: "xuplus;", v: 10756 }, { k: "xutri;", v: 9651 }, { k: "xvee;", v: 8897 }, { k: "xwedge;", v: 8896 }, { k: "yacute;", v: 253 }, { k: "yacy;", v: 1103 }, { k: "ycirc;", v: 375 }, { k: "ycy;", v: 1099 }, { k: "yen;", v: 165 }, { k: "yfr;", v: 120118 }, { k: "yicy;", v: 1111 }, { k: "yopf;", v: 120170 }, { k: "yscr;", v: 120014 }, { k: "yucy;", v: 1102 }, { k: "yuml;", v: 255 }, { k: "zacute;", v: 378 }, { k: "zcaron;", v: 382 }, { k: "zcy;", v: 1079 }, { k: "zdot;", v: 380 }, { k: "zeetrf;", v: 8488 }, { k: "zeta;", v: 950 }, { k: "zfr;", v: 120119 }, { k: "zhcy;", v: 1078 }, { k: "zigrarr;", v: 8669 }, { k: "zopf;", v: 120171 }, { k: "zscr;", v: 120015 }, { k: "zwj;", v: 8205 }, { k: "zwnj;", v: 8204 }, { k: "AElig", v: 198 }, { k: "AMP", v: 38 }, { k: "Aacute", v: 193 }, { k: "Acirc", v: 194 }, { k: "Agrave", v: 192 }, { k: "Aring", v: 197 }, { k: "Atilde", v: 195 }, { k: "Auml", v: 196 }, { k: "COPY", v: 169 }, { k: "Ccedil", v: 199 }, { k: "ETH", v: 208 }, { k: "Eacute", v: 201 }, { k: "Ecirc", v: 202 }, { k: "Egrave", v: 200 }, { k: "Euml", v: 203 }, { k: "GT", v: 62 }, { k: "Iacute", v: 205 }, { k: "Icirc", v: 206 }, { k: "Igrave", v: 204 }, { k: "Iuml", v: 207 }, { k: "LT", v: 60 }, { k: "Ntilde", v: 209 }, { k: "Oacute", v: 211 }, { k: "Ocirc", v: 212 }, { k: "Ograve", v: 210 }, { k: "Oslash", v: 216 }, { k: "Otilde", v: 213 }, { k: "Ouml", v: 214 }, { k: "QUOT", v: 34 }, { k: "REG", v: 174 }, { k: "THORN", v: 222 }, { k: "Uacute", v: 218 }, { k: "Ucirc", v: 219 }, { k: "Ugrave", v: 217 }, { k: "Uuml", v: 220 }, { k: "Yacute", v: 221 }, { k: "aacute", v: 225 }, { k: "acirc", v: 226 }, { k: "acute", v: 180 }, { k: "aelig", v: 230 }, { k: "agrave", v: 224 }, { k: "amp", v: 38 }, { k: "aring", v: 229 }, { k: "atilde", v: 227 }, { k: "auml", v: 228 }, { k: "brvbar", v: 166 }, { k: "ccedil", v: 231 }, { k: "cedil", v: 184 }, { k: "cent", v: 162 }, { k: "copy", v: 169 }, { k: "curren", v: 164 }, { k: "deg", v: 176 }, { k: "divide", v: 247 }, { k: "eacute", v: 233 }, { k: "ecirc", v: 234 }, { k: "egrave", v: 232 }, { k: "eth", v: 240 }, { k: "euml", v: 235 }, { k: "frac12", v: 189 }, { k: "frac14", v: 188 }, { k: "frac34", v: 190 }, { k: "gt", v: 62 }, { k: "iacute", v: 237 }, { k: "icirc", v: 238 }, { k: "iexcl", v: 161 }, { k: "igrave", v: 236 }, { k: "iquest", v: 191 }, { k: "iuml", v: 239 }, { k: "laquo", v: 171 }, { k: "lt", v: 60 }, { k: "macr", v: 175 }, { k: "micro", v: 181 }, { k: "middot", v: 183 }, { k: "nbsp", v: 160 }, { k: "not", v: 172 }, { k: "ntilde", v: 241 }, { k: "oacute", v: 243 }, { k: "ocirc", v: 244 }, { k: "ograve", v: 242 }, { k: "ordf", v: 170 }, { k: "ordm", v: 186 }, { k: "oslash", v: 248 }, { k: "otilde", v: 245 }, { k: "ouml", v: 246 }, { k: "para", v: 182 }, { k: "plusmn", v: 177 }, { k: "pound", v: 163 }, { k: "quot", v: 34 }, { k: "raquo", v: 187 }, { k: "reg", v: 174 }, { k: "sect", v: 167 }, { k: "shy", v: 173 }, { k: "sup1", v: 185 }, { k: "sup2", v: 178 }, { k: "sup3", v: 179 }, { k: "szlig", v: 223 }, { k: "thorn", v: 254 }, { k: "times", v: 215 }, { k: "uacute", v: 250 }, { k: "ucirc", v: 251 }, { k: "ugrave", v: 249 }, { k: "uml", v: 168 }, { k: "uuml", v: 252 }, { k: "yacute", v: 253 }, { k: "yen", v: 165 }, { k: "yuml", v: 255 }]);
		entity2 = $makeMap($String.keyFor, [{ k: "NotEqualTilde;", v: $toNativeArray($kindInt32, [8770, 824]) }, { k: "NotGreaterFullEqual;", v: $toNativeArray($kindInt32, [8807, 824]) }, { k: "NotGreaterGreater;", v: $toNativeArray($kindInt32, [8811, 824]) }, { k: "NotGreaterSlantEqual;", v: $toNativeArray($kindInt32, [10878, 824]) }, { k: "NotHumpDownHump;", v: $toNativeArray($kindInt32, [8782, 824]) }, { k: "NotHumpEqual;", v: $toNativeArray($kindInt32, [8783, 824]) }, { k: "NotLeftTriangleBar;", v: $toNativeArray($kindInt32, [10703, 824]) }, { k: "NotLessLess;", v: $toNativeArray($kindInt32, [8810, 824]) }, { k: "NotLessSlantEqual;", v: $toNativeArray($kindInt32, [10877, 824]) }, { k: "NotNestedGreaterGreater;", v: $toNativeArray($kindInt32, [10914, 824]) }, { k: "NotNestedLessLess;", v: $toNativeArray($kindInt32, [10913, 824]) }, { k: "NotPrecedesEqual;", v: $toNativeArray($kindInt32, [10927, 824]) }, { k: "NotRightTriangleBar;", v: $toNativeArray($kindInt32, [10704, 824]) }, { k: "NotSquareSubset;", v: $toNativeArray($kindInt32, [8847, 824]) }, { k: "NotSquareSuperset;", v: $toNativeArray($kindInt32, [8848, 824]) }, { k: "NotSubset;", v: $toNativeArray($kindInt32, [8834, 8402]) }, { k: "NotSucceedsEqual;", v: $toNativeArray($kindInt32, [10928, 824]) }, { k: "NotSucceedsTilde;", v: $toNativeArray($kindInt32, [8831, 824]) }, { k: "NotSuperset;", v: $toNativeArray($kindInt32, [8835, 8402]) }, { k: "ThickSpace;", v: $toNativeArray($kindInt32, [8287, 8202]) }, { k: "acE;", v: $toNativeArray($kindInt32, [8766, 819]) }, { k: "bne;", v: $toNativeArray($kindInt32, [61, 8421]) }, { k: "bnequiv;", v: $toNativeArray($kindInt32, [8801, 8421]) }, { k: "caps;", v: $toNativeArray($kindInt32, [8745, 65024]) }, { k: "cups;", v: $toNativeArray($kindInt32, [8746, 65024]) }, { k: "fjlig;", v: $toNativeArray($kindInt32, [102, 106]) }, { k: "gesl;", v: $toNativeArray($kindInt32, [8923, 65024]) }, { k: "gvertneqq;", v: $toNativeArray($kindInt32, [8809, 65024]) }, { k: "gvnE;", v: $toNativeArray($kindInt32, [8809, 65024]) }, { k: "lates;", v: $toNativeArray($kindInt32, [10925, 65024]) }, { k: "lesg;", v: $toNativeArray($kindInt32, [8922, 65024]) }, { k: "lvertneqq;", v: $toNativeArray($kindInt32, [8808, 65024]) }, { k: "lvnE;", v: $toNativeArray($kindInt32, [8808, 65024]) }, { k: "nGg;", v: $toNativeArray($kindInt32, [8921, 824]) }, { k: "nGtv;", v: $toNativeArray($kindInt32, [8811, 824]) }, { k: "nLl;", v: $toNativeArray($kindInt32, [8920, 824]) }, { k: "nLtv;", v: $toNativeArray($kindInt32, [8810, 824]) }, { k: "nang;", v: $toNativeArray($kindInt32, [8736, 8402]) }, { k: "napE;", v: $toNativeArray($kindInt32, [10864, 824]) }, { k: "napid;", v: $toNativeArray($kindInt32, [8779, 824]) }, { k: "nbump;", v: $toNativeArray($kindInt32, [8782, 824]) }, { k: "nbumpe;", v: $toNativeArray($kindInt32, [8783, 824]) }, { k: "ncongdot;", v: $toNativeArray($kindInt32, [10861, 824]) }, { k: "nedot;", v: $toNativeArray($kindInt32, [8784, 824]) }, { k: "nesim;", v: $toNativeArray($kindInt32, [8770, 824]) }, { k: "ngE;", v: $toNativeArray($kindInt32, [8807, 824]) }, { k: "ngeqq;", v: $toNativeArray($kindInt32, [8807, 824]) }, { k: "ngeqslant;", v: $toNativeArray($kindInt32, [10878, 824]) }, { k: "nges;", v: $toNativeArray($kindInt32, [10878, 824]) }, { k: "nlE;", v: $toNativeArray($kindInt32, [8806, 824]) }, { k: "nleqq;", v: $toNativeArray($kindInt32, [8806, 824]) }, { k: "nleqslant;", v: $toNativeArray($kindInt32, [10877, 824]) }, { k: "nles;", v: $toNativeArray($kindInt32, [10877, 824]) }, { k: "notinE;", v: $toNativeArray($kindInt32, [8953, 824]) }, { k: "notindot;", v: $toNativeArray($kindInt32, [8949, 824]) }, { k: "nparsl;", v: $toNativeArray($kindInt32, [11005, 8421]) }, { k: "npart;", v: $toNativeArray($kindInt32, [8706, 824]) }, { k: "npre;", v: $toNativeArray($kindInt32, [10927, 824]) }, { k: "npreceq;", v: $toNativeArray($kindInt32, [10927, 824]) }, { k: "nrarrc;", v: $toNativeArray($kindInt32, [10547, 824]) }, { k: "nrarrw;", v: $toNativeArray($kindInt32, [8605, 824]) }, { k: "nsce;", v: $toNativeArray($kindInt32, [10928, 824]) }, { k: "nsubE;", v: $toNativeArray($kindInt32, [10949, 824]) }, { k: "nsubset;", v: $toNativeArray($kindInt32, [8834, 8402]) }, { k: "nsubseteqq;", v: $toNativeArray($kindInt32, [10949, 824]) }, { k: "nsucceq;", v: $toNativeArray($kindInt32, [10928, 824]) }, { k: "nsupE;", v: $toNativeArray($kindInt32, [10950, 824]) }, { k: "nsupset;", v: $toNativeArray($kindInt32, [8835, 8402]) }, { k: "nsupseteqq;", v: $toNativeArray($kindInt32, [10950, 824]) }, { k: "nvap;", v: $toNativeArray($kindInt32, [8781, 8402]) }, { k: "nvge;", v: $toNativeArray($kindInt32, [8805, 8402]) }, { k: "nvgt;", v: $toNativeArray($kindInt32, [62, 8402]) }, { k: "nvle;", v: $toNativeArray($kindInt32, [8804, 8402]) }, { k: "nvlt;", v: $toNativeArray($kindInt32, [60, 8402]) }, { k: "nvltrie;", v: $toNativeArray($kindInt32, [8884, 8402]) }, { k: "nvrtrie;", v: $toNativeArray($kindInt32, [8885, 8402]) }, { k: "nvsim;", v: $toNativeArray($kindInt32, [8764, 8402]) }, { k: "race;", v: $toNativeArray($kindInt32, [8765, 817]) }, { k: "smtes;", v: $toNativeArray($kindInt32, [10924, 65024]) }, { k: "sqcaps;", v: $toNativeArray($kindInt32, [8851, 65024]) }, { k: "sqcups;", v: $toNativeArray($kindInt32, [8852, 65024]) }, { k: "varsubsetneq;", v: $toNativeArray($kindInt32, [8842, 65024]) }, { k: "varsubsetneqq;", v: $toNativeArray($kindInt32, [10955, 65024]) }, { k: "varsupsetneq;", v: $toNativeArray($kindInt32, [8843, 65024]) }, { k: "varsupsetneqq;", v: $toNativeArray($kindInt32, [10956, 65024]) }, { k: "vnsub;", v: $toNativeArray($kindInt32, [8834, 8402]) }, { k: "vnsup;", v: $toNativeArray($kindInt32, [8835, 8402]) }, { k: "vsubnE;", v: $toNativeArray($kindInt32, [10955, 65024]) }, { k: "vsubne;", v: $toNativeArray($kindInt32, [8842, 65024]) }, { k: "vsupnE;", v: $toNativeArray($kindInt32, [10956, 65024]) }, { k: "vsupne;", v: $toNativeArray($kindInt32, [8843, 65024]) }]);
		replacementTable = $toNativeArray($kindInt32, [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376]);
		htmlEscaper = strings.NewReplacer(new sliceType(["&", "&amp;", "'", "&#39;", "<", "&lt;", ">", "&gt;", "\"", "&#34;"]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/albrow/vdom"] = (function() {
	var $pkg = {}, $init, xml, fmt, js, dom, html, io, reflect, IndexedByteReader, Patcher, PatchSet, Append, Replace, Remove, SetAttr, RemoveAttr, Tree, Node, Attr, Element, Text, Comment, sliceType, ptrType, ptrType$1, ptrType$2, sliceType$1, sliceType$2, sliceType$3, ptrType$3, ptrType$4, sliceType$4, sliceType$5, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, mapType, document, Diff, recursiveDiff, diffAttributes, NewIndexedByteReader, Parse, parseToken, parseName, wasAutoClosed, init, findInDOM, createForDOM, CompareNodes, CompareNodesRecursive;
	xml = $packages["encoding/xml"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	dom = $packages["honnef.co/go/js/dom"];
	html = $packages["html"];
	io = $packages["io"];
	reflect = $packages["reflect"];
	IndexedByteReader = $pkg.IndexedByteReader = $newType(0, $kindStruct, "vdom.IndexedByteReader", true, "github.com/albrow/vdom", true, function(buf_, off_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.off = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
	});
	Patcher = $pkg.Patcher = $newType(8, $kindInterface, "vdom.Patcher", true, "github.com/albrow/vdom", true, null);
	PatchSet = $pkg.PatchSet = $newType(12, $kindSlice, "vdom.PatchSet", true, "github.com/albrow/vdom", true, null);
	Append = $pkg.Append = $newType(0, $kindStruct, "vdom.Append", true, "github.com/albrow/vdom", true, function(Child_, Parent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Child = $ifaceNil;
			this.Parent = ptrType$1.nil;
			return;
		}
		this.Child = Child_;
		this.Parent = Parent_;
	});
	Replace = $pkg.Replace = $newType(0, $kindStruct, "vdom.Replace", true, "github.com/albrow/vdom", true, function(Old_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Old = $ifaceNil;
			this.New = $ifaceNil;
			return;
		}
		this.Old = Old_;
		this.New = New_;
	});
	Remove = $pkg.Remove = $newType(0, $kindStruct, "vdom.Remove", true, "github.com/albrow/vdom", true, function(Node_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Node = $ifaceNil;
			return;
		}
		this.Node = Node_;
	});
	SetAttr = $pkg.SetAttr = $newType(0, $kindStruct, "vdom.SetAttr", true, "github.com/albrow/vdom", true, function(Node_, Attr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Node = $ifaceNil;
			this.Attr = ptrType$2.nil;
			return;
		}
		this.Node = Node_;
		this.Attr = Attr_;
	});
	RemoveAttr = $pkg.RemoveAttr = $newType(0, $kindStruct, "vdom.RemoveAttr", true, "github.com/albrow/vdom", true, function(Node_, AttrName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Node = $ifaceNil;
			this.AttrName = "";
			return;
		}
		this.Node = Node_;
		this.AttrName = AttrName_;
	});
	Tree = $pkg.Tree = $newType(0, $kindStruct, "vdom.Tree", true, "github.com/albrow/vdom", true, function(Children_, reader_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Children = sliceType$3.nil;
			this.reader = ptrType$3.nil;
			this.src = sliceType$1.nil;
			return;
		}
		this.Children = Children_;
		this.reader = reader_;
		this.src = src_;
	});
	Node = $pkg.Node = $newType(8, $kindInterface, "vdom.Node", true, "github.com/albrow/vdom", true, null);
	Attr = $pkg.Attr = $newType(0, $kindStruct, "vdom.Attr", true, "github.com/albrow/vdom", true, function(Name_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Value = "";
			return;
		}
		this.Name = Name_;
		this.Value = Value_;
	});
	Element = $pkg.Element = $newType(0, $kindStruct, "vdom.Element", true, "github.com/albrow/vdom", true, function(Name_, Attrs_, parent_, children_, tree_, srcStart_, srcEnd_, srcInnerStart_, srcInnerEnd_, autoClosed_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Attrs = sliceType$4.nil;
			this.parent = ptrType$1.nil;
			this.children = sliceType$3.nil;
			this.tree = ptrType$4.nil;
			this.srcStart = 0;
			this.srcEnd = 0;
			this.srcInnerStart = 0;
			this.srcInnerEnd = 0;
			this.autoClosed = false;
			this.index = sliceType$5.nil;
			return;
		}
		this.Name = Name_;
		this.Attrs = Attrs_;
		this.parent = parent_;
		this.children = children_;
		this.tree = tree_;
		this.srcStart = srcStart_;
		this.srcEnd = srcEnd_;
		this.srcInnerStart = srcInnerStart_;
		this.srcInnerEnd = srcInnerEnd_;
		this.autoClosed = autoClosed_;
		this.index = index_;
	});
	Text = $pkg.Text = $newType(0, $kindStruct, "vdom.Text", true, "github.com/albrow/vdom", true, function(Value_, parent_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = sliceType$1.nil;
			this.parent = ptrType$1.nil;
			this.index = sliceType$5.nil;
			return;
		}
		this.Value = Value_;
		this.parent = parent_;
		this.index = index_;
	});
	Comment = $pkg.Comment = $newType(0, $kindStruct, "vdom.Comment", true, "github.com/albrow/vdom", true, function(Value_, parent_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = sliceType$1.nil;
			this.parent = ptrType$1.nil;
			this.index = sliceType$5.nil;
			return;
		}
		this.Value = Value_;
		this.parent = parent_;
		this.index = index_;
	});
	sliceType = $sliceType(Patcher);
	ptrType = $ptrType(sliceType);
	ptrType$1 = $ptrType(Element);
	ptrType$2 = $ptrType(Attr);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType(Node);
	ptrType$3 = $ptrType(IndexedByteReader);
	ptrType$4 = $ptrType(Tree);
	sliceType$4 = $sliceType(Attr);
	sliceType$5 = $sliceType($Int);
	ptrType$5 = $ptrType(Text);
	ptrType$6 = $ptrType(Comment);
	ptrType$7 = $ptrType(Append);
	ptrType$8 = $ptrType(Replace);
	ptrType$9 = $ptrType(Remove);
	ptrType$10 = $ptrType(SetAttr);
	ptrType$11 = $ptrType(RemoveAttr);
	mapType = $mapType($String, $String);
	Diff = function(t, other) {
		var $ptr, _r, err, other, patches, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; other = $f.other; patches = $f.patches; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		patches = [patches];
		patches[0] = new sliceType([]);
		_r = recursiveDiff((patches.$ptr || (patches.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, patches))), t.Children, other.Children); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [PatchSet.nil, err];
			return [PatchSet.nil, err];
		}
		$s = -1; return [$subslice(new PatchSet(patches[0].$array), patches[0].$offset, patches[0].$offset + patches[0].$length), $ifaceNil];
		return [$subslice(new PatchSet(patches[0].$array), patches[0].$offset, patches[0].$offset + patches[0].$length), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Diff }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.other = other; $f.patches = patches; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Diff = Diff;
	recursiveDiff = function(patches, nodes, otherNodes) {
		var $ptr, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _tuple, _tuple$1, el, i, match, minNumNodes, node, node$1, nodes, numNodes, numOtherNodes, ok, otherEl, otherNode, otherNode$1, otherNodes, patches, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; el = $f.el; i = $f.i; match = $f.match; minNumNodes = $f.minNumNodes; node = $f.node; node$1 = $f.node$1; nodes = $f.nodes; numNodes = $f.numNodes; numOtherNodes = $f.numOtherNodes; ok = $f.ok; otherEl = $f.otherEl; otherNode = $f.otherNode; otherNode$1 = $f.otherNode$1; otherNodes = $f.otherNodes; patches = $f.patches; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		numOtherNodes = otherNodes.$length;
		numNodes = nodes.$length;
		minNumNodes = numOtherNodes;
		/* */ if (numOtherNodes > numNodes) { $s = 1; continue; }
		/* */ if (numNodes > numOtherNodes) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (numOtherNodes > numNodes) { */ case 1:
			_ref = $subslice(otherNodes, numNodes);
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				otherNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r = otherNode.Parent(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				patches.$set($append(patches.$get(), new Append.ptr(otherNode, _r)));
				_i++;
			/* } */ $s = 4; continue; case 5:
			minNumNodes = numNodes;
			$s = 3; continue;
		/* } else if (numNodes > numOtherNodes) { */ case 2:
			_ref$1 = $subslice(nodes, numOtherNodes);
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				node = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				patches.$set($append(patches.$get(), new Remove.ptr(node)));
				_i$1++;
			}
			minNumNodes = numOtherNodes;
		/* } */ case 3:
		i = 0;
		/* while (true) { */ case 7:
			/* if (!(i < minNumNodes)) { break; } */ if(!(i < minNumNodes)) { $s = 8; continue; }
			otherNode$1 = ((i < 0 || i >= otherNodes.$length) ? $throwRuntimeError("index out of range") : otherNodes.$array[otherNodes.$offset + i]);
			node$1 = ((i < 0 || i >= nodes.$length) ? $throwRuntimeError("index out of range") : nodes.$array[nodes.$offset + i]);
			_r$1 = CompareNodes(node$1, otherNode$1, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			match = _tuple[0];
			if (!match) {
				patches.$set($append(patches.$get(), new Replace.ptr(node$1, otherNode$1)));
				i = i + (1) >> 0;
				/* continue; */ $s = 7; continue;
			}
			_tuple$1 = $assertType(otherNode$1, ptrType$1, true);
			otherEl = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (ok) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (ok) { */ case 10:
				el = $assertType(node$1, ptrType$1);
				diffAttributes(patches, el, otherEl);
				_r$2 = recursiveDiff(patches, el.Children(), otherEl.Children()); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 11:
			i = i + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: recursiveDiff }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.el = el; $f.i = i; $f.match = match; $f.minNumNodes = minNumNodes; $f.node = node; $f.node$1 = node$1; $f.nodes = nodes; $f.numNodes = numNodes; $f.numOtherNodes = numOtherNodes; $f.ok = ok; $f.otherEl = otherEl; $f.otherNode = otherNode; $f.otherNode$1 = otherNode$1; $f.otherNodes = otherNodes; $f.patches = patches; $f.$s = $s; $f.$r = $r; return $f;
	};
	diffAttributes = function(patches, el, otherEl) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _keys, _keys$1, _ref, _ref$1, _tuple, _tuple$1, attrName, attrs, el, found, found$1, name, otherAttrs, otherEl, otherValue, patches, value;
		otherAttrs = otherEl.AttrMap();
		attrs = el.AttrMap();
		_ref = attrs;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			attrName = _entry.k;
			_tuple = (_entry$1 = otherAttrs[$String.keyFor(attrName)], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]);
			found = _tuple[1];
			if (!found) {
				patches.$set($append(patches.$get(), new RemoveAttr.ptr(el, attrName)));
			}
			_i++;
		}
		_ref$1 = otherAttrs;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$2 = _ref$1[_keys$1[_i$1]];
			if (_entry$2 === undefined) {
				_i$1++;
				continue;
			}
			name = _entry$2.k;
			otherValue = _entry$2.v;
			_tuple$1 = (_entry$3 = attrs[$String.keyFor(name)], _entry$3 !== undefined ? [_entry$3.v, true] : ["", false]);
			value = _tuple$1[0];
			found$1 = _tuple$1[1];
			if (!found$1) {
				patches.$set($append(patches.$get(), new SetAttr.ptr(el, new Attr.ptr(name, otherValue))));
			} else if (!(value === otherValue)) {
				patches.$set($append(patches.$get(), new SetAttr.ptr(el, new Attr.ptr(name, otherValue))));
			}
			_i$1++;
		}
	};
	NewIndexedByteReader = function(buf) {
		var $ptr, buf;
		return new IndexedByteReader.ptr(buf, 0);
	};
	$pkg.NewIndexedByteReader = NewIndexedByteReader;
	IndexedByteReader.ptr.prototype.Read = function(p) {
		var $ptr, n, p, r;
		r = this;
		n = $copySlice(p, $subslice(r.buf, r.off));
		r.off = r.off + (n) >> 0;
		return [n, $ifaceNil];
	};
	IndexedByteReader.prototype.Read = function(p) { return this.$val.Read(p); };
	IndexedByteReader.ptr.prototype.ReadByte = function() {
		var $ptr, c, r, x, x$1;
		r = this;
		if (r.off >= r.buf.$length) {
			return [0, io.EOF];
		}
		c = (x = r.buf, x$1 = r.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		r.off = r.off + (1) >> 0;
		return [c, $ifaceNil];
	};
	IndexedByteReader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	IndexedByteReader.ptr.prototype.Offset = function() {
		var $ptr, r;
		r = this;
		return r.off;
	};
	IndexedByteReader.prototype.Offset = function() { return this.$val.Offset(); };
	IndexedByteReader.ptr.prototype.BackwardsSearch = function(min, max, b) {
		var $ptr, _r, _r$1, b, j, max, min, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; b = $f.b; j = $f.j; max = $f.max; min = $f.min; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (min >= r.buf.$length || min < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (min >= r.buf.$length || min < 0) { */ case 1:
			_r = fmt.Errorf("Error in BackwardsSearch min %d is out of bounds. r has buf of length %d", new sliceType$2([new $Int(min), new $Int(r.buf.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [-1, _r];
			return [-1, _r];
		/* } */ case 2:
		/* */ if (max >= r.buf.$length || max < min) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (max >= r.buf.$length || max < min) { */ case 4:
			_r$1 = fmt.Errorf("Error in BackwardsSearch max %d is out of bounds. r has buf of length %d and min was %d", new sliceType$2([new $Int(min), new $Int(r.buf.$length), new $Int(min)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [-1, _r$1];
			return [-1, _r$1];
		/* } */ case 5:
		j = max;
		while (true) {
			if (!(j >= min)) { break; }
			if ((x = r.buf, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j])) === b) {
				$s = -1; return [j, $ifaceNil];
				return [j, $ifaceNil];
			}
			j = j - (1) >> 0;
		}
		$s = -1; return [-1, $ifaceNil];
		return [-1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: IndexedByteReader.ptr.prototype.BackwardsSearch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.j = j; $f.max = max; $f.min = min; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	IndexedByteReader.prototype.BackwardsSearch = function(min, max, b) { return this.$val.BackwardsSearch(min, max, b); };
	Parse = function(src) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, currentParent, dec, err, err$1, nextParent, r, src, token, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; currentParent = $f.currentParent; dec = $f.dec; err = $f.err; err$1 = $f.err$1; nextParent = $f.nextParent; r = $f.r; src = $f.src; token = $f.token; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = NewIndexedByteReader(src);
		dec = xml.NewDecoder(r);
		dec.Entity = xml.HTMLEntity;
		dec.Strict = false;
		dec.AutoClose = xml.HTMLAutoClose;
		tree = new Tree.ptr(sliceType$3.nil, r, src);
		currentParent = ptrType$1.nil;
		_r = dec.Token(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		token = _tuple[0];
		err = _tuple[1];
		/* while (true) { */ case 2:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					/* break; */ $s = 3; continue;
				} else {
					$s = -1; return [ptrType$4.nil, err];
					return [ptrType$4.nil, err];
				}
			}
			_r$1 = parseToken(tree, token, currentParent); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			nextParent = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [ptrType$4.nil, err$1];
				return [ptrType$4.nil, err$1];
			} else {
				currentParent = nextParent;
			}
			_r$2 = dec.Token(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			token = _tuple$2[0];
			err = _tuple$2[1];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [tree, $ifaceNil];
		return [tree, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.currentParent = currentParent; $f.dec = dec; $f.err = err; $f.err$1 = err$1; $f.nextParent = nextParent; $f.r = r; $f.src = src; $f.token = token; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parseToken = function(tree, token, currentParent) {
		var $ptr, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, attr, charData, closingTagLength, comment, currentParent, el, endEl, err, err$1, nextParent, resultingNode, start, startEl, text, token, tree, x, x$1, xmlComment, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; attr = $f.attr; charData = $f.charData; closingTagLength = $f.closingTagLength; comment = $f.comment; currentParent = $f.currentParent; el = $f.el; endEl = $f.endEl; err = $f.err; err$1 = $f.err$1; nextParent = $f.nextParent; resultingNode = $f.resultingNode; start = $f.start; startEl = $f.startEl; text = $f.text; token = $f.token; tree = $f.tree; x = $f.x; x$1 = $f.x$1; xmlComment = $f.xmlComment; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nextParent = ptrType$1.nil;
		err = $ifaceNil;
		resultingNode = $ifaceNil;
		_ref = token;
		/* */ if ($assertType(_ref, xml.StartElement, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, xml.EndElement, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, xml.CharData, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, xml.Comment, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, xml.ProcInst, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, xml.Directive, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, xml.StartElement, true)[1]) { */ case 1:
			startEl = $clone($assertType(token, xml.StartElement), xml.StartElement);
			_r = parseName(startEl.Name); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			el = new Element.ptr(_r, sliceType$4.nil, ptrType$1.nil, sliceType$3.nil, tree, 0, 0, 0, 0, false, sliceType$5.nil);
			_ref$1 = startEl.Attr;
			_i = 0;
			/* while (true) { */ case 9:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 10; continue; }
				attr = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), xml.Attr);
				_r$1 = parseName(attr.Name); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				el.Attrs = $append(el.Attrs, new Attr.ptr(_r$1, attr.Value));
				_i++;
			/* } */ $s = 9; continue; case 10:
			if (!(currentParent === ptrType$1.nil)) {
				el.index = $append(currentParent.index, currentParent.children.$length);
				el.parent = currentParent;
				currentParent.children = $append(currentParent.children, el);
			} else {
				el.index = new sliceType$5([tree.Children.$length]);
			}
			_r$2 = tree.reader.BackwardsSearch(0, tree.reader.Offset() - 1 >> 0, 60); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			start = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = ptrType$1.nil;
				_tmp$1 = err$1;
				nextParent = _tmp;
				err = _tmp$1;
				$s = -1; return [nextParent, err];
				return [nextParent, err];
			}
			el.srcStart = start;
			el.srcInnerStart = tree.reader.Offset();
			nextParent = el;
			resultingNode = el;
			$s = 7; continue;
		/* } else if ($assertType(_ref, xml.EndElement, true)[1]) { */ case 2:
			endEl = $clone($assertType(token, xml.EndElement), xml.EndElement);
			/* */ if (currentParent === ptrType$1.nil) { $s = 13; continue; }
			_r$3 = parseName(endEl.Name); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!(currentParent.Name === _r$3)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (currentParent === ptrType$1.nil) { */ case 13:
				_tmp$2 = ptrType$1.nil;
				_r$4 = parseName(endEl.Name); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg = new $String(_r$4);
				_r$5 = fmt.Errorf("XML was malformed: Found closing tag %s before a corresponding opening tag.", new sliceType$2([_arg])); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tmp$3 = _r$5;
				nextParent = _tmp$2;
				err = _tmp$3;
				$s = -1; return [nextParent, err];
				return [nextParent, err];
			/* } else if (!(currentParent.Name === _r$3)) { */ case 14:
				_tmp$4 = ptrType$1.nil;
				_r$6 = parseName(endEl.Name); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r$6);
				_arg$2 = new $String(currentParent.Name);
				_r$7 = fmt.Errorf("XML was malformed: Found closing tag %s before the closing tag for %s", new sliceType$2([_arg$1, _arg$2])); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tmp$5 = _r$7;
				nextParent = _tmp$4;
				err = _tmp$5;
				$s = -1; return [nextParent, err];
				return [nextParent, err];
			/* } */ case 15:
			_r$8 = wasAutoClosed(tree, currentParent.Name); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (_r$8) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_r$8) { */ case 21:
				currentParent.autoClosed = true;
				$s = 23; continue;
			/* } else { */ case 22:
				currentParent.srcEnd = tree.reader.Offset();
				closingTagLength = currentParent.Name.length + 3 >> 0;
				currentParent.srcInnerEnd = tree.reader.Offset() - closingTagLength >> 0;
			/* } */ case 23:
			if (!(currentParent.parent === ptrType$1.nil)) {
				nextParent = currentParent.parent;
			} else {
				nextParent = ptrType$1.nil;
			}
			$s = 7; continue;
		/* } else if ($assertType(_ref, xml.CharData, true)[1]) { */ case 3:
			charData = $assertType(token, xml.CharData);
			text = new Text.ptr((x = charData.Copy(), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length)), ptrType$1.nil, sliceType$5.nil);
			if (!(currentParent === ptrType$1.nil)) {
				text.index = $append(currentParent.index, currentParent.children.$length);
				text.parent = currentParent;
				currentParent.children = $append(currentParent.children, text);
			} else {
				text.index = new sliceType$5([tree.Children.$length]);
			}
			resultingNode = text;
			nextParent = currentParent;
			$s = 7; continue;
		/* } else if ($assertType(_ref, xml.Comment, true)[1]) { */ case 4:
			xmlComment = $assertType(token, xml.Comment);
			comment = new Comment.ptr((x$1 = xmlComment.Copy(), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), ptrType$1.nil, sliceType$5.nil);
			if (!(currentParent === ptrType$1.nil)) {
				comment.index = $append(currentParent.index, currentParent.children.$length);
				comment.parent = currentParent;
				currentParent.children = $append(currentParent.children, comment);
			} else {
				comment.index = new sliceType$5([tree.Children.$length]);
			}
			resultingNode = comment;
			nextParent = currentParent;
			$s = 7; continue;
		/* } else if ($assertType(_ref, xml.ProcInst, true)[1]) { */ case 5:
			_tmp$6 = ptrType$1.nil;
			_r$9 = fmt.Errorf("parse error: found token of type xml.ProcInst, which is not allowed in html", new sliceType$2([])); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tmp$7 = _r$9;
			nextParent = _tmp$6;
			err = _tmp$7;
			$s = -1; return [nextParent, err];
			return [nextParent, err];
		/* } else if ($assertType(_ref, xml.Directive, true)[1]) { */ case 6:
			_tmp$8 = ptrType$1.nil;
			_r$10 = fmt.Errorf("parse error: found token of type xml.Directive, which is not allowed in html", new sliceType$2([])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tmp$9 = _r$10;
			nextParent = _tmp$8;
			err = _tmp$9;
			$s = -1; return [nextParent, err];
			return [nextParent, err];
		/* } */ case 7:
		if (!($interfaceIsEqual(resultingNode, $ifaceNil)) && currentParent === ptrType$1.nil) {
			tree.Children = $append(tree.Children, resultingNode);
		}
		_tmp$10 = nextParent;
		_tmp$11 = $ifaceNil;
		nextParent = _tmp$10;
		err = _tmp$11;
		$s = -1; return [nextParent, err];
		return [nextParent, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseToken }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.attr = attr; $f.charData = charData; $f.closingTagLength = closingTagLength; $f.comment = comment; $f.currentParent = currentParent; $f.el = el; $f.endEl = endEl; $f.err = err; $f.err$1 = err$1; $f.nextParent = nextParent; $f.resultingNode = resultingNode; $f.start = start; $f.startEl = startEl; $f.text = text; $f.token = token; $f.tree = tree; $f.x = x; $f.x$1 = x$1; $f.xmlComment = xmlComment; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseName = function(name) {
		var $ptr, _r, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = $clone(name, xml.Name);
		/* */ if (!(name.Space === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name.Space === "")) { */ case 1:
			_r = fmt.Sprintf("%s:%s", new sliceType$2([new $String(name.Space), new $String(name.Local)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		$s = -1; return name.Local;
		return name.Local;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	wasAutoClosed = function(tree, tagName) {
		var $ptr, _r, closingTag, start, stop, tagName, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; closingTag = $f.closingTag; start = $f.start; stop = $f.stop; tagName = $f.tagName; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf("</%s>", new sliceType$2([new $String(tagName)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		closingTag = _r;
		stop = tree.reader.Offset();
		start = stop - closingTag.length >> 0;
		if (start < 0) {
			$s = -1; return true;
			return true;
		}
		$s = -1; return !($bytesToString($subslice(tree.reader.buf, start, stop)) === closingTag);
		return !($bytesToString($subslice(tree.reader.buf, start, stop)) === closingTag);
		/* */ } return; } if ($f === undefined) { $f = { $blk: wasAutoClosed }; } $f.$ptr = $ptr; $f._r = _r; $f.closingTag = closingTag; $f.start = start; $f.stop = stop; $f.tagName = tagName; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	init = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($global === null) && !($global.document === undefined)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($global === null) && !($global.document === undefined)) { */ case 1:
			_r = dom.GetWindow().Document(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			document = _r;
		/* } */ case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	PatchSet.prototype.Patch = function(root) {
		var $ptr, _i, _r, _ref, err, patch, ps, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; err = $f.err; patch = $f.patch; ps = $f.ps; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ps = this;
		_ref = ps;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			patch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = patch.Patch(root); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PatchSet.prototype.Patch }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.err = err; $f.patch = patch; $f.ps = ps; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(PatchSet).prototype.Patch = function(root) { return this.$get().Patch(root); };
	Append.ptr.prototype.Patch = function(root) {
		var $ptr, _r, _r$1, child, p, parent, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; child = $f.child; p = $f.p; parent = $f.parent; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		parent = $ifaceNil;
		/* */ if (!(p.Parent === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.Parent === ptrType$1.nil)) { */ case 1:
			_r = findInDOM(p.Parent, root); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			parent = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			parent = root;
		/* } */ case 3:
		_r$1 = createForDOM(p.Child); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		child = _r$1;
		$r = parent.AppendChild(child); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Append.ptr.prototype.Patch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.child = child; $f.p = p; $f.parent = parent; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Append.prototype.Patch = function(root) { return this.$val.Patch(root); };
	Replace.ptr.prototype.Patch = function(root) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, newChild, oldChild, p, parent, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; newChild = $f.newChild; oldChild = $f.oldChild; p = $f.p; parent = $f.parent; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		parent = $ifaceNil;
		_r = p.Old.Parent(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!(_r === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r === ptrType$1.nil)) { */ case 1:
			_r$1 = p.Old.Parent(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = findInDOM(_r$1, root); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			parent = _r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			parent = root;
		/* } */ case 3:
		_r$3 = findInDOM(p.Old, root); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		oldChild = _r$3;
		_r$4 = createForDOM(p.New); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		newChild = _r$4;
		$r = parent.ReplaceChild(newChild, oldChild); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replace.ptr.prototype.Patch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.newChild = newChild; $f.oldChild = oldChild; $f.p = p; $f.parent = parent; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replace.prototype.Patch = function(root) { return this.$val.Patch(root); };
	Remove.ptr.prototype.Patch = function(root) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, lastIndex, p, parent, root, self, sibling, t, t$1, t$2, t$3, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; lastIndex = $f.lastIndex; p = $f.p; parent = $f.parent; root = $f.root; self = $f.self; sibling = $f.sibling; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		parent = $ifaceNil;
		_r = p.Node.Parent(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!(_r === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r === ptrType$1.nil)) { */ case 1:
			_r$1 = p.Node.Parent(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = findInDOM(_r$1, root); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			parent = _r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			parent = root;
		/* } */ case 3:
		_r$3 = findInDOM(p.Node, root); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		self = _r$3;
		$r = parent.RemoveChild(self); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = p.Node.Index(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = p.Node.Index(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		lastIndex = (x = _r$4, x$1 = _r$5.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_r$6 = p.Node.Parent(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = _r$6.Children(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_ref = $subslice(_r$7, lastIndex);
		_i = 0;
		/* while (true) { */ case 13:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 14; continue; }
			sibling = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = sibling;
			if ($assertType(_ref$1, ptrType$1, true)[1]) {
				t = _ref$1.$val;
				(x$4 = t.index, x$5 = t.index.$length - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = ((x$2 = t.index, x$3 = t.index.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) - 1 >> 0)));
			} else if ($assertType(_ref$1, ptrType$5, true)[1]) {
				t$1 = _ref$1.$val;
				(x$8 = t$1.index, x$9 = t$1.index.$length - 1 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + x$9] = ((x$6 = t$1.index, x$7 = t$1.index.$length - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7])) - 1 >> 0)));
			} else if ($assertType(_ref$1, ptrType$6, true)[1]) {
				t$2 = _ref$1.$val;
				(x$12 = t$2.index, x$13 = t$2.index.$length - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + x$13] = ((x$10 = t$2.index, x$11 = t$2.index.$length - 1 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + x$11])) - 1 >> 0)));
			} else {
				t$3 = _ref$1;
				$panic(new $String("unreachable"));
			}
			_i++;
		/* } */ $s = 13; continue; case 14:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Remove.ptr.prototype.Patch }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f.lastIndex = lastIndex; $f.p = p; $f.parent = parent; $f.root = root; $f.self = self; $f.sibling = sibling; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Remove.prototype.Patch = function(root) { return this.$val.Patch(root); };
	SetAttr.ptr.prototype.Patch = function(root) {
		var $ptr, _r, p, root, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; root = $f.root; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = findInDOM(p.Node, root); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		self = $assertType(_r, dom.Element);
		$r = self.SetAttribute(p.Attr.Name, p.Attr.Value); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetAttr.ptr.prototype.Patch }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.root = root; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	SetAttr.prototype.Patch = function(root) { return this.$val.Patch(root); };
	RemoveAttr.ptr.prototype.Patch = function(root) {
		var $ptr, _r, p, root, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; root = $f.root; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = findInDOM(p.Node, root); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		self = $assertType(_r, dom.Element);
		$r = self.RemoveAttribute(p.AttrName); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RemoveAttr.ptr.prototype.Patch }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.root = root; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	RemoveAttr.prototype.Patch = function(root) { return this.$val.Patch(root); };
	findInDOM = function(node, root) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, el, i, node, root, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; el = $f.el; i = $f.i; node = $f.node; root = $f.root; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = root.ChildNodes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = node.Index(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		el = (x = _r, x$1 = (x$2 = _r$1, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])), ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_r$2 = node.Index(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = $subslice(_r$2, 1);
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$3 = el.ChildNodes(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			el = (x$3 = _r$3, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i]));
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return el;
		return el;
		/* */ } return; } if ($f === undefined) { $f = { $blk: findInDOM }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.el = el; $f.i = i; $f.node = node; $f.root = root; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	createForDOM = function(node) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, attr, commentNode, el, msg, node, textNode, vComment, vEl, vText, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; attr = $f.attr; commentNode = $f.commentNode; el = $f.el; msg = $f.msg; node = $f.node; textNode = $f.textNode; vComment = $f.vComment; vEl = $f.vEl; vText = $f.vText; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$1, true)[1]) { */ case 1:
			vEl = $assertType(node, ptrType$1);
			_r = document.CreateElement(vEl.Name); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			el = _r;
			_ref$1 = vEl.Attrs;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 8; continue; }
				attr = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), Attr);
				$r = el.SetAttribute(attr.Name, attr.Value); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 7; continue; case 8:
			$r = el.SetInnerHTML($bytesToString(vEl.InnerHTML())); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return el;
			return el;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 2:
			vText = $assertType(node, ptrType$5);
			_r$1 = document.CreateTextNode($bytesToString(vText.Value)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			textNode = _r$1;
			$s = -1; return textNode;
			return textNode;
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 3:
			vComment = $assertType(node, ptrType$6);
			_r$2 = document.Underlying(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			commentNode = _r$2.createComment($externalize($bytesToString(vComment.Value), $String));
			$s = -1; return dom.WrapNode(commentNode);
			return dom.WrapNode(commentNode);
		/* } else { */ case 4:
			_r$3 = fmt.Sprintf("Don't know how to create node for type %T", new sliceType$2([node])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			msg = _r$3;
			$panic(new $String(msg));
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: createForDOM }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.attr = attr; $f.commentNode = commentNode; $f.el = el; $f.msg = msg; $f.node = node; $f.textNode = textNode; $f.vComment = vComment; $f.vEl = vEl; $f.vText = vText; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.ptr.prototype.HTML = function() {
		var $ptr, escaped, t;
		t = this;
		escaped = $bytesToString(t.src);
		return new sliceType$1($stringToBytes(html.UnescapeString(escaped)));
	};
	Tree.prototype.HTML = function() { return this.$val.HTML(); };
	Element.ptr.prototype.Parent = function() {
		var $ptr, e;
		e = this;
		return e.parent;
	};
	Element.prototype.Parent = function() { return this.$val.Parent(); };
	Element.ptr.prototype.Children = function() {
		var $ptr, e;
		e = this;
		return e.children;
	};
	Element.prototype.Children = function() { return this.$val.Children(); };
	Element.ptr.prototype.HTML = function() {
		var $ptr, _arg, _arg$1, _i, _r, _r$1, _ref, attr, e, escaped, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; attr = $f.attr; e = $f.e; escaped = $f.escaped; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (e.autoClosed) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.autoClosed) { */ case 1:
			_r = fmt.Sprintf("<%s", new sliceType$2([new $String(e.Name)])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			result = new sliceType$1($stringToBytes(_r));
			_ref = e.Attrs;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
				_arg = result;
				_r$1 = fmt.Sprintf(" %s=\"%s\"", new sliceType$2([new $String(attr.Name), new $String(attr.Value)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg$1 = new sliceType$1($stringToBytes(_r$1));
				result = $appendSlice(_arg, _arg$1);
				_i++;
			/* } */ $s = 5; continue; case 6:
			result = $append(result, 62);
			$s = -1; return result;
			return result;
		/* } else { */ case 2:
			escaped = $bytesToString($subslice(e.tree.src, e.srcStart, e.srcEnd));
			$s = -1; return new sliceType$1($stringToBytes(html.UnescapeString(escaped)));
			return new sliceType$1($stringToBytes(html.UnescapeString(escaped)));
		/* } */ case 3:
		$s = -1; return sliceType$1.nil;
		return sliceType$1.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Element.ptr.prototype.HTML }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.attr = attr; $f.e = e; $f.escaped = escaped; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Element.prototype.HTML = function() { return this.$val.HTML(); };
	Element.ptr.prototype.AttrMap = function() {
		var $ptr, _i, _key, _ref, attr, e, m;
		e = this;
		m = $makeMap($String.keyFor, []);
		_ref = e.Attrs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
			_key = attr.Name; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: attr.Value };
			_i++;
		}
		return m;
	};
	Element.prototype.AttrMap = function() { return this.$val.AttrMap(); };
	Element.ptr.prototype.InnerHTML = function() {
		var $ptr, e, escaped;
		e = this;
		if (e.autoClosed) {
			return sliceType$1.nil;
		} else {
			escaped = $bytesToString($subslice(e.tree.src, e.srcInnerStart, e.srcInnerEnd));
			return new sliceType$1($stringToBytes(html.UnescapeString(escaped)));
		}
	};
	Element.prototype.InnerHTML = function() { return this.$val.InnerHTML(); };
	Element.ptr.prototype.Selector = function() {
		var $ptr, _i, _r, _r$1, _ref, e, i, selector, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; e = $f.e; i = $f.i; selector = $f.selector; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("*:nth-child(%d)", new sliceType$2([new $Int(((x = e.index, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) + 1 >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selector = _r;
		_ref = $subslice(e.index, 1);
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$1 = fmt.Sprintf(" > *:nth-child(%d)", new sliceType$2([new $Int((i + 1 >> 0))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			selector = selector + (_r$1);
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return selector;
		return selector;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Element.ptr.prototype.Selector }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.e = e; $f.i = i; $f.selector = selector; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Element.prototype.Selector = function() { return this.$val.Selector(); };
	Element.ptr.prototype.Index = function() {
		var $ptr, e;
		e = this;
		return e.index;
	};
	Element.prototype.Index = function() { return this.$val.Index(); };
	Element.ptr.prototype.Compare = function(other, compareAttrs) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, attr, attrs, compareAttrs, e, i, other, otherAttr, otherAttrs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; attr = $f.attr; attrs = $f.attrs; compareAttrs = $f.compareAttrs; e = $f.e; i = $f.i; other = $f.other; otherAttr = $f.otherAttr; otherAttrs = $f.otherAttrs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (!(e.Name === other.Name)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(e.Name === other.Name)) { */ case 1:
			_r = fmt.Sprintf("e.Name was %s but other.Name was %s", new sliceType$2([new $String(e.Name), new $String(other.Name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [false, _r];
			return [false, _r];
		/* } */ case 2:
		if (!compareAttrs) {
			$s = -1; return [true, ""];
			return [true, ""];
		}
		attrs = e.Attrs;
		otherAttrs = other.Attrs;
		/* */ if (!((attrs.$length === otherAttrs.$length))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((attrs.$length === otherAttrs.$length))) { */ case 4:
			_r$1 = fmt.Sprintf("n has %d attrs but other has %d attrs.", new sliceType$2([new $Int(attrs.$length), new $Int(otherAttrs.$length)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [false, _r$1];
			return [false, _r$1];
		/* } */ case 5:
		_ref = attrs;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			i = _i;
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
			otherAttr = $clone(((i < 0 || i >= otherAttrs.$length) ? $throwRuntimeError("index out of range") : otherAttrs.$array[otherAttrs.$offset + i]), Attr);
			/* */ if (!($equal(attr, otherAttr, Attr))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($equal(attr, otherAttr, Attr))) { */ case 9:
				_r$2 = fmt.Sprintf("e.Attrs[%d] was %s but other.Attrs[%d] was %s", new sliceType$2([new $Int(i), new attr.constructor.elem(attr), new $Int(i), new otherAttr.constructor.elem(otherAttr)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return [false, _r$2];
				return [false, _r$2];
			/* } */ case 10:
			_i++;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return [true, ""];
		return [true, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Element.ptr.prototype.Compare }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.attr = attr; $f.attrs = attrs; $f.compareAttrs = compareAttrs; $f.e = e; $f.i = i; $f.other = other; $f.otherAttr = otherAttr; $f.otherAttrs = otherAttrs; $f.$s = $s; $f.$r = $r; return $f;
	};
	Element.prototype.Compare = function(other, compareAttrs) { return this.$val.Compare(other, compareAttrs); };
	Text.ptr.prototype.Parent = function() {
		var $ptr, t;
		t = this;
		return t.parent;
	};
	Text.prototype.Parent = function() { return this.$val.Parent(); };
	Text.ptr.prototype.Children = function() {
		var $ptr, t;
		t = this;
		return sliceType$3.nil;
	};
	Text.prototype.Children = function() { return this.$val.Children(); };
	Text.ptr.prototype.HTML = function() {
		var $ptr, t;
		t = this;
		return t.Value;
	};
	Text.prototype.HTML = function() { return this.$val.HTML(); };
	Text.ptr.prototype.Index = function() {
		var $ptr, t;
		t = this;
		return t.index;
	};
	Text.prototype.Index = function() { return this.$val.Index(); };
	Text.ptr.prototype.Compare = function(other) {
		var $ptr, _r, other, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; other = $f.other; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (!($bytesToString(t.Value) === $bytesToString(other.Value))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($bytesToString(t.Value) === $bytesToString(other.Value))) { */ case 1:
			_r = fmt.Sprintf("t.Value was %s but other.Value was %s", new sliceType$2([new $String($bytesToString(t.Value)), new $String($bytesToString(other.Value))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [false, _r];
			return [false, _r];
		/* } */ case 2:
		$s = -1; return [true, ""];
		return [true, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.Compare }; } $f.$ptr = $ptr; $f._r = _r; $f.other = other; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.Compare = function(other) { return this.$val.Compare(other); };
	Comment.ptr.prototype.Parent = function() {
		var $ptr, c;
		c = this;
		return c.parent;
	};
	Comment.prototype.Parent = function() { return this.$val.Parent(); };
	Comment.ptr.prototype.Children = function() {
		var $ptr, c;
		c = this;
		return sliceType$3.nil;
	};
	Comment.prototype.Children = function() { return this.$val.Children(); };
	Comment.ptr.prototype.HTML = function() {
		var $ptr, c, result;
		c = this;
		result = new sliceType$1($stringToBytes("<!--"));
		result = $appendSlice(result, c.Value);
		result = $appendSlice(result, new sliceType$1($stringToBytes("-->")));
		return result;
	};
	Comment.prototype.HTML = function() { return this.$val.HTML(); };
	Comment.ptr.prototype.Index = function() {
		var $ptr, c;
		c = this;
		return c.index;
	};
	Comment.prototype.Index = function() { return this.$val.Index(); };
	Comment.ptr.prototype.Compare = function(other) {
		var $ptr, _r, c, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!($bytesToString(c.Value) === $bytesToString(other.Value))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($bytesToString(c.Value) === $bytesToString(other.Value))) { */ case 1:
			_r = fmt.Sprintf("c.Value was %s but other.Value was %s", new sliceType$2([new $String($bytesToString(c.Value)), new $String($bytesToString(other.Value))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [false, _r];
			return [false, _r];
		/* } */ case 2:
		$s = -1; return [true, ""];
		return [true, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Comment.ptr.prototype.Compare }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	Comment.prototype.Compare = function(other) { return this.$val.Compare(other); };
	Tree.ptr.prototype.Compare = function(other, compareAttrs) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, compareAttrs, i, match, msg, other, otherRoot, root, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; compareAttrs = $f.compareAttrs; i = $f.i; match = $f.match; msg = $f.msg; other = $f.other; otherRoot = $f.otherRoot; root = $f.root; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (!((t.Children.$length === other.Children.$length))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((t.Children.$length === other.Children.$length))) { */ case 1:
			_r = fmt.Sprintf("t had %d first-level children but other had %d", new sliceType$2([new $Int(t.Children.$length), new $Int(other.Children.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [false, _r];
			return [false, _r];
		/* } */ case 2:
		_ref = t.Children;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			root = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			otherRoot = (x = other.Children, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			_r$1 = CompareNodesRecursive(root, otherRoot, compareAttrs); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			match = _tuple[0];
			msg = _tuple[1];
			if (!match) {
				$s = -1; return [false, msg];
				return [false, msg];
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [true, ""];
		return [true, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Compare }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.compareAttrs = compareAttrs; $f.i = i; $f.match = match; $f.msg = msg; $f.other = other; $f.otherRoot = otherRoot; $f.root = root; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Compare = function(other, compareAttrs) { return this.$val.Compare(other, compareAttrs); };
	CompareNodes = function(n, other, compareAttrs) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, _tuple$1, _tuple$2, comment, compareAttrs, el, match, match$1, match$2, msg, msg$1, msg$2, n, other, otherComment, otherEl, otherText, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; comment = $f.comment; compareAttrs = $f.compareAttrs; el = $f.el; match = $f.match; match$1 = $f.match$1; match$2 = $f.match$2; msg = $f.msg; msg$1 = $f.msg$1; msg$2 = $f.msg$2; n = $f.n; other = $f.other; otherComment = $f.otherComment; otherEl = $f.otherEl; otherText = $f.otherText; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(reflect.TypeOf(n), reflect.TypeOf(other)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(reflect.TypeOf(n), reflect.TypeOf(other)))) { */ case 1:
			_r = fmt.Sprintf("n has underlying type %T but the other node has underlying type %T", new sliceType$2([n, other])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [false, _r];
			return [false, _r];
		/* } */ case 2:
		_ref = n;
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($assertType(_ref, ptrType$1, true)[1]) { */ case 4:
			el = $assertType(n, ptrType$1);
			otherEl = $assertType(other, ptrType$1);
			_r$1 = el.Compare(otherEl, compareAttrs); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			match = _tuple[0];
			msg = _tuple[1];
			if (!match) {
				$s = -1; return [false, msg];
				return [false, msg];
			}
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 5:
			text = $assertType(n, ptrType$5);
			otherText = $assertType(other, ptrType$5);
			_r$2 = text.Compare(otherText); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			match$1 = _tuple$1[0];
			msg$1 = _tuple$1[1];
			if (!match$1) {
				$s = -1; return [false, msg$1];
				return [false, msg$1];
			}
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 6:
			comment = $assertType(n, ptrType$6);
			otherComment = $assertType(other, ptrType$6);
			_r$3 = comment.Compare(otherComment); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			match$2 = _tuple$2[0];
			msg$2 = _tuple$2[1];
			if (!match$2) {
				$s = -1; return [false, msg$2];
				return [false, msg$2];
			}
			$s = 8; continue;
		/* } else { */ case 7:
			_r$4 = fmt.Sprintf("Don't know how to compare n of underlying type %T", new sliceType$2([n])); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [false, _r$4];
			return [false, _r$4];
		/* } */ case 8:
		$s = -1; return [true, ""];
		return [true, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompareNodes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.comment = comment; $f.compareAttrs = compareAttrs; $f.el = el; $f.match = match; $f.match$1 = match$1; $f.match$2 = match$2; $f.msg = msg; $f.msg$1 = msg$1; $f.msg$2 = msg$2; $f.n = n; $f.other = other; $f.otherComment = otherComment; $f.otherEl = otherEl; $f.otherText = otherText; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CompareNodes = CompareNodes;
	CompareNodesRecursive = function(n, other, compareAttrs) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, _tuple$1, child, children, compareAttrs, i, match, match$1, msg, msg$1, n, other, otherChild, otherChildren, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; child = $f.child; children = $f.children; compareAttrs = $f.compareAttrs; i = $f.i; match = $f.match; match$1 = $f.match$1; msg = $f.msg; msg$1 = $f.msg$1; n = $f.n; other = $f.other; otherChild = $f.otherChild; otherChildren = $f.otherChildren; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = CompareNodes(n, other, compareAttrs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		match = _tuple[0];
		msg = _tuple[1];
		if (!match) {
			$s = -1; return [false, msg];
			return [false, msg];
		}
		_r$1 = n.Children(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		children = _r$1;
		_r$2 = other.Children(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		otherChildren = _r$2;
		/* */ if (!((children.$length === otherChildren.$length))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((children.$length === otherChildren.$length))) { */ case 4:
			_r$3 = fmt.Sprintf("n has %d children but other has %d children.", new sliceType$2([new $Int(children.$length), new $Int(otherChildren.$length)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return [false, _r$3];
			return [false, _r$3];
		/* } */ case 5:
		_ref = children;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			i = _i;
			child = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			otherChild = ((i < 0 || i >= otherChildren.$length) ? $throwRuntimeError("index out of range") : otherChildren.$array[otherChildren.$offset + i]);
			_r$4 = CompareNodesRecursive(child, otherChild, compareAttrs); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			match$1 = _tuple$1[0];
			msg$1 = _tuple$1[1];
			if (!match$1) {
				$s = -1; return [false, msg$1];
				return [false, msg$1];
			}
			_i++;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return [true, ""];
		return [true, ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompareNodesRecursive }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.child = child; $f.children = children; $f.compareAttrs = compareAttrs; $f.i = i; $f.match = match; $f.match$1 = match$1; $f.msg = msg; $f.msg$1 = msg$1; $f.n = n; $f.other = other; $f.otherChild = otherChild; $f.otherChildren = otherChildren; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CompareNodesRecursive = CompareNodesRecursive;
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "Offset", name: "Offset", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BackwardsSearch", name: "BackwardsSearch", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$Int, $error], false)}];
	PatchSet.methods = [{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}];
	ptrType$7.methods = [{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}];
	ptrType$8.methods = [{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}];
	ptrType$9.methods = [{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}];
	ptrType$10.methods = [{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}];
	ptrType$11.methods = [{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}];
	ptrType$4.methods = [{prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$4, $Bool], [$Bool, $String], false)}];
	ptrType$1.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "AttrMap", name: "AttrMap", pkg: "", typ: $funcType([], [mapType], false)}, {prop: "InnerHTML", name: "InnerHTML", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Selector", name: "Selector", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$1, $Bool], [$Bool, $String], false)}];
	ptrType$5.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$5], [$Bool, $String], false)}];
	ptrType$6.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$6], [$Bool, $String], false)}];
	IndexedByteReader.init("github.com/albrow/vdom", [{prop: "buf", name: "buf", exported: false, typ: sliceType$1, tag: ""}, {prop: "off", name: "off", exported: false, typ: $Int, tag: ""}]);
	Patcher.init([{prop: "Patch", name: "Patch", pkg: "", typ: $funcType([dom.Element], [$error], false)}]);
	PatchSet.init(Patcher);
	Append.init("", [{prop: "Child", name: "Child", exported: true, typ: Node, tag: ""}, {prop: "Parent", name: "Parent", exported: true, typ: ptrType$1, tag: ""}]);
	Replace.init("", [{prop: "Old", name: "Old", exported: true, typ: Node, tag: ""}, {prop: "New", name: "New", exported: true, typ: Node, tag: ""}]);
	Remove.init("", [{prop: "Node", name: "Node", exported: true, typ: Node, tag: ""}]);
	SetAttr.init("", [{prop: "Node", name: "Node", exported: true, typ: Node, tag: ""}, {prop: "Attr", name: "Attr", exported: true, typ: ptrType$2, tag: ""}]);
	RemoveAttr.init("", [{prop: "Node", name: "Node", exported: true, typ: Node, tag: ""}, {prop: "AttrName", name: "AttrName", exported: true, typ: $String, tag: ""}]);
	Tree.init("github.com/albrow/vdom", [{prop: "Children", name: "Children", exported: true, typ: sliceType$3, tag: ""}, {prop: "reader", name: "reader", exported: false, typ: ptrType$3, tag: ""}, {prop: "src", name: "src", exported: false, typ: sliceType$1, tag: ""}]);
	Node.init([{prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [ptrType$1], false)}]);
	Attr.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}]);
	Element.init("github.com/albrow/vdom", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Attrs", name: "Attrs", exported: true, typ: sliceType$4, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType$1, tag: ""}, {prop: "children", name: "children", exported: false, typ: sliceType$3, tag: ""}, {prop: "tree", name: "tree", exported: false, typ: ptrType$4, tag: ""}, {prop: "srcStart", name: "srcStart", exported: false, typ: $Int, tag: ""}, {prop: "srcEnd", name: "srcEnd", exported: false, typ: $Int, tag: ""}, {prop: "srcInnerStart", name: "srcInnerStart", exported: false, typ: $Int, tag: ""}, {prop: "srcInnerEnd", name: "srcInnerEnd", exported: false, typ: $Int, tag: ""}, {prop: "autoClosed", name: "autoClosed", exported: false, typ: $Bool, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$5, tag: ""}]);
	Text.init("github.com/albrow/vdom", [{prop: "Value", name: "Value", exported: true, typ: sliceType$1, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType$1, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$5, tag: ""}]);
	Comment.init("github.com/albrow/vdom", [{prop: "Value", name: "Value", exported: true, typ: sliceType$1, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType$1, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$5, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = xml.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dom.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = html.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		document = $ifaceNil;
		$r = init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, io, strconv, Encoding, encoder, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$2, arrayType$3, arrayType$4, ptrType$1, NewEncoding, NewEncoder;
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", true, "encoding/base64", true, function(encode_, decodeMap_, padChar_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "base64.encoder", true, "encoding/base64", false, function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.enc = ptrType.nil;
			this.w = $ifaceNil;
			this.buf = arrayType$2.zero();
			this.nbuf = 0;
			this.out = arrayType$3.zero();
			return;
		}
		this.err = err_;
		this.enc = enc_;
		this.w = w_;
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.out = out_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", true, "encoding/base64", true, null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$2 = $arrayType($Uint8, 3);
	arrayType$3 = $arrayType($Uint8, 1024);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$1 = $ptrType(encoder);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var $ptr, enc, padding;
		enc = $clone(this, Encoding);
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = ((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) >>> 0) << 16 >>> 0) | (((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) >>> 0)) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = ((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$15])) >>> 0) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | ((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$16])) >>> 0) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? $throwRuntimeError("index out of range") : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? $throwRuntimeError("index out of range") : x$20[x$21]))));
		_1 = remain;
		if (_1 === (2)) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? $throwRuntimeError("index out of range") : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$26] = (enc.padChar << 24 >>> 24)));
			}
		} else if (_1 === (1)) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$27] = (enc.padChar << 24 >>> 24)));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$28] = (enc.padChar << 24 >>> 24)));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	encoder.ptr.prototype.Write = function(p) {
		var $ptr, _q, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, i, i$1, n, nn, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; err = $f.err; i = $f.i; i$1 = $f.i$1; n = $f.n; nn = $f.nn; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
			return [n, err];
		}
		/* */ if (e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.nbuf > 0) { */ case 1:
			i = 0;
			i = 0;
			while (true) {
				if (!(i < p.$length && e.nbuf < 3)) { break; }
				(x = e.buf, x$1 = e.nbuf, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i])));
				e.nbuf = e.nbuf + (1) >> 0;
				i = i + (1) >> 0;
			}
			n = n + (i) >> 0;
			p = $subslice(p, i);
			if (e.nbuf < 3) {
				$s = -1; return [n, err];
				return [n, err];
			}
			e.enc.Encode(new sliceType(e.out), new sliceType(e.buf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e.err;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
			e.nbuf = 0;
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(p.$length >= 3)) { break; } */ if(!(p.$length >= 3)) { $s = 5; continue; }
			nn = 768;
			if (nn > p.$length) {
				nn = p.$length;
				nn = nn - ((_r$1 = nn % 3, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			e.enc.Encode(new sliceType(e.out), $subslice(p, 0, nn));
			_r$2 = e.w.Write($subslice(new sliceType(e.out), 0, ($imul((_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 4)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			e.err = _tuple$1[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = e.err;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
				return [n, err];
			}
			n = n + (nn) >> 0;
			p = $subslice(p, nn);
		/* } */ $s = 4; continue; case 5:
		i$1 = 0;
		while (true) {
			if (!(i$1 < p.$length)) { break; }
			(x$2 = e.buf, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = ((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		e.nbuf = p.$length;
		n = n + (p.$length) >> 0;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.nn = nn; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Write = function(p) { return this.$val.Write(p); };
	encoder.ptr.prototype.Close = function() {
		var $ptr, _r, _tuple, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { */ case 1:
			e.enc.Encode(new sliceType(e.out), $subslice(new sliceType(e.buf), 0, e.nbuf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, e.enc.EncodedLen(e.nbuf))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			e.nbuf = 0;
		/* } */ case 2:
		$s = -1; return e.err;
		return e.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Close = function() { return this.$val.Close(); };
	NewEncoder = function(enc, w) {
		var $ptr, enc, w;
		return new encoder.ptr($ifaceNil, enc, w, arrayType$2.zero(), 0, arrayType$3.zero());
	};
	$pkg.NewEncoder = NewEncoder;
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _1, _2, _i, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, end, err, in$1, j, n, si, src, val, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		si = 0;
		while (true) {
			if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
			si = si + (1) >> 0;
		}
		while (true) {
			if (!(si < src.$length && !end)) { break; }
			dbuf = arrayType$4.zero();
			_tmp = 3;
			_tmp$1 = 4;
			dinc = _tmp;
			dlen = _tmp$1;
			_ref = dbuf;
			_i = 0;
			while (true) {
				if (!(_i < 4)) { break; }
				j = _i;
				if (src.$length === si) {
					if (!((enc.padChar === -1)) || j < 2) {
						_tmp$2 = n;
						_tmp$3 = false;
						_tmp$4 = new CorruptInputError(0, (si - j >> 0));
						n = _tmp$2;
						end = _tmp$3;
						err = _tmp$4;
						return [n, end, err];
					}
					_tmp$5 = j - 1 >> 0;
					_tmp$6 = j;
					_tmp$7 = true;
					dinc = _tmp$5;
					dlen = _tmp$6;
					end = _tmp$7;
					break;
				}
				in$1 = ((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]);
				si = si + (1) >> 0;
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if ((in$1 >> 0) === enc.padChar) {
					_1 = j;
					if ((_1 === (0)) || (_1 === (1))) {
						_tmp$8 = n;
						_tmp$9 = false;
						_tmp$10 = new CorruptInputError(0, (si - 1 >> 0));
						n = _tmp$8;
						end = _tmp$9;
						err = _tmp$10;
						return [n, end, err];
					} else if (_1 === (2)) {
						if (si === src.$length) {
							_tmp$11 = n;
							_tmp$12 = false;
							_tmp$13 = new CorruptInputError(0, src.$length);
							n = _tmp$11;
							end = _tmp$12;
							err = _tmp$13;
							return [n, end, err];
						}
						if (!(((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) >> 0) === enc.padChar))) {
							_tmp$14 = n;
							_tmp$15 = false;
							_tmp$16 = new CorruptInputError(0, (si - 1 >> 0));
							n = _tmp$14;
							end = _tmp$15;
							err = _tmp$16;
							return [n, end, err];
						}
						si = si + (1) >> 0;
						while (true) {
							if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
							si = si + (1) >> 0;
						}
					}
					if (si < src.$length) {
						err = new CorruptInputError(0, si);
					}
					_tmp$17 = 3;
					_tmp$18 = j;
					_tmp$19 = true;
					dinc = _tmp$17;
					dlen = _tmp$18;
					end = _tmp$19;
					break;
				}
				((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$20 = n;
					_tmp$21 = false;
					_tmp$22 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$20;
					end = _tmp$21;
					err = _tmp$22;
					return [n, end, err];
				}
				_i++;
			}
			val = (((((((dbuf[0] >>> 0) << 18 >>> 0) | ((dbuf[1] >>> 0) << 12 >>> 0)) >>> 0) | ((dbuf[2] >>> 0) << 6 >>> 0)) >>> 0) | (dbuf[3] >>> 0)) >>> 0;
			_2 = dlen;
			if (_2 === (4)) {
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((val >>> 0 >>> 0) << 24 >>> 24));
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_2 === (3)) {
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_2 === (2)) {
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			}
			dst = $subslice(dst, dinc);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$23 = n;
		_tmp$24 = end;
		_tmp$25 = err;
		n = _tmp$23;
		end = _tmp$24;
		err = _tmp$25;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _tuple, dst, enc, err, n, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		_tuple = enc.decode(dst, src);
		n = _tuple[0];
		err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ($imul(n, 6)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init("encoding/base64", [{prop: "encode", name: "encode", exported: false, typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", exported: false, typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", exported: false, typ: $Int32, tag: ""}]);
	encoder.init("encoding/base64", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "enc", name: "enc", exported: false, typ: ptrType, tag: ""}, {prop: "w", name: "w", exported: false, typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: arrayType$2, tag: ""}, {prop: "nbuf", name: "nbuf", exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", exported: false, typ: arrayType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $pkg.StdEncoding.WithPadding(-1);
		$pkg.RawURLEncoding = $pkg.URLEncoding.WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, StringSlice, sliceType$2, Search, SearchStrings, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, Strings;
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
	sliceType$2 = $sliceType($String);
	Search = function(n, f) {
		var $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? $throwRuntimeError("index out of range") : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var $ptr, _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
				return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 4:
			maxDepth = maxDepth - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, i, maxDepth, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		maxDepth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = $imul(maxDepth, (2));
		$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	StringSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var $ptr, i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = function(a) {
		var $ptr, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.$ptr = $ptr; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Strings = Strings;
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, $init, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, atomic, unicode, utf16, utf8, Number, Marshaler, UnsupportedTypeError, UnsupportedValueError, MarshalerError, encodeState, encOpts, encoderFunc, floatEncoder, structEncoder, mapEncoder, sliceEncoder, arrayEncoder, ptrEncoder, condAddrEncoder, reflectWithString, byString, field, byName, byIndex, SyntaxError, scanner, tagOptions, sliceType, mapType, structType, structType$1, sliceType$1, ptrType, ptrType$1, ptrType$2, sliceType$2, ptrType$3, arrayType, arrayType$1, ptrType$5, sliceType$3, sliceType$4, sliceType$5, mapType$2, ptrType$10, ptrType$15, ptrType$16, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, funcType, ptrType$26, funcType$1, errPhase, textUnmarshalerType, numberType, hex, encoderCache, marshalerType, textMarshalerType, float32Encoder, float64Encoder, fieldCache, _r, _r$1, _r$2, isValidNumber, Marshal, isEmptyValue, valueEncoder, typeEncoder, newTypeEncoder, invalidValueEncoder, marshalerEncoder, addrMarshalerEncoder, textMarshalerEncoder, addrTextMarshalerEncoder, boolEncoder, intEncoder, uintEncoder, stringEncoder, interfaceEncoder, unsupportedTypeEncoder, newStructEncoder, newMapEncoder, encodeByteSlice, newSliceEncoder, newArrayEncoder, newPtrEncoder, newCondAddrEncoder, isValidTag, fieldByIndex, typeByIndex, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, compact, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, parseTag;
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	Number = $pkg.Number = $newType(8, $kindString, "json.Number", true, "encoding/json", true, null);
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", true, "encoding/json", true, null);
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "json.UnsupportedTypeError", true, "encoding/json", true, function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	UnsupportedValueError = $pkg.UnsupportedValueError = $newType(0, $kindStruct, "json.UnsupportedValueError", true, "encoding/json", true, function(Value_, Str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new reflect.Value.ptr(ptrType$3.nil, 0, 0);
			this.Str = "";
			return;
		}
		this.Value = Value_;
		this.Str = Str_;
	});
	MarshalerError = $pkg.MarshalerError = $newType(0, $kindStruct, "json.MarshalerError", true, "encoding/json", true, function(Type_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			this.Err = $ifaceNil;
			return;
		}
		this.Type = Type_;
		this.Err = Err_;
	});
	encodeState = $pkg.encodeState = $newType(0, $kindStruct, "json.encodeState", true, "encoding/json", false, function(Buffer_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Buffer = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			this.scratch = arrayType$1.zero();
			return;
		}
		this.Buffer = Buffer_;
		this.scratch = scratch_;
	});
	encOpts = $pkg.encOpts = $newType(0, $kindStruct, "json.encOpts", true, "encoding/json", false, function(quoted_, escapeHTML_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.quoted = false;
			this.escapeHTML = false;
			return;
		}
		this.quoted = quoted_;
		this.escapeHTML = escapeHTML_;
	});
	encoderFunc = $pkg.encoderFunc = $newType(4, $kindFunc, "json.encoderFunc", true, "encoding/json", false, null);
	floatEncoder = $pkg.floatEncoder = $newType(4, $kindInt, "json.floatEncoder", true, "encoding/json", false, null);
	structEncoder = $pkg.structEncoder = $newType(0, $kindStruct, "json.structEncoder", true, "encoding/json", false, function(fields_, fieldEncs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fields = sliceType$3.nil;
			this.fieldEncs = sliceType$4.nil;
			return;
		}
		this.fields = fields_;
		this.fieldEncs = fieldEncs_;
	});
	mapEncoder = $pkg.mapEncoder = $newType(0, $kindStruct, "json.mapEncoder", true, "encoding/json", false, function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	sliceEncoder = $pkg.sliceEncoder = $newType(0, $kindStruct, "json.sliceEncoder", true, "encoding/json", false, function(arrayEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.arrayEnc = $throwNilPointerError;
			return;
		}
		this.arrayEnc = arrayEnc_;
	});
	arrayEncoder = $pkg.arrayEncoder = $newType(0, $kindStruct, "json.arrayEncoder", true, "encoding/json", false, function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	ptrEncoder = $pkg.ptrEncoder = $newType(0, $kindStruct, "json.ptrEncoder", true, "encoding/json", false, function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	condAddrEncoder = $pkg.condAddrEncoder = $newType(0, $kindStruct, "json.condAddrEncoder", true, "encoding/json", false, function(canAddrEnc_, elseEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.canAddrEnc = $throwNilPointerError;
			this.elseEnc = $throwNilPointerError;
			return;
		}
		this.canAddrEnc = canAddrEnc_;
		this.elseEnc = elseEnc_;
	});
	reflectWithString = $pkg.reflectWithString = $newType(0, $kindStruct, "json.reflectWithString", true, "encoding/json", false, function(v_, s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = new reflect.Value.ptr(ptrType$3.nil, 0, 0);
			this.s = "";
			return;
		}
		this.v = v_;
		this.s = s_;
	});
	byString = $pkg.byString = $newType(12, $kindSlice, "json.byString", true, "encoding/json", false, null);
	field = $pkg.field = $newType(0, $kindStruct, "json.field", true, "encoding/json", false, function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.nameBytes = sliceType$1.nil;
			this.equalFold = $throwNilPointerError;
			this.tag = false;
			this.index = sliceType$2.nil;
			this.typ = $ifaceNil;
			this.omitEmpty = false;
			this.quoted = false;
			return;
		}
		this.name = name_;
		this.nameBytes = nameBytes_;
		this.equalFold = equalFold_;
		this.tag = tag_;
		this.index = index_;
		this.typ = typ_;
		this.omitEmpty = omitEmpty_;
		this.quoted = quoted_;
	});
	byName = $pkg.byName = $newType(12, $kindSlice, "json.byName", true, "encoding/json", false, null);
	byIndex = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", true, "encoding/json", false, null);
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", true, "encoding/json", true, function(msg_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.msg = msg_;
		this.Offset = Offset_;
	});
	scanner = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", true, "encoding/json", false, function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.step = $throwNilPointerError;
			this.endTop = false;
			this.parseState = sliceType$2.nil;
			this.err = $ifaceNil;
			this.redo = false;
			this.redoCode = 0;
			this.redoState = $throwNilPointerError;
			this.bytes = new $Int64(0, 0);
			return;
		}
		this.step = step_;
		this.endTop = endTop_;
		this.parseState = parseState_;
		this.err = err_;
		this.redo = redo_;
		this.redoCode = redoCode_;
		this.redoState = redoState_;
		this.bytes = bytes_;
	});
	tagOptions = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", true, "encoding/json", false, null);
	sliceType = $sliceType($emptyInterface);
	mapType = $mapType(reflect.Type, encoderFunc);
	structType = $structType("encoding/json", [{prop: "RWMutex", name: "", exported: true, typ: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", exported: false, typ: mapType, tag: ""}]);
	structType$1 = $structType("encoding/json", [{prop: "value", name: "value", exported: false, typ: atomic.Value, tag: ""}, {prop: "mu", name: "mu", exported: false, typ: nosync.Mutex, tag: ""}]);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(encoding.TextUnmarshaler);
	ptrType$1 = $ptrType(Marshaler);
	ptrType$2 = $ptrType(encoding.TextMarshaler);
	sliceType$2 = $sliceType($Int);
	ptrType$3 = $ptrType(reflect.rtype);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$5 = $ptrType(encodeState);
	sliceType$3 = $sliceType(field);
	sliceType$4 = $sliceType(encoderFunc);
	sliceType$5 = $sliceType(reflectWithString);
	mapType$2 = $mapType(reflect.Type, sliceType$3);
	ptrType$10 = $ptrType(SyntaxError);
	ptrType$15 = $ptrType(UnsupportedTypeError);
	ptrType$16 = $ptrType(UnsupportedValueError);
	ptrType$18 = $ptrType(MarshalerError);
	ptrType$19 = $ptrType(structEncoder);
	ptrType$20 = $ptrType(mapEncoder);
	ptrType$21 = $ptrType(sliceEncoder);
	ptrType$22 = $ptrType(arrayEncoder);
	ptrType$23 = $ptrType(ptrEncoder);
	ptrType$24 = $ptrType(condAddrEncoder);
	ptrType$25 = $ptrType(reflectWithString);
	funcType = $funcType([sliceType$1, sliceType$1], [$Bool], false);
	ptrType$26 = $ptrType(scanner);
	funcType$1 = $funcType([ptrType$26, $Uint8], [$Int], false);
	Number.prototype.String = function() {
		var $ptr, n;
		n = this.$val;
		return n;
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseFloat(n, 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseInt(n, 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	isValidNumber = function(s) {
		var $ptr, s;
		if (s === "") {
			return false;
		}
		if (s.charCodeAt(0) === 45) {
			s = $substring(s, 1);
			if (s === "") {
				return false;
			}
		}
		if ((s.charCodeAt(0) === 48)) {
			s = $substring(s, 1);
		} else if (49 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57) {
			s = $substring(s, 1);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		} else {
			return false;
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 46) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			s = $substring(s, 2);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		}
		if (s.length >= 2 && ((s.charCodeAt(0) === 101) || (s.charCodeAt(0) === 69))) {
			s = $substring(s, 1);
			if ((s.charCodeAt(0) === 43) || (s.charCodeAt(0) === 45)) {
				s = $substring(s, 1);
				if (s === "") {
					return false;
				}
			}
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		}
		return s === "";
	};
	Marshal = function(v) {
		var $ptr, _r$3, e, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = new encodeState.ptr(new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0), arrayType$1.zero());
		_r$3 = e.marshal(v, new encOpts.ptr(false, true)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
			return [sliceType$1.nil, err];
		}
		$s = -1; return [e.Buffer.Bytes(), $ifaceNil];
		return [e.Buffer.Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Marshal }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Marshal = Marshal;
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return "json: unsupported type: " + _r$3;
		return "json: unsupported type: " + _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnsupportedTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	UnsupportedValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "json: unsupported value: " + e.Str;
	};
	UnsupportedValueError.prototype.Error = function() { return this.$val.Error(); };
	MarshalerError.ptr.prototype.Error = function() {
		var $ptr, _r$3, _r$4, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = e.Err.Error(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return "json: error calling MarshalJSON for type " + _r$3 + ": " + _r$4;
		return "json: error calling MarshalJSON for type " + _r$3 + ": " + _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MarshalerError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	MarshalerError.prototype.Error = function() { return this.$val.Error(); };
	encodeState.ptr.prototype.marshal = function(v, opts) {
		var $ptr, _r$3, e, err, opts, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; err = $f.err; opts = $f.opts; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		opts = $clone(opts, encOpts);
		e = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, _tuple$1, ok, ok$1, r, s;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				_tuple$1 = $assertType(r, $String, true);
				s = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$panic(new $String(s));
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$3 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = e.reflectValue(_r$3, opts); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = $ifaceNil;
		$s = -1; return err[0];
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: encodeState.ptr.prototype.marshal }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.err = err; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	encodeState.prototype.marshal = function(v, opts) { return this.$val.marshal(v, opts); };
	encodeState.ptr.prototype.error = function(err) {
		var $ptr, e, err;
		e = this;
		$panic(err);
	};
	encodeState.prototype.error = function(err) { return this.$val.error(err); };
	isEmptyValue = function(v) {
		var $ptr, _1, v, x, x$1;
		v = v;
		_1 = v.Kind();
		if ((_1 === (17)) || (_1 === (21)) || (_1 === (23)) || (_1 === (24))) {
			return v.Len() === 0;
		} else if (_1 === (1)) {
			return !v.Bool();
		} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			return (x = v.Int(), (x.$high === 0 && x.$low === 0));
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			return (x$1 = v.Uint(), (x$1.$high === 0 && x$1.$low === 0));
		} else if ((_1 === (13)) || (_1 === (14))) {
			return v.Float() === 0;
		} else if ((_1 === (20)) || (_1 === (22))) {
			return v.IsNil();
		}
		return false;
	};
	encodeState.ptr.prototype.reflectValue = function(v, opts) {
		var $ptr, _r$3, e, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		e = this;
		_r$3 = valueEncoder(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = _r$3(e, v, opts); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encodeState.ptr.prototype.reflectValue }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encodeState.prototype.reflectValue = function(v, opts) { return this.$val.reflectValue(v, opts); };
	valueEncoder = function(v) {
		var $ptr, _r$3, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (!v.IsValid()) {
			$s = -1; return invalidValueEncoder;
			return invalidValueEncoder;
		}
		_r$3 = typeEncoder(v.Type()); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeEncoder = function(t) {
		var $ptr, _entry, _key, _key$1, _r$3, f, t, wg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _r$3 = $f._r$3; f = $f.f; t = $f.t; wg = $f.wg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		wg = [wg];
		encoderCache.RWMutex.RLock();
		f[0] = (_entry = encoderCache.m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : $throwNilPointerError);
		encoderCache.RWMutex.RUnlock();
		if (!(f[0] === $throwNilPointerError)) {
			$s = -1; return f[0];
			return f[0];
		}
		encoderCache.RWMutex.Lock();
		if (encoderCache.m === false) {
			encoderCache.m = {};
		}
		wg[0] = new nosync.WaitGroup.ptr(0);
		wg[0].Add(1);
		_key = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: (function(f, wg) { return function $b(e, v, opts) {
			var $ptr, e, opts, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			opts = $clone(opts, encOpts);
			v = v;
			wg[0].Wait();
			$r = f[0](e, v, opts); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.e = e; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(f, wg) };
		encoderCache.RWMutex.Unlock();
		_r$3 = newTypeEncoder(t, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		f[0] = _r$3;
		wg[0].Done();
		encoderCache.RWMutex.Lock();
		_key$1 = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: f[0] };
		encoderCache.RWMutex.Unlock();
		$s = -1; return f[0];
		return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeEncoder }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._r$3 = _r$3; $f.f = f; $f.t = t; $f.wg = wg; $f.$s = $s; $f.$r = $r; return $f;
	};
	newTypeEncoder = function(t, allowAddr) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, allowAddr, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; allowAddr = $f.allowAddr; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = t.Implements(marshalerType); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3) { */ case 1:
			$s = -1; return marshalerEncoder;
			return marshalerEncoder;
		/* } */ case 2:
		_r$4 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!((_r$4 === 22)) && allowAddr) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((_r$4 === 22)) && allowAddr) { */ case 4:
			_r$5 = reflect.PtrTo(t).Implements(marshalerType); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$5) { */ case 7:
				_arg = addrMarshalerEncoder;
				_r$6 = newTypeEncoder(t, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$1 = _r$6;
				_r$7 = newCondAddrEncoder(_arg, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
				return _r$7;
			/* } */ case 8:
		/* } */ case 5:
		_r$8 = t.Implements(textMarshalerType); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (_r$8) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_r$8) { */ case 12:
			$s = -1; return textMarshalerEncoder;
			return textMarshalerEncoder;
		/* } */ case 13:
		_r$9 = t.Kind(); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		/* */ if (!((_r$9 === 22)) && allowAddr) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!((_r$9 === 22)) && allowAddr) { */ case 15:
			_r$10 = reflect.PtrTo(t).Implements(textMarshalerType); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ if (_r$10) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_r$10) { */ case 18:
				_arg$2 = addrTextMarshalerEncoder;
				_r$11 = newTypeEncoder(t, false); /* */ $s = 21; case 21: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_arg$3 = _r$11;
				_r$12 = newCondAddrEncoder(_arg$2, _arg$3); /* */ $s = 22; case 22: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				$s = -1; return _r$12;
				return _r$12;
			/* } */ case 19:
		/* } */ case 16:
			_r$13 = t.Kind(); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_1 = _r$13;
			/* */ if (_1 === (1)) { $s = 25; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 26; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 27; continue; }
			/* */ if (_1 === (13)) { $s = 28; continue; }
			/* */ if (_1 === (14)) { $s = 29; continue; }
			/* */ if (_1 === (24)) { $s = 30; continue; }
			/* */ if (_1 === (20)) { $s = 31; continue; }
			/* */ if (_1 === (25)) { $s = 32; continue; }
			/* */ if (_1 === (21)) { $s = 33; continue; }
			/* */ if (_1 === (23)) { $s = 34; continue; }
			/* */ if (_1 === (17)) { $s = 35; continue; }
			/* */ if (_1 === (22)) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (_1 === (1)) { */ case 25:
				$s = -1; return boolEncoder;
				return boolEncoder;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 26:
				$s = -1; return intEncoder;
				return intEncoder;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 27:
				$s = -1; return uintEncoder;
				return uintEncoder;
			/* } else if (_1 === (13)) { */ case 28:
				$s = -1; return float32Encoder;
				return float32Encoder;
			/* } else if (_1 === (14)) { */ case 29:
				$s = -1; return float64Encoder;
				return float64Encoder;
			/* } else if (_1 === (24)) { */ case 30:
				$s = -1; return stringEncoder;
				return stringEncoder;
			/* } else if (_1 === (20)) { */ case 31:
				$s = -1; return interfaceEncoder;
				return interfaceEncoder;
			/* } else if (_1 === (25)) { */ case 32:
				_r$14 = newStructEncoder(t); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return _r$14;
				return _r$14;
			/* } else if (_1 === (21)) { */ case 33:
				_r$15 = newMapEncoder(t); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$s = -1; return _r$15;
				return _r$15;
			/* } else if (_1 === (23)) { */ case 34:
				_r$16 = newSliceEncoder(t); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				$s = -1; return _r$16;
				return _r$16;
			/* } else if (_1 === (17)) { */ case 35:
				_r$17 = newArrayEncoder(t); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$s = -1; return _r$17;
				return _r$17;
			/* } else if (_1 === (22)) { */ case 36:
				_r$18 = newPtrEncoder(t); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$s = -1; return _r$18;
				return _r$18;
			/* } else { */ case 37:
				$s = -1; return unsupportedTypeEncoder;
				return unsupportedTypeEncoder;
			/* } */ case 38:
		case 23:
		$s = -1; return $throwNilPointerError;
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newTypeEncoder }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.allowAddr = allowAddr; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	invalidValueEncoder = function(e, v, param) {
		var $ptr, e, param, v;
		v = v;
		e.Buffer.WriteString("null");
	};
	marshalerEncoder = function(e, v, opts) {
		var $ptr, _r$3, _r$4, _r$5, _tuple, b, e, err, m, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_r$3 = v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		m = $assertType(_r$3, Marshaler);
		_r$4 = m.MarshalJSON(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$5 = compact(e.Buffer, b, opts.escapeHTML); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: marshalerEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addrMarshalerEncoder = function(e, v, param) {
		var $ptr, _r$3, _r$4, _r$5, _tuple, b, e, err, m, param, v, va, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; param = $f.param; v = $f.v; va = $f.va; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_r$3 = va.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		m = $assertType(_r$3, Marshaler);
		_r$4 = m.MarshalJSON(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$5 = compact(e.Buffer, b, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addrMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.param = param; $f.v = v; $f.va = va; $f.$s = $s; $f.$r = $r; return $f;
	};
	textMarshalerEncoder = function(e, v, opts) {
		var $ptr, _r$3, _r$4, _tuple, b, e, err, m, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_r$3 = v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		m = $assertType(_r$3, encoding.TextMarshaler);
		_r$4 = m.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		b = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		e.stringBytes(b, opts.escapeHTML);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: textMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addrTextMarshalerEncoder = function(e, v, opts) {
		var $ptr, _r$3, _r$4, _tuple, b, e, err, m, opts, v, va, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; opts = $f.opts; v = $f.v; va = $f.va; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_r$3 = va.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		m = $assertType(_r$3, encoding.TextMarshaler);
		_r$4 = m.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		b = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		e.stringBytes(b, opts.escapeHTML);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addrTextMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.opts = opts; $f.v = v; $f.va = va; $f.$s = $s; $f.$r = $r; return $f;
	};
	boolEncoder = function(e, v, opts) {
		var $ptr, e, opts, v;
		opts = $clone(opts, encOpts);
		v = v;
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
		if (v.Bool()) {
			e.Buffer.WriteString("true");
		} else {
			e.Buffer.WriteString("false");
		}
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	intEncoder = function(e, v, opts) {
		var $ptr, b, e, opts, v;
		opts = $clone(opts, encOpts);
		v = v;
		b = strconv.AppendInt($subslice(new sliceType$1(e.scratch), 0, 0), v.Int(), 10);
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	uintEncoder = function(e, v, opts) {
		var $ptr, b, e, opts, v;
		opts = $clone(opts, encOpts);
		v = v;
		b = strconv.AppendUint($subslice(new sliceType$1(e.scratch), 0, 0), v.Uint(), 10);
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	floatEncoder.prototype.encode = function(e, v, opts) {
		var $ptr, b, bits, e, f, opts, v;
		opts = $clone(opts, encOpts);
		v = v;
		bits = this.$val;
		f = v.Float();
		if (math.IsInf(f, 0) || math.IsNaN(f)) {
			e.error(new UnsupportedValueError.ptr($clone(v, reflect.Value), strconv.FormatFloat(f, 103, -1, (bits >> 0))));
		}
		b = strconv.AppendFloat($subslice(new sliceType$1(e.scratch), 0, 0), f, 103, -1, (bits >> 0));
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (opts.quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	$ptrType(floatEncoder).prototype.encode = function(e, v, opts) { return new floatEncoder(this.$get()).encode(e, v, opts); };
	stringEncoder = function(e, v, opts) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, e, err, numStr, opts, sb, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; e = $f.e; err = $f.err; numStr = $f.numStr; opts = $f.opts; sb = $f.sb; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		/* */ if ($interfaceIsEqual(v.Type(), numberType)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(v.Type(), numberType)) { */ case 1:
			_r$3 = v.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			numStr = _r$3;
			if (numStr === "") {
				numStr = "0";
			}
			/* */ if (!isValidNumber(numStr)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!isValidNumber(numStr)) { */ case 4:
				_r$4 = fmt.Errorf("json: invalid number literal %q", new sliceType([new $String(numStr)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = e.error(_r$4); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			e.Buffer.WriteString(numStr);
			$s = -1; return;
			return;
		/* } */ case 2:
		/* */ if (opts.quoted) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (opts.quoted) { */ case 8:
			_r$5 = v.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = Marshal(new $String(_r$5)); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			sb = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				e.error(err);
			}
			e.string($bytesToString(sb), opts.escapeHTML);
			$s = 10; continue;
		/* } else { */ case 9:
			_r$7 = v.String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = e.string(_r$7, opts.escapeHTML); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
		/* } */ case 10:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.numStr = numStr; $f.opts = opts; $f.sb = sb; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	interfaceEncoder = function(e, v, opts) {
		var $ptr, _r$3, e, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_r$3 = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = e.reflectValue(_r$3, opts); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: interfaceEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	unsupportedTypeEncoder = function(e, v, param) {
		var $ptr, e, param, v;
		v = v;
		e.error(new UnsupportedTypeError.ptr(v.Type()));
	};
	structEncoder.ptr.prototype.encode = function(e, v, opts) {
		var $ptr, _i, _r$3, _ref, e, f, first, fv, i, opts, se, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _ref = $f._ref; e = $f.e; f = $f.f; first = $f.first; fv = $f.fv; i = $f.i; opts = $f.opts; se = $f.se; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		se = this;
		e.Buffer.WriteByte(123);
		first = true;
		_ref = se.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			_r$3 = fieldByIndex(v, f.index); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			fv = _r$3;
			/* */ if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) { */ case 4:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (first) {
				first = false;
			} else {
				e.Buffer.WriteByte(44);
			}
			e.string(f.name, opts.escapeHTML);
			e.Buffer.WriteByte(58);
			opts.quoted = f.quoted;
			$r = (x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]))(e, fv, opts); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		e.Buffer.WriteByte(125);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._ref = _ref; $f.e = e; $f.f = f; $f.first = first; $f.fv = fv; $f.i = i; $f.opts = opts; $f.se = se; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structEncoder.prototype.encode = function(e, v, opts) { return this.$val.encode(e, v, opts); };
	newStructEncoder = function(t) {
		var $ptr, _i, _r$3, _r$4, _r$5, _ref, f, fields, i, se, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; f = $f.f; fields = $f.fields; i = $f.i; se = $f.se; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = cachedTypeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		fields = _r$3;
		se = new structEncoder.ptr(fields, $makeSlice(sliceType$4, fields.$length));
		_ref = fields;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			_r$4 = typeByIndex(t, f.index); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = typeEncoder(_r$4); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			(x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _r$5));
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $methodVal(se, "encode");
		return $methodVal(se, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newStructEncoder }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.f = f; $f.fields = fields; $f.i = i; $f.se = se; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapEncoder.ptr.prototype.encode = function(e, v, opts) {
		var $ptr, _arg, _arg$1, _arg$2, _i, _i$1, _r$3, _r$4, _r$5, _ref, _ref$1, e, err, i, i$1, keys, kv, me, opts, sv, v, v$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; e = $f.e; err = $f.err; i = $f.i; i$1 = $f.i$1; keys = $f.keys; kv = $f.kv; me = $f.me; opts = $f.opts; sv = $f.sv; v = $f.v; v$1 = $f.v$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		me = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		e.Buffer.WriteByte(123);
		_r$3 = v.MapKeys(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		keys = _r$3;
		sv = $makeSlice(sliceType$5, keys.$length);
		_ref = keys;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			v$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).v = v$1;
			_r$4 = ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).resolve(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				e.error(new MarshalerError.ptr(v$1.Type(), err));
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$r = sort.Sort($subslice(new byString(sv.$array), sv.$offset, sv.$offset + sv.$length)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = sv;
		_i$1 = 0;
		/* while (true) { */ case 6:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 7; continue; }
			i$1 = _i$1;
			kv = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), reflectWithString);
			if (i$1 > 0) {
				e.Buffer.WriteByte(44);
			}
			e.string(kv.s, opts.escapeHTML);
			e.Buffer.WriteByte(58);
			_arg = e;
			_r$5 = v.MapIndex(kv.v); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$1 = _r$5;
			_arg$2 = opts;
			$r = me.elemEnc(_arg, _arg$1, _arg$2); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 6; continue; case 7:
		e.Buffer.WriteByte(125);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f.e = e; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.keys = keys; $f.kv = kv; $f.me = me; $f.opts = opts; $f.sv = sv; $f.v = v; $f.v$1 = v$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapEncoder.prototype.encode = function(e, v, opts) { return this.$val.encode(e, v, opts); };
	newMapEncoder = function(t) {
		var $ptr, _1, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, me, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; me = $f.me; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = t.Key(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_1 = _r$4;
			/* */ if ((_1 === (24)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 4; continue; }
			_r$5 = t.Key(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = _r$5.Implements(textMarshalerType); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ if (!_r$6) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((_1 === (24)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 4:
				$s = 6; continue;
			/* } else if (!_r$6) { */ case 5:
				$s = -1; return unsupportedTypeEncoder;
				return unsupportedTypeEncoder;
			/* } */ case 6:
		case 1:
		_r$7 = t.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = typeEncoder(_r$7); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		me = new mapEncoder.ptr(_r$8);
		$s = -1; return $methodVal(me, "encode");
		return $methodVal(me, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newMapEncoder }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.me = me; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	encodeByteSlice = function(e, v, param) {
		var $ptr, _r$3, _r$4, _r$5, dst, e, enc, param, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; dst = $f.dst; e = $f.e; enc = $f.enc; param = $f.param; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_r$3 = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s = _r$3;
		e.Buffer.WriteByte(34);
		/* */ if (s.$length < 1024) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (s.$length < 1024) { */ case 2:
			dst = $makeSlice(sliceType$1, base64.StdEncoding.EncodedLen(s.$length));
			base64.StdEncoding.Encode(dst, s);
			e.Buffer.Write(dst);
			$s = 4; continue;
		/* } else { */ case 3:
			enc = base64.NewEncoder(base64.StdEncoding, e);
			_r$4 = enc.Write(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = enc.Close(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 4:
		e.Buffer.WriteByte(34);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encodeByteSlice }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.dst = dst; $f.e = e; $f.enc = enc; $f.param = param; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceEncoder.ptr.prototype.encode = function(e, v, opts) {
		var $ptr, e, opts, se, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; opts = $f.opts; se = $f.se; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		se = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		$r = se.arrayEnc(e, v, opts); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sliceEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f.e = e; $f.opts = opts; $f.se = se; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceEncoder.prototype.encode = function(e, v, opts) { return this.$val.encode(e, v, opts); };
	newSliceEncoder = function(t) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, enc, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; enc = $f.enc; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = t.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 === 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$4 === 8) { */ case 1:
			_r$5 = t.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = reflect.PtrTo(_r$5); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			p = _r$6;
			_r$7 = p.Implements(marshalerType); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			if (!(!_r$7)) { _v = false; $s = 9; continue s; }
			_r$8 = p.Implements(textMarshalerType); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_v = !_r$8; case 9:
			/* */ if (_v) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_v) { */ case 7:
				$s = -1; return encodeByteSlice;
				return encodeByteSlice;
			/* } */ case 8:
		/* } */ case 2:
		_r$9 = newArrayEncoder(t); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		enc = new sliceEncoder.ptr(_r$9);
		$s = -1; return $methodVal(enc, "encode");
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newSliceEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.enc = enc; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayEncoder.ptr.prototype.encode = function(e, v, opts) {
		var $ptr, _arg, _arg$1, _arg$2, _r$3, ae, e, i, n, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$3 = $f._r$3; ae = $f.ae; e = $f.e; i = $f.i; n = $f.n; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		ae = this;
		e.Buffer.WriteByte(91);
		n = v.Len();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			_arg = e;
			_r$3 = v.Index(i); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			_arg$2 = opts;
			$r = ae.elemEnc(_arg, _arg$1, _arg$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		e.Buffer.WriteByte(93);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$3 = _r$3; $f.ae = ae; $f.e = e; $f.i = i; $f.n = n; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayEncoder.prototype.encode = function(e, v, opts) { return this.$val.encode(e, v, opts); };
	newArrayEncoder = function(t) {
		var $ptr, _r$3, _r$4, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = typeEncoder(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		enc = new arrayEncoder.ptr(_r$4);
		$s = -1; return $methodVal(enc, "encode");
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newArrayEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrEncoder.ptr.prototype.encode = function(e, v, opts) {
		var $ptr, _arg, _arg$1, _arg$2, _r$3, e, opts, pe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$3 = $f._r$3; e = $f.e; opts = $f.opts; pe = $f.pe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		pe = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			$s = -1; return;
			return;
		}
		_arg = e;
		_r$3 = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		_arg$2 = opts;
		$r = pe.elemEnc(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ptrEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$3 = _r$3; $f.e = e; $f.opts = opts; $f.pe = pe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrEncoder.prototype.encode = function(e, v, opts) { return this.$val.encode(e, v, opts); };
	newPtrEncoder = function(t) {
		var $ptr, _r$3, _r$4, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = typeEncoder(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		enc = new ptrEncoder.ptr(_r$4);
		$s = -1; return $methodVal(enc, "encode");
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPtrEncoder }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	condAddrEncoder.ptr.prototype.encode = function(e, v, opts) {
		var $ptr, ce, e, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ce = $f.ce; e = $f.e; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $clone(opts, encOpts);
		v = v;
		ce = this;
		/* */ if (v.CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.CanAddr()) { */ case 1:
			$r = ce.canAddrEnc(e, v, opts); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = ce.elseEnc(e, v, opts); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: condAddrEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f.ce = ce; $f.e = e; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	condAddrEncoder.prototype.encode = function(e, v, opts) { return this.$val.encode(e, v, opts); };
	newCondAddrEncoder = function(canAddrEnc, elseEnc) {
		var $ptr, canAddrEnc, elseEnc, enc;
		enc = new condAddrEncoder.ptr(canAddrEnc, elseEnc);
		return $methodVal(enc, "encode");
	};
	isValidTag = function(s) {
		var $ptr, _i, _ref, _rune, c, s;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	fieldByIndex = function(v, index) {
		var $ptr, _i, _r$3, _r$4, _ref, i, index, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; i = $f.i; index = $f.index; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (v.Kind() === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (v.Kind() === 22) { */ case 3:
				if (v.IsNil()) {
					$s = -1; return new reflect.Value.ptr(ptrType$3.nil, 0, 0);
					return new reflect.Value.ptr(ptrType$3.nil, 0, 0);
				}
				_r$3 = v.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				v = _r$3;
			/* } */ case 4:
			_r$4 = v.Field(i); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v = _r$4;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return v;
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.i = i; $f.index = index; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeByIndex = function(t, index) {
		var $ptr, _i, _r$3, _r$4, _r$5, _ref, i, index, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; i = $f.i; index = $f.index; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$3 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$3 === 22) { */ case 3:
				_r$4 = t.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				t = _r$4;
			/* } */ case 4:
			_r$5 = t.Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			t = _r$5.Type;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return t;
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.i = i; $f.index = index; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	reflectWithString.ptr.prototype.resolve = function() {
		var $ptr, _1, _r$3, _r$4, _r$5, _tuple, _tuple$1, buf, err, ok, tm, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; err = $f.err; ok = $f.ok; tm = $f.tm; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		/* */ if (w.v.Kind() === 24) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (w.v.Kind() === 24) { */ case 1:
			_r$3 = w.v.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			w.s = _r$3;
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		/* } */ case 2:
		_r$4 = w.v.Interface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$4, encoding.TextMarshaler, true);
		tm = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok) { */ case 5:
			_r$5 = tm.MarshalText(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			buf = _tuple$1[0];
			err = _tuple$1[1];
			w.s = $bytesToString(buf);
			$s = -1; return err;
			return err;
		/* } */ case 6:
		_1 = w.v.Kind();
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			w.s = strconv.FormatInt(w.v.Int(), 10);
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			w.s = strconv.FormatUint(w.v.Uint(), 10);
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		$panic(new $String("unexpected map key type"));
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reflectWithString.ptr.prototype.resolve }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.err = err; $f.ok = ok; $f.tm = tm; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	reflectWithString.prototype.resolve = function() { return this.$val.resolve(); };
	byString.prototype.Len = function() {
		var $ptr, sv;
		sv = this;
		return sv.$length;
	};
	$ptrType(byString).prototype.Len = function() { return this.$get().Len(); };
	byString.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, sv;
		sv = this;
		_tmp = $clone(((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]), reflectWithString);
		_tmp$1 = $clone(((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]), reflectWithString);
		reflectWithString.copy(((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]), _tmp);
		reflectWithString.copy(((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]), _tmp$1);
	};
	$ptrType(byString).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byString.prototype.Less = function(i, j) {
		var $ptr, i, j, sv;
		sv = this;
		return ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).s < ((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]).s;
	};
	$ptrType(byString).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	encodeState.ptr.prototype.string = function(s, escapeHTML) {
		var $ptr, _1, _tuple, b, c, e, escapeHTML, i, len0, s, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && (!escapeHTML || !((b === 60)) && !((b === 62)) && !((b === 38)))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.WriteString($substring(s, start, i));
				}
				_1 = b;
				if ((_1 === (92)) || (_1 === (34))) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_1 === (10)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_1 === (13)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_1 === (9)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			c = _tuple[0];
			size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.WriteString($substring(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.WriteString($substring(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.WriteString($substring(s, start));
		}
		e.Buffer.WriteByte(34);
		return e.Buffer.Len() - len0 >> 0;
	};
	encodeState.prototype.string = function(s, escapeHTML) { return this.$val.string(s, escapeHTML); };
	encodeState.ptr.prototype.stringBytes = function(s, escapeHTML) {
		var $ptr, _1, _tuple, b, c, e, escapeHTML, i, len0, s, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			b = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && (!escapeHTML || !((b === 60)) && !((b === 62)) && !((b === 38)))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				_1 = b;
				if ((_1 === (92)) || (_1 === (34))) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_1 === (10)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_1 === (13)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_1 === (9)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, i));
			c = _tuple[0];
			size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.$length) {
			e.Buffer.Write($subslice(s, start));
		}
		e.Buffer.WriteByte(34);
		return e.Buffer.Len() - len0 >> 0;
	};
	encodeState.prototype.stringBytes = function(s, escapeHTML) { return this.$val.stringBytes(s, escapeHTML); };
	fillField = function(f) {
		var $ptr, f;
		f = $clone(f, field);
		f.nameBytes = new sliceType$1($stringToBytes(f.name));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byName.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byName).prototype.Len = function() { return this.$get().Len(); };
	byName.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byName.prototype.Less = function(i, j) {
		var $ptr, i, j, x;
		x = this;
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name;
		}
		if (!((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length))) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
		}
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).tag)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag;
		}
		return $subslice(new byIndex(x.$array), x.$offset, x.$offset + x.$length).Less(i, j);
	};
	$ptrType(byName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byIndex.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var $ptr, _i, _ref, i, j, k, x, x$1, x$2, xik;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var $ptr, _1, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _key$1, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _v, _v$1, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, quoted, sf, t, tag, tagged, visited, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; advance = $f.advance; count = $f.count; current = $f.current; dominant = $f.dominant; f = $f.f; fi = $f.fi; fields = $f.fields; fj = $f.fj; ft = $f.ft; i = $f.i; i$1 = $f.i$1; index = $f.index; name = $f.name; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ok = $f.ok; opts = $f.opts; out = $f.out; quoted = $f.quoted; sf = $f.sf; t = $f.t; tag = $f.tag; tagged = $f.tagged; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		current = new sliceType$3([]);
		next = new sliceType$3([new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, t, false, false)]);
		count = $makeMap(reflect.Type.keyFor, []);
		nextCount = $makeMap(reflect.Type.keyFor, []);
		visited = $makeMap(reflect.Type.keyFor, []);
		fields = sliceType$3.nil;
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			_tmp$2 = nextCount;
			_tmp$3 = $makeMap(reflect.Type.keyFor, []);
			count = _tmp$2;
			nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
				/* */ if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: true };
				i = 0;
				/* while (true) { */ case 7:
					_r$3 = f.typ.NumField(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* if (!(i < _r$3)) { break; } */ if(!(i < _r$3)) { $s = 8; continue; }
					_r$4 = f.typ.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					sf = $clone(_r$4, reflect.StructField);
					/* */ if (!(sf.PkgPath === "") && !sf.Anonymous) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (!(sf.PkgPath === "") && !sf.Anonymous) { */ case 11:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 12:
					tag = new reflect.StructTag(sf.Tag).Get("json");
					/* */ if (tag === "-") { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (tag === "-") { */ case 13:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 14:
					_tuple = parseTag(tag);
					name = _tuple[0];
					opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = $makeSlice(sliceType$2, (f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, ((x < 0 || x >= index.$length) ? $throwRuntimeError("index out of range") : index.$array[index.$offset + x] = i));
					ft = sf.Type;
					_r$5 = ft.Name(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					if (!(_r$5 === "")) { _v = false; $s = 17; continue s; }
					_r$6 = ft.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v = _r$6 === 22; case 17:
					/* */ if (_v) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_v) { */ case 15:
						_r$7 = ft.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						ft = _r$7;
					/* } */ case 16:
					quoted = false;
					/* */ if (new tagOptions(opts).Contains("string")) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (new tagOptions(opts).Contains("string")) { */ case 21:
							_r$8 = ft.Kind(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_1 = _r$8;
							if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (13)) || (_1 === (14)) || (_1 === (24))) {
								quoted = true;
							}
						case 23:
					/* } */ case 22:
					if (!(name === "") || !sf.Anonymous) { _v$1 = true; $s = 27; continue s; }
					_r$9 = ft.Kind(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_v$1 = !((_r$9 === 25)); case 27:
					/* */ if (_v$1) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_v$1) { */ case 25:
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields = $append(fields, fillField(new field.ptr(name, sliceType$1.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), quoted)));
						if ((_entry$1 = count[reflect.Type.keyFor(f.typ)], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields = $append(fields, (x$1 = fields.$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$1])));
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 26:
					_key$1 = ft; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = nextCount[reflect.Type.keyFor(ft)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					/* */ if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { */ case 29:
						_r$10 = ft.Name(); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$11 = fillField(new field.ptr(_r$10, sliceType$1.nil, $throwNilPointerError, false, index, ft, false, false)); /* */ $s = 32; case 32: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						next = $append(next, _r$11);
					/* } */ case 30:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort($subslice(new byName(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		out = $subslice(fields, 0, 0);
		_tmp$4 = 0;
		_tmp$5 = 0;
		advance = _tmp$4;
		i$1 = _tmp$5;
		/* while (true) { */ case 34:
			/* if (!(i$1 < fields.$length)) { break; } */ if(!(i$1 < fields.$length)) { $s = 35; continue; }
			fi = $clone(((i$1 < 0 || i$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while (true) {
				if (!((i$1 + advance >> 0) < fields.$length)) { break; }
				fj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				/* continue; */ $s = 34; continue;
			}
			_tuple$1 = dominantField($subslice(fields, i$1, (i$1 + advance >> 0)));
			dominant = $clone(_tuple$1[0], field);
			ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		/* } */ $s = 34; continue; case 35:
		fields = out;
		$r = sort.Sort($subslice(new byIndex(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return fields;
		return fields;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeFields }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.advance = advance; $f.count = count; $f.current = current; $f.dominant = dominant; $f.f = f; $f.fi = fi; $f.fields = fields; $f.fj = fj; $f.ft = ft; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ok = ok; $f.opts = opts; $f.out = out; $f.quoted = quoted; $f.sf = sf; $f.t = t; $f.tag = tag; $f.tagged = tagged; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	dominantField = function(fields) {
		var $ptr, _i, _ref, f, fields, i, length, tagged;
		length = (0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, false), false];
		}
		return [(0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var $ptr, _entry, _entry$1, _i, _key, _key$1, _keys, _r$3, _ref, _tuple, _tuple$1, f, k, m, newM, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; f = $f.f; k = $f.k; m = $f.m; newM = $f.newM; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(fieldCache.value.Load(), mapType$2, true);
		m = _tuple[0];
		f = (_entry = m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : sliceType$3.nil);
		if (!(f === sliceType$3.nil)) {
			$s = -1; return f;
			return f;
		}
		_r$3 = typeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		f = _r$3;
		if (f === sliceType$3.nil) {
			f = new sliceType$3([]);
		}
		fieldCache.mu.Lock();
		_tuple$1 = $assertType(fieldCache.value.Load(), mapType$2, true);
		m = _tuple$1[0];
		newM = (x = $keys(m).length + 1 >> 0, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				continue;
			}
			k = _entry$1.k;
			v = _entry$1.v;
			_key = k; (newM || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		_key$1 = t; (newM || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: f };
		fieldCache.value.Store(new mapType$2(newM));
		fieldCache.mu.Unlock();
		$s = -1; return f;
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cachedTypeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.f = f; $f.k = k; $f.m = m; $f.newM = newM; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	foldFunc = function(s) {
		var $ptr, _i, _ref, b, nonLetter, s, special, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var $ptr, _1, _i, _ref, _tuple, s, sb, sbUpper, size, t, tb, tr;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = (0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t);
			tr = _tuple[0];
			size = _tuple[1];
			_1 = sb;
			if ((_1 === (115)) || (_1 === (83))) {
				if (!((tr === 383))) {
					return false;
				}
			} else if ((_1 === (107)) || (_1 === (75))) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var $ptr, _i, _ref, i, s, sb, t, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var $ptr, _i, _ref, b, i, s, t;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	compact = function(dst, src, escape) {
		var $ptr, _i, _r$3, _r$4, _ref, c, dst, escape, i, origLen, scan, src, start, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; c = $f.c; dst = $f.dst; escape = $f.escape; i = $f.i; origLen = $f.origLen; scan = $f.scan; src = $f.src; start = $f.start; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan = [scan];
		origLen = dst.Len();
		scan[0] = new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
		scan[0].reset();
		start = 0;
		_ref = src;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (escape && ((c === 60) || (c === 62) || (c === 38))) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u00");
				dst.WriteByte(hex.charCodeAt((c >>> 4 << 24 >>> 24)));
				dst.WriteByte(hex.charCodeAt(((c & 15) >>> 0)));
				start = i + 1 >> 0;
			}
			if ((c === 226) && (i + 2 >> 0) < src.$length && ((x = i + 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) === 128) && ((((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) & ~1) << 24 >>> 24) === 168)) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u202");
				dst.WriteByte(hex.charCodeAt((((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) & 15) >>> 0)));
				start = i + 3 >> 0;
			}
			_r$3 = scan[0].step(scan[0], c); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			if (v >= 9) {
				if (v === 11) {
					/* break; */ $s = 2; continue;
				}
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				start = i + 1 >> 0;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$4 = scan[0].eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 === 11) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$4 === 11) { */ case 4:
			dst.Truncate(origLen);
			$s = -1; return scan[0].err;
			return scan[0].err;
		/* } */ case 5:
		if (start < src.$length) {
			dst.Write($subslice(src, start));
		}
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compact }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.c = c; $f.dst = dst; $f.escape = escape; $f.i = i; $f.origLen = origLen; $f.scan = scan; $f.src = src; $f.start = start; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.ptr.prototype.reset = function() {
		var $ptr, s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.ptr.prototype.eof = function() {
		var $ptr, _r$3, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			$s = -1; return 11;
			return 11;
		}
		if (s.endTop) {
			$s = -1; return 10;
			return 10;
		}
		_r$3 = s.step(s, 32); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (s.endTop) {
			$s = -1; return 10;
			return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.ptr("unexpected end of JSON input", s.bytes);
		}
		$s = -1; return 11;
		return 11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanner.ptr.prototype.eof }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.ptr.prototype.pushParseState = function(p) {
		var $ptr, p, s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.ptr.prototype.popParseState = function() {
		var $ptr, n, s;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		var $ptr, c;
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var $ptr, _1, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		_1 = c;
		if (_1 === (123)) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_1 === (91)) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_1 === (34)) {
			s.step = stateInString;
			return 1;
		} else if (_1 === (45)) {
			s.step = stateNeg;
			return 1;
		} else if (_1 === (48)) {
			s.step = state0;
			return 1;
		} else if (_1 === (116)) {
			s.step = stateT;
			return 1;
		} else if (_1 === (102)) {
			s.step = stateF;
			return 1;
		} else if (_1 === (110)) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var $ptr, c, n, s, x, x$1;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = 1));
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var $ptr, _1, c, n, ps, s, x, x$1, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace(c)) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_1 = ps;
		if (_1 === (0)) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3] = 1));
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_1 === (1)) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = 0));
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_1 === (2)) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		var $ptr, c, s;
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		var $ptr, c, s;
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var $ptr, _1, c, s;
		_1 = c;
		if ((_1 === (98)) || (_1 === (102)) || (_1 === (110)) || (_1 === (114)) || (_1 === (116)) || (_1 === (92)) || (_1 === (47)) || (_1 === (34))) {
			s.step = stateInString;
			return 0;
		} else if (_1 === (117)) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		var $ptr, c, s;
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		var $ptr, c, s;
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		var $ptr, c, s;
		if ((c === 43) || (c === 45)) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		var $ptr, c, s;
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		var $ptr, c, s;
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		var $ptr, c, s;
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		var $ptr, c, s;
		return 11;
	};
	scanner.ptr.prototype.error = function(c, context) {
		var $ptr, c, context, s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var $ptr, c, s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote($encodeRune(c));
		return "'" + $substring(s, 1, (s.length - 1 >> 0)) + "'";
	};
	parseTag = function(tag) {
		var $ptr, idx, tag;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [$substring(tag, 0, idx), $substring(tag, (idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var $ptr, _tmp, _tmp$1, i, next, o, optionName, s;
		o = this.$val;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (true) {
			if (!(!(s === ""))) { break; }
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = $substring(s, 0, i);
				_tmp$1 = $substring(s, (i + 1 >> 0));
				s = _tmp;
				next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	Number.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, $error], false)}];
	ptrType$15.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$16.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "marshal", name: "marshal", pkg: "encoding/json", typ: $funcType([$emptyInterface, encOpts], [$error], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "reflectValue", name: "reflectValue", pkg: "encoding/json", typ: $funcType([reflect.Value, encOpts], [], false)}, {prop: "string", name: "string", pkg: "encoding/json", typ: $funcType([$String, $Bool], [$Int], false)}, {prop: "stringBytes", name: "stringBytes", pkg: "encoding/json", typ: $funcType([sliceType$1, $Bool], [$Int], false)}];
	floatEncoder.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$19.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$20.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$21.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$22.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$23.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$24.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$5, reflect.Value, encOpts], [], false)}];
	ptrType$25.methods = [{prop: "resolve", name: "resolve", pkg: "encoding/json", typ: $funcType([], [$error], false)}];
	byString.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	byName.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	byIndex.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "reset", name: "reset", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "eof", name: "eof", pkg: "encoding/json", typ: $funcType([], [$Int], false)}, {prop: "pushParseState", name: "pushParseState", pkg: "encoding/json", typ: $funcType([$Int], [], false)}, {prop: "popParseState", name: "popParseState", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$Uint8, $String], [$Int], false)}, {prop: "undo", name: "undo", pkg: "encoding/json", typ: $funcType([$Int], [], false)}];
	tagOptions.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	Marshaler.init([{prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}]);
	UnsupportedTypeError.init("", [{prop: "Type", name: "Type", exported: true, typ: reflect.Type, tag: ""}]);
	UnsupportedValueError.init("", [{prop: "Value", name: "Value", exported: true, typ: reflect.Value, tag: ""}, {prop: "Str", name: "Str", exported: true, typ: $String, tag: ""}]);
	MarshalerError.init("", [{prop: "Type", name: "Type", exported: true, typ: reflect.Type, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	encodeState.init("encoding/json", [{prop: "Buffer", name: "", exported: true, typ: bytes.Buffer, tag: ""}, {prop: "scratch", name: "scratch", exported: false, typ: arrayType$1, tag: ""}]);
	encOpts.init("encoding/json", [{prop: "quoted", name: "quoted", exported: false, typ: $Bool, tag: ""}, {prop: "escapeHTML", name: "escapeHTML", exported: false, typ: $Bool, tag: ""}]);
	encoderFunc.init([ptrType$5, reflect.Value, encOpts], [], false);
	structEncoder.init("encoding/json", [{prop: "fields", name: "fields", exported: false, typ: sliceType$3, tag: ""}, {prop: "fieldEncs", name: "fieldEncs", exported: false, typ: sliceType$4, tag: ""}]);
	mapEncoder.init("encoding/json", [{prop: "elemEnc", name: "elemEnc", exported: false, typ: encoderFunc, tag: ""}]);
	sliceEncoder.init("encoding/json", [{prop: "arrayEnc", name: "arrayEnc", exported: false, typ: encoderFunc, tag: ""}]);
	arrayEncoder.init("encoding/json", [{prop: "elemEnc", name: "elemEnc", exported: false, typ: encoderFunc, tag: ""}]);
	ptrEncoder.init("encoding/json", [{prop: "elemEnc", name: "elemEnc", exported: false, typ: encoderFunc, tag: ""}]);
	condAddrEncoder.init("encoding/json", [{prop: "canAddrEnc", name: "canAddrEnc", exported: false, typ: encoderFunc, tag: ""}, {prop: "elseEnc", name: "elseEnc", exported: false, typ: encoderFunc, tag: ""}]);
	reflectWithString.init("encoding/json", [{prop: "v", name: "v", exported: false, typ: reflect.Value, tag: ""}, {prop: "s", name: "s", exported: false, typ: $String, tag: ""}]);
	byString.init(reflectWithString);
	field.init("encoding/json", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "nameBytes", name: "nameBytes", exported: false, typ: sliceType$1, tag: ""}, {prop: "equalFold", name: "equalFold", exported: false, typ: funcType, tag: ""}, {prop: "tag", name: "tag", exported: false, typ: $Bool, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$2, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: reflect.Type, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", exported: false, typ: $Bool, tag: ""}, {prop: "quoted", name: "quoted", exported: false, typ: $Bool, tag: ""}]);
	byName.init(field);
	byIndex.init(field);
	SyntaxError.init("encoding/json", [{prop: "msg", name: "msg", exported: false, typ: $String, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Int64, tag: ""}]);
	scanner.init("encoding/json", [{prop: "step", name: "step", exported: false, typ: funcType$1, tag: ""}, {prop: "endTop", name: "endTop", exported: false, typ: $Bool, tag: ""}, {prop: "parseState", name: "parseState", exported: false, typ: sliceType$2, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "redo", name: "redo", exported: false, typ: $Bool, tag: ""}, {prop: "redoCode", name: "redoCode", exported: false, typ: $Int, tag: ""}, {prop: "redoState", name: "redoState", exported: false, typ: funcType$1, tag: ""}, {prop: "bytes", name: "bytes", exported: false, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		encoderCache = new structType.ptr(new nosync.RWMutex.ptr(false, 0), false);
		fieldCache = new structType$1.ptr(new atomic.Value.ptr(new atomic.noCopy.ptr(), $ifaceNil), new nosync.Mutex.ptr(false));
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		_r = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		textUnmarshalerType = _r;
		numberType = reflect.TypeOf(new Number(""));
		hex = "0123456789abcdef";
		_r$1 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		marshalerType = _r$1;
		_r$2 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$2)).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		textMarshalerType = _r$2;
		float32Encoder = $methodVal(new floatEncoder(32), "encode");
		float64Encoder = $methodVal(new floatEncoder(64), "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8, lazybuf, sliceType, sliceType$1, ptrType$1, Match, scanChunk, matchChunk, getEsc, Glob, cleanGlobPath, cleanGlobPathWindows, glob, hasMeta, Clean, FromSlash, Split, Join, Base, VolumeName, volumeNameLen, join;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", true, "path/filepath", false, function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(lazybuf);
	Match = function(pattern, name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, chunk, err, err$1, err$2, i, matched, name, ok, ok$1, pattern, star, t, t$1;
		matched = false;
		err = $ifaceNil;
		Pattern:
		while (true) {
			if (!(pattern.length > 0)) { break; }
			star = false;
			chunk = "";
			_tuple = scanChunk(pattern);
			star = _tuple[0];
			chunk = _tuple[1];
			pattern = _tuple[2];
			if (star && chunk === "") {
				_tmp = !strings.Contains(name, "/");
				_tmp$1 = $ifaceNil;
				matched = _tmp;
				err = _tmp$1;
				return [matched, err];
			}
			_tuple$1 = matchChunk(chunk, name);
			t = _tuple$1[0];
			ok = _tuple$1[1];
			err$1 = _tuple$1[2];
			if (ok && ((t.length === 0) || pattern.length > 0)) {
				name = t;
				continue;
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = false;
				_tmp$3 = err$1;
				matched = _tmp$2;
				err = _tmp$3;
				return [matched, err];
			}
			if (star) {
				i = 0;
				while (true) {
					if (!(i < name.length && !((name.charCodeAt(i) === 47)))) { break; }
					_tuple$2 = matchChunk(chunk, $substring(name, (i + 1 >> 0)));
					t$1 = _tuple$2[0];
					ok$1 = _tuple$2[1];
					err$2 = _tuple$2[2];
					if (ok$1) {
						if ((pattern.length === 0) && t$1.length > 0) {
							i = i + (1) >> 0;
							continue;
						}
						name = t$1;
						continue Pattern;
					}
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						_tmp$4 = false;
						_tmp$5 = err$2;
						matched = _tmp$4;
						err = _tmp$5;
						return [matched, err];
					}
					i = i + (1) >> 0;
				}
			}
			_tmp$6 = false;
			_tmp$7 = $ifaceNil;
			matched = _tmp$6;
			err = _tmp$7;
			return [matched, err];
		}
		_tmp$8 = name.length === 0;
		_tmp$9 = $ifaceNil;
		matched = _tmp$8;
		err = _tmp$9;
		return [matched, err];
	};
	$pkg.Match = Match;
	scanChunk = function(pattern) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, chunk, i, inrange, pattern, rest, star;
		star = false;
		chunk = "";
		rest = "";
		while (true) {
			if (!(pattern.length > 0 && (pattern.charCodeAt(0) === 42))) { break; }
			pattern = $substring(pattern, 1);
			star = true;
		}
		inrange = false;
		i = 0;
		i = 0;
		Scan:
		while (true) {
			if (!(i < pattern.length)) { break; }
			_1 = pattern.charCodeAt(i);
			if (_1 === (92)) {
				if (true) {
					if ((i + 1 >> 0) < pattern.length) {
						i = i + (1) >> 0;
					}
				}
			} else if (_1 === (91)) {
				inrange = true;
			} else if (_1 === (93)) {
				inrange = false;
			} else if (_1 === (42)) {
				if (!inrange) {
					break Scan;
				}
			}
			i = i + (1) >> 0;
		}
		_tmp = star;
		_tmp$1 = $substring(pattern, 0, i);
		_tmp$2 = $substring(pattern, i);
		star = _tmp;
		chunk = _tmp$1;
		rest = _tmp$2;
		return [star, chunk, rest];
	};
	matchChunk = function(chunk, s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, _tuple$1, _tuple$2, _tuple$3, chunk, err, hi, lo, match, n, n$1, negated, nrange, ok, r, rest, s;
		rest = "";
		ok = false;
		err = $ifaceNil;
		while (true) {
			if (!(chunk.length > 0)) { break; }
			if (s.length === 0) {
				return [rest, ok, err];
			}
			_1 = chunk.charCodeAt(0);
			if (_1 === (91)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				n = _tuple[1];
				s = $substring(s, n);
				chunk = $substring(chunk, 1);
				if (chunk.length === 0) {
					err = $pkg.ErrBadPattern;
					return [rest, ok, err];
				}
				negated = chunk.charCodeAt(0) === 94;
				if (negated) {
					chunk = $substring(chunk, 1);
				}
				match = false;
				nrange = 0;
				while (true) {
					if (chunk.length > 0 && (chunk.charCodeAt(0) === 93) && nrange > 0) {
						chunk = $substring(chunk, 1);
						break;
					}
					_tmp = 0;
					_tmp$1 = 0;
					lo = _tmp;
					hi = _tmp$1;
					_tuple$1 = getEsc(chunk);
					lo = _tuple$1[0];
					chunk = _tuple$1[1];
					err = _tuple$1[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [rest, ok, err];
					}
					hi = lo;
					if (chunk.charCodeAt(0) === 45) {
						_tuple$2 = getEsc($substring(chunk, 1));
						hi = _tuple$2[0];
						chunk = _tuple$2[1];
						err = _tuple$2[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							return [rest, ok, err];
						}
					}
					if (lo <= r && r <= hi) {
						match = true;
					}
					nrange = nrange + (1) >> 0;
				}
				if (match === negated) {
					return [rest, ok, err];
				}
			} else if (_1 === (63)) {
				if (s.charCodeAt(0) === 47) {
					return [rest, ok, err];
				}
				_tuple$3 = utf8.DecodeRuneInString(s);
				n$1 = _tuple$3[1];
				s = $substring(s, n$1);
				chunk = $substring(chunk, 1);
			} else if (_1 === (92)) {
				if (true) {
					chunk = $substring(chunk, 1);
					if (chunk.length === 0) {
						err = $pkg.ErrBadPattern;
						return [rest, ok, err];
					}
				}
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = $substring(s, 1);
				chunk = $substring(chunk, 1);
			} else {
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = $substring(s, 1);
				chunk = $substring(chunk, 1);
			}
		}
		_tmp$2 = s;
		_tmp$3 = true;
		_tmp$4 = $ifaceNil;
		rest = _tmp$2;
		ok = _tmp$3;
		err = _tmp$4;
		return [rest, ok, err];
	};
	getEsc = function(chunk) {
		var $ptr, _tuple, chunk, err, n, nchunk, r;
		r = 0;
		nchunk = "";
		err = $ifaceNil;
		if ((chunk.length === 0) || (chunk.charCodeAt(0) === 45) || (chunk.charCodeAt(0) === 93)) {
			err = $pkg.ErrBadPattern;
			return [r, nchunk, err];
		}
		if ((chunk.charCodeAt(0) === 92) && true) {
			chunk = $substring(chunk, 1);
			if (chunk.length === 0) {
				err = $pkg.ErrBadPattern;
				return [r, nchunk, err];
			}
		}
		_tuple = utf8.DecodeRuneInString(chunk);
		r = _tuple[0];
		n = _tuple[1];
		if ((r === 65533) && (n === 1)) {
			err = $pkg.ErrBadPattern;
		}
		nchunk = $substring(chunk, n);
		if (nchunk.length === 0) {
			err = $pkg.ErrBadPattern;
		}
		return [r, nchunk, err];
	};
	Glob = function(pattern) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, d, dir, err, file, m, matches, pattern, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; d = $f.d; dir = $f.dir; err = $f.err; file = $f.file; m = $f.m; matches = $f.matches; pattern = $f.pattern; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matches = sliceType.nil;
		err = $ifaceNil;
		if (!hasMeta(pattern)) {
			_tuple = os.Lstat(pattern);
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = sliceType.nil;
				_tmp$1 = $ifaceNil;
				matches = _tmp;
				err = _tmp$1;
				$s = -1; return [matches, err];
				return [matches, err];
			}
			_tmp$2 = new sliceType([pattern]);
			_tmp$3 = $ifaceNil;
			matches = _tmp$2;
			err = _tmp$3;
			$s = -1; return [matches, err];
			return [matches, err];
		}
		_tuple$1 = Split(pattern);
		dir = _tuple$1[0];
		file = _tuple$1[1];
		if (false) {
			dir = cleanGlobPathWindows(dir);
		} else {
			dir = cleanGlobPath(dir);
		}
		/* */ if (!hasMeta(dir)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!hasMeta(dir)) { */ case 1:
			_r = glob(dir, file, sliceType.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			matches = _tuple$2[0];
			err = _tuple$2[1];
			$s = -1; return [matches, err];
			return [matches, err];
		/* } */ case 2:
		if (dir === pattern) {
			_tmp$4 = sliceType.nil;
			_tmp$5 = $pkg.ErrBadPattern;
			matches = _tmp$4;
			err = _tmp$5;
			$s = -1; return [matches, err];
			return [matches, err];
		}
		m = sliceType.nil;
		_r$1 = Glob(dir); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$3 = _r$1;
		m = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [matches, err];
			return [matches, err];
		}
		_ref = m;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$2 = glob(d, file, matches); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			matches = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [matches, err];
				return [matches, err];
			}
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return [matches, err];
		return [matches, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Glob }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.d = d; $f.dir = dir; $f.err = err; $f.file = file; $f.m = m; $f.matches = matches; $f.pattern = pattern; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Glob = Glob;
	cleanGlobPath = function(path) {
		var $ptr, _1, path;
		_1 = path;
		if (_1 === ("")) {
			return ".";
		} else if (_1 === ("/")) {
			return path;
		} else {
			return $substring(path, 0, (path.length - 1 >> 0));
		}
	};
	cleanGlobPathWindows = function(path) {
		var $ptr, path, vollen;
		vollen = volumeNameLen(path);
		if (path === "") {
			return ".";
		} else if (((vollen + 1 >> 0) === path.length) && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0)))) {
			return path;
		} else if ((vollen === path.length) && (path.length === 2)) {
			return path + ".";
		} else {
			return $substring(path, 0, (path.length - 1 >> 0));
		}
	};
	glob = function(dir, pattern, matches) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, d, dir, e, err, err$1, fi, m, matched, matches, n, names, pattern, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; d = $f.d; dir = $f.dir; e = $f.e; err = $f.err; err$1 = $f.err$1; fi = $f.fi; m = $f.m; matched = $f.matched; matches = $f.matches; n = $f.n; names = $f.names; pattern = $f.pattern; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		m = sliceType.nil;
		e = $ifaceNil;
		m = matches;
		_tuple = os.Stat(dir);
		fi = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [m, e];
			return [m, e];
		}
		_r = fi.IsDir(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return [m, e];
			return [m, e];
		/* } */ case 2:
		_tuple$1 = os.Open(dir);
		d = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [m, e];
			return [m, e];
		}
		$deferred.push([$methodVal(d, "Close"), []]);
		_tuple$2 = d.Readdirnames(-1);
		names = _tuple$2[0];
		$r = sort.Strings(names); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = names;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$3 = Match(pattern, n);
			matched = _tuple$3[0];
			err$1 = _tuple$3[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = m;
				_tmp$1 = err$1;
				m = _tmp;
				e = _tmp$1;
				$s = -1; return [m, e];
				return [m, e];
			}
			if (matched) {
				m = $append(m, Join(new sliceType([dir, n])));
			}
			_i++;
		}
		$s = -1; return [m, e];
		return [m, e];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [m, e]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: glob }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.d = d; $f.dir = dir; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.fi = fi; $f.m = m; $f.matched = matched; $f.matches = matches; $f.n = n; $f.names = names; $f.pattern = pattern; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	hasMeta = function(path) {
		var $ptr, path;
		return strings.ContainsAny(path, "*?[");
	};
	lazybuf.ptr.prototype.index = function(i) {
		var $ptr, b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var $ptr, b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, $substring(b.path, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var $ptr, b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return $substring(b.volAndPath, 0, (b.volLen + b.w >> 0));
		}
		return $substring(b.volAndPath, 0, b.volLen) + $bytesToString($subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = $substring(path, volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var $ptr, path;
		if (true) {
			return path;
		}
		return strings.Replace(path, "/", "/", -1);
	};
	$pkg.FromSlash = FromSlash;
	Split = function(path) {
		var $ptr, _tmp, _tmp$1, dir, file, i, path, vol;
		dir = "";
		file = "";
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (true) {
			if (!(i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
			i = i - (1) >> 0;
		}
		_tmp = $substring(path, 0, (i + 1 >> 0));
		_tmp$1 = $substring(path, (i + 1 >> 0));
		dir = _tmp;
		file = _tmp$1;
		return [dir, file];
	};
	$pkg.Split = Split;
	Join = function(elem) {
		var $ptr, elem;
		return join(elem);
	};
	$pkg.Join = Join;
	Base = function(path) {
		var $ptr, i, path;
		if (path === "") {
			return ".";
		}
		while (true) {
			if (!(path.length > 0 && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0))))) { break; }
			path = $substring(path, 0, (path.length - 1 >> 0));
		}
		path = $substring(path, VolumeName(path).length);
		i = path.length - 1 >> 0;
		while (true) {
			if (!(i >= 0 && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
			i = i - (1) >> 0;
		}
		if (i >= 0) {
			path = $substring(path, (i + 1 >> 0));
		}
		if (path === "") {
			return "/";
		}
		return path;
	};
	$pkg.Base = Base;
	VolumeName = function(path) {
		var $ptr, path;
		return $substring(path, 0, volumeNameLen(path));
	};
	$pkg.VolumeName = VolumeName;
	volumeNameLen = function(path) {
		var $ptr, path;
		return 0;
	};
	join = function(elem) {
		var $ptr, _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	ptrType$1.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init("path/filepath", [{prop: "path", name: "path", exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType$1, tag: ""}, {prop: "w", name: "w", exported: false, typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", exported: false, typ: $String, tag: ""}, {prop: "volLen", name: "volLen", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, blackHolePool, readAll, ReadFile;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	readAll = function(r, capacity) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, buf, capacity, err, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType$1.nil;
		err[0] = $ifaceNil;
		buf = bytes.NewBuffer($makeSlice(sliceType$1, 0, $flatten64(capacity)));
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err[0] = _tuple[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		$s = -1; return [b, err[0]];
		return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ReadFile = function(filename) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, err, err$1, f, fi, filename, n, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; f = $f.f; fi = $f.fi; filename = $f.filename; n = $f.n; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_tuple = os.Open(filename);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$1.nil, err];
			return [sliceType$1.nil, err];
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		n = new $Int64(0, 0);
		_tuple$1 = f.Stat();
		fi = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 1:
			_r = fi.Size(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			size = _r;
			if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) {
				n = size;
			}
		/* } */ case 2:
		_r$1 = readAll(f, new $Int64(n.$high + 0, n.$low + 512)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$1.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ReadFile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.fi = fi; $f.filename = filename; $f.n = n; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ReadFile = ReadFile;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr, b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, sort, strconv, strings, sliceType, shouldEscape, QueryEscape, escape;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sliceType = $sliceType($Uint8);
	shouldEscape = function(c, mode) {
		var $ptr, _1, _2, _3, c, mode;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		if ((mode === 2) || (mode === 3)) {
			_1 = c;
			if ((_1 === (33)) || (_1 === (36)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (59)) || (_1 === (61)) || (_1 === (58)) || (_1 === (91)) || (_1 === (93)) || (_1 === (60)) || (_1 === (62)) || (_1 === (34))) {
				return false;
			}
		}
		_2 = c;
		if ((_2 === (45)) || (_2 === (95)) || (_2 === (46)) || (_2 === (126))) {
			return false;
		} else if ((_2 === (36)) || (_2 === (38)) || (_2 === (43)) || (_2 === (44)) || (_2 === (47)) || (_2 === (58)) || (_2 === (59)) || (_2 === (61)) || (_2 === (63)) || (_2 === (64))) {
			_3 = mode;
			if (_3 === (1)) {
				return c === 63;
			} else if (_3 === (4)) {
				return (c === 64) || (c === 47) || (c === 63) || (c === 58);
			} else if (_3 === (5)) {
				return true;
			} else if (_3 === (6)) {
				return false;
			}
		}
		return true;
	};
	QueryEscape = function(s) {
		var $ptr, s;
		return escape(s, 5);
	};
	$pkg.QueryEscape = QueryEscape;
	escape = function(s, mode) {
		var $ptr, _tmp, _tmp$1, c, c$1, hexCount, i, i$1, j, mode, s, spaceCount, t, x, x$1;
		_tmp = 0;
		_tmp$1 = 0;
		spaceCount = _tmp;
		hexCount = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 5)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(2, hexCount)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 5)) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43);
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 37);
				(x = j + 1 >> 0, ((x < 0 || x >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))));
				(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))));
				j = j + (3) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(t);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/template/parse"] = (function() {
	var $pkg = {}, $init, bytes, fmt, runtime, strconv, strings, unicode, utf8, item, itemType, stateFn, lexer, Node, NodeType, Pos, ListNode, TextNode, PipeNode, ActionNode, CommandNode, IdentifierNode, VariableNode, DotNode, NilNode, FieldNode, ChainNode, BoolNode, NumberNode, StringNode, endNode, elseNode, BranchNode, IfNode, RangeNode, WithNode, TemplateNode, Tree, sliceType, ptrType, sliceType$1, sliceType$2, arrayType, arrayType$1, ptrType$1, ptrType$2, sliceType$3, ptrType$3, sliceType$4, ptrType$4, sliceType$5, ptrType$5, ptrType$6, mapType, sliceType$6, ptrType$7, arrayType$2, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, chanType, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, mapType$1, key, textFormat, lex, lexText, rightTrimLength, leftTrimLength, lexLeftDelim, lexComment, lexRightDelim, lexInsideAction, lexSpace, lexIdentifier, lexField, lexVariable, lexFieldOrVariable, lexChar, lexNumber, lexQuote, lexRawQuote, isSpace, isEndOfLine, isAlphaNumeric, NewIdentifier, Parse, New, IsEmptyTree;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	item = $pkg.item = $newType(0, $kindStruct, "parse.item", true, "text/template/parse", false, function(typ_, pos_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = 0;
			this.pos = 0;
			this.val = "";
			return;
		}
		this.typ = typ_;
		this.pos = pos_;
		this.val = val_;
	});
	itemType = $pkg.itemType = $newType(4, $kindInt, "parse.itemType", true, "text/template/parse", false, null);
	stateFn = $pkg.stateFn = $newType(4, $kindFunc, "parse.stateFn", true, "text/template/parse", false, null);
	lexer = $pkg.lexer = $newType(0, $kindStruct, "parse.lexer", true, "text/template/parse", false, function(name_, input_, leftDelim_, rightDelim_, state_, pos_, start_, width_, lastPos_, items_, parenDepth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.input = "";
			this.leftDelim = "";
			this.rightDelim = "";
			this.state = $throwNilPointerError;
			this.pos = 0;
			this.start = 0;
			this.width = 0;
			this.lastPos = 0;
			this.items = $chanNil;
			this.parenDepth = 0;
			return;
		}
		this.name = name_;
		this.input = input_;
		this.leftDelim = leftDelim_;
		this.rightDelim = rightDelim_;
		this.state = state_;
		this.pos = pos_;
		this.start = start_;
		this.width = width_;
		this.lastPos = lastPos_;
		this.items = items_;
		this.parenDepth = parenDepth_;
	});
	Node = $pkg.Node = $newType(8, $kindInterface, "parse.Node", true, "text/template/parse", true, null);
	NodeType = $pkg.NodeType = $newType(4, $kindInt, "parse.NodeType", true, "text/template/parse", true, null);
	Pos = $pkg.Pos = $newType(4, $kindInt, "parse.Pos", true, "text/template/parse", true, null);
	ListNode = $pkg.ListNode = $newType(0, $kindStruct, "parse.ListNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Nodes = sliceType$1.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Nodes = Nodes_;
	});
	TextNode = $pkg.TextNode = $newType(0, $kindStruct, "parse.TextNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Text = sliceType$2.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Text = Text_;
	});
	PipeNode = $pkg.PipeNode = $newType(0, $kindStruct, "parse.PipeNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Line_, Decl_, Cmds_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Decl = sliceType$3.nil;
			this.Cmds = sliceType$4.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Decl = Decl_;
		this.Cmds = Cmds_;
	});
	ActionNode = $pkg.ActionNode = $newType(0, $kindStruct, "parse.ActionNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Line_, Pipe_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Pipe = ptrType$4.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Pipe = Pipe_;
	});
	CommandNode = $pkg.CommandNode = $newType(0, $kindStruct, "parse.CommandNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Args_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Args = sliceType$1.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Args = Args_;
	});
	IdentifierNode = $pkg.IdentifierNode = $newType(0, $kindStruct, "parse.IdentifierNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Ident = "";
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Ident = Ident_;
	});
	VariableNode = $pkg.VariableNode = $newType(0, $kindStruct, "parse.VariableNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Ident = sliceType$5.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Ident = Ident_;
	});
	DotNode = $pkg.DotNode = $newType(0, $kindStruct, "parse.DotNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
	});
	NilNode = $pkg.NilNode = $newType(0, $kindStruct, "parse.NilNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
	});
	FieldNode = $pkg.FieldNode = $newType(0, $kindStruct, "parse.FieldNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Ident = sliceType$5.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Ident = Ident_;
	});
	ChainNode = $pkg.ChainNode = $newType(0, $kindStruct, "parse.ChainNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Node_, Field_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Node = $ifaceNil;
			this.Field = sliceType$5.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Node = Node_;
		this.Field = Field_;
	});
	BoolNode = $pkg.BoolNode = $newType(0, $kindStruct, "parse.BoolNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, True_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.True = false;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.True = True_;
	});
	NumberNode = $pkg.NumberNode = $newType(0, $kindStruct, "parse.NumberNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, IsInt_, IsUint_, IsFloat_, IsComplex_, Int64_, Uint64_, Float64_, Complex128_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.IsInt = false;
			this.IsUint = false;
			this.IsFloat = false;
			this.IsComplex = false;
			this.Int64 = new $Int64(0, 0);
			this.Uint64 = new $Uint64(0, 0);
			this.Float64 = 0;
			this.Complex128 = new $Complex128(0, 0);
			this.Text = "";
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.IsInt = IsInt_;
		this.IsUint = IsUint_;
		this.IsFloat = IsFloat_;
		this.IsComplex = IsComplex_;
		this.Int64 = Int64_;
		this.Uint64 = Uint64_;
		this.Float64 = Float64_;
		this.Complex128 = Complex128_;
		this.Text = Text_;
	});
	StringNode = $pkg.StringNode = $newType(0, $kindStruct, "parse.StringNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Quoted_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Quoted = "";
			this.Text = "";
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Quoted = Quoted_;
		this.Text = Text_;
	});
	endNode = $pkg.endNode = $newType(0, $kindStruct, "parse.endNode", true, "text/template/parse", false, function(NodeType_, Pos_, tr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
	});
	elseNode = $pkg.elseNode = $newType(0, $kindStruct, "parse.elseNode", true, "text/template/parse", false, function(NodeType_, Pos_, tr_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
	});
	BranchNode = $pkg.BranchNode = $newType(0, $kindStruct, "parse.BranchNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Line_, Pipe_, List_, ElseList_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Pipe = ptrType$4.nil;
			this.List = ptrType$1.nil;
			this.ElseList = ptrType$1.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Pipe = Pipe_;
		this.List = List_;
		this.ElseList = ElseList_;
	});
	IfNode = $pkg.IfNode = $newType(0, $kindStruct, "parse.IfNode", true, "text/template/parse", true, function(BranchNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BranchNode = new BranchNode.ptr(0, 0, ptrType.nil, 0, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil);
			return;
		}
		this.BranchNode = BranchNode_;
	});
	RangeNode = $pkg.RangeNode = $newType(0, $kindStruct, "parse.RangeNode", true, "text/template/parse", true, function(BranchNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BranchNode = new BranchNode.ptr(0, 0, ptrType.nil, 0, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil);
			return;
		}
		this.BranchNode = BranchNode_;
	});
	WithNode = $pkg.WithNode = $newType(0, $kindStruct, "parse.WithNode", true, "text/template/parse", true, function(BranchNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BranchNode = new BranchNode.ptr(0, 0, ptrType.nil, 0, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil);
			return;
		}
		this.BranchNode = BranchNode_;
	});
	TemplateNode = $pkg.TemplateNode = $newType(0, $kindStruct, "parse.TemplateNode", true, "text/template/parse", true, function(NodeType_, Pos_, tr_, Line_, Name_, Pipe_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Name = "";
			this.Pipe = ptrType$4.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Name = Name_;
		this.Pipe = Pipe_;
	});
	Tree = $pkg.Tree = $newType(0, $kindStruct, "parse.Tree", true, "text/template/parse", true, function(Name_, ParseName_, Root_, text_, funcs_, lex_, token_, peekCount_, vars_, treeSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.ParseName = "";
			this.Root = ptrType$1.nil;
			this.text = "";
			this.funcs = sliceType$6.nil;
			this.lex = ptrType$7.nil;
			this.token = arrayType$2.zero();
			this.peekCount = 0;
			this.vars = sliceType$5.nil;
			this.treeSet = false;
			return;
		}
		this.Name = Name_;
		this.ParseName = ParseName_;
		this.Root = Root_;
		this.text = text_;
		this.funcs = funcs_;
		this.lex = lex_;
		this.token = token_;
		this.peekCount = peekCount_;
		this.vars = vars_;
		this.treeSet = treeSet_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Tree);
	sliceType$1 = $sliceType(Node);
	sliceType$2 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(ListNode);
	ptrType$2 = $ptrType(VariableNode);
	sliceType$3 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(CommandNode);
	sliceType$4 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(PipeNode);
	sliceType$5 = $sliceType($String);
	ptrType$5 = $ptrType(NumberNode);
	ptrType$6 = $ptrType($Complex128);
	mapType = $mapType($String, $emptyInterface);
	sliceType$6 = $sliceType(mapType);
	ptrType$7 = $ptrType(lexer);
	arrayType$2 = $arrayType(item, 3);
	ptrType$8 = $ptrType($error);
	ptrType$9 = $ptrType(ActionNode);
	ptrType$10 = $ptrType(IfNode);
	ptrType$11 = $ptrType(RangeNode);
	ptrType$12 = $ptrType(TemplateNode);
	ptrType$13 = $ptrType(TextNode);
	ptrType$14 = $ptrType(WithNode);
	chanType = $chanType(item, false, false);
	ptrType$15 = $ptrType(IdentifierNode);
	ptrType$16 = $ptrType(DotNode);
	ptrType$17 = $ptrType(NilNode);
	ptrType$18 = $ptrType(FieldNode);
	ptrType$19 = $ptrType(ChainNode);
	ptrType$20 = $ptrType(BoolNode);
	ptrType$21 = $ptrType(StringNode);
	ptrType$22 = $ptrType(endNode);
	ptrType$23 = $ptrType(elseNode);
	ptrType$24 = $ptrType(BranchNode);
	mapType$1 = $mapType($String, ptrType);
	item.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, _r$2, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $clone(this, item);
			/* */ if ((i.typ === 6)) { $s = 2; continue; }
			/* */ if ((i.typ === 0)) { $s = 3; continue; }
			/* */ if (i.typ > 20) { $s = 4; continue; }
			/* */ if (i.val.length > 10) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((i.typ === 6)) { */ case 2:
				$s = -1; return "EOF";
				return "EOF";
			/* } else if ((i.typ === 0)) { */ case 3:
				$s = -1; return i.val;
				return i.val;
			/* } else if (i.typ > 20) { */ case 4:
				_r = fmt.Sprintf("<%s>", new sliceType([new $String(i.val)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (i.val.length > 10) { */ case 5:
				_r$1 = fmt.Sprintf("%.10q...", new sliceType([new $String(i.val)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } */ case 6:
		case 1:
		_r$2 = fmt.Sprintf("%q", new sliceType([new $String(i.val)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: item.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	item.prototype.String = function() { return this.$val.String(); };
	lexer.ptr.prototype.next = function() {
		var $ptr, _tuple, l, r, w;
		l = this;
		if ((l.pos >> 0) >= l.input.length) {
			l.width = 0;
			return -1;
		}
		_tuple = utf8.DecodeRuneInString($substring(l.input, l.pos));
		r = _tuple[0];
		w = _tuple[1];
		l.width = (w >> 0);
		l.pos = l.pos + (l.width) >> 0;
		return r;
	};
	lexer.prototype.next = function() { return this.$val.next(); };
	lexer.ptr.prototype.peek = function() {
		var $ptr, l, r;
		l = this;
		r = l.next();
		l.backup();
		return r;
	};
	lexer.prototype.peek = function() { return this.$val.peek(); };
	lexer.ptr.prototype.backup = function() {
		var $ptr, l;
		l = this;
		l.pos = l.pos - (l.width) >> 0;
	};
	lexer.prototype.backup = function() { return this.$val.backup(); };
	lexer.ptr.prototype.emit = function(t) {
		var $ptr, l, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = $send(l.items, new item.ptr(t, l.start, $substring(l.input, l.start, l.pos))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.start = l.pos;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.emit }; } $f.$ptr = $ptr; $f.l = l; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.emit = function(t) { return this.$val.emit(t); };
	lexer.ptr.prototype.ignore = function() {
		var $ptr, l;
		l = this;
		l.start = l.pos;
	};
	lexer.prototype.ignore = function() { return this.$val.ignore(); };
	lexer.ptr.prototype.accept = function(valid) {
		var $ptr, l, valid;
		l = this;
		if (strings.ContainsRune(valid, l.next())) {
			return true;
		}
		l.backup();
		return false;
	};
	lexer.prototype.accept = function(valid) { return this.$val.accept(valid); };
	lexer.ptr.prototype.acceptRun = function(valid) {
		var $ptr, l, valid;
		l = this;
		while (true) {
			if (!(strings.ContainsRune(valid, l.next()))) { break; }
		}
		l.backup();
	};
	lexer.prototype.acceptRun = function(valid) { return this.$val.acceptRun(valid); };
	lexer.ptr.prototype.lineNumber = function() {
		var $ptr, l;
		l = this;
		return 1 + strings.Count($substring(l.input, 0, l.lastPos), "\n") >> 0;
	};
	lexer.prototype.lineNumber = function() { return this.$val.lineNumber(); };
	lexer.ptr.prototype.errorf = function(format, args) {
		var $ptr, _r, args, format, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; args = $f.args; format = $f.format; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = $send(l.items, new item.ptr(0, l.start, _r)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $throwNilPointerError;
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f._r = _r; $f.args = args; $f.format = format; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	lexer.ptr.prototype.nextItem = function() {
		var $ptr, _r, item$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; item$1 = $f.item$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = $recv(l.items); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		item$1 = $clone(_r[0], item);
		l.lastPos = item$1.pos;
		$s = -1; return item$1;
		return item$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.nextItem }; } $f.$ptr = $ptr; $f._r = _r; $f.item$1 = item$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.nextItem = function() { return this.$val.nextItem(); };
	lexer.ptr.prototype.drain = function() {
		var $ptr, _1, _2, _r, _tuple, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _tuple = $f._tuple; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_2 = l.items;
		/* while (true) { */ case 1:
			_r = $recv(_2); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			_1 = _tuple[1];
			if (!_1) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.drain }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._tuple = _tuple; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.drain = function() { return this.$val.drain(); };
	lex = function(name, input, left, right) {
		var $ptr, input, l, left, name, right;
		if (left === "") {
			left = "{{";
		}
		if (right === "") {
			right = "}}";
		}
		l = new lexer.ptr(name, input, left, right, $throwNilPointerError, 0, 0, 0, 0, new $Chan(item, 0), 0);
		$go($methodVal(l, "run"), []);
		return l;
	};
	lexer.ptr.prototype.run = function() {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		l.state = lexText;
		/* while (true) { */ case 1:
			/* if (!(!(l.state === $throwNilPointerError))) { break; } */ if(!(!(l.state === $throwNilPointerError))) { $s = 2; continue; }
			_r = l.state(l); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l.state = _r;
		/* } */ $s = 1; continue; case 2:
		$close(l.items);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.run }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.run = function() { return this.$val.run(); };
	lexText = function(l) {
		var $ptr, _r, _tuple, delim, l, trimLength, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; delim = $f.delim; l = $f.l; trimLength = $f.trimLength; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_tuple = l.atLeftDelim();
			delim = _tuple[0];
			trimSpace = _tuple[1];
			/* */ if (delim) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (delim) { */ case 3:
				trimLength = 0;
				/* */ if (trimSpace) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (trimSpace) { */ case 5:
					_r = rightTrimLength($substring(l.input, l.start, l.pos)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					trimLength = _r;
				/* } */ case 6:
				l.pos = l.pos - (trimLength) >> 0;
				/* */ if (l.pos > l.start) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (l.pos > l.start) { */ case 8:
					$r = l.emit(18); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				l.pos = l.pos + (trimLength) >> 0;
				l.ignore();
				$s = -1; return lexLeftDelim;
				return lexLeftDelim;
			/* } */ case 4:
			if (l.next() === -1) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		/* */ if (l.pos > l.start) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (l.pos > l.start) { */ case 11:
			$r = l.emit(18); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		$r = l.emit(6); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $throwNilPointerError;
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.delim = delim; $f.l = l; $f.trimLength = trimLength; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.atLeftDelim = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, delim, l, trimSpaces;
		delim = false;
		trimSpaces = false;
		l = this;
		if (!strings.HasPrefix($substring(l.input, l.pos), l.leftDelim)) {
			_tmp = false;
			_tmp$1 = false;
			delim = _tmp;
			trimSpaces = _tmp$1;
			return [delim, trimSpaces];
		}
		trimSpaces = strings.HasPrefix($substring(l.input, (l.pos + (l.leftDelim.length >> 0) >> 0)), "- ");
		_tmp$2 = true;
		_tmp$3 = trimSpaces;
		delim = _tmp$2;
		trimSpaces = _tmp$3;
		return [delim, trimSpaces];
	};
	lexer.prototype.atLeftDelim = function() { return this.$val.atLeftDelim(); };
	rightTrimLength = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.TrimRight(s, " \t\r\n"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return ((s.length - _r.length >> 0) >> 0);
		return ((s.length - _r.length >> 0) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rightTrimLength }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.atRightDelim = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, delim, l, trimSpaces;
		delim = false;
		trimSpaces = false;
		l = this;
		if (strings.HasPrefix($substring(l.input, l.pos), l.rightDelim)) {
			_tmp = true;
			_tmp$1 = false;
			delim = _tmp;
			trimSpaces = _tmp$1;
			return [delim, trimSpaces];
		}
		if (strings.HasPrefix($substring(l.input, l.pos), " -")) {
			if (strings.HasPrefix($substring(l.input, (l.pos + 2 >> 0)), l.rightDelim)) {
				_tmp$2 = true;
				_tmp$3 = true;
				delim = _tmp$2;
				trimSpaces = _tmp$3;
				return [delim, trimSpaces];
			}
		}
		_tmp$4 = false;
		_tmp$5 = false;
		delim = _tmp$4;
		trimSpaces = _tmp$5;
		return [delim, trimSpaces];
	};
	lexer.prototype.atRightDelim = function() { return this.$val.atRightDelim(); };
	leftTrimLength = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.TrimLeft(s, " \t\r\n"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return ((s.length - _r.length >> 0) >> 0);
		return ((s.length - _r.length >> 0) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: leftTrimLength }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexLeftDelim = function(l) {
		var $ptr, afterMarker, l, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; afterMarker = $f.afterMarker; l = $f.l; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l.pos = l.pos + ((l.leftDelim.length >> 0)) >> 0;
		trimSpace = strings.HasPrefix($substring(l.input, l.pos), "- ");
		afterMarker = 0;
		if (trimSpace) {
			afterMarker = 2;
		}
		if (strings.HasPrefix($substring(l.input, (l.pos + afterMarker >> 0)), "/*")) {
			l.pos = l.pos + (afterMarker) >> 0;
			l.ignore();
			$s = -1; return lexComment;
			return lexComment;
		}
		$r = l.emit(9); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.pos = l.pos + (afterMarker) >> 0;
		l.ignore();
		l.parenDepth = 0;
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexLeftDelim }; } $f.$ptr = $ptr; $f.afterMarker = afterMarker; $f.l = l; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexComment = function(l) {
		var $ptr, _r, _r$1, _r$2, _tuple, delim, i, l, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; delim = $f.delim; i = $f.i; l = $f.l; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l.pos = l.pos + (2) >> 0;
		i = strings.Index($substring(l.input, l.pos), "*/");
		/* */ if (i < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0) { */ case 1:
			_r = l.errorf("unclosed comment", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		l.pos = l.pos + (((i + 2 >> 0) >> 0)) >> 0;
		_tuple = l.atRightDelim();
		delim = _tuple[0];
		trimSpace = _tuple[1];
		/* */ if (!delim) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!delim) { */ case 4:
			_r$1 = l.errorf("comment ends before closing delimiter", new sliceType([])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			return _r$1;
		/* } */ case 5:
		if (trimSpace) {
			l.pos = l.pos + (2) >> 0;
		}
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		/* */ if (trimSpace) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (trimSpace) { */ case 7:
			_r$2 = leftTrimLength($substring(l.input, l.pos)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			l.pos = l.pos + (_r$2) >> 0;
		/* } */ case 8:
		l.ignore();
		$s = -1; return lexText;
		return lexText;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexComment }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.delim = delim; $f.i = i; $f.l = l; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexRightDelim = function(l) {
		var $ptr, _r, l, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		trimSpace = strings.HasPrefix($substring(l.input, l.pos), " -");
		if (trimSpace) {
			l.pos = l.pos + (2) >> 0;
			l.ignore();
		}
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		$r = l.emit(14); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (trimSpace) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (trimSpace) { */ case 2:
			_r = leftTrimLength($substring(l.input, l.pos)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l.pos = l.pos + (_r) >> 0;
			l.ignore();
		/* } */ case 3:
		$s = -1; return lexText;
		return lexText;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexRightDelim }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexInsideAction = function(l) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, delim, l, r, r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; delim = $f.delim; l = $f.l; r = $f.r; r$1 = $f.r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = l.atRightDelim();
		delim = _tuple[0];
		/* */ if (delim) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (delim) { */ case 1:
			if (l.parenDepth === 0) {
				$s = -1; return lexRightDelim;
				return lexRightDelim;
			}
			_r = l.errorf("unclosed left paren", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
			r = l.next();
			/* */ if ((r === -1) || isEndOfLine(r)) { $s = 5; continue; }
			/* */ if (isSpace(r)) { $s = 6; continue; }
			/* */ if ((r === 58)) { $s = 7; continue; }
			/* */ if ((r === 124)) { $s = 8; continue; }
			/* */ if ((r === 34)) { $s = 9; continue; }
			/* */ if ((r === 96)) { $s = 10; continue; }
			/* */ if ((r === 36)) { $s = 11; continue; }
			/* */ if ((r === 39)) { $s = 12; continue; }
			/* */ if ((r === 46)) { $s = 13; continue; }
			/* */ if ((r === 43) || (r === 45) || (48 <= r && r <= 57)) { $s = 14; continue; }
			/* */ if (isAlphaNumeric(r)) { $s = 15; continue; }
			/* */ if ((r === 40)) { $s = 16; continue; }
			/* */ if ((r === 41)) { $s = 17; continue; }
			/* */ if (r <= 127 && unicode.IsPrint(r)) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if ((r === -1) || isEndOfLine(r)) { */ case 5:
				_r$1 = l.errorf("unclosed action", new sliceType([])); /* */ $s = 21; case 21: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } else if (isSpace(r)) { */ case 6:
				$s = -1; return lexSpace;
				return lexSpace;
			/* } else if ((r === 58)) { */ case 7:
				/* */ if (!((l.next() === 61))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!((l.next() === 61))) { */ case 22:
					_r$2 = l.errorf("expected :=", new sliceType([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return _r$2;
					return _r$2;
				/* } */ case 23:
				$r = l.emit(5); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 20; continue;
			/* } else if ((r === 124)) { */ case 8:
				$r = l.emit(12); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 20; continue;
			/* } else if ((r === 34)) { */ case 9:
				$s = -1; return lexQuote;
				return lexQuote;
			/* } else if ((r === 96)) { */ case 10:
				$s = -1; return lexRawQuote;
				return lexRawQuote;
			/* } else if ((r === 36)) { */ case 11:
				$s = -1; return lexVariable;
				return lexVariable;
			/* } else if ((r === 39)) { */ case 12:
				$s = -1; return lexChar;
				return lexChar;
			/* } else if ((r === 46)) { */ case 13:
				if (l.pos < (l.input.length >> 0)) {
					r$1 = l.input.charCodeAt(l.pos);
					if (r$1 < 48 || 57 < r$1) {
						$s = -1; return lexField;
						return lexField;
					}
				}
				l.backup();
				$s = -1; return lexNumber;
				return lexNumber;
			/* } else if ((r === 43) || (r === 45) || (48 <= r && r <= 57)) { */ case 14:
				l.backup();
				$s = -1; return lexNumber;
				return lexNumber;
			/* } else if (isAlphaNumeric(r)) { */ case 15:
				l.backup();
				$s = -1; return lexIdentifier;
				return lexIdentifier;
			/* } else if ((r === 40)) { */ case 16:
				$r = l.emit(10); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				l.parenDepth = l.parenDepth + (1) >> 0;
				$s = 20; continue;
			/* } else if ((r === 41)) { */ case 17:
				$r = l.emit(15); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				l.parenDepth = l.parenDepth - (1) >> 0;
				/* */ if (l.parenDepth < 0) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (l.parenDepth < 0) { */ case 29:
					_r$3 = l.errorf("unexpected right paren %#U", new sliceType([new $Int32(r)])); /* */ $s = 31; case 31: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$s = -1; return _r$3;
					return _r$3;
				/* } */ case 30:
				$s = 20; continue;
			/* } else if (r <= 127 && unicode.IsPrint(r)) { */ case 18:
				$r = l.emit(2); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return lexInsideAction;
				return lexInsideAction;
			/* } else { */ case 19:
				_r$4 = l.errorf("unrecognized character in action: %#U", new sliceType([new $Int32(r)])); /* */ $s = 33; case 33: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
				return _r$4;
			/* } */ case 20:
		case 4:
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexInsideAction }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.delim = delim; $f.l = l; $f.r = r; $f.r$1 = r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexSpace = function(l) {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		while (true) {
			if (!(isSpace(l.peek()))) { break; }
			l.next();
		}
		$r = l.emit(16); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexSpace }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexIdentifier = function(l) {
		var $ptr, _entry, _entry$1, _r, l, r, word, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _r = $f._r; l = $f.l; r = $f.r; word = $f.word; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				r = l.next();
				/* */ if (isAlphaNumeric(r)) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (isAlphaNumeric(r)) { */ case 4:
					$s = 6; continue;
				/* } else { */ case 5:
					l.backup();
					word = $substring(l.input, l.start, l.pos);
					/* */ if (!l.atTerminator()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!l.atTerminator()) { */ case 7:
						_r = l.errorf("bad character %#U", new sliceType([new $Int32(r)])); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$s = -1; return _r;
						return _r;
					/* } */ case 8:
						/* */ if ((_entry = key[$String.keyFor(word)], _entry !== undefined ? _entry.v : 0) > 20) { $s = 11; continue; }
						/* */ if ((word.charCodeAt(0) === 46)) { $s = 12; continue; }
						/* */ if ((word === "true") || (word === "false")) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if ((_entry = key[$String.keyFor(word)], _entry !== undefined ? _entry.v : 0) > 20) { */ case 11:
							$r = l.emit((_entry$1 = key[$String.keyFor(word)], _entry$1 !== undefined ? _entry$1.v : 0)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 15; continue;
						/* } else if ((word.charCodeAt(0) === 46)) { */ case 12:
							$r = l.emit(7); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 15; continue;
						/* } else if ((word === "true") || (word === "false")) { */ case 13:
							$r = l.emit(1); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 15; continue;
						/* } else { */ case 14:
							$r = l.emit(8); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 15:
					case 10:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 6:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexIdentifier }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r = _r; $f.l = l; $f.r = r; $f.word = word; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexField = function(l) {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lexFieldOrVariable(l, 7); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexField }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexVariable = function(l) {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (l.atTerminator()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l.atTerminator()) { */ case 1:
			$r = l.emit(19); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return lexInsideAction;
			return lexInsideAction;
		/* } */ case 2:
		_r = lexFieldOrVariable(l, 19); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexVariable }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexFieldOrVariable = function(l, typ) {
		var $ptr, _r, l, r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; r = $f.r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (l.atTerminator()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l.atTerminator()) { */ case 1:
			/* */ if (typ === 19) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (typ === 19) { */ case 3:
				$r = l.emit(19); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				$r = l.emit(22); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			$s = -1; return lexInsideAction;
			return lexInsideAction;
		/* } */ case 2:
		r = 0;
		while (true) {
			r = l.next();
			if (!isAlphaNumeric(r)) {
				l.backup();
				break;
			}
		}
		/* */ if (!l.atTerminator()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!l.atTerminator()) { */ case 8:
			_r = l.errorf("bad character %#U", new sliceType([new $Int32(r)])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 9:
		$r = l.emit(typ); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexFieldOrVariable }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.r = r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.atTerminator = function() {
		var $ptr, _1, _tuple, l, r, rd;
		l = this;
		r = l.peek();
		if (isSpace(r) || isEndOfLine(r)) {
			return true;
		}
		_1 = r;
		if ((_1 === (-1)) || (_1 === (46)) || (_1 === (44)) || (_1 === (124)) || (_1 === (58)) || (_1 === (41)) || (_1 === (40))) {
			return true;
		}
		_tuple = utf8.DecodeRuneInString(l.rightDelim);
		rd = _tuple[0];
		if (rd === r) {
			return true;
		}
		return false;
	};
	lexer.prototype.atTerminator = function() { return this.$val.atTerminator(); };
	lexChar = function(l) {
		var $ptr, _1, _r, _r$1, l, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; l = $f.l; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				_1 = l.next();
				/* */ if (_1 === (92)) { $s = 4; continue; }
				/* */ if ((_1 === (-1)) || (_1 === (10))) { $s = 5; continue; }
				/* */ if (_1 === (39)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_1 === (92)) { */ case 4:
					r = l.next();
					if (!((r === -1)) && !((r === 10))) {
						/* break; */ $s = 3; continue;
					}
					_r = l.errorf("unterminated character constant", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
					return _r;
				/* } else if ((_1 === (-1)) || (_1 === (10))) { */ case 5:
					_r$1 = l.errorf("unterminated character constant", new sliceType([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
					return _r$1;
				/* } else if (_1 === (39)) { */ case 6:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 7:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = l.emit(3); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexChar }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexNumber = function(l) {
		var $ptr, _r, _r$1, l, sign, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; sign = $f.sign; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!l.scanNumber()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!l.scanNumber()) { */ case 1:
			_r = l.errorf("bad number syntax: %q", new sliceType([new $String($substring(l.input, l.start, l.pos))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		sign = l.peek();
		/* */ if ((sign === 43) || (sign === 45)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((sign === 43) || (sign === 45)) { */ case 4:
			/* */ if (!l.scanNumber() || !((l.input.charCodeAt((l.pos - 1 >> 0)) === 105))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!l.scanNumber() || !((l.input.charCodeAt((l.pos - 1 >> 0)) === 105))) { */ case 7:
				_r$1 = l.errorf("bad number syntax: %q", new sliceType([new $String($substring(l.input, l.start, l.pos))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } */ case 8:
			$r = l.emit(4); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else { */ case 5:
			$r = l.emit(11); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexNumber }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.sign = sign; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.scanNumber = function() {
		var $ptr, digits, l;
		l = this;
		l.accept("+-");
		digits = "0123456789";
		if (l.accept("0") && l.accept("xX")) {
			digits = "0123456789abcdefABCDEF";
		}
		l.acceptRun(digits);
		if (l.accept(".")) {
			l.acceptRun(digits);
		}
		if (l.accept("eE")) {
			l.accept("+-");
			l.acceptRun("0123456789");
		}
		l.accept("i");
		if (isAlphaNumeric(l.peek())) {
			l.next();
			return false;
		}
		return true;
	};
	lexer.prototype.scanNumber = function() { return this.$val.scanNumber(); };
	lexQuote = function(l) {
		var $ptr, _1, _r, _r$1, l, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; l = $f.l; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				_1 = l.next();
				/* */ if (_1 === (92)) { $s = 4; continue; }
				/* */ if ((_1 === (-1)) || (_1 === (10))) { $s = 5; continue; }
				/* */ if (_1 === (34)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_1 === (92)) { */ case 4:
					r = l.next();
					if (!((r === -1)) && !((r === 10))) {
						/* break; */ $s = 3; continue;
					}
					_r = l.errorf("unterminated quoted string", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
					return _r;
				/* } else if ((_1 === (-1)) || (_1 === (10))) { */ case 5:
					_r$1 = l.errorf("unterminated quoted string", new sliceType([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
					return _r$1;
				/* } else if (_1 === (34)) { */ case 6:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 7:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = l.emit(17); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexQuote }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexRawQuote = function(l) {
		var $ptr, _1, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				_1 = l.next();
				/* */ if (_1 === (-1)) { $s = 4; continue; }
				/* */ if (_1 === (96)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === (-1)) { */ case 4:
					_r = l.errorf("unterminated raw quoted string", new sliceType([])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return _r;
					return _r;
				/* } else if (_1 === (96)) { */ case 5:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 6:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = l.emit(13); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lexInsideAction;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexRawQuote }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	isSpace = function(r) {
		var $ptr, r;
		return (r === 32) || (r === 9);
	};
	isEndOfLine = function(r) {
		var $ptr, r;
		return (r === 13) || (r === 10);
	};
	isAlphaNumeric = function(r) {
		var $ptr, r;
		return (r === 95) || unicode.IsLetter(r) || unicode.IsDigit(r);
	};
	Pos.prototype.Position = function() {
		var $ptr, p;
		p = this.$val;
		return p;
	};
	$ptrType(Pos).prototype.Position = function() { return new Pos(this.$get()).Position(); };
	NodeType.prototype.Type = function() {
		var $ptr, t;
		t = this.$val;
		return t;
	};
	$ptrType(NodeType).prototype.Type = function() { return new NodeType(this.$get()).Type(); };
	Tree.ptr.prototype.newList = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new ListNode.ptr(11, pos, t, sliceType$1.nil);
	};
	Tree.prototype.newList = function(pos) { return this.$val.newList(pos); };
	ListNode.ptr.prototype.append = function(n) {
		var $ptr, l, n;
		l = this;
		l.Nodes = $append(l.Nodes, n);
	};
	ListNode.prototype.append = function(n) { return this.$val.append(n); };
	ListNode.ptr.prototype.tree = function() {
		var $ptr, l;
		l = this;
		return l.tr;
	};
	ListNode.prototype.tree = function() { return this.$val.tree(); };
	ListNode.ptr.prototype.String = function() {
		var $ptr, _i, _r, _ref, b, l, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; l = $f.l; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		b = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_ref = l.Nodes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = fmt.Fprint(b, new sliceType([n])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return b.String();
		return b.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ListNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.l = l; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	ListNode.prototype.String = function() { return this.$val.String(); };
	ListNode.ptr.prototype.CopyList = function() {
		var $ptr, _i, _r, _ref, elem, l, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; elem = $f.elem; l = $f.l; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			$s = -1; return l;
			return l;
		}
		n = l.tr.newList(l.Pos);
		_ref = l.Nodes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			elem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = elem.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = n.append(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return n;
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ListNode.ptr.prototype.CopyList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.elem = elem; $f.l = l; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	ListNode.prototype.CopyList = function() { return this.$val.CopyList(); };
	ListNode.ptr.prototype.Copy = function() {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.CopyList(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ListNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	ListNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newText = function(pos, text) {
		var $ptr, pos, t, text;
		t = this;
		return new TextNode.ptr(0, pos, t, new sliceType$2($stringToBytes(text)));
	};
	Tree.prototype.newText = function(pos, text) { return this.$val.newText(pos, text); };
	TextNode.ptr.prototype.String = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = fmt.Sprintf(textFormat, new sliceType([t.Text])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TextNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextNode.prototype.String = function() { return this.$val.String(); };
	TextNode.ptr.prototype.tree = function() {
		var $ptr, t;
		t = this;
		return t.tr;
	};
	TextNode.prototype.tree = function() { return this.$val.tree(); };
	TextNode.ptr.prototype.Copy = function() {
		var $ptr, t;
		t = this;
		return new TextNode.ptr(0, t.Pos, t.tr, $appendSlice(new sliceType$2([]), t.Text));
	};
	TextNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newPipeline = function(pos, line, decl) {
		var $ptr, decl, line, pos, t;
		t = this;
		return new PipeNode.ptr(14, pos, t, line, decl, sliceType$4.nil);
	};
	Tree.prototype.newPipeline = function(pos, line, decl) { return this.$val.newPipeline(pos, line, decl); };
	PipeNode.ptr.prototype.append = function(command) {
		var $ptr, command, p;
		p = this;
		p.Cmds = $append(p.Cmds, command);
	};
	PipeNode.prototype.append = function(command) { return this.$val.append(command); };
	PipeNode.ptr.prototype.String = function() {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, c, i, i$1, p, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; i = $f.i; i$1 = $f.i$1; p = $f.p; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		s = "";
		if (p.Decl.$length > 0) {
			_ref = p.Decl;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					s = s + (", ");
				}
				s = s + (v.String());
				_i++;
			}
			s = s + (" := ");
		}
		_ref$1 = p.Cmds;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			i$1 = _i$1;
			c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (i$1 > 0) {
				s = s + (" | ");
			}
			_r = c.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = s + (_r);
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipeNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipeNode.prototype.String = function() { return this.$val.String(); };
	PipeNode.ptr.prototype.tree = function() {
		var $ptr, p;
		p = this;
		return p.tr;
	};
	PipeNode.prototype.tree = function() { return this.$val.tree(); };
	PipeNode.ptr.prototype.CopyPipe = function() {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, c, d, decl, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; d = $f.d; decl = $f.decl; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p === ptrType$4.nil) {
			$s = -1; return p;
			return p;
		}
		decl = sliceType$3.nil;
		_ref = p.Decl;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			decl = $append(decl, $assertType(d.Copy(), ptrType$2));
			_i++;
		}
		n = p.tr.newPipeline(p.Pos, p.Line, decl);
		_ref$1 = p.Cmds;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r = c.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = n.append($assertType(_r, ptrType$3)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return n;
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipeNode.ptr.prototype.CopyPipe }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.d = d; $f.decl = decl; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipeNode.prototype.CopyPipe = function() { return this.$val.CopyPipe(); };
	PipeNode.ptr.prototype.Copy = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipeNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipeNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newAction = function(pos, line, pipe) {
		var $ptr, line, pipe, pos, t;
		t = this;
		return new ActionNode.ptr(1, pos, t, line, pipe);
	};
	Tree.prototype.newAction = function(pos, line, pipe) { return this.$val.newAction(pos, line, pipe); };
	ActionNode.ptr.prototype.String = function() {
		var $ptr, _r, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = fmt.Sprintf("{{%s}}", new sliceType([a.Pipe])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ActionNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	ActionNode.prototype.String = function() { return this.$val.String(); };
	ActionNode.ptr.prototype.tree = function() {
		var $ptr, a;
		a = this;
		return a.tr;
	};
	ActionNode.prototype.tree = function() { return this.$val.tree(); };
	ActionNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_arg = a.Pos;
		_arg$1 = a.Line;
		_r = a.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = a.tr.newAction(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ActionNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	ActionNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newCommand = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new CommandNode.ptr(4, pos, t, sliceType$1.nil);
	};
	Tree.prototype.newCommand = function(pos) { return this.$val.newCommand(pos); };
	CommandNode.ptr.prototype.append = function(arg) {
		var $ptr, arg, c;
		c = this;
		c.Args = $append(c.Args, arg);
	};
	CommandNode.prototype.append = function(arg) { return this.$val.append(arg); };
	CommandNode.ptr.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _ref, _tuple, arg, arg$1, c, i, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; arg$1 = $f.arg$1; c = $f.c; i = $f.i; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		s = "";
		_ref = c.Args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (" ");
			}
			_tuple = $assertType(arg, ptrType$4, true);
			arg$1 = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = arg$1.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = s + ("(" + _r + ")");
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$1 = arg.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			s = s + (_r$1);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommandNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.arg$1 = arg$1; $f.c = c; $f.i = i; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommandNode.prototype.String = function() { return this.$val.String(); };
	CommandNode.ptr.prototype.tree = function() {
		var $ptr, c;
		c = this;
		return c.tr;
	};
	CommandNode.prototype.tree = function() { return this.$val.tree(); };
	CommandNode.ptr.prototype.Copy = function() {
		var $ptr, _i, _r, _ref, c, c$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; c$1 = $f.c$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (c === ptrType$3.nil) {
			$s = -1; return c;
			return c;
		}
		n = c.tr.newCommand(c.Pos);
		_ref = c.Args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = c$1.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = n.append(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return n;
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommandNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.c$1 = c$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommandNode.prototype.Copy = function() { return this.$val.Copy(); };
	NewIdentifier = function(ident) {
		var $ptr, ident;
		return new IdentifierNode.ptr(9, 0, ptrType.nil, ident);
	};
	$pkg.NewIdentifier = NewIdentifier;
	IdentifierNode.ptr.prototype.SetPos = function(pos) {
		var $ptr, i, pos;
		i = this;
		i.Pos = pos;
		return i;
	};
	IdentifierNode.prototype.SetPos = function(pos) { return this.$val.SetPos(pos); };
	IdentifierNode.ptr.prototype.SetTree = function(t) {
		var $ptr, i, t;
		i = this;
		i.tr = t;
		return i;
	};
	IdentifierNode.prototype.SetTree = function(t) { return this.$val.SetTree(t); };
	IdentifierNode.ptr.prototype.String = function() {
		var $ptr, i;
		i = this;
		return i.Ident;
	};
	IdentifierNode.prototype.String = function() { return this.$val.String(); };
	IdentifierNode.ptr.prototype.tree = function() {
		var $ptr, i;
		i = this;
		return i.tr;
	};
	IdentifierNode.prototype.tree = function() { return this.$val.tree(); };
	IdentifierNode.ptr.prototype.Copy = function() {
		var $ptr, i;
		i = this;
		return NewIdentifier(i.Ident).SetTree(i.tr).SetPos(i.Pos);
	};
	IdentifierNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newVariable = function(pos, ident) {
		var $ptr, ident, pos, t;
		t = this;
		return new VariableNode.ptr(18, pos, t, strings.Split(ident, "."));
	};
	Tree.prototype.newVariable = function(pos, ident) { return this.$val.newVariable(pos, ident); };
	VariableNode.ptr.prototype.String = function() {
		var $ptr, _i, _ref, i, id, s, v;
		v = this;
		s = "";
		_ref = v.Ident;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (".");
			}
			s = s + (id);
			_i++;
		}
		return s;
	};
	VariableNode.prototype.String = function() { return this.$val.String(); };
	VariableNode.ptr.prototype.tree = function() {
		var $ptr, v;
		v = this;
		return v.tr;
	};
	VariableNode.prototype.tree = function() { return this.$val.tree(); };
	VariableNode.ptr.prototype.Copy = function() {
		var $ptr, v;
		v = this;
		return new VariableNode.ptr(18, v.Pos, v.tr, $appendSlice(new sliceType$5([]), v.Ident));
	};
	VariableNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newDot = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new DotNode.ptr(5, pos, t);
	};
	Tree.prototype.newDot = function(pos) { return this.$val.newDot(pos); };
	DotNode.ptr.prototype.Type = function() {
		var $ptr, d;
		d = this;
		return 5;
	};
	DotNode.prototype.Type = function() { return this.$val.Type(); };
	DotNode.ptr.prototype.String = function() {
		var $ptr, d;
		d = this;
		return ".";
	};
	DotNode.prototype.String = function() { return this.$val.String(); };
	DotNode.ptr.prototype.tree = function() {
		var $ptr, d;
		d = this;
		return d.tr;
	};
	DotNode.prototype.tree = function() { return this.$val.tree(); };
	DotNode.ptr.prototype.Copy = function() {
		var $ptr, d;
		d = this;
		return d.tr.newDot(d.Pos);
	};
	DotNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newNil = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new NilNode.ptr(12, pos, t);
	};
	Tree.prototype.newNil = function(pos) { return this.$val.newNil(pos); };
	NilNode.ptr.prototype.Type = function() {
		var $ptr, n;
		n = this;
		return 12;
	};
	NilNode.prototype.Type = function() { return this.$val.Type(); };
	NilNode.ptr.prototype.String = function() {
		var $ptr, n;
		n = this;
		return "nil";
	};
	NilNode.prototype.String = function() { return this.$val.String(); };
	NilNode.ptr.prototype.tree = function() {
		var $ptr, n;
		n = this;
		return n.tr;
	};
	NilNode.prototype.tree = function() { return this.$val.tree(); };
	NilNode.ptr.prototype.Copy = function() {
		var $ptr, n;
		n = this;
		return n.tr.newNil(n.Pos);
	};
	NilNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newField = function(pos, ident) {
		var $ptr, ident, pos, t;
		t = this;
		return new FieldNode.ptr(8, pos, t, strings.Split($substring(ident, 1), "."));
	};
	Tree.prototype.newField = function(pos, ident) { return this.$val.newField(pos, ident); };
	FieldNode.ptr.prototype.String = function() {
		var $ptr, _i, _ref, f, id, s;
		f = this;
		s = "";
		_ref = f.Ident;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + ("." + id);
			_i++;
		}
		return s;
	};
	FieldNode.prototype.String = function() { return this.$val.String(); };
	FieldNode.ptr.prototype.tree = function() {
		var $ptr, f;
		f = this;
		return f.tr;
	};
	FieldNode.prototype.tree = function() { return this.$val.tree(); };
	FieldNode.ptr.prototype.Copy = function() {
		var $ptr, f;
		f = this;
		return new FieldNode.ptr(8, f.Pos, f.tr, $appendSlice(new sliceType$5([]), f.Ident));
	};
	FieldNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newChain = function(pos, node) {
		var $ptr, node, pos, t;
		t = this;
		return new ChainNode.ptr(3, pos, t, node, sliceType$5.nil);
	};
	Tree.prototype.newChain = function(pos, node) { return this.$val.newChain(pos, node); };
	ChainNode.ptr.prototype.Add = function(field) {
		var $ptr, c, field;
		c = this;
		if ((field.length === 0) || !((field.charCodeAt(0) === 46))) {
			$panic(new $String("no dot in field"));
		}
		field = $substring(field, 1);
		if (field === "") {
			$panic(new $String("empty field"));
		}
		c.Field = $append(c.Field, field);
	};
	ChainNode.prototype.Add = function(field) { return this.$val.Add(field); };
	ChainNode.ptr.prototype.String = function() {
		var $ptr, _i, _r, _ref, _tuple, c, field, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; field = $f.field; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.Node.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_tuple = $assertType(c.Node, ptrType$4, true);
		ok = _tuple[1];
		if (ok) {
			s = "(" + s + ")";
		}
		_ref = c.Field;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			field = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + ("." + field);
			_i++;
		}
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChainNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.field = field; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ChainNode.prototype.String = function() { return this.$val.String(); };
	ChainNode.ptr.prototype.tree = function() {
		var $ptr, c;
		c = this;
		return c.tr;
	};
	ChainNode.prototype.tree = function() { return this.$val.tree(); };
	ChainNode.ptr.prototype.Copy = function() {
		var $ptr, c;
		c = this;
		return new ChainNode.ptr(3, c.Pos, c.tr, c.Node, $appendSlice(new sliceType$5([]), c.Field));
	};
	ChainNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newBool = function(pos, true$1) {
		var $ptr, pos, t, true$1;
		t = this;
		return new BoolNode.ptr(2, pos, t, true$1);
	};
	Tree.prototype.newBool = function(pos, true$1) { return this.$val.newBool(pos, true$1); };
	BoolNode.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b.True) {
			return "true";
		}
		return "false";
	};
	BoolNode.prototype.String = function() { return this.$val.String(); };
	BoolNode.ptr.prototype.tree = function() {
		var $ptr, b;
		b = this;
		return b.tr;
	};
	BoolNode.prototype.tree = function() { return this.$val.tree(); };
	BoolNode.ptr.prototype.Copy = function() {
		var $ptr, b;
		b = this;
		return b.tr.newBool(b.Pos, b.True);
	};
	BoolNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newNumber = function(pos, text, typ) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, err, err$1, err$2, err$3, err$4, f, f$1, i, n, pos, rune, t, tail, text, typ, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; f = $f.f; f$1 = $f.f$1; i = $f.i; n = $f.n; pos = $f.pos; rune = $f.rune; t = $f.t; tail = $f.tail; text = $f.text; typ = $f.typ; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		n = new NumberNode.ptr(13, pos, t, false, false, false, false, new $Int64(0, 0), new $Uint64(0, 0), 0, new $Complex128(0, 0), text);
			_1 = typ;
			/* */ if (_1 === (3)) { $s = 2; continue; }
			/* */ if (_1 === (4)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (3)) { */ case 2:
				_tuple = strconv.UnquoteChar($substring(text, 1), text.charCodeAt(0));
				rune = _tuple[0];
				tail = _tuple[2];
				err = _tuple[3];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType$5.nil, err];
					return [ptrType$5.nil, err];
				}
				/* */ if (!(tail === "'")) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!(tail === "'")) { */ case 5:
					_r = fmt.Errorf("malformed character constant: %s", new sliceType([new $String(text)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$s = -1; return [ptrType$5.nil, _r];
					return [ptrType$5.nil, _r];
				/* } */ case 6:
				n.Int64 = new $Int64(0, rune);
				n.IsInt = true;
				n.Uint64 = new $Uint64(0, rune);
				n.IsUint = true;
				n.Float64 = rune;
				n.IsFloat = true;
				$s = -1; return [n, $ifaceNil];
				return [n, $ifaceNil];
			/* } else if (_1 === (4)) { */ case 3:
				_r$1 = fmt.Sscan(text, new sliceType([(n.$ptr_Complex128 || (n.$ptr_Complex128 = new ptrType$6(function() { return this.$target.Complex128; }, function($v) { this.$target.Complex128 = $v; }, n)))])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [ptrType$5.nil, err$1];
					return [ptrType$5.nil, err$1];
				}
				n.IsComplex = true;
				n.simplifyComplex();
				$s = -1; return [n, $ifaceNil];
				return [n, $ifaceNil];
			/* } */ case 4:
		case 1:
		if (text.length > 0 && (text.charCodeAt((text.length - 1 >> 0)) === 105)) {
			_tuple$2 = strconv.ParseFloat($substring(text, 0, (text.length - 1 >> 0)), 64);
			f = _tuple$2[0];
			err$2 = _tuple$2[1];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				n.IsComplex = true;
				n.Complex128 = new $Complex128(0, f);
				n.simplifyComplex();
				$s = -1; return [n, $ifaceNil];
				return [n, $ifaceNil];
			}
		}
		_tuple$3 = strconv.ParseUint(text, 0, 64);
		u = _tuple$3[0];
		err$3 = _tuple$3[1];
		if ($interfaceIsEqual(err$3, $ifaceNil)) {
			n.IsUint = true;
			n.Uint64 = u;
		}
		_tuple$4 = strconv.ParseInt(text, 0, 64);
		i = _tuple$4[0];
		err$3 = _tuple$4[1];
		if ($interfaceIsEqual(err$3, $ifaceNil)) {
			n.IsInt = true;
			n.Int64 = i;
			if ((i.$high === 0 && i.$low === 0)) {
				n.IsUint = true;
				n.Uint64 = u;
			}
		}
		/* */ if (n.IsInt) { $s = 9; continue; }
		/* */ if (n.IsUint) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (n.IsInt) { */ case 9:
			n.IsFloat = true;
			n.Float64 = $flatten64(n.Int64);
			$s = 12; continue;
		/* } else if (n.IsUint) { */ case 10:
			n.IsFloat = true;
			n.Float64 = $flatten64(n.Uint64);
			$s = 12; continue;
		/* } else { */ case 11:
			_tuple$5 = strconv.ParseFloat(text, 64);
			f$1 = _tuple$5[0];
			err$4 = _tuple$5[1];
			/* */ if ($interfaceIsEqual(err$4, $ifaceNil)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ($interfaceIsEqual(err$4, $ifaceNil)) { */ case 13:
				/* */ if (!strings.ContainsAny(text, ".eE")) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!strings.ContainsAny(text, ".eE")) { */ case 15:
					_r$2 = fmt.Errorf("integer overflow: %q", new sliceType([new $String(text)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return [ptrType$5.nil, _r$2];
					return [ptrType$5.nil, _r$2];
				/* } */ case 16:
				n.IsFloat = true;
				n.Float64 = f$1;
				if (!n.IsInt && ($flatten64(new $Int64(0, f$1)) === f$1)) {
					n.IsInt = true;
					n.Int64 = new $Int64(0, f$1);
				}
				if (!n.IsUint && ($flatten64(new $Uint64(0, f$1)) === f$1)) {
					n.IsUint = true;
					n.Uint64 = new $Uint64(0, f$1);
				}
			/* } */ case 14:
		/* } */ case 12:
		/* */ if (!n.IsInt && !n.IsUint && !n.IsFloat) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (!n.IsInt && !n.IsUint && !n.IsFloat) { */ case 18:
			_r$3 = fmt.Errorf("illegal number syntax: %q", new sliceType([new $String(text)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$5.nil, _r$3];
			return [ptrType$5.nil, _r$3];
		/* } */ case 19:
		$s = -1; return [n, $ifaceNil];
		return [n, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.newNumber }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.n = n; $f.pos = pos; $f.rune = rune; $f.t = t; $f.tail = tail; $f.text = text; $f.typ = typ; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.newNumber = function(pos, text, typ) { return this.$val.newNumber(pos, text, typ); };
	NumberNode.ptr.prototype.simplifyComplex = function() {
		var $ptr, n;
		n = this;
		n.IsFloat = n.Complex128.$imag === 0;
		if (n.IsFloat) {
			n.Float64 = n.Complex128.$real;
			n.IsInt = $flatten64(new $Int64(0, n.Float64)) === n.Float64;
			if (n.IsInt) {
				n.Int64 = new $Int64(0, n.Float64);
			}
			n.IsUint = $flatten64(new $Uint64(0, n.Float64)) === n.Float64;
			if (n.IsUint) {
				n.Uint64 = new $Uint64(0, n.Float64);
			}
		}
	};
	NumberNode.prototype.simplifyComplex = function() { return this.$val.simplifyComplex(); };
	NumberNode.ptr.prototype.String = function() {
		var $ptr, n;
		n = this;
		return n.Text;
	};
	NumberNode.prototype.String = function() { return this.$val.String(); };
	NumberNode.ptr.prototype.tree = function() {
		var $ptr, n;
		n = this;
		return n.tr;
	};
	NumberNode.prototype.tree = function() { return this.$val.tree(); };
	NumberNode.ptr.prototype.Copy = function() {
		var $ptr, n, nn;
		n = this;
		nn = new NumberNode.ptr(0, 0, ptrType.nil, false, false, false, false, new $Int64(0, 0), new $Uint64(0, 0), 0, new $Complex128(0, 0), "");
		NumberNode.copy(nn, n);
		return nn;
	};
	NumberNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newString = function(pos, orig, text) {
		var $ptr, orig, pos, t, text;
		t = this;
		return new StringNode.ptr(16, pos, t, orig, text);
	};
	Tree.prototype.newString = function(pos, orig, text) { return this.$val.newString(pos, orig, text); };
	StringNode.ptr.prototype.String = function() {
		var $ptr, s;
		s = this;
		return s.Quoted;
	};
	StringNode.prototype.String = function() { return this.$val.String(); };
	StringNode.ptr.prototype.tree = function() {
		var $ptr, s;
		s = this;
		return s.tr;
	};
	StringNode.prototype.tree = function() { return this.$val.tree(); };
	StringNode.ptr.prototype.Copy = function() {
		var $ptr, s;
		s = this;
		return s.tr.newString(s.Pos, s.Quoted, s.Text);
	};
	StringNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newEnd = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new endNode.ptr(7, pos, t);
	};
	Tree.prototype.newEnd = function(pos) { return this.$val.newEnd(pos); };
	endNode.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return "{{end}}";
	};
	endNode.prototype.String = function() { return this.$val.String(); };
	endNode.ptr.prototype.tree = function() {
		var $ptr, e;
		e = this;
		return e.tr;
	};
	endNode.prototype.tree = function() { return this.$val.tree(); };
	endNode.ptr.prototype.Copy = function() {
		var $ptr, e;
		e = this;
		return e.tr.newEnd(e.Pos);
	};
	endNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newElse = function(pos, line) {
		var $ptr, line, pos, t;
		t = this;
		return new elseNode.ptr(6, pos, t, line);
	};
	Tree.prototype.newElse = function(pos, line) { return this.$val.newElse(pos, line); };
	elseNode.ptr.prototype.Type = function() {
		var $ptr, e;
		e = this;
		return 6;
	};
	elseNode.prototype.Type = function() { return this.$val.Type(); };
	elseNode.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return "{{else}}";
	};
	elseNode.prototype.String = function() { return this.$val.String(); };
	elseNode.ptr.prototype.tree = function() {
		var $ptr, e;
		e = this;
		return e.tr;
	};
	elseNode.prototype.tree = function() { return this.$val.tree(); };
	elseNode.ptr.prototype.Copy = function() {
		var $ptr, e;
		e = this;
		return e.tr.newElse(e.Pos, e.Line);
	};
	elseNode.prototype.Copy = function() { return this.$val.Copy(); };
	BranchNode.ptr.prototype.String = function() {
		var $ptr, _1, _r, _r$1, b, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; b = $f.b; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		name = "";
		_1 = b.NodeType;
		if (_1 === (10)) {
			name = "if";
		} else if (_1 === (15)) {
			name = "range";
		} else if (_1 === (19)) {
			name = "with";
		} else {
			$panic(new $String("unknown branch type"));
		}
		/* */ if (!(b.ElseList === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(b.ElseList === ptrType$1.nil)) { */ case 1:
			_r = fmt.Sprintf("{{%s %s}}%s{{else}}%s{{end}}", new sliceType([new $String(name), b.Pipe, b.List, b.ElseList])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("{{%s %s}}%s{{end}}", new sliceType([new $String(name), b.Pipe, b.List])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BranchNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	BranchNode.prototype.String = function() { return this.$val.String(); };
	BranchNode.ptr.prototype.tree = function() {
		var $ptr, b;
		b = this;
		return b.tr;
	};
	BranchNode.prototype.tree = function() { return this.$val.tree(); };
	BranchNode.ptr.prototype.Copy = function() {
		var $ptr, _1, b;
		b = this;
		_1 = b.NodeType;
		if (_1 === (10)) {
			return b.tr.newIf(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else if (_1 === (15)) {
			return b.tr.newRange(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else if (_1 === (19)) {
			return b.tr.newWith(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else {
			$panic(new $String("unknown branch type"));
		}
	};
	BranchNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newIf = function(pos, line, pipe, list, elseList) {
		var $ptr, elseList, line, list, pipe, pos, t;
		t = this;
		return new IfNode.ptr(new BranchNode.ptr(10, pos, t, line, pipe, list, elseList));
	};
	Tree.prototype.newIf = function(pos, line, pipe, list, elseList) { return this.$val.newIf(pos, line, pipe, list, elseList); };
	IfNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_arg = i.BranchNode.Pos;
		_arg$1 = i.BranchNode.Line;
		_r = i.BranchNode.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = i.BranchNode.List.CopyList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = i.BranchNode.ElseList.CopyList(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = i.BranchNode.tr.newIf(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IfNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	IfNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newRange = function(pos, line, pipe, list, elseList) {
		var $ptr, elseList, line, list, pipe, pos, t;
		t = this;
		return new RangeNode.ptr(new BranchNode.ptr(15, pos, t, line, pipe, list, elseList));
	};
	Tree.prototype.newRange = function(pos, line, pipe, list, elseList) { return this.$val.newRange(pos, line, pipe, list, elseList); };
	RangeNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_arg = r.BranchNode.Pos;
		_arg$1 = r.BranchNode.Line;
		_r = r.BranchNode.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = r.BranchNode.List.CopyList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = r.BranchNode.ElseList.CopyList(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = r.BranchNode.tr.newRange(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RangeNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	RangeNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newWith = function(pos, line, pipe, list, elseList) {
		var $ptr, elseList, line, list, pipe, pos, t;
		t = this;
		return new WithNode.ptr(new BranchNode.ptr(19, pos, t, line, pipe, list, elseList));
	};
	Tree.prototype.newWith = function(pos, line, pipe, list, elseList) { return this.$val.newWith(pos, line, pipe, list, elseList); };
	WithNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_arg = w.BranchNode.Pos;
		_arg$1 = w.BranchNode.Line;
		_r = w.BranchNode.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = w.BranchNode.List.CopyList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = w.BranchNode.ElseList.CopyList(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = w.BranchNode.tr.newWith(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WithNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WithNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newTemplate = function(pos, line, name, pipe) {
		var $ptr, line, name, pipe, pos, t;
		t = this;
		return new TemplateNode.ptr(17, pos, t, line, name, pipe);
	};
	Tree.prototype.newTemplate = function(pos, line, name, pipe) { return this.$val.newTemplate(pos, line, name, pipe); };
	TemplateNode.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (t.Pipe === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Pipe === ptrType$4.nil) { */ case 1:
			_r = fmt.Sprintf("{{template %q}}", new sliceType([new $String(t.Name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("{{template %q %s}}", new sliceType([new $String(t.Name), t.Pipe])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TemplateNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TemplateNode.prototype.String = function() { return this.$val.String(); };
	TemplateNode.ptr.prototype.tree = function() {
		var $ptr, t;
		t = this;
		return t.tr;
	};
	TemplateNode.prototype.tree = function() { return this.$val.tree(); };
	TemplateNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_arg = t.Pos;
		_arg$1 = t.Line;
		_arg$2 = t.Name;
		_r = t.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$3 = _r;
		_r$1 = t.tr.newTemplate(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TemplateNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TemplateNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.Copy = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t === ptrType.nil) {
			$s = -1; return ptrType.nil;
			return ptrType.nil;
		}
		_r = t.Root.CopyList(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Tree.ptr(t.Name, t.ParseName, _r, t.text, sliceType$6.nil, ptrType$7.nil, arrayType$2.zero(), 0, sliceType$5.nil, false);
		return new Tree.ptr(t.Name, t.ParseName, _r, t.text, sliceType$6.nil, ptrType$7.nil, arrayType$2.zero(), 0, sliceType$5.nil, false);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Copy = function() { return this.$val.Copy(); };
	Parse = function(name, text, leftDelim, rightDelim, funcs) {
		var $ptr, _r, _tuple, err, funcs, leftDelim, name, rightDelim, t, text, treeSet, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; funcs = $f.funcs; leftDelim = $f.leftDelim; name = $f.name; rightDelim = $f.rightDelim; t = $f.t; text = $f.text; treeSet = $f.treeSet; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		treeSet = {};
		t = New(name, new sliceType$6([]));
		t.text = text;
		_r = t.Parse(text, leftDelim, rightDelim, treeSet, funcs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		$s = -1; return [treeSet, err];
		return [treeSet, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.funcs = funcs; $f.leftDelim = leftDelim; $f.name = name; $f.rightDelim = rightDelim; $f.t = t; $f.text = text; $f.treeSet = treeSet; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	Tree.ptr.prototype.next = function() {
		var $ptr, _r, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (t.peekCount > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.peekCount > 0) { */ case 1:
			t.peekCount = t.peekCount - (1) >> 0;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = t.lex.nextItem(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			item.copy(t.token[0], _r);
		/* } */ case 3:
		$s = -1; return (x = t.token, x$1 = t.peekCount, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
		return (x = t.token, x$1 = t.peekCount, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.next = function() { return this.$val.next(); };
	Tree.ptr.prototype.backup = function() {
		var $ptr, t;
		t = this;
		t.peekCount = t.peekCount + (1) >> 0;
	};
	Tree.prototype.backup = function() { return this.$val.backup(); };
	Tree.ptr.prototype.backup2 = function(t1) {
		var $ptr, t, t1;
		t1 = $clone(t1, item);
		t = this;
		item.copy(t.token[1], t1);
		t.peekCount = 2;
	};
	Tree.prototype.backup2 = function(t1) { return this.$val.backup2(t1); };
	Tree.ptr.prototype.backup3 = function(t2, t1) {
		var $ptr, t, t1, t2;
		t1 = $clone(t1, item);
		t2 = $clone(t2, item);
		t = this;
		item.copy(t.token[1], t1);
		item.copy(t.token[2], t2);
		t.peekCount = 3;
	};
	Tree.prototype.backup3 = function(t2, t1) { return this.$val.backup3(t2, t1); };
	Tree.ptr.prototype.peek = function() {
		var $ptr, _r, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.peekCount > 0) {
			$s = -1; return (x = t.token, x$1 = t.peekCount - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
			return (x = t.token, x$1 = t.peekCount - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
		}
		t.peekCount = 1;
		_r = t.lex.nextItem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		item.copy(t.token[0], _r);
		$s = -1; return t.token[0];
		return t.token[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.peek = function() { return this.$val.peek(); };
	Tree.ptr.prototype.nextNonSpace = function() {
		var $ptr, _r, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = new item.ptr(0, 0, "");
		t = this;
		/* while (true) { */ case 1:
			_r = t.next(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			item.copy(token, _r);
			if (!((token.typ === 16))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		item.copy(token, token);
		$s = -1; return token;
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.nextNonSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.nextNonSpace = function() { return this.$val.nextNonSpace(); };
	Tree.ptr.prototype.peekNonSpace = function() {
		var $ptr, _r, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = new item.ptr(0, 0, "");
		t = this;
		/* while (true) { */ case 1:
			_r = t.next(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			item.copy(token, _r);
			if (!((token.typ === 16))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		t.backup();
		item.copy(token, token);
		$s = -1; return token;
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.peekNonSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.peekNonSpace = function() { return this.$val.peekNonSpace(); };
	New = function(name, funcs) {
		var $ptr, funcs, name;
		return new Tree.ptr(name, "", ptrType$1.nil, "", funcs, ptrType$7.nil, arrayType$2.zero(), 0, sliceType$5.nil, false);
	};
	$pkg.New = New;
	Tree.ptr.prototype.ErrorContext = function(n) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, byteNum, context, lineNum, location, n, pos, t, text, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; byteNum = $f.byteNum; context = $f.context; lineNum = $f.lineNum; location = $f.location; n = $f.n; pos = $f.pos; t = $f.t; text = $f.text; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		location = "";
		context = "";
		t = this;
		_r = n.Position(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = (_r >> 0);
		_r$1 = n.tree(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		tree = _r$1;
		if (tree === ptrType.nil) {
			tree = t;
		}
		text = $substring(tree.text, 0, pos);
		byteNum = strings.LastIndex(text, "\n");
		if (byteNum === -1) {
			byteNum = pos;
		} else {
			byteNum = byteNum + (1) >> 0;
			byteNum = pos - byteNum >> 0;
		}
		lineNum = 1 + strings.Count(text, "\n") >> 0;
		_r$2 = n.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		context = _r$2;
		/* */ if (context.length > 20) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (context.length > 20) { */ case 4:
			_r$3 = fmt.Sprintf("%.20s...", new sliceType([new $String(context)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			context = _r$3;
		/* } */ case 5:
		_r$4 = fmt.Sprintf("%s:%d:%d", new sliceType([new $String(tree.ParseName), new $Int(lineNum), new $Int(byteNum)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tmp = _r$4;
		_tmp$1 = context;
		location = _tmp;
		context = _tmp$1;
		$s = -1; return [location, context];
		return [location, context];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ErrorContext }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.byteNum = byteNum; $f.context = context; $f.lineNum = lineNum; $f.location = location; $f.n = n; $f.pos = pos; $f.t = t; $f.text = text; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ErrorContext = function(n) { return this.$val.ErrorContext(n); };
	Tree.ptr.prototype.errorf = function(format, args) {
		var $ptr, _r, _r$1, args, format, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; args = $f.args; format = $f.format; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.Root = ptrType$1.nil;
		_r = fmt.Sprintf("template: %s:%d: %s", new sliceType([new $String(t.ParseName), new $Int(t.lex.lineNumber()), new $String(format)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		format = _r;
		_r$1 = fmt.Errorf(format, args); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$panic(_r$1);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.format = format; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	Tree.ptr.prototype.error = function(err) {
		var $ptr, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = t.errorf("%s", new sliceType([err])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.error }; } $f.$ptr = $ptr; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.error = function(err) { return this.$val.error(err); };
	Tree.ptr.prototype.expect = function(expected, context) {
		var $ptr, _r, context, expected, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; context = $f.context; expected = $f.expected; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		/* */ if (!((token.typ === expected))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((token.typ === expected))) { */ case 2:
			$r = t.unexpected(token, context); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return token;
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.expect }; } $f.$ptr = $ptr; $f._r = _r; $f.context = context; $f.expected = expected; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.expect = function(expected, context) { return this.$val.expect(expected, context); };
	Tree.ptr.prototype.expectOneOf = function(expected1, expected2, context) {
		var $ptr, _r, context, expected1, expected2, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; context = $f.context; expected1 = $f.expected1; expected2 = $f.expected2; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		/* */ if (!((token.typ === expected1)) && !((token.typ === expected2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((token.typ === expected1)) && !((token.typ === expected2))) { */ case 2:
			$r = t.unexpected(token, context); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return token;
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.expectOneOf }; } $f.$ptr = $ptr; $f._r = _r; $f.context = context; $f.expected1 = expected1; $f.expected2 = expected2; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.expectOneOf = function(expected1, expected2, context) { return this.$val.expectOneOf(expected1, expected2, context); };
	Tree.ptr.prototype.unexpected = function(token, context) {
		var $ptr, context, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = $clone(token, item);
		t = this;
		$r = t.errorf("unexpected %s in %s", new sliceType([new token.constructor.elem(token), new $String(context)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.unexpected }; } $f.$ptr = $ptr; $f.context = context; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.unexpected = function(token, context) { return this.$val.unexpected(token, context); };
	Tree.ptr.prototype.recover = function(errp) {
		var $ptr, _tuple, e, errp, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; e = $f.e; errp = $f.errp; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		e = $recover();
		/* */ if (!($interfaceIsEqual(e, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(e, $ifaceNil))) { */ case 1:
			_tuple = $assertType(e, runtime.Error, true);
			ok = _tuple[1];
			if (ok) {
				$panic(e);
			}
			/* */ if (!(t === ptrType.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(t === ptrType.nil)) { */ case 3:
				$r = t.lex.drain(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				t.stopParse();
			/* } */ case 4:
			errp.$set($assertType(e, $error));
		/* } */ case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.recover }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.e = e; $f.errp = errp; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.recover = function(errp) { return this.$val.recover(errp); };
	Tree.ptr.prototype.startParse = function(funcs, lex$1, treeSet) {
		var $ptr, funcs, lex$1, t, treeSet;
		t = this;
		t.Root = ptrType$1.nil;
		t.lex = lex$1;
		t.vars = new sliceType$5(["$"]);
		t.funcs = funcs;
		t.treeSet = treeSet;
	};
	Tree.prototype.startParse = function(funcs, lex$1, treeSet) { return this.$val.startParse(funcs, lex$1, treeSet); };
	Tree.ptr.prototype.stopParse = function() {
		var $ptr, t;
		t = this;
		t.lex = ptrType$7.nil;
		t.vars = sliceType$5.nil;
		t.funcs = sliceType$6.nil;
		t.treeSet = false;
	};
	Tree.prototype.stopParse = function() { return this.$val.stopParse(); };
	Tree.ptr.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) {
		var $ptr, _r, _tmp, _tmp$1, err, funcs, leftDelim, rightDelim, t, text, tree, treeSet, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; err = $f.err; funcs = $f.funcs; leftDelim = $f.leftDelim; rightDelim = $f.rightDelim; t = $f.t; text = $f.text; tree = $f.tree; treeSet = $f.treeSet; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tree = ptrType.nil;
		err[0] = $ifaceNil;
		t = this;
		$deferred.push([$methodVal(t, "recover"), [(err.$ptr || (err.$ptr = new ptrType$8(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		t.ParseName = t.Name;
		t.startParse(funcs, lex(t.Name, text, leftDelim, rightDelim), treeSet);
		t.text = text;
		_r = t.parse(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = t.add(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t.stopParse();
		_tmp = t;
		_tmp$1 = $ifaceNil;
		tree = _tmp;
		err[0] = _tmp$1;
		$s = -1; return [tree, err[0]];
		return [tree, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tree, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.err = err; $f.funcs = funcs; $f.leftDelim = leftDelim; $f.rightDelim = rightDelim; $f.t = t; $f.text = text; $f.tree = tree; $f.treeSet = treeSet; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Tree.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) { return this.$val.Parse(text, leftDelim, rightDelim, treeSet, funcs); };
	Tree.ptr.prototype.add = function() {
		var $ptr, _entry, _key, _r, _r$1, _v, t, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; t = $f.t; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		tree = (_entry = t.treeSet[$String.keyFor(t.Name)], _entry !== undefined ? _entry.v : ptrType.nil);
		if (tree === ptrType.nil) { _v = true; $s = 3; continue s; }
		_r = IsEmptyTree(tree.Root); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_key = t.Name; (t.treeSet || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: t };
			$s = -1; return;
			return;
		/* } */ case 2:
		_r$1 = IsEmptyTree(t.Root); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!_r$1) { */ case 5:
			$r = t.errorf("template: multiple definition of template %q", new sliceType([new $String(t.Name)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.add }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.t = t; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.add = function() { return this.$val.add(); };
	IsEmptyTree = function(n) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _ref$1, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7, n$8, n$9, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; n$5 = $f.n$5; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = n;
		/* */ if (_ref === $ifaceNil) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === $ifaceNil) { */ case 1:
			n$1 = _ref;
			$s = -1; return true;
			return true;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 2:
			n$2 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 3:
			n$3 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 4:
			n$4 = _ref.$val;
			_ref$1 = n$4.Nodes;
			_i = 0;
			/* while (true) { */ case 11:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 12; continue; }
				node = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_r = IsEmptyTree(node); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!_r) { */ case 13:
					$s = -1; return false;
					return false;
				/* } */ case 14:
				_i++;
			/* } */ $s = 11; continue; case 12:
			$s = -1; return true;
			return true;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 5:
			n$5 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 6:
			n$6 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 7:
			n$7 = _ref.$val;
			_r$1 = bytes.TrimSpace(n$7.Text); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1.$length === 0;
			return _r$1.$length === 0;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 8:
			n$8 = _ref.$val;
			$s = 10; continue;
		/* } else { */ case 9:
			n$9 = _ref;
			_r$2 = n$9.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$panic(new $String("unknown node: " + _r$2));
		/* } */ case 10:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsEmptyTree }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.n$5 = n$5; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsEmptyTree = IsEmptyTree;
	Tree.ptr.prototype.parse = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, delim, n, newT, next, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; delim = $f.delim; n = $f.n; newT = $f.newT; next = $f.next; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		next = $ifaceNil;
		t = this;
		_r = t.peek(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newList(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		t.Root = _r$1;
		/* while (true) { */ case 3:
			_r$2 = t.peek(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(!((_r$2.typ === 6)))) { break; } */ if(!(!((_r$2.typ === 6)))) { $s = 4; continue; }
			_r$3 = t.peek(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3.typ === 9) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$3.typ === 9) { */ case 6:
				_r$4 = t.next(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				delim = $clone(_r$4, item);
				_r$5 = t.nextNonSpace(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5.typ === 23) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$5.typ === 23) { */ case 10:
					newT = New("definition", new sliceType$6([]));
					newT.text = t.text;
					newT.ParseName = t.ParseName;
					newT.startParse(t.funcs, t.lex, t.treeSet);
					$r = newT.parseDefinition(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 3; continue;
				/* } */ case 11:
				t.backup2(delim);
			/* } */ case 7:
				_r$6 = t.textOrAction(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				n = _r$6;
				_r$7 = n.Type(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_1 = _r$7;
				/* */ if ((_1 === (7)) || (_1 === (6))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if ((_1 === (7)) || (_1 === (6))) { */ case 17:
					$r = t.errorf("unexpected %s", new sliceType([n])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 19; continue;
				/* } else { */ case 18:
					t.Root.append(n);
				/* } */ case 19:
			case 14:
		/* } */ $s = 3; continue; case 4:
		next = $ifaceNil;
		$s = -1; return next;
		return next;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.delim = delim; $f.n = n; $f.newT = newT; $f.next = next; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.parse = function() { return this.$val.parse(); };
	Tree.ptr.prototype.parseDefinition = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, end, err, name, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; end = $f.end; err = $f.err; name = $f.name; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.expectOneOf(17, 13, "define clause"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		name = $clone(_r, item);
		err = $ifaceNil;
		_tuple = strconv.Unquote(name.val);
		t.Name = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = t.error(err); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$1 = t.expect(14, "define clause"); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		end = $ifaceNil;
		_r$2 = t.itemList(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		t.Root = _tuple$1[0];
		end = _tuple$1[1];
		_r$3 = end.Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 7))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!((_r$3 === 7))) { */ case 7:
			$r = t.errorf("unexpected %s in %s", new sliceType([end, new $String("define clause")])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$r = t.add(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t.stopParse();
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parseDefinition }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.end = end; $f.err = err; $f.name = name; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.parseDefinition = function() { return this.$val.parseDefinition(); };
	Tree.ptr.prototype.itemList = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, list, n, next, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; list = $f.list; n = $f.n; next = $f.next; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = ptrType$1.nil;
		next = $ifaceNil;
		t = this;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newList(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		list = _r$1;
		/* while (true) { */ case 3:
			_r$2 = t.peekNonSpace(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(!((_r$2.typ === 6)))) { break; } */ if(!(!((_r$2.typ === 6)))) { $s = 4; continue; }
			_r$3 = t.textOrAction(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			n = _r$3;
				_r$4 = n.Type(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_1 = _r$4;
				if ((_1 === (7)) || (_1 === (6))) {
					_tmp = list;
					_tmp$1 = n;
					list = _tmp;
					next = _tmp$1;
					$s = -1; return [list, next];
					return [list, next];
				}
			case 7:
			list.append(n);
		/* } */ $s = 3; continue; case 4:
		$r = t.errorf("unexpected EOF", new sliceType([])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [list, next];
		return [list, next];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.itemList }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.list = list; $f.n = n; $f.next = next; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.itemList = function() { return this.$val.itemList(); };
	Tree.ptr.prototype.textOrAction = function() {
		var $ptr, _1, _r, _r$1, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_r = t.nextNonSpace(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			token = $clone(_r, item);
			_1 = token.typ;
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (9)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (18)) { */ case 3:
				$s = -1; return t.newText(token.pos, token.val);
				return t.newText(token.pos, token.val);
			/* } else if (_1 === (9)) { */ case 4:
				_r$1 = t.action(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } else { */ case 5:
				$r = t.unexpected(token, "input"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		case 1:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.textOrAction }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.textOrAction = function() { return this.$val.textOrAction(); };
	Tree.ptr.prototype.action = function() {
		var $ptr, _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, n, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; n = $f.n; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = $ifaceNil;
		t = this;
			_r = t.nextNonSpace(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			token = $clone(_r, item);
			_1 = token.typ;
			/* */ if (_1 === (21)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ if (_1 === (25)) { $s = 5; continue; }
			/* */ if (_1 === (26)) { $s = 6; continue; }
			/* */ if (_1 === (28)) { $s = 7; continue; }
			/* */ if (_1 === (29)) { $s = 8; continue; }
			/* */ if (_1 === (30)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (21)) { */ case 3:
				_r$1 = t.blockControl(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				n = _r$1;
				$s = -1; return n;
				return n;
			/* } else if (_1 === (24)) { */ case 4:
				_r$2 = t.elseControl(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				n = _r$2;
				$s = -1; return n;
				return n;
			/* } else if (_1 === (25)) { */ case 5:
				_r$3 = t.endControl(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				n = _r$3;
				$s = -1; return n;
				return n;
			/* } else if (_1 === (26)) { */ case 6:
				_r$4 = t.ifControl(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				n = _r$4;
				$s = -1; return n;
				return n;
			/* } else if (_1 === (28)) { */ case 7:
				_r$5 = t.rangeControl(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				n = _r$5;
				$s = -1; return n;
				return n;
			/* } else if (_1 === (29)) { */ case 8:
				_r$6 = t.templateControl(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				n = _r$6;
				$s = -1; return n;
				return n;
			/* } else if (_1 === (30)) { */ case 9:
				_r$7 = t.withControl(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				n = _r$7;
				$s = -1; return n;
				return n;
			/* } */ case 10:
		case 1:
		t.backup();
		_r$8 = t.peek(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg = _r$8.pos;
		_arg$1 = t.lex.lineNumber();
		_r$9 = t.pipeline("command"); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_arg$2 = _r$9;
		_r$10 = t.newAction(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		n = _r$10;
		$s = -1; return n;
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.action }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.n = n; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.action = function() { return this.$val.action(); };
	Tree.ptr.prototype.pipeline = function(context) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, context, decl, next, pipe, pos, t, token, tokenAfterVariable, v, variable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; context = $f.context; decl = $f.decl; next = $f.next; pipe = $f.pipe; pos = $f.pos; t = $f.t; token = $f.token; tokenAfterVariable = $f.tokenAfterVariable; v = $f.v; variable = $f.variable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pipe = ptrType$4.nil;
		t = this;
		decl = sliceType$3.nil;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = _r.pos;
		/* while (true) { */ case 2:
			_r$1 = t.peekNonSpace(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			v = $clone(_r$1, item);
			/* */ if (v.typ === 19) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (v.typ === 19) { */ case 5:
				_r$2 = t.next(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_r$3 = t.peek(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				tokenAfterVariable = $clone(_r$3, item);
				_r$4 = t.peekNonSpace(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				next = $clone(_r$4, item);
				/* */ if ((next.typ === 5) || ((next.typ === 2) && next.val === ",")) { $s = 10; continue; }
				/* */ if (tokenAfterVariable.typ === 16) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((next.typ === 5) || ((next.typ === 2) && next.val === ",")) { */ case 10:
					_r$5 = t.nextNonSpace(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					variable = t.newVariable(v.pos, v.val);
					decl = $append(decl, variable);
					t.vars = $append(t.vars, v.val);
					/* */ if ((next.typ === 2) && next.val === ",") { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ((next.typ === 2) && next.val === ",") { */ case 15:
						/* */ if (context === "range" && decl.$length < 2) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (context === "range" && decl.$length < 2) { */ case 17:
							/* continue; */ $s = 2; continue;
						/* } */ case 18:
						$r = t.errorf("too many declarations in %s", new sliceType([new $String(context)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 16:
					$s = 13; continue;
				/* } else if (tokenAfterVariable.typ === 16) { */ case 11:
					t.backup3(v, tokenAfterVariable);
					$s = 13; continue;
				/* } else { */ case 12:
					t.backup2(v);
				/* } */ case 13:
			/* } */ case 6:
			/* break; */ $s = 3; continue;
		/* } */ $s = 2; continue; case 3:
		pipe = t.newPipeline(pos, t.lex.lineNumber(), decl);
		/* while (true) { */ case 20:
				_r$6 = t.nextNonSpace(); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				token = $clone(_r$6, item);
				_1 = token.typ;
				/* */ if ((_1 === (14)) || (_1 === (15))) { $s = 24; continue; }
				/* */ if ((_1 === (1)) || (_1 === (3)) || (_1 === (4)) || (_1 === (22)) || (_1 === (7)) || (_1 === (8)) || (_1 === (11)) || (_1 === (27)) || (_1 === (13)) || (_1 === (17)) || (_1 === (19)) || (_1 === (10))) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ((_1 === (14)) || (_1 === (15))) { */ case 24:
					$r = t.checkPipeline(pipe, context); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (token.typ === 15) {
						t.backup();
					}
					$s = -1; return pipe;
					return pipe;
				/* } else if ((_1 === (1)) || (_1 === (3)) || (_1 === (4)) || (_1 === (22)) || (_1 === (7)) || (_1 === (8)) || (_1 === (11)) || (_1 === (27)) || (_1 === (13)) || (_1 === (17)) || (_1 === (19)) || (_1 === (10))) { */ case 25:
					t.backup();
					_r$7 = t.command(); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = pipe.append(_r$7); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 27; continue;
				/* } else { */ case 26:
					$r = t.unexpected(token, context); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 27:
			case 22:
		/* } */ $s = 20; continue; case 21:
		$s = -1; return pipe;
		return pipe;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.pipeline }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.context = context; $f.decl = decl; $f.next = next; $f.pipe = pipe; $f.pos = pos; $f.t = t; $f.token = token; $f.tokenAfterVariable = tokenAfterVariable; $f.v = v; $f.variable = variable; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.pipeline = function(context) { return this.$val.pipeline(context); };
	Tree.ptr.prototype.checkPipeline = function(pipe, context) {
		var $ptr, _1, _i, _r, _ref, c, context, i, pipe, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; context = $f.context; i = $f.i; pipe = $f.pipe; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (pipe.Cmds.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pipe.Cmds.$length === 0) { */ case 1:
			$r = t.errorf("missing value for %s", new sliceType([new $String(context)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = $subslice(pipe.Cmds, 1);
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r = (x = c.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_1 = _r;
				/* */ if ((_1 === (2)) || (_1 === (5)) || (_1 === (12)) || (_1 === (13)) || (_1 === (16))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ((_1 === (2)) || (_1 === (5)) || (_1 === (12)) || (_1 === (13)) || (_1 === (16))) { */ case 8:
					$r = t.errorf("non executable command in pipeline stage %d", new sliceType([new $Int((i + 2 >> 0))])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
			case 6:
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.checkPipeline }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.context = context; $f.i = i; $f.pipe = pipe; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.checkPipeline = function(pipe, context) { return this.$val.checkPipeline(pipe, context); };
	Tree.ptr.prototype.parseControl = function(allowElseIf, context) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, _tuple$1, allowElseIf, context, elseList, line, list, next, pipe, pos, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allowElseIf = $f.allowElseIf; context = $f.context; elseList = $f.elseList; line = $f.line; list = $f.list; next = $f.next; pipe = $f.pipe; pos = $f.pos; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		pos = 0;
		line = 0;
		pipe = ptrType$4.nil;
		list = ptrType$1.nil;
		elseList = ptrType$1.nil;
		t = this;
		$deferred.push([$methodVal(t, "popVars"), [t.vars.$length]]);
		line = t.lex.lineNumber();
		_r = t.pipeline(context); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pipe = _r;
		next = $ifaceNil;
		_r$1 = t.itemList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		list = _tuple[0];
		next = _tuple[1];
			_r$2 = next.Type(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (7)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (7)) { */ case 5:
				$s = 7; continue;
			/* } else if (_1 === (6)) { */ case 6:
				/* */ if (allowElseIf) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (allowElseIf) { */ case 8:
					_r$3 = t.peek(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3.typ === 26) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_r$3.typ === 26) { */ case 10:
						_r$4 = t.next(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						_r$5 = next.Position(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = t.newList(_r$5); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						elseList = _r$6;
						_r$7 = t.ifControl(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$r = elseList.append(_r$7); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* break; */ $s = 3; continue;
					/* } */ case 11:
				/* } */ case 9:
				_r$8 = t.itemList(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$1 = _r$8;
				elseList = _tuple$1[0];
				next = _tuple$1[1];
				_r$9 = next.Type(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (!((_r$9 === 7))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!((_r$9 === 7))) { */ case 19:
					$r = t.errorf("expected end; found %s", new sliceType([next])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 20:
			/* } */ case 7:
		case 3:
		_tmp = new Pos(pipe.Pos).Position();
		_tmp$1 = line;
		_tmp$2 = pipe;
		_tmp$3 = list;
		_tmp$4 = elseList;
		pos = _tmp;
		line = _tmp$1;
		pipe = _tmp$2;
		list = _tmp$3;
		elseList = _tmp$4;
		$s = -1; return [pos, line, pipe, list, elseList];
		return [pos, line, pipe, list, elseList];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [pos, line, pipe, list, elseList]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parseControl }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allowElseIf = allowElseIf; $f.context = context; $f.elseList = elseList; $f.line = line; $f.list = list; $f.next = next; $f.pipe = pipe; $f.pos = pos; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Tree.prototype.parseControl = function(allowElseIf, context) { return this.$val.parseControl(allowElseIf, context); };
	Tree.ptr.prototype.ifControl = function() {
		var $ptr, _r, _r$1, _tuple, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.parseControl(true, "if"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = t.newIf(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ifControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ifControl = function() { return this.$val.ifControl(); };
	Tree.ptr.prototype.rangeControl = function() {
		var $ptr, _r, _r$1, _tuple, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.parseControl(false, "range"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = t.newRange(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.rangeControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.rangeControl = function() { return this.$val.rangeControl(); };
	Tree.ptr.prototype.withControl = function() {
		var $ptr, _r, _r$1, _tuple, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.parseControl(false, "with"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = t.newWith(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.withControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.withControl = function() { return this.$val.withControl(); };
	Tree.ptr.prototype.endControl = function() {
		var $ptr, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.expect(14, "end"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newEnd(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.endControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.endControl = function() { return this.$val.endControl(); };
	Tree.ptr.prototype.elseControl = function() {
		var $ptr, _r, _r$1, _r$2, peek, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; peek = $f.peek; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		peek = $clone(_r, item);
		if (peek.typ === 26) {
			$s = -1; return t.newElse(peek.pos, t.lex.lineNumber());
			return t.newElse(peek.pos, t.lex.lineNumber());
		}
		_r$1 = t.expect(14, "else"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = t.newElse(_r$1.pos, t.lex.lineNumber()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.elseControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.peek = peek; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.elseControl = function() { return this.$val.elseControl(); };
	Tree.ptr.prototype.blockControl = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, block, end, name, pipe, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; block = $f.block; end = $f.end; name = $f.name; pipe = $f.pipe; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		_r$1 = t.parseTemplateName(token, "block clause"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		name = _r$1;
		_r$2 = t.pipeline("block clause"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pipe = _r$2;
		block = New(name, new sliceType$6([]));
		block.text = t.text;
		block.ParseName = t.ParseName;
		block.startParse(t.funcs, t.lex, t.treeSet);
		end = $ifaceNil;
		_r$3 = block.itemList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		block.Root = _tuple[0];
		end = _tuple[1];
		_r$4 = end.Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!((_r$4 === 7))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((_r$4 === 7))) { */ case 5:
			$r = t.errorf("unexpected %s in %s", new sliceType([end, new $String("block clause")])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$r = block.add(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		block.stopParse();
		$s = -1; return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
		return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.blockControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.block = block; $f.end = end; $f.name = name; $f.pipe = pipe; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.blockControl = function() { return this.$val.blockControl(); };
	Tree.ptr.prototype.templateControl = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, name, pipe, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; name = $f.name; pipe = $f.pipe; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		_r$1 = t.parseTemplateName(token, "template clause"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		name = _r$1;
		pipe = ptrType$4.nil;
		_r$2 = t.nextNonSpace(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2.typ === 14))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((_r$2.typ === 14))) { */ case 3:
			t.backup();
			_r$3 = t.pipeline("template clause"); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			pipe = _r$3;
		/* } */ case 4:
		$s = -1; return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
		return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.templateControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.name = name; $f.pipe = pipe; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.templateControl = function() { return this.$val.templateControl(); };
	Tree.ptr.prototype.parseTemplateName = function(token, context) {
		var $ptr, _1, _tuple, context, err, name, s, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _tuple = $f._tuple; context = $f.context; err = $f.err; name = $f.name; s = $f.s; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		token = $clone(token, item);
		t = this;
			_1 = token.typ;
			/* */ if ((_1 === (17)) || (_1 === (13))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (17)) || (_1 === (13))) { */ case 2:
				_tuple = strconv.Unquote(token.val);
				s = _tuple[0];
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
					$r = t.error(err); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				name = s;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = t.unexpected(token, context); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return name;
		return name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parseTemplateName }; } $f.$ptr = $ptr; $f._1 = _1; $f._tuple = _tuple; $f.context = context; $f.err = err; $f.name = name; $f.s = s; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.parseTemplateName = function(token, context) { return this.$val.parseTemplateName(token, context); };
	Tree.ptr.prototype.command = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, cmd, operand, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; cmd = $f.cmd; operand = $f.operand; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newCommand(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		cmd = _r$1;
		/* while (true) { */ case 3:
			_r$2 = t.peekNonSpace(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_r$3 = t.operand(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			operand = _r$3;
			if (!($interfaceIsEqual(operand, $ifaceNil))) {
				cmd.append(operand);
			}
				_r$4 = t.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				token = $clone(_r$4, item);
				_1 = token.typ;
				/* */ if (_1 === (16)) { $s = 9; continue; }
				/* */ if (_1 === (0)) { $s = 10; continue; }
				/* */ if ((_1 === (14)) || (_1 === (15))) { $s = 11; continue; }
				/* */ if (_1 === (12)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_1 === (16)) { */ case 9:
					/* continue; */ $s = 3; continue;
					$s = 14; continue;
				/* } else if (_1 === (0)) { */ case 10:
					$r = t.errorf("%s", new sliceType([new $String(token.val)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 14; continue;
				/* } else if ((_1 === (14)) || (_1 === (15))) { */ case 11:
					t.backup();
					$s = 14; continue;
				/* } else if (_1 === (12)) { */ case 12:
					$s = 14; continue;
				/* } else { */ case 13:
					$r = t.errorf("unexpected %s in operand", new sliceType([new token.constructor.elem(token)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
			case 7:
			/* break; */ $s = 4; continue;
		/* } */ $s = 3; continue; case 4:
		/* */ if (cmd.Args.$length === 0) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (cmd.Args.$length === 0) { */ case 17:
			$r = t.errorf("empty command", new sliceType([])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		$s = -1; return cmd;
		return cmd;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.command }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.cmd = cmd; $f.operand = operand; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.command = function() { return this.$val.command(); };
	Tree.ptr.prototype.operand = function() {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, chain, node, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; chain = $f.chain; node = $f.node; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.term(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		node = _r;
		if ($interfaceIsEqual(node, $ifaceNil)) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		_r$1 = t.peek(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1.typ === 7) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1.typ === 7) { */ case 2:
			_r$2 = t.peek(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = t.newChain(_r$2.pos, node); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			chain = _r$3;
			/* while (true) { */ case 7:
				_r$4 = t.peek(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* if (!(_r$4.typ === 7)) { break; } */ if(!(_r$4.typ === 7)) { $s = 8; continue; }
				_r$5 = t.next(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = chain.Add(_r$5.val); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 7; continue; case 8:
				_r$6 = node.Type(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_1 = _r$6;
				/* */ if (_1 === (8)) { $s = 14; continue; }
				/* */ if (_1 === (18)) { $s = 15; continue; }
				/* */ if ((_1 === (2)) || (_1 === (16)) || (_1 === (13)) || (_1 === (12)) || (_1 === (5))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_1 === (8)) { */ case 14:
					_arg = new Pos(chain.Pos).Position();
					_r$7 = chain.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_arg$1 = _r$7;
					_r$8 = t.newField(_arg, _arg$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					node = _r$8;
					$s = 18; continue;
				/* } else if (_1 === (18)) { */ case 15:
					_arg$2 = new Pos(chain.Pos).Position();
					_r$9 = chain.String(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$3 = _r$9;
					_r$10 = t.newVariable(_arg$2, _arg$3); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					node = _r$10;
					$s = 18; continue;
				/* } else if ((_1 === (2)) || (_1 === (16)) || (_1 === (13)) || (_1 === (12)) || (_1 === (5))) { */ case 16:
					_r$11 = node.String(); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_arg$4 = new $String(_r$11);
					$r = t.errorf("unexpected . after term %q", new sliceType([_arg$4])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 18; continue;
				/* } else { */ case 17:
					node = chain;
				/* } */ case 18:
			case 12:
		/* } */ case 3:
		$s = -1; return node;
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.operand }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.chain = chain; $f.node = node; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.operand = function() { return this.$val.operand(); };
	Tree.ptr.prototype.term = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, err, err$1, number, pipe, s, t, token, token$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; number = $f.number; pipe = $f.pipe; s = $f.s; t = $f.t; token = $f.token; token$1 = $f.token$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_r = t.nextNonSpace(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			token = $clone(_r, item);
			_1 = token.typ;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (8)) { $s = 4; continue; }
			/* */ if (_1 === (22)) { $s = 5; continue; }
			/* */ if (_1 === (27)) { $s = 6; continue; }
			/* */ if (_1 === (19)) { $s = 7; continue; }
			/* */ if (_1 === (7)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (3)) || (_1 === (4)) || (_1 === (11))) { $s = 10; continue; }
			/* */ if (_1 === (10)) { $s = 11; continue; }
			/* */ if ((_1 === (17)) || (_1 === (13))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_1 === (0)) { */ case 3:
				$r = t.errorf("%s", new sliceType([new $String(token.val)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 13; continue;
			/* } else if (_1 === (8)) { */ case 4:
				/* */ if (!t.hasFunction(token.val)) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!t.hasFunction(token.val)) { */ case 15:
					$r = t.errorf("function %q not defined", new sliceType([new $String(token.val)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				$s = -1; return NewIdentifier(token.val).SetTree(t).SetPos(token.pos);
				return NewIdentifier(token.val).SetTree(t).SetPos(token.pos);
			/* } else if (_1 === (22)) { */ case 5:
				$s = -1; return t.newDot(token.pos);
				return t.newDot(token.pos);
			/* } else if (_1 === (27)) { */ case 6:
				$s = -1; return t.newNil(token.pos);
				return t.newNil(token.pos);
			/* } else if (_1 === (19)) { */ case 7:
				_r$1 = t.useVar(token.pos, token.val); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } else if (_1 === (7)) { */ case 8:
				$s = -1; return t.newField(token.pos, token.val);
				return t.newField(token.pos, token.val);
			/* } else if (_1 === (1)) { */ case 9:
				$s = -1; return t.newBool(token.pos, token.val === "true");
				return t.newBool(token.pos, token.val === "true");
			/* } else if ((_1 === (3)) || (_1 === (4)) || (_1 === (11))) { */ case 10:
				_r$2 = t.newNumber(token.pos, token.val, token.typ); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				number = _tuple[0];
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 20:
					$r = t.error(err); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 21:
				$s = -1; return number;
				return number;
			/* } else if (_1 === (10)) { */ case 11:
				_r$3 = t.pipeline("parenthesized pipeline"); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				pipe = _r$3;
				_r$4 = t.next(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				token$1 = $clone(_r$4, item);
				/* */ if (!((token$1.typ === 15))) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (!((token$1.typ === 15))) { */ case 25:
					$r = t.errorf("unclosed right paren: unexpected %s", new sliceType([new token$1.constructor.elem(token$1)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 26:
				$s = -1; return pipe;
				return pipe;
			/* } else if ((_1 === (17)) || (_1 === (13))) { */ case 12:
				_tuple$1 = strconv.Unquote(token.val);
				s = _tuple$1[0];
				err$1 = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 28:
					$r = t.error(err$1); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 29:
				$s = -1; return t.newString(token.pos, token.val, s);
				return t.newString(token.pos, token.val, s);
			/* } */ case 13:
		case 1:
		t.backup();
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.term }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.number = number; $f.pipe = pipe; $f.s = s; $f.t = t; $f.token = token; $f.token$1 = token$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.term = function() { return this.$val.term(); };
	Tree.ptr.prototype.hasFunction = function(name) {
		var $ptr, _entry, _i, _ref, funcMap, name, t;
		t = this;
		_ref = t.funcs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			funcMap = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (funcMap === false) {
				_i++;
				continue;
			}
			if (!($interfaceIsEqual((_entry = funcMap[$String.keyFor(name)], _entry !== undefined ? _entry.v : $ifaceNil), $ifaceNil))) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Tree.prototype.hasFunction = function(name) { return this.$val.hasFunction(name); };
	Tree.ptr.prototype.popVars = function(n) {
		var $ptr, n, t;
		t = this;
		t.vars = $subslice(t.vars, 0, n);
	};
	Tree.prototype.popVars = function(n) { return this.$val.popVars(n); };
	Tree.ptr.prototype.useVar = function(pos, name) {
		var $ptr, _i, _ref, name, pos, t, v, varName, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; name = $f.name; pos = $f.pos; t = $f.t; v = $f.v; varName = $f.varName; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		v = t.newVariable(pos, name);
		_ref = t.vars;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			varName = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (varName === (x = v.Ident, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))) {
				$s = -1; return v;
				return v;
			}
			_i++;
		}
		$r = t.errorf("undefined variable %q", new sliceType([new $String((x$1 = v.Ident, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.useVar }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.name = name; $f.pos = pos; $f.t = t; $f.v = v; $f.varName = varName; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.useVar = function(pos, name) { return this.$val.useVar(pos, name); };
	item.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "next", name: "next", pkg: "text/template/parse", typ: $funcType([], [$Int32], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", typ: $funcType([], [$Int32], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "emit", name: "emit", pkg: "text/template/parse", typ: $funcType([itemType], [], false)}, {prop: "ignore", name: "ignore", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "text/template/parse", typ: $funcType([$String], [$Bool], false)}, {prop: "acceptRun", name: "acceptRun", pkg: "text/template/parse", typ: $funcType([$String], [], false)}, {prop: "lineNumber", name: "lineNumber", pkg: "text/template/parse", typ: $funcType([], [$Int], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", typ: $funcType([$String, sliceType], [stateFn], true)}, {prop: "nextItem", name: "nextItem", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "drain", name: "drain", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "run", name: "run", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "atLeftDelim", name: "atLeftDelim", pkg: "text/template/parse", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "atRightDelim", name: "atRightDelim", pkg: "text/template/parse", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "atTerminator", name: "atTerminator", pkg: "text/template/parse", typ: $funcType([], [$Bool], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "text/template/parse", typ: $funcType([], [$Bool], false)}];
	NodeType.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}];
	Pos.methods = [{prop: "Position", name: "Position", pkg: "", typ: $funcType([], [Pos], false)}];
	ptrType$1.methods = [{prop: "append", name: "append", pkg: "text/template/parse", typ: $funcType([Node], [], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "CopyList", name: "CopyList", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$13.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$4.methods = [{prop: "append", name: "append", pkg: "text/template/parse", typ: $funcType([ptrType$3], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "CopyPipe", name: "CopyPipe", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$9.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$3.methods = [{prop: "append", name: "append", pkg: "text/template/parse", typ: $funcType([Node], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$15.methods = [{prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([Pos], [ptrType$15], false)}, {prop: "SetTree", name: "SetTree", pkg: "", typ: $funcType([ptrType], [ptrType$15], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$2.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$16.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$17.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$18.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$19.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$20.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$5.methods = [{prop: "simplifyComplex", name: "simplifyComplex", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$21.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$22.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$23.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$24.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$10.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$11.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$14.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$12.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType.methods = [{prop: "newList", name: "newList", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$1], false)}, {prop: "newText", name: "newText", pkg: "text/template/parse", typ: $funcType([Pos, $String], [ptrType$13], false)}, {prop: "newPipeline", name: "newPipeline", pkg: "text/template/parse", typ: $funcType([Pos, $Int, sliceType$3], [ptrType$4], false)}, {prop: "newAction", name: "newAction", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4], [ptrType$9], false)}, {prop: "newCommand", name: "newCommand", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$3], false)}, {prop: "newVariable", name: "newVariable", pkg: "text/template/parse", typ: $funcType([Pos, $String], [ptrType$2], false)}, {prop: "newDot", name: "newDot", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$16], false)}, {prop: "newNil", name: "newNil", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$17], false)}, {prop: "newField", name: "newField", pkg: "text/template/parse", typ: $funcType([Pos, $String], [ptrType$18], false)}, {prop: "newChain", name: "newChain", pkg: "text/template/parse", typ: $funcType([Pos, Node], [ptrType$19], false)}, {prop: "newBool", name: "newBool", pkg: "text/template/parse", typ: $funcType([Pos, $Bool], [ptrType$20], false)}, {prop: "newNumber", name: "newNumber", pkg: "text/template/parse", typ: $funcType([Pos, $String, itemType], [ptrType$5, $error], false)}, {prop: "newString", name: "newString", pkg: "text/template/parse", typ: $funcType([Pos, $String, $String], [ptrType$21], false)}, {prop: "newEnd", name: "newEnd", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$22], false)}, {prop: "newElse", name: "newElse", pkg: "text/template/parse", typ: $funcType([Pos, $Int], [ptrType$23], false)}, {prop: "newIf", name: "newIf", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4, ptrType$1, ptrType$1], [ptrType$10], false)}, {prop: "newRange", name: "newRange", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4, ptrType$1, ptrType$1], [ptrType$11], false)}, {prop: "newWith", name: "newWith", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4, ptrType$1, ptrType$1], [ptrType$14], false)}, {prop: "newTemplate", name: "newTemplate", pkg: "text/template/parse", typ: $funcType([Pos, $Int, $String, ptrType$4], [ptrType$12], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "next", name: "next", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "backup2", name: "backup2", pkg: "text/template/parse", typ: $funcType([item], [], false)}, {prop: "backup3", name: "backup3", pkg: "text/template/parse", typ: $funcType([item, item], [], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "nextNonSpace", name: "nextNonSpace", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "peekNonSpace", name: "peekNonSpace", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "ErrorContext", name: "ErrorContext", pkg: "", typ: $funcType([Node], [$String, $String], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", typ: $funcType([$String, sliceType], [], true)}, {prop: "error", name: "error", pkg: "text/template/parse", typ: $funcType([$error], [], false)}, {prop: "expect", name: "expect", pkg: "text/template/parse", typ: $funcType([itemType, $String], [item], false)}, {prop: "expectOneOf", name: "expectOneOf", pkg: "text/template/parse", typ: $funcType([itemType, itemType, $String], [item], false)}, {prop: "unexpected", name: "unexpected", pkg: "text/template/parse", typ: $funcType([item, $String], [], false)}, {prop: "recover", name: "recover", pkg: "text/template/parse", typ: $funcType([ptrType$8], [], false)}, {prop: "startParse", name: "startParse", pkg: "text/template/parse", typ: $funcType([sliceType$6, ptrType$7, mapType$1], [], false)}, {prop: "stopParse", name: "stopParse", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String, $String, $String, mapType$1, sliceType$6], [ptrType, $error], true)}, {prop: "add", name: "add", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "parse", name: "parse", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "parseDefinition", name: "parseDefinition", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "itemList", name: "itemList", pkg: "text/template/parse", typ: $funcType([], [ptrType$1, Node], false)}, {prop: "textOrAction", name: "textOrAction", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "action", name: "action", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "pipeline", name: "pipeline", pkg: "text/template/parse", typ: $funcType([$String], [ptrType$4], false)}, {prop: "checkPipeline", name: "checkPipeline", pkg: "text/template/parse", typ: $funcType([ptrType$4, $String], [], false)}, {prop: "parseControl", name: "parseControl", pkg: "text/template/parse", typ: $funcType([$Bool, $String], [Pos, $Int, ptrType$4, ptrType$1, ptrType$1], false)}, {prop: "ifControl", name: "ifControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "rangeControl", name: "rangeControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "withControl", name: "withControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "endControl", name: "endControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "elseControl", name: "elseControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "blockControl", name: "blockControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "templateControl", name: "templateControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "parseTemplateName", name: "parseTemplateName", pkg: "text/template/parse", typ: $funcType([item, $String], [$String], false)}, {prop: "command", name: "command", pkg: "text/template/parse", typ: $funcType([], [ptrType$3], false)}, {prop: "operand", name: "operand", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "term", name: "term", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "hasFunction", name: "hasFunction", pkg: "text/template/parse", typ: $funcType([$String], [$Bool], false)}, {prop: "popVars", name: "popVars", pkg: "text/template/parse", typ: $funcType([$Int], [], false)}, {prop: "useVar", name: "useVar", pkg: "text/template/parse", typ: $funcType([Pos, $String], [Node], false)}];
	item.init("text/template/parse", [{prop: "typ", name: "typ", exported: false, typ: itemType, tag: ""}, {prop: "pos", name: "pos", exported: false, typ: Pos, tag: ""}, {prop: "val", name: "val", exported: false, typ: $String, tag: ""}]);
	stateFn.init([ptrType$7], [stateFn], false);
	lexer.init("text/template/parse", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "input", name: "input", exported: false, typ: $String, tag: ""}, {prop: "leftDelim", name: "leftDelim", exported: false, typ: $String, tag: ""}, {prop: "rightDelim", name: "rightDelim", exported: false, typ: $String, tag: ""}, {prop: "state", name: "state", exported: false, typ: stateFn, tag: ""}, {prop: "pos", name: "pos", exported: false, typ: Pos, tag: ""}, {prop: "start", name: "start", exported: false, typ: Pos, tag: ""}, {prop: "width", name: "width", exported: false, typ: Pos, tag: ""}, {prop: "lastPos", name: "lastPos", exported: false, typ: Pos, tag: ""}, {prop: "items", name: "items", exported: false, typ: chanType, tag: ""}, {prop: "parenDepth", name: "parenDepth", exported: false, typ: $Int, tag: ""}]);
	Node.init([{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}]);
	ListNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Nodes", name: "Nodes", exported: true, typ: sliceType$1, tag: ""}]);
	TextNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Text", name: "Text", exported: true, typ: sliceType$2, tag: ""}]);
	PipeNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}, {prop: "Decl", name: "Decl", exported: true, typ: sliceType$3, tag: ""}, {prop: "Cmds", name: "Cmds", exported: true, typ: sliceType$4, tag: ""}]);
	ActionNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}, {prop: "Pipe", name: "Pipe", exported: true, typ: ptrType$4, tag: ""}]);
	CommandNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Args", name: "Args", exported: true, typ: sliceType$1, tag: ""}]);
	IdentifierNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Ident", name: "Ident", exported: true, typ: $String, tag: ""}]);
	VariableNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Ident", name: "Ident", exported: true, typ: sliceType$5, tag: ""}]);
	DotNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}]);
	NilNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}]);
	FieldNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Ident", name: "Ident", exported: true, typ: sliceType$5, tag: ""}]);
	ChainNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Node", name: "Node", exported: true, typ: Node, tag: ""}, {prop: "Field", name: "Field", exported: true, typ: sliceType$5, tag: ""}]);
	BoolNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "True", name: "True", exported: true, typ: $Bool, tag: ""}]);
	NumberNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "IsInt", name: "IsInt", exported: true, typ: $Bool, tag: ""}, {prop: "IsUint", name: "IsUint", exported: true, typ: $Bool, tag: ""}, {prop: "IsFloat", name: "IsFloat", exported: true, typ: $Bool, tag: ""}, {prop: "IsComplex", name: "IsComplex", exported: true, typ: $Bool, tag: ""}, {prop: "Int64", name: "Int64", exported: true, typ: $Int64, tag: ""}, {prop: "Uint64", name: "Uint64", exported: true, typ: $Uint64, tag: ""}, {prop: "Float64", name: "Float64", exported: true, typ: $Float64, tag: ""}, {prop: "Complex128", name: "Complex128", exported: true, typ: $Complex128, tag: ""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: ""}]);
	StringNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Quoted", name: "Quoted", exported: true, typ: $String, tag: ""}, {prop: "Text", name: "Text", exported: true, typ: $String, tag: ""}]);
	endNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}]);
	elseNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}]);
	BranchNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}, {prop: "Pipe", name: "Pipe", exported: true, typ: ptrType$4, tag: ""}, {prop: "List", name: "List", exported: true, typ: ptrType$1, tag: ""}, {prop: "ElseList", name: "ElseList", exported: true, typ: ptrType$1, tag: ""}]);
	IfNode.init("", [{prop: "BranchNode", name: "", exported: true, typ: BranchNode, tag: ""}]);
	RangeNode.init("", [{prop: "BranchNode", name: "", exported: true, typ: BranchNode, tag: ""}]);
	WithNode.init("", [{prop: "BranchNode", name: "", exported: true, typ: BranchNode, tag: ""}]);
	TemplateNode.init("text/template/parse", [{prop: "NodeType", name: "", exported: true, typ: NodeType, tag: ""}, {prop: "Pos", name: "", exported: true, typ: Pos, tag: ""}, {prop: "tr", name: "tr", exported: false, typ: ptrType, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Pipe", name: "Pipe", exported: true, typ: ptrType$4, tag: ""}]);
	Tree.init("text/template/parse", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "ParseName", name: "ParseName", exported: true, typ: $String, tag: ""}, {prop: "Root", name: "Root", exported: true, typ: ptrType$1, tag: ""}, {prop: "text", name: "text", exported: false, typ: $String, tag: ""}, {prop: "funcs", name: "funcs", exported: false, typ: sliceType$6, tag: ""}, {prop: "lex", name: "lex", exported: false, typ: ptrType$7, tag: ""}, {prop: "token", name: "token", exported: false, typ: arrayType$2, tag: ""}, {prop: "peekCount", name: "peekCount", exported: false, typ: $Int, tag: ""}, {prop: "vars", name: "vars", exported: false, typ: sliceType$5, tag: ""}, {prop: "treeSet", name: "treeSet", exported: false, typ: mapType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		key = $makeMap($String.keyFor, [{ k: ".", v: 22 }, { k: "block", v: 21 }, { k: "define", v: 23 }, { k: "else", v: 24 }, { k: "end", v: 25 }, { k: "if", v: 26 }, { k: "range", v: 28 }, { k: "nil", v: 27 }, { k: "template", v: 29 }, { k: "with", v: 30 }]);
		textFormat = "%s";
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/template"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, io, ioutil, url, filepath, reflect, runtime, sort, strings, sync, parse, unicode, utf8, state, variable, ExecError, writeError, rvs, rvInts, rvUints, rvFloats, rvStrings, FuncMap, missingKeyAction, option, common, Template, ptrType, ptrType$1, ptrType$2, sliceType, sliceType$1, funcType, funcType$1, funcType$2, funcType$3, funcType$4, funcType$5, funcType$6, funcType$7, ptrType$3, ptrType$4, sliceType$2, ptrType$5, ptrType$6, arrayType, arrayType$1, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, sliceType$3, sliceType$4, sliceType$5, mapType, sliceType$6, ptrType$23, sliceType$7, ptrType$24, mapType$1, mapType$2, zero, errorType, fmtStringerType, builtins, builtinFuncs, errBadComparisonType, errBadComparison, errNoComparison, htmlQuot, htmlApos, htmlAmp, htmlLt, htmlGt, jsLowUni, hex, jsBackslash, jsApos, jsQuot, jsLt, jsGt, _r, _r$1, _r$2, doublePercent, errRecover, IsTrue, isTrue, isHexConstant, canBeNil, indirect, printableValue, sortKeys, createValueFuncs, addValueFuncs, addFuncs, goodFunc, goodName, findFunction, prepareArg, index, length, call, truth, and, or, not, basicKind, eq, ne, lt, le, gt, ge, HTMLEscape, HTMLEscapeString, HTMLEscaper, JSEscape, JSEscapeString, jsIsSpecial, JSEscaper, URLQueryEscaper, evalArgs, parseFiles, parseGlob, New;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	url = $packages["net/url"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	parse = $packages["text/template/parse"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	state = $pkg.state = $newType(0, $kindStruct, "template.state", true, "text/template", false, function(tmpl_, wr_, node_, vars_, depth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tmpl = ptrType$3.nil;
			this.wr = $ifaceNil;
			this.node = $ifaceNil;
			this.vars = sliceType$2.nil;
			this.depth = 0;
			return;
		}
		this.tmpl = tmpl_;
		this.wr = wr_;
		this.node = node_;
		this.vars = vars_;
		this.depth = depth_;
	});
	variable = $pkg.variable = $newType(0, $kindStruct, "template.variable", true, "text/template", false, function(name_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			return;
		}
		this.name = name_;
		this.value = value_;
	});
	ExecError = $pkg.ExecError = $newType(0, $kindStruct, "template.ExecError", true, "text/template", true, function(Name_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Name = Name_;
		this.Err = Err_;
	});
	writeError = $pkg.writeError = $newType(0, $kindStruct, "template.writeError", true, "text/template", false, function(Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = $ifaceNil;
			return;
		}
		this.Err = Err_;
	});
	rvs = $pkg.rvs = $newType(12, $kindSlice, "template.rvs", true, "text/template", false, null);
	rvInts = $pkg.rvInts = $newType(0, $kindStruct, "template.rvInts", true, "text/template", false, function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	rvUints = $pkg.rvUints = $newType(0, $kindStruct, "template.rvUints", true, "text/template", false, function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	rvFloats = $pkg.rvFloats = $newType(0, $kindStruct, "template.rvFloats", true, "text/template", false, function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	rvStrings = $pkg.rvStrings = $newType(0, $kindStruct, "template.rvStrings", true, "text/template", false, function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	FuncMap = $pkg.FuncMap = $newType(4, $kindMap, "template.FuncMap", true, "text/template", true, null);
	missingKeyAction = $pkg.missingKeyAction = $newType(4, $kindInt, "template.missingKeyAction", true, "text/template", false, null);
	option = $pkg.option = $newType(0, $kindStruct, "template.option", true, "text/template", false, function(missingKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.missingKey = 0;
			return;
		}
		this.missingKey = missingKey_;
	});
	common = $pkg.common = $newType(0, $kindStruct, "template.common", true, "text/template", false, function(tmpl_, option_, muFuncs_, parseFuncs_, execFuncs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tmpl = false;
			this.option = new option.ptr(0);
			this.muFuncs = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.parseFuncs = false;
			this.execFuncs = false;
			return;
		}
		this.tmpl = tmpl_;
		this.option = option_;
		this.muFuncs = muFuncs_;
		this.parseFuncs = parseFuncs_;
		this.execFuncs = execFuncs_;
	});
	Template = $pkg.Template = $newType(0, $kindStruct, "template.Template", true, "text/template", true, function(name_, Tree_, common_, leftDelim_, rightDelim_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.Tree = ptrType$5.nil;
			this.common = ptrType$4.nil;
			this.leftDelim = "";
			this.rightDelim = "";
			return;
		}
		this.name = name_;
		this.Tree = Tree_;
		this.common = common_;
		this.leftDelim = leftDelim_;
		this.rightDelim = rightDelim_;
	});
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType($error);
	ptrType$2 = $ptrType(fmt.Stringer);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	funcType = $funcType([$emptyInterface, sliceType$1], [$emptyInterface], true);
	funcType$1 = $funcType([$emptyInterface, sliceType$1], [$emptyInterface, $error], true);
	funcType$2 = $funcType([sliceType$1], [$String], true);
	funcType$3 = $funcType([$emptyInterface], [$Int, $error], false);
	funcType$4 = $funcType([$emptyInterface], [$Bool], false);
	funcType$5 = $funcType([$String, sliceType$1], [$String], true);
	funcType$6 = $funcType([$emptyInterface, sliceType$1], [$Bool, $error], true);
	funcType$7 = $funcType([$emptyInterface, $emptyInterface], [$Bool, $error], false);
	ptrType$3 = $ptrType(Template);
	ptrType$4 = $ptrType(common);
	sliceType$2 = $sliceType(variable);
	ptrType$5 = $ptrType(parse.Tree);
	ptrType$6 = $ptrType(parse.ListNode);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$7 = $ptrType(parse.ActionNode);
	ptrType$8 = $ptrType(parse.IfNode);
	ptrType$9 = $ptrType(parse.RangeNode);
	ptrType$10 = $ptrType(parse.TemplateNode);
	ptrType$11 = $ptrType(parse.TextNode);
	ptrType$12 = $ptrType(parse.WithNode);
	ptrType$13 = $ptrType(parse.PipeNode);
	ptrType$14 = $ptrType(parse.FieldNode);
	ptrType$15 = $ptrType(parse.ChainNode);
	ptrType$16 = $ptrType(parse.IdentifierNode);
	ptrType$17 = $ptrType(parse.VariableNode);
	ptrType$18 = $ptrType(parse.BoolNode);
	ptrType$19 = $ptrType(parse.DotNode);
	ptrType$20 = $ptrType(parse.NilNode);
	ptrType$21 = $ptrType(parse.NumberNode);
	ptrType$22 = $ptrType(parse.StringNode);
	sliceType$3 = $sliceType(parse.Node);
	sliceType$4 = $sliceType(reflect.Value);
	sliceType$5 = $sliceType(ptrType$3);
	mapType = $mapType($String, $emptyInterface);
	sliceType$6 = $sliceType(mapType);
	ptrType$23 = $ptrType(parse.CommandNode);
	sliceType$7 = $sliceType($String);
	ptrType$24 = $ptrType(state);
	mapType$1 = $mapType($String, ptrType$3);
	mapType$2 = $mapType($String, reflect.Value);
	state.ptr.prototype.push = function(name, value) {
		var $ptr, name, s, value;
		value = value;
		s = this;
		s.vars = $append(s.vars, new variable.ptr(name, $clone(value, reflect.Value)));
	};
	state.prototype.push = function(name, value) { return this.$val.push(name, value); };
	state.ptr.prototype.mark = function() {
		var $ptr, s;
		s = this;
		return s.vars.$length;
	};
	state.prototype.mark = function() { return this.$val.mark(); };
	state.ptr.prototype.pop = function(mark) {
		var $ptr, mark, s;
		s = this;
		s.vars = $subslice(s.vars, 0, mark);
	};
	state.prototype.pop = function(mark) { return this.$val.pop(mark); };
	state.ptr.prototype.setVar = function(n, value) {
		var $ptr, n, s, value, x, x$1;
		value = value;
		s = this;
		(x = s.vars, x$1 = s.vars.$length - n >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).value = value;
	};
	state.prototype.setVar = function(n, value) { return this.$val.setVar(n, value); };
	state.ptr.prototype.varValue = function(name) {
		var $ptr, i, name, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; name = $f.name; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = s.mark() - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((x = s.vars, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).name === name) {
				$s = -1; return (x$1 = s.vars, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).value;
				return (x$1 = s.vars, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).value;
			}
			i = i - (1) >> 0;
		}
		$r = s.errorf("undefined variable: %s", new sliceType$1([new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return zero;
		return zero;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.varValue }; } $f.$ptr = $ptr; $f.i = i; $f.name = name; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.varValue = function(name) { return this.$val.varValue(name); };
	state.ptr.prototype.at = function(node) {
		var $ptr, node, s;
		s = this;
		s.node = node;
	};
	state.prototype.at = function(node) { return this.$val.at(node); };
	doublePercent = function(str) {
		var $ptr, str;
		if (strings.Contains(str, "%")) {
			str = strings.Replace(str, "%", "%%", -1);
		}
		return str;
	};
	ExecError.ptr.prototype.Error = function() {
		var $ptr, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(this, ExecError);
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExecError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExecError.prototype.Error = function() { return this.$val.Error(); };
	state.ptr.prototype.errorf = function(format, args) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _tuple, args, context, format, location, name, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; args = $f.args; context = $f.context; format = $f.format; location = $f.location; name = $f.name; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		name = doublePercent(s.tmpl.Name());
		/* */ if ($interfaceIsEqual(s.node, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(s.node, $ifaceNil)) { */ case 1:
			_r$3 = fmt.Sprintf("template: %s: %s", new sliceType$1([new $String(name), new $String(format)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			format = _r$3;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$4 = s.tmpl.Tree.ErrorContext(s.node); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			location = _tuple[0];
			context = _tuple[1];
			_r$5 = fmt.Sprintf("template: %s: executing %q at <%s>: %s", new sliceType$1([new $String(location), new $String(name), new $String(doublePercent(context)), new $String(format)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			format = _r$5;
		/* } */ case 3:
		_r$6 = fmt.Errorf(format, args); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$panic((x = new ExecError.ptr(s.tmpl.Name(), _r$6), new x.constructor.elem(x)));
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.args = args; $f.context = context; $f.format = format; $f.location = location; $f.name = name; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	state.ptr.prototype.writeError = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new writeError.ptr(err), new x.constructor.elem(x)));
	};
	state.prototype.writeError = function(err) { return this.$val.writeError(err); };
	errRecover = function(errp) {
		var $ptr, _ref, e, err, err$1, err$2, err$3, errp;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_ref = e;
			if ($assertType(_ref, runtime.Error, true)[1]) {
				err = _ref;
				$panic(e);
			} else if ($assertType(_ref, writeError, true)[1]) {
				err$1 = $clone(_ref.$val, writeError);
				errp.$set(err$1.Err);
			} else if ($assertType(_ref, ExecError, true)[1]) {
				err$2 = $clone(_ref.$val, ExecError);
				errp.$set(new err$2.constructor.elem(err$2));
			} else {
				err$3 = _ref;
				$panic(e);
			}
		}
	};
	Template.ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var $ptr, _entry, _r$3, _r$4, data, name, t, tmpl, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$3 = $f._r$3; _r$4 = $f._r$4; data = $f.data; name = $f.name; t = $f.t; tmpl = $f.tmpl; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		tmpl = ptrType$3.nil;
		if (!(t.common === ptrType$4.nil)) {
			tmpl = (_entry = t.common.tmpl[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		}
		/* */ if (tmpl === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (tmpl === ptrType$3.nil) { */ case 1:
			_r$3 = fmt.Errorf("template: no template %q associated with template %q", new sliceType$1([new $String(name), new $String(t.name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
			return _r$3;
		/* } */ case 2:
		_r$4 = tmpl.Execute(wr, data); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ExecuteTemplate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.data = data; $f.name = name; $f.t = t; $f.tmpl = tmpl; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.$val.ExecuteTemplate(wr, name, data); };
	Template.ptr.prototype.Execute = function(wr, data) {
		var $ptr, _r$3, data, t, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; data = $f.data; t = $f.t; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$3 = t.execute(wr, data); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Execute }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.data = data; $f.t = t; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.Execute = function(wr, data) { return this.$val.Execute(wr, data); };
	Template.ptr.prototype.execute = function(wr, data) {
		var $ptr, _arg, _arg$1, _r$3, _r$4, data, err, state$1, t, value, wr, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; data = $f.data; err = $f.err; state$1 = $f.state$1; t = $f.t; value = $f.value; wr = $f.wr; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		t = this;
		$deferred.push([errRecover, [(err.$ptr || (err.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		_r$3 = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		value = _r$3;
		state$1 = new state.ptr(t, wr, $ifaceNil, new sliceType$2([new variable.ptr("$", $clone(value, reflect.Value))]), 0);
		/* */ if (t.Tree === ptrType$5.nil || t.Tree.Root === ptrType$6.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (t.Tree === ptrType$5.nil || t.Tree.Root === ptrType$6.nil) { */ case 2:
			_arg = new $String(t.Name());
			_r$4 = t.DefinedTemplates(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$4);
			$r = state$1.errorf("%q is an incomplete or empty template%s", new sliceType$1([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = state$1.walk(value, t.Tree.Root); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err[0];
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.execute }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.data = data; $f.err = err; $f.state$1 = state$1; $f.t = t; $f.value = value; $f.wr = wr; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.execute = function(wr, data) { return this.$val.execute(wr, data); };
	Template.ptr.prototype.DefinedTemplates = function() {
		var $ptr, _entry, _i, _keys, _r$3, _ref, b, name, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r$3 = $f._r$3; _ref = $f._ref; b = $f.b; name = $f.name; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		t = this;
		if (t.common === ptrType$4.nil) {
			$s = -1; return "";
			return "";
		}
		b[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			tmpl = _entry.v;
			/* */ if (tmpl.Tree === ptrType$5.nil || tmpl.Tree.Root === ptrType$6.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (tmpl.Tree === ptrType$5.nil || tmpl.Tree.Root === ptrType$6.nil) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			if (b[0].Len() > 0) {
				b[0].WriteString(", ");
			}
			_r$3 = fmt.Fprintf(b[0], "%q", new sliceType$1([new $String(name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		s = "";
		if (b[0].Len() > 0) {
			s = "; defined templates are: " + b[0].String();
		}
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.DefinedTemplates }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r$3 = _r$3; $f._ref = _ref; $f.b = b; $f.name = name; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.DefinedTemplates = function() { return this.$val.DefinedTemplates(); };
	state.ptr.prototype.walk = function(dot, node) {
		var $ptr, _i, _r$3, _r$4, _ref, _ref$1, _tuple, dot, err, node, node$1, node$2, node$3, node$4, node$5, node$6, node$7, node$8, node$9, s, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; dot = $f.dot; err = $f.err; node = $f.node; node$1 = $f.node$1; node$2 = $f.node$2; node$3 = $f.node$3; node$4 = $f.node$4; node$5 = $f.node$5; node$6 = $f.node$6; node$7 = $f.node$7; node$8 = $f.node$8; node$9 = $f.node$9; s = $f.s; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(node);
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($assertType(_ref, ptrType$7, true)[1]) { */ case 1:
			node$1 = _ref.$val;
			_r$3 = s.evalPipeline(dot, node$1.Pipe); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
			/* */ if (node$1.Pipe.Decl.$length === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (node$1.Pipe.Decl.$length === 0) { */ case 11:
				$r = s.printValue(node$1, val); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 2:
			node$2 = _ref.$val;
			$r = s.walkIfOrWith(10, dot, node$2.BranchNode.Pipe, node$2.BranchNode.List, node$2.BranchNode.ElseList); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 3:
			node$3 = _ref.$val;
			_ref$1 = node$3.Nodes;
			_i = 0;
			/* while (true) { */ case 15:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 16; continue; }
				node$9 = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				$r = s.walk(dot, node$9); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 15; continue; case 16:
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 4:
			node$4 = _ref.$val;
			$r = s.walkRange(dot, node$4); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 5:
			node$5 = _ref.$val;
			$r = s.walkTemplate(dot, node$5); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 6:
			node$6 = _ref.$val;
			_r$4 = s.wr.Write(node$6.Text); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				s.writeError(err);
			}
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 7:
			node$7 = _ref.$val;
			$r = s.walkIfOrWith(19, dot, node$7.BranchNode.Pipe, node$7.BranchNode.List, node$7.BranchNode.ElseList); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else { */ case 8:
			node$8 = _ref;
			$r = s.errorf("unknown node: %s", new sliceType$1([node$8])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.walk }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.dot = dot; $f.err = err; $f.node = node; $f.node$1 = node$1; $f.node$2 = node$2; $f.node$3 = node$3; $f.node$4 = node$4; $f.node$5 = node$5; $f.node$6 = node$6; $f.node$7 = node$7; $f.node$8 = node$8; $f.node$9 = node$9; $f.s = s; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.walk = function(dot, node) { return this.$val.walk(dot, node); };
	state.ptr.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) {
		var $ptr, _r$3, _tuple, dot, elseList, list, ok, pipe, s, truth$1, typ, val, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; dot = $f.dot; elseList = $f.elseList; list = $f.list; ok = $f.ok; pipe = $f.pipe; s = $f.s; truth$1 = $f.truth$1; typ = $f.typ; val = $f.val; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dot = dot;
		s = this;
		$deferred.push([$methodVal(s, "pop"), [s.mark()]]);
		_r$3 = s.evalPipeline(dot, pipe); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		val = _r$3;
		_tuple = isTrue(val);
		truth$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = s.errorf("if/with can't use %v", new sliceType$1([new val.constructor.elem(val)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (truth$1) { $s = 5; continue; }
		/* */ if (!(elseList === ptrType$6.nil)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (truth$1) { */ case 5:
			/* */ if (typ === 19) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (typ === 19) { */ case 8:
				$r = s.walk(val, list); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 10; continue;
			/* } else { */ case 9:
				$r = s.walk(dot, list); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			$s = 7; continue;
		/* } else if (!(elseList === ptrType$6.nil)) { */ case 6:
			$r = s.walk(dot, elseList); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: state.ptr.prototype.walkIfOrWith }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.dot = dot; $f.elseList = elseList; $f.list = list; $f.ok = ok; $f.pipe = pipe; $f.s = s; $f.truth$1 = truth$1; $f.typ = typ; $f.val = val; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	state.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) { return this.$val.walkIfOrWith(typ, dot, pipe, list, elseList); };
	IsTrue = function(val) {
		var $ptr, _r$3, _r$4, _tuple, ok, truth$1, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ok = $f.ok; truth$1 = $f.truth$1; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		truth$1 = false;
		ok = false;
		_r$3 = reflect.ValueOf(val); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = isTrue(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		truth$1 = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [truth$1, ok];
		return [truth$1, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsTrue }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ok = ok; $f.truth$1 = truth$1; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsTrue = IsTrue;
	isTrue = function(val) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, truth$1, val, x, x$1, x$2;
		truth$1 = false;
		ok = false;
		val = val;
		if (!val.IsValid()) {
			_tmp = false;
			_tmp$1 = true;
			truth$1 = _tmp;
			ok = _tmp$1;
			return [truth$1, ok];
		}
		_1 = val.Kind();
		if ((_1 === (17)) || (_1 === (21)) || (_1 === (23)) || (_1 === (24))) {
			truth$1 = val.Len() > 0;
		} else if (_1 === (1)) {
			truth$1 = val.Bool();
		} else if ((_1 === (15)) || (_1 === (16))) {
			truth$1 = !((x = val.Complex(), (x.$real === 0 && x.$imag === 0)));
		} else if ((_1 === (18)) || (_1 === (19)) || (_1 === (22)) || (_1 === (20))) {
			truth$1 = !val.IsNil();
		} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			truth$1 = !((x$1 = val.Int(), (x$1.$high === 0 && x$1.$low === 0)));
		} else if ((_1 === (13)) || (_1 === (14))) {
			truth$1 = !((val.Float() === 0));
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			truth$1 = !((x$2 = val.Uint(), (x$2.$high === 0 && x$2.$low === 0)));
		} else if (_1 === (25)) {
			truth$1 = true;
		} else {
			return [truth$1, ok];
		}
		_tmp$2 = truth$1;
		_tmp$3 = true;
		truth$1 = _tmp$2;
		ok = _tmp$3;
		return [truth$1, ok];
	};
	state.ptr.prototype.walkRange = function(dot, r) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, dot, elem, i, i$1, key, mark, ok, oneIteration, r, s, val, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dot = $f.dot; elem = $f.elem; i = $f.i; i$1 = $f.i$1; key = $f.key; mark = $f.mark; ok = $f.ok; oneIteration = $f.oneIteration; r = $f.r; s = $f.s; val = $f.val; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		mark = [mark];
		r = [r];
		s = [s];
		dot = dot;
		s[0] = this;
		s[0].at(r[0]);
		$deferred.push([$methodVal(s[0], "pop"), [s[0].mark()]]);
		_r$3 = s[0].evalPipeline(dot, r[0].BranchNode.Pipe); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = indirect(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		val = _tuple[0];
		mark[0] = s[0].mark();
		oneIteration = (function(mark, r, s) { return function $b(index$1, elem) {
			var $ptr, elem, index$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; elem = $f.elem; index$1 = $f.index$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			elem = elem;
			index$1 = index$1;
			if (r[0].BranchNode.Pipe.Decl.$length > 0) {
				s[0].setVar(1, elem);
			}
			if (r[0].BranchNode.Pipe.Decl.$length > 1) {
				s[0].setVar(2, index$1);
			}
			$r = s[0].walk(elem, r[0].BranchNode.List); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			s[0].pop(mark[0]);
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.elem = elem; $f.index$1 = index$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(mark, r, s);
			_1 = val.Kind();
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 4; continue; }
			/* */ if (_1 === (21)) { $s = 5; continue; }
			/* */ if (_1 === (18)) { $s = 6; continue; }
			/* */ if (_1 === (0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (17)) || (_1 === (23))) { */ case 4:
				if (val.Len() === 0) {
					/* break; */ $s = 3; continue;
				}
				i = 0;
				/* while (true) { */ case 10:
					/* if (!(i < val.Len())) { break; } */ if(!(i < val.Len())) { $s = 11; continue; }
					_r$5 = reflect.ValueOf(new $Int(i)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg = _r$5;
					_r$6 = val.Index(i); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$1 = _r$6;
					$r = oneIteration(_arg, _arg$1); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 10; continue; case 11:
				$s = -1; return;
				return;
			/* } else if (_1 === (21)) { */ case 5:
				if (val.Len() === 0) {
					/* break; */ $s = 3; continue;
				}
				_r$7 = val.MapKeys(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = sortKeys(_r$7); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_ref = _r$8;
				_i = 0;
				/* while (true) { */ case 17:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 18; continue; }
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					_arg$2 = key;
					_r$9 = val.MapIndex(key); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$3 = _r$9;
					$r = oneIteration(_arg$2, _arg$3); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 17; continue; case 18:
				$s = -1; return;
				return;
			/* } else if (_1 === (18)) { */ case 6:
				if (val.IsNil()) {
					/* break; */ $s = 3; continue;
				}
				i$1 = 0;
				/* while (true) { */ case 21:
					_r$10 = val.Recv(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$1 = _r$10;
					elem = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						/* break; */ $s = 22; continue;
					}
					_r$11 = reflect.ValueOf(new $Int(i$1)); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = oneIteration(_r$11, elem); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 21; continue; case 22:
				if (i$1 === 0) {
					/* break; */ $s = 3; continue;
				}
				$s = -1; return;
				return;
			/* } else if (_1 === (0)) { */ case 7:
				/* break; */ $s = 3; continue;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = s[0].errorf("range can't iterate over %v", new sliceType$1([new val.constructor.elem(val)])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
		case 3:
		/* */ if (!(r[0].BranchNode.ElseList === ptrType$6.nil)) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (!(r[0].BranchNode.ElseList === ptrType$6.nil)) { */ case 27:
			$r = s[0].walk(dot, r[0].BranchNode.ElseList); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 28:
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: state.ptr.prototype.walkRange }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dot = dot; $f.elem = elem; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.mark = mark; $f.ok = ok; $f.oneIteration = oneIteration; $f.r = r; $f.s = s; $f.val = val; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	state.prototype.walkRange = function(dot, r) { return this.$val.walkRange(dot, r); };
	state.ptr.prototype.walkTemplate = function(dot, t) {
		var $ptr, _entry, _r$3, dot, newState, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$3 = $f._r$3; dot = $f.dot; newState = $f.newState; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(t);
		tmpl = (_entry = s.tmpl.common.tmpl[$String.keyFor(t.Name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		/* */ if (tmpl === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (tmpl === ptrType$3.nil) { */ case 1:
			$r = s.errorf("template %q not defined", new sliceType$1([new $String(t.Name)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if (s.depth === 3000) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.depth === 3000) { */ case 4:
			$r = s.errorf("exceeded maximum template depth (%v)", new sliceType$1([new $Int(3000)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		_r$3 = s.evalPipeline(dot, t.Pipe); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		dot = _r$3;
		newState = $clone(s, state);
		newState.depth = newState.depth + (1) >> 0;
		newState.tmpl = tmpl;
		newState.vars = new sliceType$2([new variable.ptr("$", $clone(dot, reflect.Value))]);
		$r = newState.walk(dot, tmpl.Tree.Root); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.walkTemplate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$3 = _r$3; $f.dot = dot; $f.newState = newState; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.walkTemplate = function(dot, t) { return this.$val.walkTemplate(dot, t); };
	state.ptr.prototype.evalPipeline = function(dot, pipe) {
		var $ptr, _i, _i$1, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _v, cmd, dot, pipe, s, value, variable$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; cmd = $f.cmd; dot = $f.dot; pipe = $f.pipe; s = $f.s; value = $f.value; variable$1 = $f.variable$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		dot = dot;
		s = this;
		if (pipe === ptrType$13.nil) {
			$s = -1; return value;
			return value;
		}
		s.at(pipe);
		_ref = pipe.Cmds;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			cmd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$3 = s.evalCommand(dot, cmd, value); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			value = _r$3;
			if (!(value.Kind() === 20)) { _v = false; $s = 6; continue s; }
			_r$4 = value.Type().NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4 === 0; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				_r$5 = value.Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = reflect.ValueOf(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				value = _r$6;
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = pipe.Decl;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			variable$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			s.push((x = variable$1.Ident, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), value);
			_i$1++;
		}
		value = value;
		$s = -1; return value;
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalPipeline }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.cmd = cmd; $f.dot = dot; $f.pipe = pipe; $f.s = s; $f.value = value; $f.variable$1 = variable$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalPipeline = function(dot, pipe) { return this.$val.evalPipeline(dot, pipe); };
	state.ptr.prototype.notAFunction = function(args, final$1) {
		var $ptr, args, final$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; final$1 = $f.final$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		s = this;
		/* */ if (args.$length > 1 || final$1.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (args.$length > 1 || final$1.IsValid()) { */ case 1:
			$r = s.errorf("can't give argument to non-function %s", new sliceType$1([(0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0])])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.notAFunction }; } $f.$ptr = $ptr; $f.args = args; $f.final$1 = final$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.notAFunction = function(args, final$1) { return this.$val.notAFunction(args, final$1); };
	state.ptr.prototype.evalCommand = function(dot, cmd, final$1) {
		var $ptr, _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, cmd, dot, final$1, firstWord, n, n$1, n$2, n$3, n$4, s, word, word$1, word$2, word$3, word$4, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; cmd = $f.cmd; dot = $f.dot; final$1 = $f.final$1; firstWord = $f.firstWord; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; s = $f.s; word = $f.word; word$1 = $f.word$1; word$2 = $f.word$2; word$3 = $f.word$3; word$4 = $f.word$4; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		firstWord = (x = cmd.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		_ref = firstWord;
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, ptrType$14, true)[1]) { */ case 1:
			n = _ref.$val;
			_r$3 = s.evalFieldNode(dot, n, cmd.Args, final$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
			return _r$3;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 2:
			n$1 = _ref.$val;
			_r$4 = s.evalChainNode(dot, n$1, cmd.Args, final$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
			return _r$4;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 3:
			n$2 = _ref.$val;
			_r$5 = s.evalFunction(dot, n$2, cmd, cmd.Args, final$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
			return _r$5;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 4:
			n$3 = _ref.$val;
			_r$6 = s.evalPipeline(dot, n$3); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 5:
			n$4 = _ref.$val;
			_r$7 = s.evalVariableNode(dot, n$4, cmd.Args, final$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } */ case 6:
		s.at(firstWord);
		$r = s.notAFunction(cmd.Args, final$1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = firstWord;
		/* */ if ($assertType(_ref$1, ptrType$18, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref$1, ptrType$19, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref$1, ptrType$20, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref$1, ptrType$21, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref$1, ptrType$22, true)[1]) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if ($assertType(_ref$1, ptrType$18, true)[1]) { */ case 13:
			word = _ref$1.$val;
			_r$8 = reflect.ValueOf(new $Bool(word.True)); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$s = -1; return _r$8;
			return _r$8;
		/* } else if ($assertType(_ref$1, ptrType$19, true)[1]) { */ case 14:
			word$1 = _ref$1.$val;
			$s = -1; return dot;
			return dot;
		/* } else if ($assertType(_ref$1, ptrType$20, true)[1]) { */ case 15:
			word$2 = _ref$1.$val;
			$r = s.errorf("nil is not a command", new sliceType$1([])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref$1, ptrType$21, true)[1]) { */ case 16:
			word$3 = _ref$1.$val;
			_r$9 = s.idealConstant(word$3); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return _r$9;
			return _r$9;
		/* } else if ($assertType(_ref$1, ptrType$22, true)[1]) { */ case 17:
			word$4 = _ref$1.$val;
			_r$10 = reflect.ValueOf(new $String(word$4.Text)); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			$s = -1; return _r$10;
			return _r$10;
		/* } */ case 18:
		$r = s.errorf("can't evaluate command %q", new sliceType$1([firstWord])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalCommand }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.cmd = cmd; $f.dot = dot; $f.final$1 = final$1; $f.firstWord = firstWord; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.s = s; $f.word = word; $f.word$1 = word$1; $f.word$2 = word$2; $f.word$3 = word$3; $f.word$4 = word$4; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalCommand = function(dot, cmd, final$1) { return this.$val.evalCommand(dot, cmd, final$1); };
	state.ptr.prototype.idealConstant = function(constant) {
		var $ptr, _r$3, _r$4, _r$5, constant, n, s, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; constant = $f.constant; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(constant);
			/* */ if (constant.IsComplex) { $s = 2; continue; }
			/* */ if (constant.IsFloat && !isHexConstant(constant.Text) && strings.ContainsAny(constant.Text, ".eE")) { $s = 3; continue; }
			/* */ if (constant.IsInt) { $s = 4; continue; }
			/* */ if (constant.IsUint) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (constant.IsComplex) { */ case 2:
				_r$3 = reflect.ValueOf(constant.Complex128); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
				return _r$3;
			/* } else if (constant.IsFloat && !isHexConstant(constant.Text) && strings.ContainsAny(constant.Text, ".eE")) { */ case 3:
				_r$4 = reflect.ValueOf(new $Float64(constant.Float64)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
				return _r$4;
			/* } else if (constant.IsInt) { */ case 4:
				n = ((x = constant.Int64, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
				/* */ if (!((x$1 = new $Int64(0, n), x$2 = constant.Int64, (x$1.$high === x$2.$high && x$1.$low === x$2.$low)))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!((x$1 = new $Int64(0, n), x$2 = constant.Int64, (x$1.$high === x$2.$high && x$1.$low === x$2.$low)))) { */ case 9:
					$r = s.errorf("%s overflows int", new sliceType$1([new $String(constant.Text)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 10:
				_r$5 = reflect.ValueOf(new $Int(n)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
				return _r$5;
			/* } else if (constant.IsUint) { */ case 5:
				$r = s.errorf("%s overflows int", new sliceType$1([new $String(constant.Text)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		case 1:
		$s = -1; return zero;
		return zero;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.idealConstant }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.constant = constant; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.idealConstant = function(constant) { return this.$val.idealConstant(constant); };
	isHexConstant = function(s) {
		var $ptr, s;
		return s.length > 2 && (s.charCodeAt(0) === 48) && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88));
	};
	state.ptr.prototype.evalFieldNode = function(dot, field, args, final$1) {
		var $ptr, _r$3, args, dot, field, final$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; args = $f.args; dot = $f.dot; field = $f.field; final$1 = $f.final$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(field);
		_r$3 = s.evalFieldChain(dot, dot, field, field.Ident, args, final$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFieldNode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.args = args; $f.dot = dot; $f.field = field; $f.final$1 = final$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFieldNode = function(dot, field, args, final$1) { return this.$val.evalFieldNode(dot, field, args, final$1); };
	state.ptr.prototype.evalChainNode = function(dot, chain, args, final$1) {
		var $ptr, _r$3, _r$4, _r$5, args, chain, dot, final$1, pipe, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; args = $f.args; chain = $f.chain; dot = $f.dot; final$1 = $f.final$1; pipe = $f.pipe; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(chain);
		/* */ if (chain.Field.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (chain.Field.$length === 0) { */ case 1:
			$r = s.errorf("internal error: no fields in evalChainNode", new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$3 = chain.Node.Type(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 12) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 12) { */ case 4:
			$r = s.errorf("indirection through explicit nil in %s", new sliceType$1([chain])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		_r$4 = s.evalArg(dot, $ifaceNil, chain.Node); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		pipe = _r$4;
		_r$5 = s.evalFieldChain(dot, pipe, chain, chain.Field, args, final$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalChainNode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.args = args; $f.chain = chain; $f.dot = dot; $f.final$1 = final$1; $f.pipe = pipe; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalChainNode = function(dot, chain, args, final$1) { return this.$val.evalChainNode(dot, chain, args, final$1); };
	state.ptr.prototype.evalVariableNode = function(dot, variable$1, args, final$1) {
		var $ptr, _r$3, _r$4, args, dot, final$1, s, value, variable$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; dot = $f.dot; final$1 = $f.final$1; s = $f.s; value = $f.value; variable$1 = $f.variable$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(variable$1);
		_r$3 = s.varValue((x = variable$1.Ident, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		value = _r$3;
		/* */ if (variable$1.Ident.$length === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (variable$1.Ident.$length === 1) { */ case 2:
			$r = s.notAFunction(args, final$1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return value;
			return value;
		/* } */ case 3:
		_r$4 = s.evalFieldChain(dot, value, variable$1, $subslice(variable$1.Ident, 1), args, final$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalVariableNode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.dot = dot; $f.final$1 = final$1; $f.s = s; $f.value = value; $f.variable$1 = variable$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalVariableNode = function(dot, variable$1, args, final$1) { return this.$val.evalVariableNode(dot, variable$1, args, final$1); };
	state.ptr.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) {
		var $ptr, _r$3, _r$4, args, dot, final$1, i, ident, n, node, receiver, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; dot = $f.dot; final$1 = $f.final$1; i = $f.i; ident = $f.ident; n = $f.n; node = $f.node; receiver = $f.receiver; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		receiver = receiver;
		dot = dot;
		s = this;
		n = ident.$length;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (n - 1 >> 0))) { break; } */ if(!(i < (n - 1 >> 0))) { $s = 2; continue; }
			_r$3 = s.evalField(dot, ((i < 0 || i >= ident.$length) ? $throwRuntimeError("index out of range") : ident.$array[ident.$offset + i]), node, sliceType$3.nil, zero, receiver); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			receiver = _r$3;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$4 = s.evalField(dot, (x = n - 1 >> 0, ((x < 0 || x >= ident.$length) ? $throwRuntimeError("index out of range") : ident.$array[ident.$offset + x])), node, args, final$1, receiver); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFieldChain }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.dot = dot; $f.final$1 = final$1; $f.i = i; $f.ident = ident; $f.n = n; $f.node = node; $f.receiver = receiver; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) { return this.$val.evalFieldChain(dot, receiver, node, ident, args, final$1); };
	state.ptr.prototype.evalFunction = function(dot, node, cmd, args, final$1) {
		var $ptr, _r$3, _r$4, _tuple, args, cmd, dot, final$1, function$1, name, node, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; args = $f.args; cmd = $f.cmd; dot = $f.dot; final$1 = $f.final$1; function$1 = $f.function$1; name = $f.name; node = $f.node; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(node);
		name = node.Ident;
		_r$3 = findFunction(name, s.tmpl); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		function$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = s.errorf("%q is not a defined function", new sliceType$1([new $String(name)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$4 = s.evalCall(dot, function$1, cmd, name, args, final$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFunction }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.args = args; $f.cmd = cmd; $f.dot = dot; $f.final$1 = final$1; $f.function$1 = function$1; $f.name = name; $f.node = node; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFunction = function(dot, node, cmd, args, final$1) { return this.$val.evalFunction(dot, node, cmd, args, final$1); };
	state.ptr.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) {
		var $ptr, _1, _2, _r$10, _r$11, _r$12, _r$13, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, args, dot, field, fieldName, final$1, hasArgs, isNil, method, nameVal, node, ok, ptr, receiver, result, s, tField, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; args = $f.args; dot = $f.dot; field = $f.field; fieldName = $f.fieldName; final$1 = $f.final$1; hasArgs = $f.hasArgs; isNil = $f.isNil; method = $f.method; nameVal = $f.nameVal; node = $f.node; ok = $f.ok; ptr = $f.ptr; receiver = $f.receiver; result = $f.result; s = $f.s; tField = $f.tField; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		receiver = receiver;
		final$1 = final$1;
		dot = dot;
		s = this;
		if (!receiver.IsValid()) {
			$s = -1; return zero;
			return zero;
		}
		typ = receiver.Type();
		_r$3 = indirect(receiver); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		receiver = _tuple[0];
		isNil = _tuple[1];
		ptr = receiver;
		if (!((ptr.Kind() === 20)) && ptr.CanAddr()) {
			ptr = ptr.Addr();
		}
		_r$4 = ptr.MethodByName(fieldName); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		method = _r$4;
		/* */ if (method.IsValid()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (method.IsValid()) { */ case 3:
			_r$5 = s.evalCall(dot, method, node, fieldName, args, final$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
			return _r$5;
		/* } */ case 4:
		hasArgs = args.$length > 1 || final$1.IsValid();
			_1 = receiver.Kind();
			/* */ if (_1 === (25)) { $s = 7; continue; }
			/* */ if (_1 === (21)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (25)) { */ case 7:
				_r$6 = receiver.Type().FieldByName(fieldName); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				tField = $clone(_tuple$1[0], reflect.StructField);
				ok = _tuple$1[1];
				/* */ if (ok) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (ok) { */ case 11:
					/* */ if (isNil) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (isNil) { */ case 13:
						$r = s.errorf("nil pointer evaluating %s.%s", new sliceType$1([typ, new $String(fieldName)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 14:
					_r$7 = receiver.FieldByIndex(tField.Index); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					field = _r$7;
					/* */ if (!(tField.PkgPath === "")) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!(tField.PkgPath === "")) { */ case 17:
						$r = s.errorf("%s is an unexported field of struct type %s", new sliceType$1([new $String(fieldName), typ])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 18:
					/* */ if (hasArgs) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (hasArgs) { */ case 20:
						$r = s.errorf("%s has arguments but cannot be invoked as function", new sliceType$1([new $String(fieldName)])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 21:
					$s = -1; return field;
					return field;
				/* } */ case 12:
				$s = 9; continue;
			/* } else if (_1 === (21)) { */ case 8:
				/* */ if (isNil) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (isNil) { */ case 23:
					$r = s.errorf("nil pointer evaluating %s.%s", new sliceType$1([typ, new $String(fieldName)])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
				_r$8 = reflect.ValueOf(new $String(fieldName)); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				nameVal = _r$8;
				_r$9 = receiver.Type().Key(); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = nameVal.Type().AssignableTo(_r$9); /* */ $s = 30; case 30: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				/* */ if (_r$10) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (_r$10) { */ case 27:
					/* */ if (hasArgs) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if (hasArgs) { */ case 31:
						$r = s.errorf("%s is not a method but has arguments", new sliceType$1([new $String(fieldName)])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 32:
					_r$11 = receiver.MapIndex(nameVal); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					result = _r$11;
					/* */ if (!result.IsValid()) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (!result.IsValid()) { */ case 35:
							_2 = s.tmpl.common.option.missingKey;
							/* */ if (_2 === (0)) { $s = 38; continue; }
							/* */ if (_2 === (1)) { $s = 39; continue; }
							/* */ if (_2 === (2)) { $s = 40; continue; }
							/* */ $s = 41; continue;
							/* if (_2 === (0)) { */ case 38:
								$s = 41; continue;
							/* } else if (_2 === (1)) { */ case 39:
								_r$12 = receiver.Type().Elem(); /* */ $s = 42; case 42: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
								_r$13 = reflect.Zero(_r$12); /* */ $s = 43; case 43: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								result = _r$13;
								$s = 41; continue;
							/* } else if (_2 === (2)) { */ case 40:
								$r = s.errorf("map has no entry for key %q", new sliceType$1([new $String(fieldName)])); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 41:
						case 37:
					/* } */ case 36:
					$s = -1; return result;
					return result;
				/* } */ case 28:
			/* } */ case 9:
		case 6:
		$r = s.errorf("can't evaluate field %s in type %s", new sliceType$1([new $String(fieldName), typ])); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalField }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.args = args; $f.dot = dot; $f.field = field; $f.fieldName = fieldName; $f.final$1 = final$1; $f.hasArgs = hasArgs; $f.isNil = isNil; $f.method = method; $f.nameVal = nameVal; $f.node = node; $f.ok = ok; $f.ptr = ptr; $f.receiver = receiver; $f.result = result; $f.s = s; $f.tField = tField; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) { return this.$val.evalField(dot, fieldName, node, args, final$1, receiver); };
	state.ptr.prototype.evalCall = function(dot, fun, node, name, args, final$1) {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, argType, args, argv, dot, final$1, fun, i, name, node, numFixed, numIn, result, s, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; argType = $f.argType; args = $f.args; argv = $f.argv; dot = $f.dot; final$1 = $f.final$1; fun = $f.fun; i = $f.i; name = $f.name; node = $f.node; numFixed = $f.numFixed; numIn = $f.numIn; result = $f.result; s = $f.s; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		fun = fun;
		dot = dot;
		s = this;
		if (!(args === sliceType$3.nil)) {
			args = $subslice(args, 1);
		}
		typ = fun.Type();
		numIn = args.$length;
		if (final$1.IsValid()) {
			numIn = numIn + (1) >> 0;
		}
		numFixed = args.$length;
		_r$3 = typ.IsVariadic(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 1; continue; }
		_r$4 = typ.NumIn(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		if (numIn < (_r$4 - 1 >> 0)) { _v = true; $s = 5; continue s; }
		_r$5 = typ.IsVariadic(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		if (!(!_r$5)) { _v$1 = false; $s = 7; continue s; }
		_r$6 = typ.NumIn(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$1 = !((numIn === _r$6)); case 7:
		_v = _v$1; case 5:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$3) { */ case 1:
			_r$7 = typ.NumIn(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			numFixed = _r$7 - 1 >> 0;
			/* */ if (numIn < numFixed) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (numIn < numFixed) { */ case 11:
				_arg = new $String(name);
				_r$8 = typ.NumIn(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_arg$1 = new $Int((_r$8 - 1 >> 0));
				_arg$2 = new $Int(args.$length);
				$r = s.errorf("wrong number of args for %s: want at least %d got %d", new sliceType$1([_arg, _arg$1, _arg$2])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			$s = 3; continue;
		/* } else if (_v) { */ case 2:
			_arg$3 = new $String(name);
			_r$9 = typ.NumIn(); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$4 = new $Int(_r$9);
			_arg$5 = new $Int(args.$length);
			$r = s.errorf("wrong number of args for %s: want %d got %d", new sliceType$1([_arg$3, _arg$4, _arg$5])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$10 = goodFunc(typ); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		/* */ if (!_r$10) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!_r$10) { */ case 17:
			_arg$6 = new $String(name);
			_r$11 = typ.NumOut(); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$7 = new $Int(_r$11);
			$r = s.errorf("can't call method/function %q with %d results", new sliceType$1([_arg$6, _arg$7])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		argv = $makeSlice(sliceType$4, numIn);
		i = 0;
		/* while (true) { */ case 22:
			/* if (!(i < numFixed && i < args.$length)) { break; } */ if(!(i < numFixed && i < args.$length)) { $s = 23; continue; }
			_arg$8 = dot;
			_r$12 = typ.In(i); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$9 = _r$12;
			_arg$10 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			_r$13 = s.evalArg(_arg$8, _arg$9, _arg$10); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _r$13);
			i = i + (1) >> 0;
		/* } */ $s = 22; continue; case 23:
		_r$14 = typ.IsVariadic(); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ if (_r$14) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (_r$14) { */ case 26:
			_r$15 = typ.NumIn(); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = typ.In(_r$15 - 1 >> 0); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = _r$16.Elem(); /* */ $s = 31; case 31: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			argType = _r$17;
			/* while (true) { */ case 32:
				/* if (!(i < args.$length)) { break; } */ if(!(i < args.$length)) { $s = 33; continue; }
				_r$18 = s.evalArg(dot, argType, ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i])); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _r$18);
				i = i + (1) >> 0;
			/* } */ $s = 32; continue; case 33:
		/* } */ case 27:
		/* */ if (final$1.IsValid()) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (final$1.IsValid()) { */ case 35:
			_r$19 = typ.NumIn(); /* */ $s = 37; case 37: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_r$20 = typ.In(_r$19 - 1 >> 0); /* */ $s = 38; case 38: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			t = _r$20;
			_r$21 = typ.IsVariadic(); /* */ $s = 41; case 41: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ if (_r$21) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (_r$21) { */ case 39:
				/* */ if ((numIn - 1 >> 0) < numFixed) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if ((numIn - 1 >> 0) < numFixed) { */ case 42:
					_r$22 = typ.In(numIn - 1 >> 0); /* */ $s = 45; case 45: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					t = _r$22;
					$s = 44; continue;
				/* } else { */ case 43:
					_r$23 = t.Elem(); /* */ $s = 46; case 46: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					t = _r$23;
				/* } */ case 44:
			/* } */ case 40:
			_r$24 = s.validateType(final$1, t); /* */ $s = 47; case 47: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _r$24);
		/* } */ case 36:
		_r$25 = fun.Call(argv); /* */ $s = 48; case 48: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		result = _r$25;
		/* */ if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { $s = 49; continue; }
		/* */ $s = 50; continue;
		/* if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { */ case 49:
			s.at(node);
			_arg$11 = new $String(name);
			_r$26 = (1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).Interface(); /* */ $s = 51; case 51: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_arg$12 = $assertType(_r$26, $error);
			$r = s.errorf("error calling %s: %s", new sliceType$1([_arg$11, _arg$12])); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 50:
		$s = -1; return (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]);
		return (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalCall }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f.argType = argType; $f.args = args; $f.argv = argv; $f.dot = dot; $f.final$1 = final$1; $f.fun = fun; $f.i = i; $f.name = name; $f.node = node; $f.numFixed = numFixed; $f.numIn = numIn; $f.result = result; $f.s = s; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalCall = function(dot, fun, node, name, args, final$1) { return this.$val.evalCall(dot, fun, node, name, args, final$1); };
	canBeNil = function(typ) {
		var $ptr, _1, _r$3, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = typ.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_1 = _r$3;
			if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23))) {
				$s = -1; return true;
				return true;
			}
		case 1:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: canBeNil }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.ptr.prototype.validateType = function(value, typ) {
		var $ptr, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		s = this;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			if ($interfaceIsEqual(typ, $ifaceNil)) { _v = true; $s = 5; continue s; }
			_r$3 = canBeNil(typ); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_r$4 = reflect.Zero(typ); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
				return _r$4;
			/* } */ case 4:
			$r = s.errorf("invalid value; expected %s", new sliceType$1([typ])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!(!($interfaceIsEqual(typ, $ifaceNil)))) { _v$1 = false; $s = 11; continue s; }
		_r$5 = value.Type().AssignableTo(typ); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v$1 = !_r$5; case 11:
		/* */ if (_v$1) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v$1) { */ case 9:
			/* */ if ((value.Kind() === 20) && !value.IsNil()) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((value.Kind() === 20) && !value.IsNil()) { */ case 13:
				_r$6 = value.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				value = _r$6;
				_r$7 = value.Type().AssignableTo(typ); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (_r$7) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$7) { */ case 16:
					$s = -1; return value;
					return value;
				/* } */ case 17:
			/* } */ case 14:
				if (!(value.Kind() === 22)) { _v$2 = false; $s = 24; continue s; }
				_r$8 = value.Type().Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = _r$8.AssignableTo(typ); /* */ $s = 26; case 26: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_v$2 = _r$9; case 24:
				/* */ if (_v$2) { $s = 20; continue; }
				_r$10 = reflect.PtrTo(value.Type()).AssignableTo(typ); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				/* */ if (_r$10 && value.CanAddr()) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (_v$2) { */ case 20:
					_r$11 = value.Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					value = _r$11;
					/* */ if (!value.IsValid()) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (!value.IsValid()) { */ case 29:
						$r = s.errorf("dereference of nil pointer of type %s", new sliceType$1([typ])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 30:
					$s = 23; continue;
				/* } else if (_r$10 && value.CanAddr()) { */ case 21:
					value = value.Addr();
					$s = 23; continue;
				/* } else { */ case 22:
					$r = s.errorf("wrong type for value; expected %s; got %s", new sliceType$1([typ, value.Type()])); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
			case 19:
		/* } */ case 10:
		$s = -1; return value;
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.validateType }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.validateType = function(value, typ) { return this.$val.validateType(value, typ); };
	state.ptr.prototype.evalArg = function(dot, typ, n) {
		var $ptr, _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, arg, arg$1, arg$2, arg$3, arg$4, arg$5, arg$6, dot, n, s, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; arg = $f.arg; arg$1 = $f.arg$1; arg$2 = $f.arg$2; arg$3 = $f.arg$3; arg$4 = $f.arg$4; arg$5 = $f.arg$5; arg$6 = $f.arg$6; dot = $f.dot; n = $f.n; s = $f.s; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(n);
		_ref = n;
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($assertType(_ref, ptrType$19, true)[1]) { */ case 1:
			arg = _ref.$val;
			_r$3 = s.validateType(dot, typ); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
			return _r$3;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 2:
			arg$1 = _ref.$val;
			_r$4 = canBeNil(typ); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$4) { */ case 10:
				_r$5 = reflect.Zero(typ); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
				return _r$5;
			/* } */ case 11:
			$r = s.errorf("cannot assign nil to %s", new sliceType$1([typ])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 3:
			arg$2 = _ref.$val;
			_r$6 = s.evalFieldNode(dot, arg$2, new sliceType$3([n]), zero); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = s.validateType(_r$6, typ); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 4:
			arg$3 = _ref.$val;
			_r$8 = s.evalVariableNode(dot, arg$3, sliceType$3.nil, zero); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = s.validateType(_r$8, typ); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return _r$9;
			return _r$9;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 5:
			arg$4 = _ref.$val;
			_r$10 = s.evalPipeline(dot, arg$4); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = s.validateType(_r$10, typ); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			$s = -1; return _r$11;
			return _r$11;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 6:
			arg$5 = _ref.$val;
			_r$12 = s.evalFunction(dot, arg$5, arg$5, sliceType$3.nil, zero); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = s.validateType(_r$12, typ); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$s = -1; return _r$13;
			return _r$13;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 7:
			arg$6 = _ref.$val;
			_r$14 = s.evalChainNode(dot, arg$6, sliceType$3.nil, zero); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = s.validateType(_r$14, typ); /* */ $s = 24; case 24: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			$s = -1; return _r$15;
			return _r$15;
		/* } */ case 8:
			_r$16 = typ.Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_1 = _r$16;
			/* */ if (_1 === (1)) { $s = 27; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 28; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 29; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 30; continue; }
			/* */ if (_1 === (20)) { $s = 31; continue; }
			/* */ if (_1 === (24)) { $s = 32; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (_1 === (1)) { */ case 27:
				_r$17 = s.evalBool(typ, n); /* */ $s = 35; case 35: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$s = -1; return _r$17;
				return _r$17;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 28:
				_r$18 = s.evalComplex(typ, n); /* */ $s = 36; case 36: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$s = -1; return _r$18;
				return _r$18;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 29:
				_r$19 = s.evalFloat(typ, n); /* */ $s = 37; case 37: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				$s = -1; return _r$19;
				return _r$19;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 30:
				_r$20 = s.evalInteger(typ, n); /* */ $s = 38; case 38: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				$s = -1; return _r$20;
				return _r$20;
			/* } else if (_1 === (20)) { */ case 31:
				_r$21 = typ.NumMethod(); /* */ $s = 41; case 41: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				/* */ if (_r$21 === 0) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (_r$21 === 0) { */ case 39:
					_r$22 = s.evalEmptyInterface(dot, n); /* */ $s = 42; case 42: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					$s = -1; return _r$22;
					return _r$22;
				/* } */ case 40:
				$s = 34; continue;
			/* } else if (_1 === (24)) { */ case 32:
				_r$23 = s.evalString(typ, n); /* */ $s = 43; case 43: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				$s = -1; return _r$23;
				return _r$23;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 33:
				_r$24 = s.evalUnsignedInteger(typ, n); /* */ $s = 44; case 44: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				$s = -1; return _r$24;
				return _r$24;
			/* } */ case 34:
		case 25:
		$r = s.errorf("can't handle %s for arg of type %s", new sliceType$1([n, typ])); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.arg = arg; $f.arg$1 = arg$1; $f.arg$2 = arg$2; $f.arg$3 = arg$3; $f.arg$4 = arg$4; $f.arg$5 = arg$5; $f.arg$6 = arg$6; $f.dot = dot; $f.n = n; $f.s = s; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalArg = function(dot, typ, n) { return this.$val.evalArg(dot, typ, n); };
	state.ptr.prototype.evalBool = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$18, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetBool(n$1.True);
			$s = -1; return value;
			return value;
		/* } */ case 2:
		$r = s.errorf("expected bool; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalBool }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalBool = function(typ, n) { return this.$val.evalBool(typ, n); };
	state.ptr.prototype.evalString = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$22, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetString(n$1.Text);
			$s = -1; return value;
			return value;
		/* } */ case 2:
		$r = s.errorf("expected string; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalString }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalString = function(typ, n) { return this.$val.evalString(typ, n); };
	state.ptr.prototype.evalInteger = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsInt) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsInt) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetInt(n$1.Int64);
			$s = -1; return value;
			return value;
		/* } */ case 2:
		$r = s.errorf("expected integer; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalInteger }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalInteger = function(typ, n) { return this.$val.evalInteger(typ, n); };
	state.ptr.prototype.evalUnsignedInteger = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsUint) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsUint) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetUint(n$1.Uint64);
			$s = -1; return value;
			return value;
		/* } */ case 2:
		$r = s.errorf("expected unsigned integer; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalUnsignedInteger }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalUnsignedInteger = function(typ, n) { return this.$val.evalUnsignedInteger(typ, n); };
	state.ptr.prototype.evalFloat = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsFloat) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsFloat) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetFloat(n$1.Float64);
			$s = -1; return value;
			return value;
		/* } */ case 2:
		$r = s.errorf("expected float; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFloat }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFloat = function(typ, n) { return this.$val.evalFloat(typ, n); };
	state.ptr.prototype.evalComplex = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsComplex) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsComplex) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetComplex(n$1.Complex128);
			$s = -1; return value;
			return value;
		/* } */ case 2:
		$r = s.errorf("expected complex; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalComplex }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalComplex = function(typ, n) { return this.$val.evalComplex(typ, n); };
	state.ptr.prototype.evalEmptyInterface = function(dot, n) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, dot, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7, n$8, n$9, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; dot = $f.dot; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; n$5 = $f.n$5; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(n);
		_ref = n;
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($assertType(_ref, ptrType$18, true)[1]) { */ case 1:
			n$1 = _ref.$val;
			_r$3 = reflect.ValueOf(new $Bool(n$1.True)); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
			return _r$3;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 2:
			n$2 = _ref.$val;
			$s = -1; return dot;
			return dot;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 3:
			n$3 = _ref.$val;
			_r$4 = s.evalFieldNode(dot, n$3, sliceType$3.nil, zero); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
			return _r$4;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 4:
			n$4 = _ref.$val;
			_r$5 = s.evalFunction(dot, n$4, n$4, sliceType$3.nil, zero); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
			return _r$5;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 5:
			n$5 = _ref.$val;
			$r = s.errorf("evalEmptyInterface: nil (can't happen)", new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 6:
			n$6 = _ref.$val;
			_r$6 = s.idealConstant(n$6); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 7:
			n$7 = _ref.$val;
			_r$7 = reflect.ValueOf(new $String(n$7.Text)); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 8:
			n$8 = _ref.$val;
			_r$8 = s.evalVariableNode(dot, n$8, sliceType$3.nil, zero); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$s = -1; return _r$8;
			return _r$8;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 9:
			n$9 = _ref.$val;
			_r$9 = s.evalPipeline(dot, n$9); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return _r$9;
			return _r$9;
		/* } */ case 10:
		$r = s.errorf("can't handle assignment of %s to empty interface argument", new sliceType$1([n])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		$s = -1; return new reflect.Value.ptr(ptrType.nil, 0, 0);
		return new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalEmptyInterface }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.dot = dot; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.n$5 = n$5; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalEmptyInterface = function(dot, n) { return this.$val.evalEmptyInterface(dot, n); };
	indirect = function(v) {
		var $ptr, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, isNil, rv, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; isNil = $f.isNil; rv = $f.rv; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rv = new reflect.Value.ptr(ptrType.nil, 0, 0);
		isNil = false;
		v = v;
		/* while (true) { */ case 1:
			/* if (!((v.Kind() === 22) || (v.Kind() === 20))) { break; } */ if(!((v.Kind() === 22) || (v.Kind() === 20))) { $s = 2; continue; }
			if (v.IsNil()) {
				_tmp = v;
				_tmp$1 = true;
				rv = _tmp;
				isNil = _tmp$1;
				$s = -1; return [rv, isNil];
				return [rv, isNil];
			}
			_r$3 = v.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = v;
		_tmp$3 = false;
		rv = _tmp$2;
		isNil = _tmp$3;
		$s = -1; return [rv, isNil];
		return [rv, isNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: indirect }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.isNil = isNil; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.ptr.prototype.printValue = function(n, v) {
		var $ptr, _r$3, _r$4, _tuple, _tuple$1, err, iface, n, ok, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; iface = $f.iface; n = $f.n; ok = $f.ok; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		s = this;
		s.at(n);
		_r$3 = printableValue(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		iface = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = s.errorf("can't print %s of type %s", new sliceType$1([n, v.Type()])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$4 = fmt.Fprint(s.wr, new sliceType$1([iface])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.writeError(err);
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.iface = iface; $f.n = n; $f.ok = ok; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.printValue = function(n, v) { return this.$val.printValue(n, v); };
	printableValue = function(v) {
		var $ptr, _1, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _v, _v$1, _v$2, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.Kind() === 22) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.Kind() === 22) { */ case 1:
			_r$3 = indirect(v); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			v = _tuple[0];
		/* } */ case 2:
		if (!v.IsValid()) {
			$s = -1; return [new $String("<no value>"), true];
			return [new $String("<no value>"), true];
		}
		_r$4 = v.Type().Implements(errorType); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		if (!(!_r$4)) { _v = false; $s = 6; continue s; }
		_r$5 = v.Type().Implements(fmtStringerType); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = !_r$5; case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			if (!(v.CanAddr())) { _v$1 = false; $s = 12; continue s; }
			_r$6 = reflect.PtrTo(v.Type()).Implements(errorType); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			if (_r$6) { _v$2 = true; $s = 13; continue s; }
			_r$7 = reflect.PtrTo(v.Type()).Implements(fmtStringerType); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_v$2 = _r$7; case 13:
			_v$1 = _v$2; case 12:
			/* */ if (_v$1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v$1) { */ case 9:
				v = v.Addr();
				$s = 11; continue;
			/* } else { */ case 10:
				_1 = v.Kind();
				if ((_1 === (18)) || (_1 === (19))) {
					$s = -1; return [$ifaceNil, false];
					return [$ifaceNil, false];
				}
			/* } */ case 11:
		/* } */ case 5:
		_r$8 = v.Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return [_r$8, true];
		return [_r$8, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: printableValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rvs.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(rvs).prototype.Len = function() { return this.$get().Len(); };
	rvs.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]);
		_tmp$1 = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]);
		((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _tmp);
		((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = _tmp$1);
	};
	$ptrType(rvs).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	rvInts.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, x, x$1, x$2, x$3, x$4;
		x = $clone(this, rvInts);
		return (x$1 = (x$2 = x.rvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Int(), x$3 = (x$4 = x.rvs, ((j < 0 || j >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + j])).Int(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
	};
	rvInts.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvUints.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, x, x$1, x$2, x$3, x$4;
		x = $clone(this, rvUints);
		return (x$1 = (x$2 = x.rvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Uint(), x$3 = (x$4 = x.rvs, ((j < 0 || j >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + j])).Uint(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
	};
	rvUints.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvFloats.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, x, x$1, x$2;
		x = $clone(this, rvFloats);
		return (x$1 = x.rvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Float() < (x$2 = x.rvs, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])).Float();
	};
	rvFloats.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvStrings.ptr.prototype.Less = function(i, j) {
		var $ptr, _r$3, _r$4, i, j, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; i = $f.i; j = $f.j; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = $clone(this, rvStrings);
		_r$3 = (x$1 = x.rvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = (x$2 = x.rvs, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])).String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$3 < _r$4;
		return _r$3 < _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rvStrings.ptr.prototype.Less }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.i = i; $f.j = j; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	rvStrings.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	sortKeys = function(v) {
		var $ptr, _1, v, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.$length <= 1) {
			$s = -1; return v;
			return v;
		}
			_1 = (0 >= v.$length ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0]).Kind();
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 2; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((_1 === (13)) || (_1 === (14))) { */ case 2:
				$r = sort.Sort((x = new rvFloats.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x.constructor.elem(x))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 3:
				$r = sort.Sort((x$1 = new rvInts.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$1.constructor.elem(x$1))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				$r = sort.Sort((x$2 = new rvStrings.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$2.constructor.elem(x$2))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 5:
				$r = sort.Sort((x$3 = new rvUints.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$3.constructor.elem(x$3))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		case 1:
		$s = -1; return v;
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortKeys }; } $f.$ptr = $ptr; $f._1 = _1; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	createValueFuncs = function(funcMap) {
		var $ptr, funcMap, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; funcMap = $f.funcMap; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = {};
		$r = addValueFuncs(m, funcMap); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return m;
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: createValueFuncs }; } $f.$ptr = $ptr; $f.funcMap = funcMap; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	addValueFuncs = function(out, in$1) {
		var $ptr, _arg, _arg$1, _entry, _i, _key, _keys, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, fn, in$1, name, out, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; fn = $f.fn; in$1 = $f.in$1; name = $f.name; out = $f.out; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = in$1;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			fn = _entry.v;
			/* */ if (!goodName(name)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!goodName(name)) { */ case 3:
				_r$3 = fmt.Errorf("function name %s is not a valid identifier", new sliceType$1([new $String(name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(_r$3);
			/* } */ case 4:
			_r$4 = reflect.ValueOf(fn); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v = _r$4;
			if (!((v.Kind() === 19))) {
				$panic(new $String("value for " + name + " not a function"));
			}
			_r$5 = goodFunc(v.Type()); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$5) { */ case 7:
				_arg = new $String(name);
				_r$6 = v.Type().NumOut(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$1 = new $Int(_r$6);
				_r$7 = fmt.Errorf("can't install method/function %q with %d results", new sliceType$1([_arg, _arg$1])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$panic(_r$7);
			/* } */ case 8:
			_key = name; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(v, reflect.Value) };
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addValueFuncs }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.fn = fn; $f.in$1 = in$1; $f.name = name; $f.out = out; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addFuncs = function(out, in$1) {
		var $ptr, _entry, _i, _key, _keys, _ref, fn, in$1, name, out;
		_ref = in$1;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			fn = _entry.v;
			_key = name; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: fn };
			_i++;
		}
	};
	goodFunc = function(typ) {
		var $ptr, _r$3, _r$4, _r$5, _v, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = typ.NumOut(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ((_r$3 === 1)) { $s = 2; continue; }
			_r$4 = typ.NumOut(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			if (!(_r$4 === 2)) { _v = false; $s = 6; continue s; }
			_r$5 = typ.Out(1); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_v = $interfaceIsEqual(_r$5, errorType); case 6:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_r$3 === 1)) { */ case 2:
				$s = -1; return true;
				return true;
			/* } else if (_v) { */ case 3:
				$s = -1; return true;
				return true;
			/* } */ case 4:
		case 1:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goodFunc }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	goodName = function(name) {
		var $ptr, _i, _ref, _rune, i, name, r;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if ((r === 95)) {
			} else if ((i === 0) && !unicode.IsLetter(r)) {
				return false;
			} else if (!unicode.IsLetter(r) && !unicode.IsDigit(r)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	findFunction = function(name, tmpl) {
		var $ptr, _entry, _entry$1, fn, fn$1, name, tmpl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; fn = $f.fn; fn$1 = $f.fn$1; name = $f.name; tmpl = $f.tmpl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		/* */ if (!(tmpl === ptrType$3.nil) && !(tmpl.common === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tmpl === ptrType$3.nil) && !(tmpl.common === ptrType$4.nil)) { */ case 1:
			$r = tmpl.common.muFuncs.RLock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(tmpl.common.muFuncs, "RUnlock"), []]);
			fn = (_entry = tmpl.common.execFuncs[$String.keyFor(name)], _entry !== undefined ? _entry.v : new reflect.Value.ptr(ptrType.nil, 0, 0));
			if (fn.IsValid()) {
				$s = -1; return [fn, true];
				return [fn, true];
			}
		/* } */ case 2:
		fn$1 = (_entry$1 = builtinFuncs[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : new reflect.Value.ptr(ptrType.nil, 0, 0));
		if (fn$1.IsValid()) {
			$s = -1; return [fn$1, true];
			return [fn$1, true];
		}
		$s = -1; return [new reflect.Value.ptr(ptrType.nil, 0, 0), false];
		return [new reflect.Value.ptr(ptrType.nil, 0, 0), false];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new reflect.Value.ptr(ptrType.nil, 0, 0), false]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: findFunction }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f.fn = fn; $f.fn$1 = fn$1; $f.name = name; $f.tmpl = tmpl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	prepareArg = function(value, argType) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _r$7, argType, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; argType = $f.argType; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			_r$3 = canBeNil(argType); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$3) { */ case 3:
				_r$4 = fmt.Errorf("value is nil; should be of type %s", new sliceType$1([argType])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return [new reflect.Value.ptr(ptrType.nil, 0, 0), _r$4];
				return [new reflect.Value.ptr(ptrType.nil, 0, 0), _r$4];
			/* } */ case 4:
			_r$5 = reflect.Zero(argType); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			value = _r$5;
		/* } */ case 2:
		_r$6 = value.Type().AssignableTo(argType); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!_r$6) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!_r$6) { */ case 8:
			_r$7 = fmt.Errorf("value has type %s; should be %s", new sliceType$1([value.Type(), argType])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return [new reflect.Value.ptr(ptrType.nil, 0, 0), _r$7];
			return [new reflect.Value.ptr(ptrType.nil, 0, 0), _r$7];
		/* } */ case 9:
		$s = -1; return [value, $ifaceNil];
		return [value, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: prepareArg }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.argType = argType; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	index = function(item, indices) {
		var $ptr, _1, _2, _arg, _arg$1, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, err, i, index$1, index$2, indices, isNil, item, v, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; i = $f.i; index$1 = $f.index$1; index$2 = $f.index$2; indices = $f.indices; isNil = $f.isNil; item = $f.item; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(item); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		/* */ if (!v.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!v.IsValid()) { */ case 2:
			_r$4 = fmt.Errorf("index of untyped nil", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r$4];
			return [$ifaceNil, _r$4];
		/* } */ case 3:
		_ref = indices;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$5 = reflect.ValueOf(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			index$1 = _r$5;
			isNil = false;
			_r$6 = indirect(v); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			v = _tuple[0];
			isNil = _tuple[1];
			/* */ if (isNil) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (isNil) { */ case 9:
				_r$7 = fmt.Errorf("index of nil pointer", new sliceType$1([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return [$ifaceNil, _r$7];
				return [$ifaceNil, _r$7];
			/* } */ case 10:
				_1 = v.Kind();
				/* */ if ((_1 === (17)) || (_1 === (23)) || (_1 === (24))) { $s = 13; continue; }
				/* */ if (_1 === (21)) { $s = 14; continue; }
				/* */ if (_1 === (0)) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if ((_1 === (17)) || (_1 === (23)) || (_1 === (24))) { */ case 13:
					x = new $Int64(0, 0);
						_2 = index$1.Kind();
						/* */ if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6))) { $s = 19; continue; }
						/* */ if ((_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) { $s = 20; continue; }
						/* */ if (_2 === (0)) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6))) { */ case 19:
							x = index$1.Int();
							$s = 23; continue;
						/* } else if ((_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) { */ case 20:
							x = (x$1 = index$1.Uint(), new $Int64(x$1.$high, x$1.$low));
							$s = 23; continue;
						/* } else if (_2 === (0)) { */ case 21:
							_r$8 = fmt.Errorf("cannot index slice/array with nil", new sliceType$1([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							$s = -1; return [$ifaceNil, _r$8];
							return [$ifaceNil, _r$8];
						/* } else { */ case 22:
							_r$9 = fmt.Errorf("cannot index slice/array with type %s", new sliceType$1([index$1.Type()])); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							$s = -1; return [$ifaceNil, _r$9];
							return [$ifaceNil, _r$9];
						/* } */ case 23:
					case 18:
					/* */ if ((x.$high < 0 || (x.$high === 0 && x.$low < 0)) || (x$2 = new $Int64(0, v.Len()), (x.$high > x$2.$high || (x.$high === x$2.$high && x.$low >= x$2.$low)))) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if ((x.$high < 0 || (x.$high === 0 && x.$low < 0)) || (x$2 = new $Int64(0, v.Len()), (x.$high > x$2.$high || (x.$high === x$2.$high && x.$low >= x$2.$low)))) { */ case 26:
						_r$10 = fmt.Errorf("index out of range: %d", new sliceType$1([x])); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$s = -1; return [$ifaceNil, _r$10];
						return [$ifaceNil, _r$10];
					/* } */ case 27:
					_r$11 = v.Index(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					v = _r$11;
					$s = 17; continue;
				/* } else if (_1 === (21)) { */ case 14:
					_arg = index$1;
					_r$12 = v.Type().Key(); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_arg$1 = _r$12;
					_r$13 = prepareArg(_arg, _arg$1); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$1 = _r$13;
					index$2 = _tuple$1[0];
					err = _tuple$1[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [$ifaceNil, err];
						return [$ifaceNil, err];
					}
					_r$14 = v.MapIndex(index$2); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					x$3 = _r$14;
					/* */ if (x$3.IsValid()) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if (x$3.IsValid()) { */ case 33:
						v = x$3;
						$s = 35; continue;
					/* } else { */ case 34:
						_r$15 = v.Type().Elem(); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$16 = reflect.Zero(_r$15); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						v = _r$16;
					/* } */ case 35:
					$s = 17; continue;
				/* } else if (_1 === (0)) { */ case 15:
					$panic(new $String("unreachable"));
					$s = 17; continue;
				/* } else { */ case 16:
					_r$17 = fmt.Errorf("can't index item of type %s", new sliceType$1([v.Type()])); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$s = -1; return [$ifaceNil, _r$17];
					return [$ifaceNil, _r$17];
				/* } */ case 17:
			case 12:
			_i++;
		/* } */ $s = 5; continue; case 6:
		_r$18 = v.Interface(); /* */ $s = 39; case 39: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		$s = -1; return [_r$18, $ifaceNil];
		return [_r$18, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: index }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.i = i; $f.index$1 = index$1; $f.index$2 = index$2; $f.indices = indices; $f.isNil = isNil; $f.item = item; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	length = function(item) {
		var $ptr, _1, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, isNil, item, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; isNil = $f.isNil; item = $f.item; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(item); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		/* */ if (!v.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!v.IsValid()) { */ case 2:
			_r$4 = fmt.Errorf("len of untyped nil", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [0, _r$4];
			return [0, _r$4];
		/* } */ case 3:
		_r$5 = indirect(v); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple = _r$5;
		v = _tuple[0];
		isNil = _tuple[1];
		/* */ if (isNil) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (isNil) { */ case 6:
			_r$6 = fmt.Errorf("len of nil pointer", new sliceType$1([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return [0, _r$6];
			return [0, _r$6];
		/* } */ case 7:
		_1 = v.Kind();
		if ((_1 === (17)) || (_1 === (18)) || (_1 === (21)) || (_1 === (23)) || (_1 === (24))) {
			$s = -1; return [v.Len(), $ifaceNil];
			return [v.Len(), $ifaceNil];
		}
		_r$7 = fmt.Errorf("len of type %s", new sliceType$1([v.Type()])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return [0, _r$7];
		return [0, _r$7];
		/* */ } return; } if ($f === undefined) { $f = { $blk: length }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.isNil = isNil; $f.item = item; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	call = function(fn, args) {
		var $ptr, _arg, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, arg, argType, args, argv, dddType, err, fn, i, numIn, result, typ, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; argType = $f.argType; args = $f.args; argv = $f.argv; dddType = $f.dddType; err = $f.err; fn = $f.fn; i = $f.i; numIn = $f.numIn; result = $f.result; typ = $f.typ; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(fn); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		/* */ if (!v.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!v.IsValid()) { */ case 2:
			_r$4 = fmt.Errorf("call of nil", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r$4];
			return [$ifaceNil, _r$4];
		/* } */ case 3:
		typ = v.Type();
		_r$5 = typ.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (!((_r$5 === 19))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((_r$5 === 19))) { */ case 5:
			_r$6 = fmt.Errorf("non-function of type %s", new sliceType$1([typ])); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r$6];
			return [$ifaceNil, _r$6];
		/* } */ case 6:
		_r$7 = goodFunc(typ); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (!_r$7) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!_r$7) { */ case 9:
			_r$8 = typ.NumOut(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg = new $Int(_r$8);
			_r$9 = fmt.Errorf("function called with %d args; should be 1 or 2", new sliceType$1([_arg])); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r$9];
			return [$ifaceNil, _r$9];
		/* } */ case 10:
		_r$10 = typ.NumIn(); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		numIn = _r$10;
		dddType = $ifaceNil;
		_r$11 = typ.IsVariadic(); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		/* */ if (_r$11) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (_r$11) { */ case 15:
			/* */ if (args.$length < (numIn - 1 >> 0)) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (args.$length < (numIn - 1 >> 0)) { */ case 19:
				_r$12 = fmt.Errorf("wrong number of args: got %d want at least %d", new sliceType$1([new $Int(args.$length), new $Int((numIn - 1 >> 0))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				$s = -1; return [$ifaceNil, _r$12];
				return [$ifaceNil, _r$12];
			/* } */ case 20:
			_r$13 = typ.In(numIn - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.Elem(); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			dddType = _r$14;
			$s = 17; continue;
		/* } else { */ case 16:
			/* */ if (!((args.$length === numIn))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!((args.$length === numIn))) { */ case 24:
				_r$15 = fmt.Errorf("wrong number of args: got %d want %d", new sliceType$1([new $Int(args.$length), new $Int(numIn)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$s = -1; return [$ifaceNil, _r$15];
				return [$ifaceNil, _r$15];
			/* } */ case 25:
		/* } */ case 17:
		argv = $makeSlice(sliceType$4, args.$length);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 27:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 28; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$16 = reflect.ValueOf(arg); /* */ $s = 29; case 29: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value = _r$16;
			argType = $ifaceNil;
			_r$17 = typ.IsVariadic(); /* */ $s = 33; case 33: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (!_r$17 || i < (numIn - 1 >> 0)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (!_r$17 || i < (numIn - 1 >> 0)) { */ case 30:
				_r$18 = typ.In(i); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				argType = _r$18;
				$s = 32; continue;
			/* } else { */ case 31:
				argType = dddType;
			/* } */ case 32:
			err = $ifaceNil;
			_r$19 = prepareArg(value, argType); /* */ $s = 35; case 35: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_tuple = _r$19;
			((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _tuple[0]);
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 36:
				_r$20 = fmt.Errorf("arg %d: %s", new sliceType$1([new $Int(i), err])); /* */ $s = 38; case 38: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				$s = -1; return [$ifaceNil, _r$20];
				return [$ifaceNil, _r$20];
			/* } */ case 37:
			_i++;
		/* } */ $s = 27; continue; case 28:
		_r$21 = v.Call(argv); /* */ $s = 39; case 39: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		result = _r$21;
		/* */ if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { $s = 40; continue; }
		/* */ $s = 41; continue;
		/* if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { */ case 40:
			_r$22 = (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]).Interface(); /* */ $s = 42; case 42: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$23 = (1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).Interface(); /* */ $s = 43; case 43: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$s = -1; return [_r$22, $assertType(_r$23, $error)];
			return [_r$22, $assertType(_r$23, $error)];
		/* } */ case 41:
		_r$24 = (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]).Interface(); /* */ $s = 44; case 44: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		$s = -1; return [_r$24, $ifaceNil];
		return [_r$24, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.argType = argType; $f.args = args; $f.argv = argv; $f.dddType = dddType; $f.err = err; $f.fn = fn; $f.i = i; $f.numIn = numIn; $f.result = result; $f.typ = typ; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	truth = function(a) {
		var $ptr, _r$3, _tuple, a, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = IsTrue(a); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		t = _tuple[0];
		$s = -1; return t;
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: truth }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	and = function(arg0, args) {
		var $ptr, _i, _r$3, _r$4, _ref, arg0, args, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; arg0 = $f.arg0; args = $f.args; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = truth(arg0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$3) { */ case 1:
			$s = -1; return arg0;
			return arg0;
		/* } */ case 2:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			arg0 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			_r$4 = truth(arg0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!_r$4) { */ case 6:
				/* break; */ $s = 5; continue;
			/* } */ case 7:
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return arg0;
		return arg0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: and }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.arg0 = arg0; $f.args = args; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	or = function(arg0, args) {
		var $ptr, _i, _r$3, _r$4, _ref, arg0, args, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; arg0 = $f.arg0; args = $f.args; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = truth(arg0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3) { */ case 1:
			$s = -1; return arg0;
			return arg0;
		/* } */ case 2:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			arg0 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			_r$4 = truth(arg0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$4) { */ case 6:
				/* break; */ $s = 5; continue;
			/* } */ case 7:
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return arg0;
		return arg0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: or }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.arg0 = arg0; $f.args = args; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	not = function(arg) {
		var $ptr, _r$3, arg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; arg = $f.arg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = truth(arg); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return !_r$3;
		return !_r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: not }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.arg = arg; $f.$s = $s; $f.$r = $r; return $f;
	};
	basicKind = function(v) {
		var $ptr, _1, v;
		v = v;
		_1 = v.Kind();
		if (_1 === (1)) {
			return [1, $ifaceNil];
		} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			return [3, $ifaceNil];
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			return [6, $ifaceNil];
		} else if ((_1 === (13)) || (_1 === (14))) {
			return [4, $ifaceNil];
		} else if ((_1 === (15)) || (_1 === (16))) {
			return [2, $ifaceNil];
		} else if (_1 === (24)) {
			return [5, $ifaceNil];
		}
		return [0, errBadComparisonType];
	};
	eq = function(arg1, arg2) {
		var $ptr, _1, _i, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, arg, arg1, arg2, err, err$1, k1, k2, truth$1, v1, v2, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arg = $f.arg; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; err$1 = $f.err$1; k1 = $f.k1; k2 = $f.k2; truth$1 = $f.truth$1; v1 = $f.v1; v2 = $f.v2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(arg1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v1 = _r$3;
		_tuple = basicKind(v1);
		k1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
			return [false, err];
		}
		if (arg2.$length === 0) {
			$s = -1; return [false, errNoComparison];
			return [false, errNoComparison];
		}
		_ref = arg2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$4 = reflect.ValueOf(arg); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v2 = _r$4;
			_tuple$1 = basicKind(v2);
			k2 = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [false, err$1];
				return [false, err$1];
			}
			truth$1 = false;
			/* */ if (!((k1 === k2))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((k1 === k2))) { */ case 5:
				if ((k1 === 3) && (k2 === 6)) {
					truth$1 = (x = v1.Int(), (x.$high > 0 || (x.$high === 0 && x.$low >= 0))) && (x$1 = (x$2 = v1.Int(), new $Uint64(x$2.$high, x$2.$low)), x$3 = v2.Uint(), (x$1.$high === x$3.$high && x$1.$low === x$3.$low));
				} else if ((k1 === 6) && (k2 === 3)) {
					truth$1 = (x$4 = v2.Int(), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0))) && (x$5 = v1.Uint(), x$6 = (x$7 = v2.Int(), new $Uint64(x$7.$high, x$7.$low)), (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
				} else {
					$s = -1; return [false, errBadComparison];
					return [false, errBadComparison];
				}
				$s = 7; continue;
			/* } else { */ case 6:
					_1 = k1;
					/* */ if (_1 === (1)) { $s = 9; continue; }
					/* */ if (_1 === (2)) { $s = 10; continue; }
					/* */ if (_1 === (4)) { $s = 11; continue; }
					/* */ if (_1 === (3)) { $s = 12; continue; }
					/* */ if (_1 === (5)) { $s = 13; continue; }
					/* */ if (_1 === (6)) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_1 === (1)) { */ case 9:
						truth$1 = v1.Bool() === v2.Bool();
						$s = 16; continue;
					/* } else if (_1 === (2)) { */ case 10:
						truth$1 = (x$8 = v1.Complex(), x$9 = v2.Complex(), (x$8.$real === x$9.$real && x$8.$imag === x$9.$imag));
						$s = 16; continue;
					/* } else if (_1 === (4)) { */ case 11:
						truth$1 = v1.Float() === v2.Float();
						$s = 16; continue;
					/* } else if (_1 === (3)) { */ case 12:
						truth$1 = (x$10 = v1.Int(), x$11 = v2.Int(), (x$10.$high === x$11.$high && x$10.$low === x$11.$low));
						$s = 16; continue;
					/* } else if (_1 === (5)) { */ case 13:
						_r$5 = v1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = v2.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						truth$1 = _r$5 === _r$6;
						$s = 16; continue;
					/* } else if (_1 === (6)) { */ case 14:
						truth$1 = (x$12 = v1.Uint(), x$13 = v2.Uint(), (x$12.$high === x$13.$high && x$12.$low === x$13.$low));
						$s = 16; continue;
					/* } else { */ case 15:
						$panic(new $String("invalid kind"));
					/* } */ case 16:
				case 8:
			/* } */ case 7:
			if (truth$1) {
				$s = -1; return [true, $ifaceNil];
				return [true, $ifaceNil];
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [false, $ifaceNil];
		return [false, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: eq }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arg = arg; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.err$1 = err$1; $f.k1 = k1; $f.k2 = k2; $f.truth$1 = truth$1; $f.v1 = v1; $f.v2 = v2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	ne = function(arg1, arg2) {
		var $ptr, _r$3, _tuple, arg1, arg2, equal, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; equal = $f.equal; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = eq(arg1, new sliceType$1([arg2])); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		equal = _tuple[0];
		err = _tuple[1];
		$s = -1; return [!equal, err];
		return [!equal, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ne }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.equal = equal; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	lt = function(arg1, arg2) {
		var $ptr, _1, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, arg1, arg2, err, k1, k2, truth$1, v1, v2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; k1 = $f.k1; k2 = $f.k2; truth$1 = $f.truth$1; v1 = $f.v1; v2 = $f.v2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(arg1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v1 = _r$3;
		_tuple = basicKind(v1);
		k1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
			return [false, err];
		}
		_r$4 = reflect.ValueOf(arg2); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		v2 = _r$4;
		_tuple$1 = basicKind(v2);
		k2 = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
			return [false, err];
		}
		truth$1 = false;
		/* */ if (!((k1 === k2))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((k1 === k2))) { */ case 3:
			if ((k1 === 3) && (k2 === 6)) {
				truth$1 = (x = v1.Int(), (x.$high < 0 || (x.$high === 0 && x.$low < 0))) || (x$1 = (x$2 = v1.Int(), new $Uint64(x$2.$high, x$2.$low)), x$3 = v2.Uint(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
			} else if ((k1 === 6) && (k2 === 3)) {
				truth$1 = (x$4 = v2.Int(), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0))) && (x$5 = v1.Uint(), x$6 = (x$7 = v2.Int(), new $Uint64(x$7.$high, x$7.$low)), (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
			} else {
				$s = -1; return [false, errBadComparison];
				return [false, errBadComparison];
			}
			$s = 5; continue;
		/* } else { */ case 4:
				_1 = k1;
				/* */ if ((_1 === (1)) || (_1 === (2))) { $s = 7; continue; }
				/* */ if (_1 === (4)) { $s = 8; continue; }
				/* */ if (_1 === (3)) { $s = 9; continue; }
				/* */ if (_1 === (5)) { $s = 10; continue; }
				/* */ if (_1 === (6)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((_1 === (1)) || (_1 === (2))) { */ case 7:
					$s = -1; return [false, errBadComparisonType];
					return [false, errBadComparisonType];
				/* } else if (_1 === (4)) { */ case 8:
					truth$1 = v1.Float() < v2.Float();
					$s = 13; continue;
				/* } else if (_1 === (3)) { */ case 9:
					truth$1 = (x$8 = v1.Int(), x$9 = v2.Int(), (x$8.$high < x$9.$high || (x$8.$high === x$9.$high && x$8.$low < x$9.$low)));
					$s = 13; continue;
				/* } else if (_1 === (5)) { */ case 10:
					_r$5 = v1.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = v2.String(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					truth$1 = _r$5 < _r$6;
					$s = 13; continue;
				/* } else if (_1 === (6)) { */ case 11:
					truth$1 = (x$10 = v1.Uint(), x$11 = v2.Uint(), (x$10.$high < x$11.$high || (x$10.$high === x$11.$high && x$10.$low < x$11.$low)));
					$s = 13; continue;
				/* } else { */ case 12:
					$panic(new $String("invalid kind"));
				/* } */ case 13:
			case 6:
		/* } */ case 5:
		$s = -1; return [truth$1, $ifaceNil];
		return [truth$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.k1 = k1; $f.k2 = k2; $f.truth$1 = truth$1; $f.v1 = v1; $f.v2 = v2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	le = function(arg1, arg2) {
		var $ptr, _r$3, _r$4, _tuple, arg1, arg2, err, lessThan, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; lessThan = $f.lessThan; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = lt(arg1, arg2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		lessThan = _tuple[0];
		err = _tuple[1];
		if (lessThan || !($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [lessThan, err];
			return [lessThan, err];
		}
		_r$4 = eq(arg1, new sliceType$1([arg2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: le }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.lessThan = lessThan; $f.$s = $s; $f.$r = $r; return $f;
	};
	gt = function(arg1, arg2) {
		var $ptr, _r$3, _tuple, arg1, arg2, err, lessOrEqual, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; lessOrEqual = $f.lessOrEqual; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = le(arg1, arg2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		lessOrEqual = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
			return [false, err];
		}
		$s = -1; return [!lessOrEqual, $ifaceNil];
		return [!lessOrEqual, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: gt }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.lessOrEqual = lessOrEqual; $f.$s = $s; $f.$r = $r; return $f;
	};
	ge = function(arg1, arg2) {
		var $ptr, _r$3, _tuple, arg1, arg2, err, lessThan, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; lessThan = $f.lessThan; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = lt(arg1, arg2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		lessThan = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
			return [false, err];
		}
		$s = -1; return [!lessThan, $ifaceNil];
		return [!lessThan, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ge }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.lessThan = lessThan; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTMLEscape = function(w, b) {
		var $ptr, _1, _i, _r$3, _r$4, _r$5, _ref, b, c, html, i, last, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; b = $f.b; c = $f.c; html = $f.html; i = $f.i; last = $f.last; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		last = 0;
		_ref = b;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			html = sliceType.nil;
				_1 = c;
				if (_1 === (34)) {
					html = htmlQuot;
				} else if (_1 === (39)) {
					html = htmlApos;
				} else if (_1 === (38)) {
					html = htmlAmp;
				} else if (_1 === (60)) {
					html = htmlLt;
				} else if (_1 === (62)) {
					html = htmlGt;
				} else {
					_i++;
					/* continue; */ $s = 1; continue;
				}
			case 3:
			_r$3 = w.Write($subslice(b, last, i)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = w.Write(html); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			last = i + 1 >> 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$5 = w.Write($subslice(b, last)); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTMLEscape }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.b = b; $f.c = c; $f.html = html; $f.i = i; $f.last = last; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HTMLEscape = HTMLEscape;
	HTMLEscapeString = function(s) {
		var $ptr, b, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		if (!strings.ContainsAny(s, "'\"&<>")) {
			$s = -1; return s;
			return s;
		}
		b[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		$r = HTMLEscape(b[0], new sliceType($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return b[0].String();
		return b[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTMLEscapeString }; } $f.$ptr = $ptr; $f.b = b; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HTMLEscapeString = HTMLEscapeString;
	HTMLEscaper = function(args) {
		var $ptr, _r$3, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = evalArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = HTMLEscapeString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTMLEscaper }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HTMLEscaper = HTMLEscaper;
	JSEscape = function(w, b) {
		var $ptr, _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, b, b$1, c, i, last, r, size, t, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; b$1 = $f.b$1; c = $f.c; i = $f.i; last = $f.last; r = $f.r; size = $f.size; t = $f.t; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < b.$length)) { break; } */ if(!(i < b.$length)) { $s = 2; continue; }
			c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			/* */ if (!jsIsSpecial((c >> 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!jsIsSpecial((c >> 0))) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$3 = w.Write($subslice(b, last, i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ if (c < 128) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (c < 128) { */ case 6:
					_1 = c;
					/* */ if (_1 === (92)) { $s = 10; continue; }
					/* */ if (_1 === (39)) { $s = 11; continue; }
					/* */ if (_1 === (34)) { $s = 12; continue; }
					/* */ if (_1 === (60)) { $s = 13; continue; }
					/* */ if (_1 === (62)) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_1 === (92)) { */ case 10:
						_r$4 = w.Write(jsBackslash); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						$s = 16; continue;
					/* } else if (_1 === (39)) { */ case 11:
						_r$5 = w.Write(jsApos); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
						$s = 16; continue;
					/* } else if (_1 === (34)) { */ case 12:
						_r$6 = w.Write(jsQuot); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
						$s = 16; continue;
					/* } else if (_1 === (60)) { */ case 13:
						_r$7 = w.Write(jsLt); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$7;
						$s = 16; continue;
					/* } else if (_1 === (62)) { */ case 14:
						_r$8 = w.Write(jsGt); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$8;
						$s = 16; continue;
					/* } else { */ case 15:
						_r$9 = w.Write(jsLowUni); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
						_tmp = c >>> 4 << 24 >>> 24;
						_tmp$1 = (c & 15) >>> 0;
						t = _tmp;
						b$1 = _tmp$1;
						_r$10 = w.Write($subslice(hex, t, (t + 1 << 24 >>> 24))); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$10;
						_r$11 = w.Write($subslice(hex, b$1, (b$1 + 1 << 24 >>> 24))); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$11;
					/* } */ case 16:
				case 9:
				$s = 8; continue;
			/* } else { */ case 7:
				_tuple = utf8.DecodeRune($subslice(b, i));
				r = _tuple[0];
				size = _tuple[1];
				/* */ if (unicode.IsPrint(r)) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (unicode.IsPrint(r)) { */ case 25:
					_r$12 = w.Write($subslice(b, i, (i + size >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
					$s = 27; continue;
				/* } else { */ case 26:
					_r$13 = fmt.Fprintf(w, "\\u%04X", new sliceType$1([new $Int32(r)])); /* */ $s = 29; case 29: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$13;
				/* } */ case 27:
				i = i + ((size - 1 >> 0)) >> 0;
			/* } */ case 8:
			last = i + 1 >> 0;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$14 = w.Write($subslice(b, last)); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSEscape }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.b$1 = b$1; $f.c = c; $f.i = i; $f.last = last; $f.r = r; $f.size = size; $f.t = t; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.JSEscape = JSEscape;
	JSEscapeString = function(s) {
		var $ptr, _r$3, b, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; b = $f.b; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		_r$3 = strings.IndexFunc(s, jsIsSpecial); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3 < 0) { */ case 1:
			$s = -1; return s;
			return s;
		/* } */ case 2:
		b[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		$r = JSEscape(b[0], new sliceType($stringToBytes(s))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return b[0].String();
		return b[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSEscapeString }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.b = b; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.JSEscapeString = JSEscapeString;
	jsIsSpecial = function(r) {
		var $ptr, _1, r;
		_1 = r;
		if ((_1 === (92)) || (_1 === (39)) || (_1 === (34)) || (_1 === (60)) || (_1 === (62))) {
			return true;
		}
		return r < 32 || 128 <= r;
	};
	JSEscaper = function(args) {
		var $ptr, _r$3, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = evalArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = JSEscapeString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSEscaper }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.JSEscaper = JSEscaper;
	URLQueryEscaper = function(args) {
		var $ptr, _r$3, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = evalArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = url.QueryEscape(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: URLQueryEscaper }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.URLQueryEscaper = URLQueryEscaper;
	evalArgs = function(args) {
		var $ptr, _i, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, a, arg, args, i, ok, ok$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; arg = $f.arg; args = $f.args; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ok = false;
		s = "";
		if (args.$length === 1) {
			_tuple = $assertType((0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0]), $String, true);
			s = _tuple[0];
			ok = _tuple[1];
		}
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_ref = args;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$3 = reflect.ValueOf(arg); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = printableValue(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				a = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = a);
				}
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$5 = fmt.Sprint(args); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			s = _r$5;
		/* } */ case 2:
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: evalArgs }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.arg = arg; $f.args = args; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.ptr.prototype.ParseFiles = function(filenames) {
		var $ptr, _r$3, filenames, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; filenames = $f.filenames; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		_r$3 = parseFiles(t, filenames); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ParseFiles }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.filenames = filenames; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ParseFiles = function(filenames) { return this.$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var $ptr, _i, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, b, err, filename, filenames, name, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; filename = $f.filename; filenames = $f.filenames; name = $f.name; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (filenames.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (filenames.$length === 0) { */ case 1:
			_r$3 = fmt.Errorf("template: no files named in call to ParseFiles", new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$3.nil, _r$3];
			return [ptrType$3.nil, _r$3];
		/* } */ case 2:
		_ref = filenames;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$4 = ioutil.ReadFile(filename); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			b = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$3.nil, err];
				return [ptrType$3.nil, err];
			}
			s = $bytesToString(b);
			name = filepath.Base(filename);
			tmpl = ptrType$3.nil;
			if (t === ptrType$3.nil) {
				t = New(name);
			}
			if (name === t.Name()) {
				tmpl = t;
			} else {
				tmpl = t.New(name);
			}
			_r$5 = tmpl.Parse(s); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$3.nil, err];
				return [ptrType$3.nil, err];
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [t, $ifaceNil];
		return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseFiles }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.filename = filename; $f.filenames = filenames; $f.name = name; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.ptr.prototype.ParseGlob = function(pattern) {
		var $ptr, _r$3, pattern, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; pattern = $f.pattern; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		_r$3 = parseGlob(t, pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ParseGlob }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.pattern = pattern; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ParseGlob = function(pattern) { return this.$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var $ptr, _r$3, _r$4, _r$5, _tuple, err, filenames, pattern, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; err = $f.err; filenames = $f.filenames; pattern = $f.pattern; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = filepath.Glob(pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		filenames = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
			return [ptrType$3.nil, err];
		}
		/* */ if (filenames.$length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (filenames.$length === 0) { */ case 2:
			_r$4 = fmt.Errorf("template: pattern matches no files: %#q", new sliceType$1([new $String(pattern)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$3.nil, _r$4];
			return [ptrType$3.nil, _r$4];
		/* } */ case 3:
		_r$5 = parseFiles(t, filenames); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseGlob }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.err = err; $f.filenames = filenames; $f.pattern = pattern; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.ptr.prototype.Option = function(opt) {
		var $ptr, _i, _ref, opt, s, t;
		t = this;
		t.init();
		_ref = opt;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			t.setOption(s);
			_i++;
		}
		return t;
	};
	Template.prototype.Option = function(opt) { return this.$val.Option(opt); };
	Template.ptr.prototype.setOption = function(opt) {
		var $ptr, _1, _2, _3, elems, opt, t;
		t = this;
		if (opt === "") {
			$panic(new $String("empty option string"));
		}
		elems = strings.Split(opt, "=");
		_1 = elems.$length;
		if (_1 === (2)) {
			_2 = (0 >= elems.$length ? $throwRuntimeError("index out of range") : elems.$array[elems.$offset + 0]);
			if (_2 === ("missingkey")) {
				_3 = (1 >= elems.$length ? $throwRuntimeError("index out of range") : elems.$array[elems.$offset + 1]);
				if (_3 === ("invalid") || _3 === ("default")) {
					t.common.option.missingKey = 0;
					return;
				} else if (_3 === ("zero")) {
					t.common.option.missingKey = 1;
					return;
				} else if (_3 === ("error")) {
					t.common.option.missingKey = 2;
					return;
				}
			}
		}
		$panic(new $String("unrecognized option: " + opt));
	};
	Template.prototype.setOption = function(opt) { return this.$val.setOption(opt); };
	New = function(name) {
		var $ptr, name, t;
		t = new Template.ptr(name, ptrType$5.nil, ptrType$4.nil, "", "");
		t.init();
		return t;
	};
	$pkg.New = New;
	Template.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.name;
	};
	Template.prototype.Name = function() { return this.$val.Name(); };
	Template.ptr.prototype.New = function(name) {
		var $ptr, name, nt, t;
		t = this;
		t.init();
		nt = new Template.ptr(name, ptrType$5.nil, t.common, t.leftDelim, t.rightDelim);
		return nt;
	};
	Template.prototype.New = function(name) { return this.$val.New(name); };
	Template.ptr.prototype.init = function() {
		var $ptr, c, t;
		t = this;
		if (t.common === ptrType$4.nil) {
			c = new common.ptr(false, new option.ptr(0), new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false, false);
			c.tmpl = {};
			c.parseFuncs = {};
			c.execFuncs = {};
			t.common = c;
		}
	};
	Template.prototype.init = function() { return this.$val.init(); };
	Template.ptr.prototype.Clone = function() {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key, _key$1, _key$2, _key$3, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, k, k$1, k$2, nt, t, tmpl, v, v$1, v$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; k = $f.k; k$1 = $f.k$1; k$2 = $f.k$2; nt = $f.nt; t = $f.t; tmpl = $f.tmpl; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		nt = t.copy(ptrType$4.nil);
		nt.init();
		if (t.common === ptrType$4.nil) {
			$s = -1; return [nt, $ifaceNil];
			return [nt, $ifaceNil];
		}
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			if (k === t.name) {
				_key = t.name; (nt.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: nt };
				_i++;
				/* continue; */ $s = 1; continue;
			}
			tmpl = v.copy(nt.common);
			_key$1 = k; (nt.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: tmpl };
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = t.common.muFuncs.RLock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.common.muFuncs, "RUnlock"), []]);
		_ref$1 = t.common.parseFuncs;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			k$1 = _entry$1.k;
			v$1 = _entry$1.v;
			_key$2 = k$1; (nt.common.parseFuncs || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: v$1 };
			_i$1++;
		}
		_ref$2 = t.common.execFuncs;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		while (true) {
			if (!(_i$2 < _keys$2.length)) { break; }
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				continue;
			}
			k$2 = _entry$2.k;
			v$2 = _entry$2.v;
			_key$3 = k$2; (nt.common.execFuncs || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: $clone(v$2, reflect.Value) };
			_i$2++;
		}
		$s = -1; return [nt, $ifaceNil];
		return [nt, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$3.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.k = k; $f.k$1 = k$1; $f.k$2 = k$2; $f.nt = nt; $f.t = t; $f.tmpl = tmpl; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Clone = function() { return this.$val.Clone(); };
	Template.ptr.prototype.copy = function(c) {
		var $ptr, c, nt, t;
		t = this;
		nt = New(t.name);
		nt.Tree = t.Tree;
		nt.common = c;
		nt.leftDelim = t.leftDelim;
		nt.rightDelim = t.rightDelim;
		return nt;
	};
	Template.prototype.copy = function(c) { return this.$val.copy(c); };
	Template.ptr.prototype.AddParseTree = function(name, tree) {
		var $ptr, _r$3, _tuple, err, name, nt, replace, t, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; name = $f.name; nt = $f.nt; replace = $f.replace; t = $f.t; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		nt = t;
		if (!(name === t.name)) {
			nt = t.New(name);
		}
		_r$3 = t.associate(nt, tree); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		replace = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
			return [ptrType$3.nil, err];
		} else if (replace) {
			nt.Tree = tree;
		}
		$s = -1; return [nt, $ifaceNil];
		return [nt, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.AddParseTree }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.name = name; $f.nt = nt; $f.replace = replace; $f.t = t; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.$val.AddParseTree(name, tree); };
	Template.ptr.prototype.Templates = function() {
		var $ptr, _entry, _i, _keys, _ref, m, t, v;
		t = this;
		if (t.common === ptrType$4.nil) {
			return sliceType$5.nil;
		}
		m = $makeSlice(sliceType$5, 0, $keys(t.common.tmpl).length);
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			m = $append(m, v);
			_i++;
		}
		return m;
	};
	Template.prototype.Templates = function() { return this.$val.Templates(); };
	Template.ptr.prototype.Delims = function(left, right) {
		var $ptr, left, right, t;
		t = this;
		t.init();
		t.leftDelim = left;
		t.rightDelim = right;
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.$val.Delims(left, right); };
	Template.ptr.prototype.Funcs = function(funcMap) {
		var $ptr, funcMap, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; funcMap = $f.funcMap; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		t.init();
		$r = t.common.muFuncs.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.common.muFuncs, "Unlock"), []]);
		$r = addValueFuncs(t.common.execFuncs, funcMap); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		addFuncs(t.common.parseFuncs, funcMap);
		$s = -1; return t;
		return t;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$3.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Funcs }; } $f.$ptr = $ptr; $f.funcMap = funcMap; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Funcs = function(funcMap) { return this.$val.Funcs(funcMap); };
	Template.ptr.prototype.Lookup = function(name) {
		var $ptr, _entry, name, t;
		t = this;
		if (t.common === ptrType$4.nil) {
			return ptrType$3.nil;
		}
		return (_entry = t.common.tmpl[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
	};
	Template.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Template.ptr.prototype.Parse = function(text) {
		var $ptr, _entry, _i, _keys, _r$3, _r$4, _ref, _tuple, _tuple$1, err, err$1, name, t, text, tree, trees, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; name = $f.name; t = $f.t; text = $f.text; tree = $f.tree; trees = $f.trees; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		$r = t.common.muFuncs.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = parse.Parse(t.name, text, t.leftDelim, t.rightDelim, new sliceType$6([t.common.parseFuncs, builtins])); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		trees = _tuple[0];
		err = _tuple[1];
		$r = t.common.muFuncs.RUnlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
			return [ptrType$3.nil, err];
		}
		_ref = trees;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 4:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 5; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 4; continue;
			}
			name = _entry.k;
			tree = _entry.v;
			_r$4 = t.AddParseTree(name, tree); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [ptrType$3.nil, err$1];
				return [ptrType$3.nil, err$1];
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [t, $ifaceNil];
		return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.name = name; $f.t = t; $f.text = text; $f.tree = tree; $f.trees = trees; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.Parse = function(text) { return this.$val.Parse(text); };
	Template.ptr.prototype.associate = function(new$1, tree) {
		var $ptr, _entry, _key, _r$3, _v, new$1, t, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$3 = $f._r$3; _v = $f._v; new$1 = $f.new$1; t = $f.t; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!(new$1.common === t.common)) {
			$panic(new $String("internal error: associate not common"));
		}
		if (!(!((_entry = t.common.tmpl[$String.keyFor(new$1.name)], _entry !== undefined ? _entry.v : ptrType$3.nil) === ptrType$3.nil))) { _v = false; $s = 3; continue s; }
		_r$3 = parse.IsEmptyTree(tree.Root); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return [false, $ifaceNil];
			return [false, $ifaceNil];
		/* } */ case 2:
		_key = new$1.name; (t.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new$1 };
		$s = -1; return [true, $ifaceNil];
		return [true, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.associate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$3 = _r$3; $f._v = _v; $f.new$1 = new$1; $f.t = t; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.associate = function(new$1, tree) { return this.$val.associate(new$1, tree); };
	ptrType$24.methods = [{prop: "push", name: "push", pkg: "text/template", typ: $funcType([$String, reflect.Value], [], false)}, {prop: "mark", name: "mark", pkg: "text/template", typ: $funcType([], [$Int], false)}, {prop: "pop", name: "pop", pkg: "text/template", typ: $funcType([$Int], [], false)}, {prop: "setVar", name: "setVar", pkg: "text/template", typ: $funcType([$Int, reflect.Value], [], false)}, {prop: "varValue", name: "varValue", pkg: "text/template", typ: $funcType([$String], [reflect.Value], false)}, {prop: "at", name: "at", pkg: "text/template", typ: $funcType([parse.Node], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "writeError", name: "writeError", pkg: "text/template", typ: $funcType([$error], [], false)}, {prop: "walk", name: "walk", pkg: "text/template", typ: $funcType([reflect.Value, parse.Node], [], false)}, {prop: "walkIfOrWith", name: "walkIfOrWith", pkg: "text/template", typ: $funcType([parse.NodeType, reflect.Value, ptrType$13, ptrType$6, ptrType$6], [], false)}, {prop: "walkRange", name: "walkRange", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$9], [], false)}, {prop: "walkTemplate", name: "walkTemplate", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$10], [], false)}, {prop: "evalPipeline", name: "evalPipeline", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$13], [reflect.Value], false)}, {prop: "notAFunction", name: "notAFunction", pkg: "text/template", typ: $funcType([sliceType$3, reflect.Value], [], false)}, {prop: "evalCommand", name: "evalCommand", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$23, reflect.Value], [reflect.Value], false)}, {prop: "idealConstant", name: "idealConstant", pkg: "text/template", typ: $funcType([ptrType$21], [reflect.Value], false)}, {prop: "evalFieldNode", name: "evalFieldNode", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$14, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalChainNode", name: "evalChainNode", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$15, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalVariableNode", name: "evalVariableNode", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$17, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalFieldChain", name: "evalFieldChain", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Value, parse.Node, sliceType$7, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalFunction", name: "evalFunction", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$16, parse.Node, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalField", name: "evalField", pkg: "text/template", typ: $funcType([reflect.Value, $String, parse.Node, sliceType$3, reflect.Value, reflect.Value], [reflect.Value], false)}, {prop: "evalCall", name: "evalCall", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Value, parse.Node, $String, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "validateType", name: "validateType", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Type], [reflect.Value], false)}, {prop: "evalArg", name: "evalArg", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalBool", name: "evalBool", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalString", name: "evalString", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalInteger", name: "evalInteger", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalUnsignedInteger", name: "evalUnsignedInteger", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalFloat", name: "evalFloat", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalComplex", name: "evalComplex", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalEmptyInterface", name: "evalEmptyInterface", pkg: "text/template", typ: $funcType([reflect.Value, parse.Node], [reflect.Value], false)}, {prop: "printValue", name: "printValue", pkg: "text/template", typ: $funcType([parse.Node, reflect.Value], [], false)}];
	ExecError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	rvs.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	rvInts.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	rvUints.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	rvFloats.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	rvStrings.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$3.methods = [{prop: "ExecuteTemplate", name: "ExecuteTemplate", pkg: "", typ: $funcType([io.Writer, $String, $emptyInterface], [$error], false)}, {prop: "Execute", name: "Execute", pkg: "", typ: $funcType([io.Writer, $emptyInterface], [$error], false)}, {prop: "execute", name: "execute", pkg: "text/template", typ: $funcType([io.Writer, $emptyInterface], [$error], false)}, {prop: "DefinedTemplates", name: "DefinedTemplates", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ParseFiles", name: "ParseFiles", pkg: "", typ: $funcType([sliceType$7], [ptrType$3, $error], true)}, {prop: "ParseGlob", name: "ParseGlob", pkg: "", typ: $funcType([$String], [ptrType$3, $error], false)}, {prop: "Option", name: "Option", pkg: "", typ: $funcType([sliceType$7], [ptrType$3], true)}, {prop: "setOption", name: "setOption", pkg: "text/template", typ: $funcType([$String], [], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "init", name: "init", pkg: "text/template", typ: $funcType([], [], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$3, $error], false)}, {prop: "copy", name: "copy", pkg: "text/template", typ: $funcType([ptrType$4], [ptrType$3], false)}, {prop: "AddParseTree", name: "AddParseTree", pkg: "", typ: $funcType([$String, ptrType$5], [ptrType$3, $error], false)}, {prop: "Templates", name: "Templates", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Delims", name: "Delims", pkg: "", typ: $funcType([$String, $String], [ptrType$3], false)}, {prop: "Funcs", name: "Funcs", pkg: "", typ: $funcType([FuncMap], [ptrType$3], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String], [ptrType$3, $error], false)}, {prop: "associate", name: "associate", pkg: "text/template", typ: $funcType([ptrType$3, ptrType$5], [$Bool, $error], false)}];
	state.init("text/template", [{prop: "tmpl", name: "tmpl", exported: false, typ: ptrType$3, tag: ""}, {prop: "wr", name: "wr", exported: false, typ: io.Writer, tag: ""}, {prop: "node", name: "node", exported: false, typ: parse.Node, tag: ""}, {prop: "vars", name: "vars", exported: false, typ: sliceType$2, tag: ""}, {prop: "depth", name: "depth", exported: false, typ: $Int, tag: ""}]);
	variable.init("text/template", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "value", name: "value", exported: false, typ: reflect.Value, tag: ""}]);
	ExecError.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	writeError.init("", [{prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	rvs.init(reflect.Value);
	rvInts.init("text/template", [{prop: "rvs", name: "", exported: false, typ: rvs, tag: ""}]);
	rvUints.init("text/template", [{prop: "rvs", name: "", exported: false, typ: rvs, tag: ""}]);
	rvFloats.init("text/template", [{prop: "rvs", name: "", exported: false, typ: rvs, tag: ""}]);
	rvStrings.init("text/template", [{prop: "rvs", name: "", exported: false, typ: rvs, tag: ""}]);
	FuncMap.init($String, $emptyInterface);
	option.init("text/template", [{prop: "missingKey", name: "missingKey", exported: false, typ: missingKeyAction, tag: ""}]);
	common.init("text/template", [{prop: "tmpl", name: "tmpl", exported: false, typ: mapType$1, tag: ""}, {prop: "option", name: "option", exported: false, typ: option, tag: ""}, {prop: "muFuncs", name: "muFuncs", exported: false, typ: sync.RWMutex, tag: ""}, {prop: "parseFuncs", name: "parseFuncs", exported: false, typ: FuncMap, tag: ""}, {prop: "execFuncs", name: "execFuncs", exported: false, typ: mapType$2, tag: ""}]);
	Template.init("text/template", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "Tree", name: "", exported: true, typ: ptrType$5, tag: ""}, {prop: "common", name: "", exported: false, typ: ptrType$4, tag: ""}, {prop: "leftDelim", name: "leftDelim", exported: false, typ: $String, tag: ""}, {prop: "rightDelim", name: "rightDelim", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parse.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		zero = new reflect.Value.ptr(ptrType.nil, 0, 0);
		_r = reflect.TypeOf(ptrType$1.nil).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorType = _r;
		_r$1 = reflect.TypeOf(ptrType$2.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		fmtStringerType = _r$1;
		errBadComparisonType = errors.New("invalid type for comparison");
		errBadComparison = errors.New("incompatible types for comparison");
		errNoComparison = errors.New("missing argument for comparison");
		htmlQuot = new sliceType($stringToBytes("&#34;"));
		htmlApos = new sliceType($stringToBytes("&#39;"));
		htmlAmp = new sliceType($stringToBytes("&amp;"));
		htmlLt = new sliceType($stringToBytes("&lt;"));
		htmlGt = new sliceType($stringToBytes("&gt;"));
		jsLowUni = new sliceType($stringToBytes("\\u00"));
		hex = new sliceType($stringToBytes("0123456789ABCDEF"));
		jsBackslash = new sliceType($stringToBytes("\\\\"));
		jsApos = new sliceType($stringToBytes("\\'"));
		jsQuot = new sliceType($stringToBytes("\\\""));
		jsLt = new sliceType($stringToBytes("\\x3C"));
		jsGt = new sliceType($stringToBytes("\\x3E"));
		builtins = $makeMap($String.keyFor, [{ k: "and", v: new funcType(and) }, { k: "call", v: new funcType$1(call) }, { k: "html", v: new funcType$2(HTMLEscaper) }, { k: "index", v: new funcType$1(index) }, { k: "js", v: new funcType$2(JSEscaper) }, { k: "len", v: new funcType$3(length) }, { k: "not", v: new funcType$4(not) }, { k: "or", v: new funcType(or) }, { k: "print", v: new funcType$2(fmt.Sprint) }, { k: "printf", v: new funcType$5(fmt.Sprintf) }, { k: "println", v: new funcType$2(fmt.Sprintln) }, { k: "urlquery", v: new funcType$2(URLQueryEscaper) }, { k: "eq", v: new funcType$6(eq) }, { k: "ge", v: new funcType$7(ge) }, { k: "gt", v: new funcType$7(gt) }, { k: "le", v: new funcType$7(le) }, { k: "lt", v: new funcType$7(lt) }, { k: "ne", v: new funcType$7(ne) }]);
		_r$2 = createValueFuncs(builtins); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		builtinFuncs = _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["html/template"] = (function() {
	var $pkg = {}, $init, bytes, json, fmt, html, io, ioutil, filepath, reflect, strings, sync, template, parse, unicode, utf8, CSS, HTML, HTMLAttr, JS, JSStr, URL, context, state, delim, urlPart, jsCtx, element, attr, Error, ErrorCode, escaper, Template, nameSpace, FuncMap, ptrType, ptrType$1, sliceType, sliceType$1, ptrType$2, sliceType$2, funcType, arrayType, arrayType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, sliceType$3, sliceType$4, ptrType$17, mapType, sliceType$5, ptrType$18, arrayType$2, sliceType$6, ptrType$19, ptrType$20, funcType$1, mapType$1, mapType$2, mapType$3, mapType$4, mapType$5, mapType$6, ptrType$21, mapType$7, attrTypeMap, errorType, fmtStringerType, stateNames, delimNames, urlPartNames, elementNames, attrNames, cssReplacementTable, expressionBytes, mozBindingBytes, funcMap, equivEscapers, redundantFuncs, delimEnds, doctypeBytes, htmlReplacementTable, htmlNormReplacementTable, htmlNospaceReplacementTable, htmlNospaceNormReplacementTable, regexpPrecederKeywords, jsonMarshalType, jsStrReplacementTable, jsStrNormReplacementTable, jsRegexpReplacementTable, escapeOK, transitionFunc, commentStart, commentEnd, elementContentType, attrStartStates, specialTagEndMarkers, specialTagEndPrefix, tagEndSeparators, blockCommentEnd, elementNameMap, _r, _r$1, _r$2, _r$3, attrType, indirect, indirectToStringerOrError, stringify, isComment, isInTag, endsWithCSSKeyword, isCSSNmchar, decodeCSS, isHex, hexDecode, skipCSSSpace, isCSSSpace, cssEscaper, cssValueFilter, errorf, escapeTemplate, newEscaper, allIdents, ensurePipelineContains, appendCmd, indexOfStr, escFnsEq, newIdentCmd, nudge, join, contextAfterText, htmlNospaceEscaper, attrEscaper, rcdataEscaper, htmlEscaper, htmlReplacer, stripTags, htmlNameFilter, commentEscaper, nextJSCtx, indirectToJSONMarshaler, jsValEscaper, jsStrEscaper, jsRegexpEscaper, replace, isJSIdentPart, New, Must, parseFiles, parseGlob, tText, tTag, tAttrName, tAfterName, tBeforeValue, tHTMLCmt, tSpecialTagEnd, indexTagEnd, tAttr, tURL, tJS, tJSDelimited, tBlockCmt, tLineCmt, tCSS, tCSSStr, tError, eatAttrName, asciiAlpha, asciiAlphaNum, eatTagName, eatWhiteSpace, urlFilter, urlEscaper, urlNormalizer, urlProcessor;
	bytes = $packages["bytes"];
	json = $packages["encoding/json"];
	fmt = $packages["fmt"];
	html = $packages["html"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	template = $packages["text/template"];
	parse = $packages["text/template/parse"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	CSS = $pkg.CSS = $newType(8, $kindString, "template.CSS", true, "html/template", true, null);
	HTML = $pkg.HTML = $newType(8, $kindString, "template.HTML", true, "html/template", true, null);
	HTMLAttr = $pkg.HTMLAttr = $newType(8, $kindString, "template.HTMLAttr", true, "html/template", true, null);
	JS = $pkg.JS = $newType(8, $kindString, "template.JS", true, "html/template", true, null);
	JSStr = $pkg.JSStr = $newType(8, $kindString, "template.JSStr", true, "html/template", true, null);
	URL = $pkg.URL = $newType(8, $kindString, "template.URL", true, "html/template", true, null);
	context = $pkg.context = $newType(0, $kindStruct, "template.context", true, "html/template", false, function(state_, delim_, urlPart_, jsCtx_, attr_, element_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.delim = 0;
			this.urlPart = 0;
			this.jsCtx = 0;
			this.attr = 0;
			this.element = 0;
			this.err = ptrType$4.nil;
			return;
		}
		this.state = state_;
		this.delim = delim_;
		this.urlPart = urlPart_;
		this.jsCtx = jsCtx_;
		this.attr = attr_;
		this.element = element_;
		this.err = err_;
	});
	state = $pkg.state = $newType(1, $kindUint8, "template.state", true, "html/template", false, null);
	delim = $pkg.delim = $newType(1, $kindUint8, "template.delim", true, "html/template", false, null);
	urlPart = $pkg.urlPart = $newType(1, $kindUint8, "template.urlPart", true, "html/template", false, null);
	jsCtx = $pkg.jsCtx = $newType(1, $kindUint8, "template.jsCtx", true, "html/template", false, null);
	element = $pkg.element = $newType(1, $kindUint8, "template.element", true, "html/template", false, null);
	attr = $pkg.attr = $newType(1, $kindUint8, "template.attr", true, "html/template", false, null);
	Error = $pkg.Error = $newType(0, $kindStruct, "template.Error", true, "html/template", true, function(ErrorCode_, Node_, Name_, Line_, Description_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ErrorCode = 0;
			this.Node = $ifaceNil;
			this.Name = "";
			this.Line = 0;
			this.Description = "";
			return;
		}
		this.ErrorCode = ErrorCode_;
		this.Node = Node_;
		this.Name = Name_;
		this.Line = Line_;
		this.Description = Description_;
	});
	ErrorCode = $pkg.ErrorCode = $newType(4, $kindInt, "template.ErrorCode", true, "html/template", true, null);
	escaper = $pkg.escaper = $newType(0, $kindStruct, "template.escaper", true, "html/template", false, function(tmpl_, output_, derived_, called_, actionNodeEdits_, templateNodeEdits_, textNodeEdits_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tmpl = ptrType$5.nil;
			this.output = false;
			this.derived = false;
			this.called = false;
			this.actionNodeEdits = false;
			this.templateNodeEdits = false;
			this.textNodeEdits = false;
			return;
		}
		this.tmpl = tmpl_;
		this.output = output_;
		this.derived = derived_;
		this.called = called_;
		this.actionNodeEdits = actionNodeEdits_;
		this.templateNodeEdits = templateNodeEdits_;
		this.textNodeEdits = textNodeEdits_;
	});
	Template = $pkg.Template = $newType(0, $kindStruct, "template.Template", true, "html/template", true, function(escapeErr_, text_, Tree_, nameSpace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.escapeErr = $ifaceNil;
			this.text = ptrType$17.nil;
			this.Tree = ptrType$3.nil;
			this.nameSpace = ptrType$21.nil;
			return;
		}
		this.escapeErr = escapeErr_;
		this.text = text_;
		this.Tree = Tree_;
		this.nameSpace = nameSpace_;
	});
	nameSpace = $pkg.nameSpace = $newType(0, $kindStruct, "template.nameSpace", true, "html/template", false, function(mu_, set_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new sync.Mutex.ptr(0, 0);
			this.set = false;
			return;
		}
		this.mu = mu_;
		this.set = set_;
	});
	FuncMap = $pkg.FuncMap = $newType(4, $kindMap, "template.FuncMap", true, "html/template", true, null);
	ptrType = $ptrType($error);
	ptrType$1 = $ptrType(fmt.Stringer);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Uint8);
	ptrType$2 = $ptrType(json.Marshaler);
	sliceType$2 = $sliceType($emptyInterface);
	funcType = $funcType([sliceType$2], [$String], true);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$3 = $ptrType(parse.Tree);
	ptrType$4 = $ptrType(Error);
	ptrType$5 = $ptrType(Template);
	ptrType$6 = $ptrType(parse.ActionNode);
	ptrType$7 = $ptrType(parse.TemplateNode);
	ptrType$8 = $ptrType(parse.TextNode);
	ptrType$9 = $ptrType(parse.IfNode);
	ptrType$10 = $ptrType(parse.ListNode);
	ptrType$11 = $ptrType(parse.RangeNode);
	ptrType$12 = $ptrType(parse.WithNode);
	ptrType$13 = $ptrType(parse.IdentifierNode);
	ptrType$14 = $ptrType(parse.FieldNode);
	ptrType$15 = $ptrType(parse.ChainNode);
	ptrType$16 = $ptrType(parse.CommandNode);
	sliceType$3 = $sliceType(ptrType$16);
	sliceType$4 = $sliceType(parse.Node);
	ptrType$17 = $ptrType(template.Template);
	mapType = $mapType($String, $emptyInterface);
	sliceType$5 = $sliceType(mapType);
	ptrType$18 = $ptrType(parse.lexer);
	arrayType$2 = $arrayType(parse.item, 3);
	sliceType$6 = $sliceType(ptrType$5);
	ptrType$19 = $ptrType(parse.BranchNode);
	ptrType$20 = $ptrType(escaper);
	funcType$1 = $funcType([ptrType$20, context], [$Bool], false);
	mapType$1 = $mapType($String, context);
	mapType$2 = $mapType($String, ptrType$17);
	mapType$3 = $mapType($String, $Bool);
	mapType$4 = $mapType(ptrType$6, sliceType);
	mapType$5 = $mapType(ptrType$7, $String);
	mapType$6 = $mapType(ptrType$8, sliceType$1);
	ptrType$21 = $ptrType(nameSpace);
	mapType$7 = $mapType($String, ptrType$5);
	attrType = function(name) {
		var $ptr, _entry, _r$4, _tuple, colon, name, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$4 = $f._r$4; _tuple = $f._tuple; colon = $f.colon; name = $f.name; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = strings.ToLower(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		name = _r$4;
		if (strings.HasPrefix(name, "data-")) {
			name = $substring(name, 5);
		} else {
			colon = strings.IndexRune(name, 58);
			if (!((colon === -1))) {
				if ($substring(name, 0, colon) === "xmlns") {
					$s = -1; return 6;
					return 6;
				}
				name = $substring(name, (colon + 1 >> 0));
			}
		}
		_tuple = (_entry = attrTypeMap[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		t = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return t;
			return t;
		}
		if (strings.HasPrefix(name, "on")) {
			$s = -1; return 4;
			return 4;
		}
		if (strings.Contains(name, "src") || strings.Contains(name, "uri") || strings.Contains(name, "url")) {
			$s = -1; return 6;
			return 6;
		}
		$s = -1; return 0;
		return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: attrType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$4 = _r$4; $f._tuple = _tuple; $f.colon = colon; $f.name = name; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	indirect = function(a) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, a, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; a = $f.a; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(a, $ifaceNil)) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		t = reflect.TypeOf(a);
		_r$4 = t.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!((_r$4 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$4 === 22))) { */ case 1:
			$s = -1; return a;
			return a;
		/* } */ case 2:
		_r$5 = reflect.ValueOf(a); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		v = _r$5;
		/* while (true) { */ case 5:
			/* if (!((v.Kind() === 22) && !v.IsNil())) { break; } */ if(!((v.Kind() === 22) && !v.IsNil())) { $s = 6; continue; }
			_r$6 = v.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			v = _r$6;
		/* } */ $s = 5; continue; case 6:
		_r$7 = v.Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indirect }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.a = a; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	indirectToStringerOrError = function(a) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, _r$8, _v, a, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _v = $f._v; a = $f.a; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(a, $ifaceNil)) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		_r$4 = reflect.ValueOf(a); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		v = _r$4;
		/* while (true) { */ case 2:
			_r$5 = v.Type().Implements(fmtStringerType); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			if (!(!_r$5)) { _v = false; $s = 4; continue s; }
			_r$6 = v.Type().Implements(errorType); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v = !_r$6; case 4:
			/* if (!(_v && (v.Kind() === 22) && !v.IsNil())) { break; } */ if(!(_v && (v.Kind() === 22) && !v.IsNil())) { $s = 3; continue; }
			_r$7 = v.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			v = _r$7;
		/* } */ $s = 2; continue; case 3:
		_r$8 = v.Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indirectToStringerOrError }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._v = _v; $f.a = a; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringify = function(args) {
		var $ptr, _i, _r$4, _r$5, _r$6, _ref, _ref$1, arg, args, i, s, s$1, s$2, s$3, s$4, s$5, s$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; args = $f.args; i = $f.i; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; s$3 = $f.s$3; s$4 = $f.s$4; s$5 = $f.s$5; s$6 = $f.s$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (args.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (args.$length === 1) { */ case 1:
			_r$4 = indirect((0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_ref = _r$4;
			/* */ if ($assertType(_ref, $String, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, CSS, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, HTML, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, HTMLAttr, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, JS, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, JSStr, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, URL, true)[1]) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($assertType(_ref, $String, true)[1]) { */ case 4:
				s = _ref.$val;
				$s = -1; return [s, 0];
				return [s, 0];
			/* } else if ($assertType(_ref, CSS, true)[1]) { */ case 5:
				s$1 = _ref.$val;
				$s = -1; return [s$1, 1];
				return [s$1, 1];
			/* } else if ($assertType(_ref, HTML, true)[1]) { */ case 6:
				s$2 = _ref.$val;
				$s = -1; return [s$2, 2];
				return [s$2, 2];
			/* } else if ($assertType(_ref, HTMLAttr, true)[1]) { */ case 7:
				s$3 = _ref.$val;
				$s = -1; return [s$3, 3];
				return [s$3, 3];
			/* } else if ($assertType(_ref, JS, true)[1]) { */ case 8:
				s$4 = _ref.$val;
				$s = -1; return [s$4, 4];
				return [s$4, 4];
			/* } else if ($assertType(_ref, JSStr, true)[1]) { */ case 9:
				s$5 = _ref.$val;
				$s = -1; return [s$5, 5];
				return [s$5, 5];
			/* } else if ($assertType(_ref, URL, true)[1]) { */ case 10:
				s$6 = _ref.$val;
				$s = -1; return [s$6, 6];
				return [s$6, 6];
			/* } */ case 11:
		/* } */ case 2:
		_ref$1 = args;
		_i = 0;
		/* while (true) { */ case 12:
			/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 13; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
			_r$5 = indirectToStringerOrError(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = _r$5);
			_i++;
		/* } */ $s = 12; continue; case 13:
		_r$6 = fmt.Sprint(args); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return [_r$6, 0];
		return [_r$6, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringify }; } $f.$ptr = $ptr; $f._i = _i; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.args = args; $f.i = i; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.s$3 = s$3; $f.s$4 = s$4; $f.s$5 = s$5; $f.s$6 = s$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	context.ptr.prototype.String = function() {
		var $ptr, _r$4, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(this, context);
		_r$4 = fmt.Sprintf("{%v %v %v %v %v %v %v}", new sliceType$2([new state(c.state), new delim(c.delim), new urlPart(c.urlPart), new jsCtx(c.jsCtx), new attr(c.attr), new element(c.element), c.err])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: context.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	context.prototype.String = function() { return this.$val.String(); };
	context.ptr.prototype.eq = function(d) {
		var $ptr, c, d;
		d = $clone(d, context);
		c = $clone(this, context);
		return (c.state === d.state) && (c.delim === d.delim) && (c.urlPart === d.urlPart) && (c.jsCtx === d.jsCtx) && (c.attr === d.attr) && (c.element === d.element) && c.err === d.err;
	};
	context.prototype.eq = function(d) { return this.$val.eq(d); };
	context.ptr.prototype.mangle = function(templateName) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, c, s, templateName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; c = $f.c; s = $f.s; templateName = $f.templateName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(this, context);
		if (c.state === 0) {
			$s = -1; return templateName;
			return templateName;
		}
		_r$4 = new state(c.state).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		s = templateName + "$htmltemplate_" + _r$4;
		/* */ if (!((c.delim === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((c.delim === 0))) { */ case 2:
			_r$5 = new delim(c.delim).String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			s = s + ("_" + _r$5);
		/* } */ case 3:
		/* */ if (!((c.urlPart === 0))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((c.urlPart === 0))) { */ case 5:
			_r$6 = new urlPart(c.urlPart).String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			s = s + ("_" + _r$6);
		/* } */ case 6:
		/* */ if (!((c.jsCtx === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((c.jsCtx === 0))) { */ case 8:
			_r$7 = new jsCtx(c.jsCtx).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			s = s + ("_" + _r$7);
		/* } */ case 9:
		/* */ if (!((c.attr === 0))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!((c.attr === 0))) { */ case 11:
			_r$8 = new attr(c.attr).String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			s = s + ("_" + _r$8);
		/* } */ case 12:
		/* */ if (!((c.element === 0))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!((c.element === 0))) { */ case 14:
			_r$9 = new element(c.element).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			s = s + ("_" + _r$9);
		/* } */ case 15:
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: context.ptr.prototype.mangle }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.c = c; $f.s = s; $f.templateName = templateName; $f.$s = $s; $f.$r = $r; return $f;
	};
	context.prototype.mangle = function(templateName) { return this.$val.mangle(templateName); };
	state.prototype.String = function() {
		var $ptr, _r$4, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this.$val;
		if ((s >> 0) < 24) {
			$s = -1; return ((s < 0 || s >= stateNames.length) ? $throwRuntimeError("index out of range") : stateNames[s]);
			return ((s < 0 || s >= stateNames.length) ? $throwRuntimeError("index out of range") : stateNames[s]);
		}
		_r$4 = fmt.Sprintf("illegal state %d", new sliceType$2([new $Int((s >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.prototype.String }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(state).prototype.String = function() { return new state(this.$get()).String(); };
	isComment = function(s) {
		var $ptr, _1, s;
		_1 = s;
		if ((_1 === (5)) || (_1 === (13)) || (_1 === (14)) || (_1 === (21)) || (_1 === (22))) {
			return true;
		}
		return false;
	};
	isInTag = function(s) {
		var $ptr, _1, s;
		_1 = s;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (7))) {
			return true;
		}
		return false;
	};
	delim.prototype.String = function() {
		var $ptr, _r$4, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this.$val;
		if ((d >> 0) < 4) {
			$s = -1; return ((d < 0 || d >= delimNames.length) ? $throwRuntimeError("index out of range") : delimNames[d]);
			return ((d < 0 || d >= delimNames.length) ? $throwRuntimeError("index out of range") : delimNames[d]);
		}
		_r$4 = fmt.Sprintf("illegal delim %d", new sliceType$2([new $Int((d >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: delim.prototype.String }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(delim).prototype.String = function() { return new delim(this.$get()).String(); };
	urlPart.prototype.String = function() {
		var $ptr, _r$4, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this.$val;
		if ((u >> 0) < 4) {
			$s = -1; return ((u < 0 || u >= urlPartNames.length) ? $throwRuntimeError("index out of range") : urlPartNames[u]);
			return ((u < 0 || u >= urlPartNames.length) ? $throwRuntimeError("index out of range") : urlPartNames[u]);
		}
		_r$4 = fmt.Sprintf("illegal urlPart %d", new sliceType$2([new $Int((u >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: urlPart.prototype.String }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(urlPart).prototype.String = function() { return new urlPart(this.$get()).String(); };
	jsCtx.prototype.String = function() {
		var $ptr, _1, _r$4, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this.$val;
		_1 = c;
		if (_1 === (0)) {
			$s = -1; return "jsCtxRegexp";
			return "jsCtxRegexp";
		} else if (_1 === (1)) {
			$s = -1; return "jsCtxDivOp";
			return "jsCtxDivOp";
		} else if (_1 === (2)) {
			$s = -1; return "jsCtxUnknown";
			return "jsCtxUnknown";
		}
		_r$4 = fmt.Sprintf("illegal jsCtx %d", new sliceType$2([new $Int((c >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: jsCtx.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(jsCtx).prototype.String = function() { return new jsCtx(this.$get()).String(); };
	element.prototype.String = function() {
		var $ptr, _r$4, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this.$val;
		if ((e >> 0) < 5) {
			$s = -1; return ((e < 0 || e >= elementNames.length) ? $throwRuntimeError("index out of range") : elementNames[e]);
			return ((e < 0 || e >= elementNames.length) ? $throwRuntimeError("index out of range") : elementNames[e]);
		}
		_r$4 = fmt.Sprintf("illegal element %d", new sliceType$2([new $Int((e >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: element.prototype.String }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(element).prototype.String = function() { return new element(this.$get()).String(); };
	attr.prototype.String = function() {
		var $ptr, _r$4, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this.$val;
		if ((a >> 0) < 4) {
			$s = -1; return ((a < 0 || a >= attrNames.length) ? $throwRuntimeError("index out of range") : attrNames[a]);
			return ((a < 0 || a >= attrNames.length) ? $throwRuntimeError("index out of range") : attrNames[a]);
		}
		_r$4 = fmt.Sprintf("illegal attr %d", new sliceType$2([new $Int((a >> 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: attr.prototype.String }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(attr).prototype.String = function() { return new attr(this.$get()).String(); };
	endsWithCSSKeyword = function(b, kw) {
		var $ptr, _r$4, _tuple, b, i, kw, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; i = $f.i; kw = $f.kw; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = b.$length - kw.length >> 0;
		if (i < 0) {
			$s = -1; return false;
			return false;
		}
		if (!((i === 0))) {
			_tuple = utf8.DecodeLastRune($subslice(b, 0, i));
			r = _tuple[0];
			if (isCSSNmchar(r)) {
				$s = -1; return false;
				return false;
			}
		}
		_r$4 = bytes.ToLower($subslice(b, i)); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return $bytesToString(_r$4) === kw;
		return $bytesToString(_r$4) === kw;
		/* */ } return; } if ($f === undefined) { $f = { $blk: endsWithCSSKeyword }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.i = i; $f.kw = kw; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	isCSSNmchar = function(r) {
		var $ptr, r;
		return 97 <= r && r <= 122 || 65 <= r && r <= 90 || 48 <= r && r <= 57 || (r === 45) || (r === 95) || 128 <= r && r <= 55295 || 57344 <= r && r <= 65533 || 65536 <= r && r <= 1114111;
	};
	decodeCSS = function(s) {
		var $ptr, _q, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, i, i$1, j, n, n$1, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; i = $f.i; i$1 = $f.i$1; j = $f.j; n = $f.n; n$1 = $f.n$1; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = bytes.IndexByte(s, 92);
		if (i === -1) {
			$s = -1; return s;
			return s;
		}
		b = $makeSlice(sliceType$1, 0, s.$length);
		/* while (true) { */ case 1:
			/* if (!(!((s.$length === 0)))) { break; } */ if(!(!((s.$length === 0)))) { $s = 2; continue; }
			i$1 = bytes.IndexByte(s, 92);
			if (i$1 === -1) {
				i$1 = s.$length;
			}
			_tmp = $appendSlice(b, $subslice(s, 0, i$1));
			_tmp$1 = $subslice(s, i$1);
			b = _tmp;
			s = _tmp$1;
			if (s.$length < 2) {
				/* break; */ $s = 2; continue;
			}
			/* */ if (isHex((1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (isHex((1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]))) { */ case 3:
				j = 2;
				while (true) {
					if (!(j < s.$length && j < 7 && isHex(((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j])))) { break; }
					j = j + (1) >> 0;
				}
				_r$4 = hexDecode($subslice(s, 1, j)); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				r = _r$4;
				if (r > 1114111) {
					_tmp$2 = (_q = r / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					_tmp$3 = j - 1 >> 0;
					r = _tmp$2;
					j = _tmp$3;
				}
				n = utf8.EncodeRune($subslice(b, b.$length, b.$capacity), r);
				_tmp$4 = $subslice(b, 0, (b.$length + n >> 0));
				_tmp$5 = skipCSSSpace($subslice(s, j));
				b = _tmp$4;
				s = _tmp$5;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple = utf8.DecodeRune($subslice(s, 1));
				n$1 = _tuple[1];
				_tmp$6 = $appendSlice(b, $subslice(s, 1, (1 + n$1 >> 0)));
				_tmp$7 = $subslice(s, (1 + n$1 >> 0));
				b = _tmp$6;
				s = _tmp$7;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return b;
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeCSS }; } $f.$ptr = $ptr; $f._q = _q; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.n = n; $f.n$1 = n$1; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	isHex = function(c) {
		var $ptr, c;
		return 48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70;
	};
	hexDecode = function(s) {
		var $ptr, _i, _r$4, _ref, c, n, s, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$4 = $f._r$4; _ref = $f._ref; c = $f.c; n = $f.n; s = $f.s; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			n = (y = (4), y < 32 ? (n << y) : 0) >> 0;
				/* */ if (48 <= c && c <= 57) { $s = 4; continue; }
				/* */ if (97 <= c && c <= 102) { $s = 5; continue; }
				/* */ if (65 <= c && c <= 70) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (48 <= c && c <= 57) { */ case 4:
					n = n | (((c - 48 << 24 >>> 24) >> 0));
					$s = 8; continue;
				/* } else if (97 <= c && c <= 102) { */ case 5:
					n = n | ((((c - 97 << 24 >>> 24) >> 0) + 10 >> 0));
					$s = 8; continue;
				/* } else if (65 <= c && c <= 70) { */ case 6:
					n = n | ((((c - 65 << 24 >>> 24) >> 0) + 10 >> 0));
					$s = 8; continue;
				/* } else { */ case 7:
					_r$4 = fmt.Sprintf("Bad hex digit in %q", new sliceType$2([s])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$panic(new $String(_r$4));
				/* } */ case 8:
			case 3:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return n;
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: hexDecode }; } $f.$ptr = $ptr; $f._i = _i; $f._r$4 = _r$4; $f._ref = _ref; $f.c = c; $f.n = n; $f.s = s; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	skipCSSSpace = function(c) {
		var $ptr, _1, c;
		if (c.$length === 0) {
			return c;
		}
		_1 = (0 >= c.$length ? $throwRuntimeError("index out of range") : c.$array[c.$offset + 0]);
		if ((_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (32))) {
			return $subslice(c, 1);
		} else if (_1 === (13)) {
			if (c.$length >= 2 && ((1 >= c.$length ? $throwRuntimeError("index out of range") : c.$array[c.$offset + 1]) === 10)) {
				return $subslice(c, 2);
			}
			return $subslice(c, 1);
		}
		return c;
	};
	isCSSSpace = function(b) {
		var $ptr, _1, b;
		_1 = b;
		if ((_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32))) {
			return true;
		}
		return false;
	};
	cssEscaper = function(args) {
		var $ptr, _r$4, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, args, b, i, r, repl, s, w, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; args = $f.args; b = $f.b; i = $f.i; r = $f.r; repl = $f.repl; s = $f.s; w = $f.w; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		b = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		r = _tmp;
		w = _tmp$1;
		written = _tmp$2;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_tuple$1 = utf8.DecodeRuneInString($substring(s, i));
			r = _tuple$1[0];
			w = _tuple$1[1];
			repl = "";
			if ((r >> 0) < cssReplacementTable.$length && !(((r < 0 || r >= cssReplacementTable.$length) ? $throwRuntimeError("index out of range") : cssReplacementTable.$array[cssReplacementTable.$offset + r]) === "")) {
				repl = ((r < 0 || r >= cssReplacementTable.$length) ? $throwRuntimeError("index out of range") : cssReplacementTable.$array[cssReplacementTable.$offset + r]);
			} else {
				i = i + (w) >> 0;
				continue;
			}
			b.WriteString($substring(s, written, i));
			b.WriteString(repl);
			written = i + w >> 0;
			if (!(repl === "\\\\") && ((written === s.length) || isHex(s.charCodeAt(written)) || isCSSSpace(s.charCodeAt(written)))) {
				b.WriteByte(32);
			}
			i = i + (w) >> 0;
		}
		if (written === 0) {
			$s = -1; return s;
			return s;
		}
		b.WriteString($substring(s, written));
		$s = -1; return b.String();
		return b.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: cssEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.args = args; $f.b = b; $f.i = i; $f.r = r; $f.repl = repl; $f.s = s; $f.w = w; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	cssValueFilter = function(args) {
		var $ptr, _1, _i, _r$4, _r$5, _r$6, _ref, _tmp, _tmp$1, _tuple, args, b, c, i, id, s, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; args = $f.args; b = $f.b; c = $f.c; i = $f.i; id = $f.id; s = $f.s; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		if (t === 1) {
			$s = -1; return s;
			return s;
		}
		_r$5 = decodeCSS(new sliceType$1($stringToBytes(s))); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tmp = _r$5;
		_tmp$1 = $makeSlice(sliceType$1, 0, 64);
		b = _tmp;
		id = _tmp$1;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_1 = c;
			if ((_1 === (0)) || (_1 === (34)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41)) || (_1 === (47)) || (_1 === (59)) || (_1 === (64)) || (_1 === (91)) || (_1 === (92)) || (_1 === (93)) || (_1 === (96)) || (_1 === (123)) || (_1 === (125))) {
				$s = -1; return "ZgotmplZ";
				return "ZgotmplZ";
			} else if (_1 === (45)) {
				if (!((i === 0)) && ((x = i - 1 >> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x])) === 45)) {
					$s = -1; return "ZgotmplZ";
					return "ZgotmplZ";
				}
			} else if (c < 128 && isCSSNmchar((c >> 0))) {
				id = $append(id, c);
			}
			_i++;
		}
		_r$6 = bytes.ToLower(id); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		id = _r$6;
		if (bytes.Contains(id, expressionBytes) || bytes.Contains(id, mozBindingBytes)) {
			$s = -1; return "ZgotmplZ";
			return "ZgotmplZ";
		}
		$s = -1; return $bytesToString(b);
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cssValueFilter }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.args = args; $f.b = b; $f.c = c; $f.i = i; $f.id = id; $f.s = s; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.ptr.prototype.Error = function() {
		var $ptr, _r$4, _r$5, _r$6, _r$7, _tuple, e, loc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; e = $f.e; loc = $f.loc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
			/* */ if (!($interfaceIsEqual(e.Node, $ifaceNil))) { $s = 2; continue; }
			/* */ if (!((e.Line === 0))) { $s = 3; continue; }
			/* */ if (!(e.Name === "")) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(e.Node, $ifaceNil))) { */ case 2:
				_r$4 = ptrType$3.nil.ErrorContext(e.Node); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				loc = _tuple[0];
				_r$5 = fmt.Sprintf("html/template:%s: %s", new sliceType$2([new $String(loc), new $String(e.Description)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
				return _r$5;
			/* } else if (!((e.Line === 0))) { */ case 3:
				_r$6 = fmt.Sprintf("html/template:%s:%d: %s", new sliceType$2([new $String(e.Name), new $Int(e.Line), new $String(e.Description)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
				return _r$6;
			/* } else if (!(e.Name === "")) { */ case 4:
				_r$7 = fmt.Sprintf("html/template:%s: %s", new sliceType$2([new $String(e.Name), new $String(e.Description)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
				return _r$7;
			/* } */ case 5:
		case 1:
		$s = -1; return "html/template: " + e.Description;
		return "html/template: " + e.Description;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.e = e; $f.loc = loc; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	errorf = function(k, node, line, f, args) {
		var $ptr, _r$4, args, f, k, line, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; args = $f.args; f = $f.f; k = $f.k; line = $f.line; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = fmt.Sprintf(f, args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Error.ptr(k, node, "", line, _r$4);
		return new Error.ptr(k, node, "", line, _r$4);
		/* */ } return; } if ($f === undefined) { $f = { $blk: errorf }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.args = args; $f.f = f; $f.k = k; $f.line = line; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	escapeTemplate = function(tmpl, node, name) {
		var $ptr, _entry, _entry$1, _r$4, _r$5, _tmp, _tmp$1, _tuple, c, e, err, name, node, t, t$1, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; e = $f.e; err = $f.err; name = $f.name; node = $f.node; t = $f.t; t$1 = $f.t$1; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = newEscaper(tmpl);
		_r$4 = e.escapeTree(new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), node, name, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		c = $clone(_tuple[0], context);
		err = $ifaceNil;
		/* */ if (!(c.err === ptrType$4.nil)) { $s = 2; continue; }
		/* */ if (!((c.state === 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(c.err === ptrType$4.nil)) { */ case 2:
			_tmp = c.err;
			_tmp$1 = name;
			err = _tmp;
			c.err.Name = _tmp$1;
			$s = 4; continue;
		/* } else if (!((c.state === 0))) { */ case 3:
			_r$5 = fmt.Sprintf("ends in a non-text context: %v", new sliceType$2([new c.constructor.elem(c)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = new Error.ptr(4, $ifaceNil, name, 0, _r$5);
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			t = (_entry = tmpl.nameSpace.set[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$5.nil);
			if (!(t === ptrType$5.nil)) {
				t.escapeErr = err;
				t.text.Tree = ptrType$3.nil;
				t.Tree = ptrType$3.nil;
			}
			$s = -1; return err;
			return err;
		}
		$r = e.commit(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t$1 = (_entry$1 = tmpl.nameSpace.set[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$5.nil);
		if (!(t$1 === ptrType$5.nil)) {
			t$1.escapeErr = escapeOK;
			t$1.Tree = t$1.text.Tree;
		}
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escapeTemplate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.err = err; $f.name = name; $f.node = node; $f.t = t; $f.t$1 = t$1; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	newEscaper = function(t) {
		var $ptr, t;
		return new escaper.ptr(t, $makeMap($String.keyFor, []), $makeMap($String.keyFor, []), $makeMap($String.keyFor, []), $makeMap(ptrType$6.keyFor, []), $makeMap(ptrType$7.keyFor, []), $makeMap(ptrType$8.keyFor, []));
	};
	escaper.ptr.prototype.escape = function(c, n) {
		var $ptr, _r$10, _r$11, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, c, e, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; c = $f.c; e = $f.e; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; n$5 = $f.n$5; n$6 = $f.n$6; n$7 = $f.n$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		_ref = n;
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($assertType(_ref, ptrType$6, true)[1]) { */ case 1:
			n$1 = _ref.$val;
			_r$4 = e.escapeAction(c, n$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
			return _r$4;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 2:
			n$2 = _ref.$val;
			_r$5 = e.escapeBranch(c, n$2.BranchNode, "if"); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
			return _r$5;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 3:
			n$3 = _ref.$val;
			_r$6 = e.escapeList(c, n$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 4:
			n$4 = _ref.$val;
			_r$7 = e.escapeBranch(c, n$4.BranchNode, "range"); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			return _r$7;
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 5:
			n$5 = _ref.$val;
			_r$8 = e.escapeTemplate(c, n$5); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$s = -1; return _r$8;
			return _r$8;
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 6:
			n$6 = _ref.$val;
			_r$9 = e.escapeText(c, n$6); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$s = -1; return _r$9;
			return _r$9;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 7:
			n$7 = _ref.$val;
			_r$10 = e.escapeBranch(c, n$7.BranchNode, "with"); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			$s = -1; return _r$10;
			return _r$10;
		/* } */ case 8:
		_r$11 = n.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		$panic(new $String("escaping " + _r$11 + " is unimplemented"));
		$s = -1; return new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil);
		return new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escape }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.c = c; $f.e = e; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.n$5 = n$5; $f.n$6 = n$6; $f.n$7 = n$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escape = function(c, n) { return this.$val.escape(c, n); };
	escaper.ptr.prototype.escapeAction = function(c, n) {
		var $ptr, _1, _2, _3, _4, _5, _r$4, _r$5, _r$6, c, e, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; c = $f.c; e = $f.e; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		if (!((n.Pipe.Decl.$length === 0))) {
			$s = -1; return c;
			return c;
		}
		context.copy(c, nudge(c));
		s = $makeSlice(sliceType, 0, 3);
			_1 = c.state;
			/* */ if (_1 === (23)) { $s = 2; continue; }
			/* */ if ((_1 === (8)) || (_1 === (16)) || (_1 === (17)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20))) { $s = 3; continue; }
			/* */ if (_1 === (9)) { $s = 4; continue; }
			/* */ if ((_1 === (10)) || (_1 === (11))) { $s = 5; continue; }
			/* */ if (_1 === (12)) { $s = 6; continue; }
			/* */ if (_1 === (15)) { $s = 7; continue; }
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (6)) { $s = 9; continue; }
			/* */ if (_1 === (7)) { $s = 10; continue; }
			/* */ if ((_1 === (2)) || (_1 === (1))) { $s = 11; continue; }
			/* */ if (isComment(c.state)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_1 === (23)) { */ case 2:
				$s = -1; return c;
				return c;
			/* } else if ((_1 === (8)) || (_1 === (16)) || (_1 === (17)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20))) { */ case 3:
					_2 = c.urlPart;
					/* */ if (_2 === (0)) { $s = 16; continue; }
					/* */ if (_2 === (1)) { $s = 17; continue; }
					/* */ if (_2 === (2)) { $s = 18; continue; }
					/* */ if (_2 === (3)) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_2 === (0)) { */ case 16:
						s = $append(s, "_html_template_urlfilter");
						_3 = c.state;
						if ((_3 === (16)) || (_3 === (17))) {
							s = $append(s, "_html_template_cssescaper");
						} else {
							s = $append(s, "_html_template_urlnormalizer");
						}
						$s = 21; continue;
					/* } else if (_2 === (1)) { */ case 17:
						_4 = c.state;
						if ((_4 === (16)) || (_4 === (17))) {
							s = $append(s, "_html_template_cssescaper");
						} else {
							s = $append(s, "_html_template_urlnormalizer");
						}
						$s = 21; continue;
					/* } else if (_2 === (2)) { */ case 18:
						s = $append(s, "_html_template_urlescaper");
						$s = 21; continue;
					/* } else if (_2 === (3)) { */ case 19:
						_r$4 = errorf(1, n, n.Line, "%s appears in an ambiguous URL context", new sliceType$2([n])); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$s = -1; return new context.ptr(23, 0, 0, 0, 0, 0, _r$4);
						return new context.ptr(23, 0, 0, 0, 0, 0, _r$4);
					/* } else { */ case 20:
						_r$5 = new urlPart(c.urlPart).String(); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						$panic(new $String(_r$5));
					/* } */ case 21:
				case 15:
				$s = 14; continue;
			/* } else if (_1 === (9)) { */ case 4:
				s = $append(s, "_html_template_jsvalescaper");
				c.jsCtx = 1;
				$s = 14; continue;
			/* } else if ((_1 === (10)) || (_1 === (11))) { */ case 5:
				s = $append(s, "_html_template_jsstrescaper");
				$s = 14; continue;
			/* } else if (_1 === (12)) { */ case 6:
				s = $append(s, "_html_template_jsregexpescaper");
				$s = 14; continue;
			/* } else if (_1 === (15)) { */ case 7:
				s = $append(s, "_html_template_cssvaluefilter");
				$s = 14; continue;
			/* } else if (_1 === (0)) { */ case 8:
				s = $append(s, "_html_template_htmlescaper");
				$s = 14; continue;
			/* } else if (_1 === (6)) { */ case 9:
				s = $append(s, "_html_template_rcdataescaper");
				$s = 14; continue;
			/* } else if (_1 === (7)) { */ case 10:
				$s = 14; continue;
			/* } else if ((_1 === (2)) || (_1 === (1))) { */ case 11:
				c.state = 2;
				s = $append(s, "_html_template_htmlnamefilter");
				$s = 14; continue;
			/* } else if (isComment(c.state)) { */ case 12:
				s = $append(s, "_html_template_commentescaper");
				$s = 14; continue;
			/* } else { */ case 13:
				_r$6 = new state(c.state).String(); /* */ $s = 24; case 24: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String("unexpected state " + _r$6));
			/* } */ case 14:
		case 1:
		_5 = c.delim;
		if (_5 === (0)) {
		} else if (_5 === (3)) {
			s = $append(s, "_html_template_nospaceescaper");
		} else {
			s = $append(s, "_html_template_attrescaper");
		}
		$r = e.editActionNode(n, s); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return c;
		return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeAction }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.c = c; $f.e = e; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeAction = function(c, n) { return this.$val.escapeAction(c, n); };
	allIdents = function(node) {
		var $ptr, _ref, node, node$1, node$2, node$3;
		_ref = node;
		if ($assertType(_ref, ptrType$13, true)[1]) {
			node$1 = _ref.$val;
			return new sliceType([node$1.Ident]);
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			node$2 = _ref.$val;
			return node$2.Ident;
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			node$3 = _ref.$val;
			return node$3.Field;
		}
		return sliceType.nil;
	};
	ensurePipelineContains = function(p, s) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, cmd, dups, i, i$1, idNode, idNode$1, ident, ident$1, idents, n, name, name$1, newCmds, ok, p, pos, s, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tuple = $f._tuple; cmd = $f.cmd; dups = $f.dups; i = $f.i; i$1 = $f.i$1; idNode = $f.idNode; idNode$1 = $f.idNode$1; ident = $f.ident; ident$1 = $f.ident$1; idents = $f.idents; n = $f.n; name = $f.name; name$1 = $f.name$1; newCmds = $f.newCmds; ok = $f.ok; p = $f.p; pos = $f.pos; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s.$length === 0) {
			$s = -1; return;
			return;
		}
		n = p.Cmds.$length;
		idents = p.Cmds;
		i = n - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			cmd = (x = p.Cmds, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!((cmd.Args.$length === 0))) {
				_tuple = $assertType((x$1 = cmd.Args, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), ptrType$13, true);
				ok = _tuple[1];
				if (ok) {
					i = i - (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
			}
			idents = $subslice(p.Cmds, (i + 1 >> 0));
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		dups = 0;
		_ref = idents;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			idNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = allIdents((x$2 = idNode.Args, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])));
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				ident = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (escFnsEq(((dups < 0 || dups >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + dups]), ident)) {
					dups = dups + (1) >> 0;
					if (dups === s.$length) {
						$s = -1; return;
						return;
					}
				}
				_i$1++;
			}
			_i++;
		}
		newCmds = $makeSlice(sliceType$3, (n - idents.$length >> 0), ((n + s.$length >> 0) - dups >> 0));
		$copySlice(newCmds, p.Cmds);
		_ref$2 = idents;
		_i$2 = 0;
		/* while (true) { */ case 3:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 4; continue; }
			idNode$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			_r$4 = (x$3 = idNode$1.Args, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).Position(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			pos = _r$4;
			_ref$3 = allIdents((x$4 = idNode$1.Args, (0 >= x$4.$length ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])));
			_i$3 = 0;
			/* while (true) { */ case 6:
				/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 7; continue; }
				ident$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
				_r$5 = indexOfStr(ident$1, s, escFnsEq); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				i$1 = _r$5;
				if (!((i$1 === -1))) {
					_ref$4 = $subslice(s, 0, i$1);
					_i$4 = 0;
					while (true) {
						if (!(_i$4 < _ref$4.$length)) { break; }
						name = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
						newCmds = appendCmd(newCmds, newIdentCmd(name, pos));
						_i$4++;
					}
					s = $subslice(s, (i$1 + 1 >> 0));
				}
				_i$3++;
			/* } */ $s = 6; continue; case 7:
			newCmds = appendCmd(newCmds, idNode$1);
			_i$2++;
		/* } */ $s = 3; continue; case 4:
		_ref$5 = s;
		_i$5 = 0;
		while (true) {
			if (!(_i$5 < _ref$5.$length)) { break; }
			name$1 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$5]);
			newCmds = appendCmd(newCmds, newIdentCmd(name$1, new parse.Pos(p.Pos).Position()));
			_i$5++;
		}
		p.Cmds = newCmds;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ensurePipelineContains }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tuple = _tuple; $f.cmd = cmd; $f.dups = dups; $f.i = i; $f.i$1 = i$1; $f.idNode = idNode; $f.idNode$1 = idNode$1; $f.ident = ident; $f.ident$1 = ident$1; $f.idents = idents; $f.n = n; $f.name = name; $f.name$1 = name$1; $f.newCmds = newCmds; $f.ok = ok; $f.p = p; $f.pos = pos; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	appendCmd = function(cmds, cmd) {
		var $ptr, _entry, _entry$1, _tuple, _tuple$1, cmd, cmds, last, n, next, okLast, okNext, x, x$1, x$2;
		n = cmds.$length;
		if (!((n === 0))) {
			_tuple = $assertType((x = (x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= cmds.$length) ? $throwRuntimeError("index out of range") : cmds.$array[cmds.$offset + x$1])).Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType$13, true);
			last = _tuple[0];
			okLast = _tuple[1];
			_tuple$1 = $assertType((x$2 = cmd.Args, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])), ptrType$13, true);
			next = _tuple$1[0];
			okNext = _tuple$1[1];
			if (okLast && okNext && (_entry = (_entry$1 = redundantFuncs[$String.keyFor(last.Ident)], _entry$1 !== undefined ? _entry$1.v : false)[$String.keyFor(next.Ident)], _entry !== undefined ? _entry.v : false)) {
				return cmds;
			}
		}
		return $append(cmds, cmd);
	};
	indexOfStr = function(s, strs, eq) {
		var $ptr, _i, _r$4, _ref, eq, i, s, strs, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$4 = $f._r$4; _ref = $f._ref; eq = $f.eq; i = $f.i; s = $f.s; strs = $f.strs; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = strs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$4 = eq(s, t); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$4) { */ case 3:
				$s = -1; return i;
				return i;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexOfStr }; } $f.$ptr = $ptr; $f._i = _i; $f._r$4 = _r$4; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.s = s; $f.strs = strs; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	escFnsEq = function(a, b) {
		var $ptr, _entry, _entry$1, a, b, e, e$1;
		e = (_entry = equivEscapers[$String.keyFor(a)], _entry !== undefined ? _entry.v : "");
		if (!(e === "")) {
			a = e;
		}
		e$1 = (_entry$1 = equivEscapers[$String.keyFor(b)], _entry$1 !== undefined ? _entry$1.v : "");
		if (!(e$1 === "")) {
			b = e$1;
		}
		return a === b;
	};
	newIdentCmd = function(identifier, pos) {
		var $ptr, identifier, pos;
		return new parse.CommandNode.ptr(4, 0, ptrType$3.nil, new sliceType$4([parse.NewIdentifier(identifier).SetTree(ptrType$3.nil).SetPos(pos)]));
	};
	nudge = function(c) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, c, x;
		c = $clone(c, context);
		_1 = c.state;
		if (_1 === (1)) {
			c.state = 2;
		} else if (_1 === (4)) {
			_tmp = (x = c.attr, ((x < 0 || x >= attrStartStates.length) ? $throwRuntimeError("index out of range") : attrStartStates[x]));
			_tmp$1 = 3;
			_tmp$2 = 0;
			c.state = _tmp;
			c.delim = _tmp$1;
			c.attr = _tmp$2;
		} else if (_1 === (3)) {
			_tmp$3 = 2;
			_tmp$4 = 0;
			c.state = _tmp$3;
			c.attr = _tmp$4;
		}
		return c;
	};
	join = function(a, b, node, nodeName) {
		var $ptr, _r$4, _r$5, _tmp, _tmp$1, a, b, c, c$1, d, e, node, nodeName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; c = $f.c; c$1 = $f.c$1; d = $f.d; e = $f.e; node = $f.node; nodeName = $f.nodeName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = $clone(b, context);
		a = $clone(a, context);
		if (a.state === 23) {
			$s = -1; return a;
			return a;
		}
		if (b.state === 23) {
			$s = -1; return b;
			return b;
		}
		if (a.eq(b)) {
			$s = -1; return a;
			return a;
		}
		c = $clone(a, context);
		c.urlPart = b.urlPart;
		if (c.eq(b)) {
			c.urlPart = 3;
			$s = -1; return c;
			return c;
		}
		context.copy(c, a);
		c.jsCtx = b.jsCtx;
		if (c.eq(b)) {
			c.jsCtx = 2;
			$s = -1; return c;
			return c;
		}
		_tmp = $clone(nudge(a), context);
		_tmp$1 = $clone(nudge(b), context);
		c$1 = $clone(_tmp, context);
		d = $clone(_tmp$1, context);
		/* */ if (!(c$1.eq(a) && d.eq(b))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(c$1.eq(a) && d.eq(b))) { */ case 1:
			_r$4 = join(c$1, d, node, nodeName); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			e = $clone(_r$4, context);
			if (!((e.state === 23))) {
				$s = -1; return e;
				return e;
			}
		/* } */ case 2:
		_r$5 = errorf(3, node, 0, "{{%s}} branches end in different contexts: %v, %v", new sliceType$2([new $String(nodeName), new a.constructor.elem(a), new b.constructor.elem(b)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new context.ptr(23, 0, 0, 0, 0, 0, _r$5);
		return new context.ptr(23, 0, 0, 0, 0, 0, _r$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: join }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.d = d; $f.e = e; $f.node = node; $f.nodeName = nodeName; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.ptr.prototype.escapeBranch = function(c, n, nodeName) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, c, c0, c1, c1$1, e, n, nodeName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; c = $f.c; c0 = $f.c0; c1 = $f.c1; c1$1 = $f.c1$1; e = $f.e; n = $f.n; nodeName = $f.nodeName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		_r$4 = e.escapeList(c, n.List); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		c0 = $clone(_r$4, context);
		/* */ if (nodeName === "range" && !((c0.state === 23))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (nodeName === "range" && !((c0.state === 23))) { */ case 2:
			_r$5 = e.escapeListConditionally(c0, n.List, $throwNilPointerError); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			c1 = $clone(_tuple[0], context);
			_r$6 = join(c0, c1, n, nodeName); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			context.copy(c0, _r$6);
			if (c0.state === 23) {
				c0.err.Line = n.Line;
				c0.err.Description = "on range loop re-entry: " + c0.err.Description;
				$s = -1; return c0;
				return c0;
			}
		/* } */ case 3:
		_r$7 = e.escapeList(c, n.ElseList); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		c1$1 = $clone(_r$7, context);
		_r$8 = join(c0, c1$1, n, nodeName); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeBranch }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.c = c; $f.c0 = c0; $f.c1 = c1; $f.c1$1 = c1$1; $f.e = e; $f.n = n; $f.nodeName = nodeName; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeBranch = function(c, n, nodeName) { return this.$val.escapeBranch(c, n, nodeName); };
	escaper.ptr.prototype.escapeList = function(c, n) {
		var $ptr, _i, _r$4, _ref, c, e, m, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$4 = $f._r$4; _ref = $f._ref; c = $f.c; e = $f.e; m = $f.m; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		if (n === ptrType$10.nil) {
			$s = -1; return c;
			return c;
		}
		_ref = n.Nodes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			m = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$4 = e.escape(c, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			context.copy(c, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return c;
		return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeList }; } $f.$ptr = $ptr; $f._i = _i; $f._r$4 = _r$4; $f._ref = _ref; $f.c = c; $f.e = e; $f.m = m; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeList = function(c, n) { return this.$val.escapeList(c, n); };
	escaper.ptr.prototype.escapeListConditionally = function(c, n, filter) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _key, _key$1, _key$2, _key$3, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _keys$5, _keys$6, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _v, c, e, e1, filter, k, k$1, k$2, k$3, k$4, k$5, k$6, n, ok, v, v$1, v$2, v$3, v$4, v$5, v$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _keys$5 = $f._keys$5; _keys$6 = $f._keys$6; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _v = $f._v; c = $f.c; e = $f.e; e1 = $f.e1; filter = $f.filter; k = $f.k; k$1 = $f.k$1; k$2 = $f.k$2; k$3 = $f.k$3; k$4 = $f.k$4; k$5 = $f.k$5; k$6 = $f.k$6; n = $f.n; ok = $f.ok; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; v$3 = $f.v$3; v$4 = $f.v$4; v$5 = $f.v$5; v$6 = $f.v$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		e1 = newEscaper(e.tmpl);
		_ref = e.output;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = $clone(_entry.v, context);
			_key = k; (e1.output || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(v, context) };
			_i++;
		}
		_r$4 = e1.escapeList(c, n); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		context.copy(c, _r$4);
		if (!(!(filter === $throwNilPointerError))) { _v = false; $s = 2; continue s; }
		_r$5 = filter(e1, c); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = _r$5; case 2:
		ok = _v;
		/* */ if (ok) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok) { */ case 4:
			_ref$1 = e1.output;
			_i$1 = 0;
			_keys$1 = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys$1.length)) { break; }
				_entry$1 = _ref$1[_keys$1[_i$1]];
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				k$1 = _entry$1.k;
				v$1 = $clone(_entry$1.v, context);
				_key$1 = k$1; (e.output || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: $clone(v$1, context) };
				_i$1++;
			}
			_ref$2 = e1.derived;
			_i$2 = 0;
			_keys$2 = $keys(_ref$2);
			while (true) {
				if (!(_i$2 < _keys$2.length)) { break; }
				_entry$2 = _ref$2[_keys$2[_i$2]];
				if (_entry$2 === undefined) {
					_i$2++;
					continue;
				}
				k$2 = _entry$2.k;
				v$2 = _entry$2.v;
				_key$2 = k$2; (e.derived || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: v$2 };
				_i$2++;
			}
			_ref$3 = e1.called;
			_i$3 = 0;
			_keys$3 = $keys(_ref$3);
			while (true) {
				if (!(_i$3 < _keys$3.length)) { break; }
				_entry$3 = _ref$3[_keys$3[_i$3]];
				if (_entry$3 === undefined) {
					_i$3++;
					continue;
				}
				k$3 = _entry$3.k;
				v$3 = _entry$3.v;
				_key$3 = k$3; (e.called || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: v$3 };
				_i$3++;
			}
			_ref$4 = e1.actionNodeEdits;
			_i$4 = 0;
			_keys$4 = $keys(_ref$4);
			/* while (true) { */ case 6:
				/* if (!(_i$4 < _keys$4.length)) { break; } */ if(!(_i$4 < _keys$4.length)) { $s = 7; continue; }
				_entry$4 = _ref$4[_keys$4[_i$4]];
				if (_entry$4 === undefined) {
					_i$4++;
					/* continue; */ $s = 6; continue;
				}
				k$4 = _entry$4.k;
				v$4 = _entry$4.v;
				$r = e.editActionNode(k$4, v$4); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$4++;
			/* } */ $s = 6; continue; case 7:
			_ref$5 = e1.templateNodeEdits;
			_i$5 = 0;
			_keys$5 = $keys(_ref$5);
			/* while (true) { */ case 9:
				/* if (!(_i$5 < _keys$5.length)) { break; } */ if(!(_i$5 < _keys$5.length)) { $s = 10; continue; }
				_entry$5 = _ref$5[_keys$5[_i$5]];
				if (_entry$5 === undefined) {
					_i$5++;
					/* continue; */ $s = 9; continue;
				}
				k$5 = _entry$5.k;
				v$5 = _entry$5.v;
				$r = e.editTemplateNode(k$5, v$5); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$5++;
			/* } */ $s = 9; continue; case 10:
			_ref$6 = e1.textNodeEdits;
			_i$6 = 0;
			_keys$6 = $keys(_ref$6);
			/* while (true) { */ case 12:
				/* if (!(_i$6 < _keys$6.length)) { break; } */ if(!(_i$6 < _keys$6.length)) { $s = 13; continue; }
				_entry$6 = _ref$6[_keys$6[_i$6]];
				if (_entry$6 === undefined) {
					_i$6++;
					/* continue; */ $s = 12; continue;
				}
				k$6 = _entry$6.k;
				v$6 = _entry$6.v;
				$r = e.editTextNode(k$6, v$6); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$6++;
			/* } */ $s = 12; continue; case 13:
		/* } */ case 5:
		$s = -1; return [c, ok];
		return [c, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeListConditionally }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._keys$5 = _keys$5; $f._keys$6 = _keys$6; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._v = _v; $f.c = c; $f.e = e; $f.e1 = e1; $f.filter = filter; $f.k = k; $f.k$1 = k$1; $f.k$2 = k$2; $f.k$3 = k$3; $f.k$4 = k$4; $f.k$5 = k$5; $f.k$6 = k$6; $f.n = n; $f.ok = ok; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.v$3 = v$3; $f.v$4 = v$4; $f.v$5 = v$5; $f.v$6 = v$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeListConditionally = function(c, n, filter) { return this.$val.escapeListConditionally(c, n, filter); };
	escaper.ptr.prototype.escapeTemplate = function(c, n) {
		var $ptr, _r$4, _tuple, c, e, n, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tuple = $f._tuple; c = $f.c; e = $f.e; n = $f.n; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		_r$4 = e.escapeTree(c, n, n.Name, n.Line); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		c = $clone(_tuple[0], context);
		name = _tuple[1];
		/* */ if (!(name === n.Name)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(name === n.Name)) { */ case 2:
			$r = e.editTemplateNode(n, name); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return c;
		return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeTemplate }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.n = n; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeTemplate = function(c, n) { return this.$val.escapeTemplate(c, n); };
	escaper.ptr.prototype.escapeTree = function(c, node, name, line) {
		var $ptr, _entry, _entry$1, _key, _key$1, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, c, dname, dt, e, line, name, node, ok, out, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; c = $f.c; dname = $f.dname; dt = $f.dt; e = $f.e; line = $f.line; name = $f.name; node = $f.node; ok = $f.ok; out = $f.out; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		_r$4 = c.mangle(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		dname = _r$4;
		_key = dname; (e.called || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		_tuple = (_entry = e.output[$String.keyFor(dname)], _entry !== undefined ? [_entry.v, true] : [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), false]);
		out = $clone(_tuple[0], context);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return [out, dname];
			return [out, dname];
		}
		t = e.template(name);
		/* */ if (t === ptrType$17.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (t === ptrType$17.nil) { */ case 2:
			/* */ if (!((_entry$1 = e.tmpl.nameSpace.set[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$5.nil) === ptrType$5.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((_entry$1 = e.tmpl.nameSpace.set[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$5.nil) === ptrType$5.nil)) { */ case 4:
				_r$5 = errorf(5, node, line, "%q is an incomplete or empty template", new sliceType$2([new $String(name)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), dname];
				return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), dname];
			/* } */ case 5:
			_r$6 = errorf(5, node, line, "no such template %q", new sliceType$2([new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$6), dname];
			return [new context.ptr(23, 0, 0, 0, 0, 0, _r$6), dname];
		/* } */ case 3:
		/* */ if (!(dname === name)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(dname === name)) { */ case 8:
			dt = e.template(dname);
			/* */ if (dt === ptrType$17.nil) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (dt === ptrType$17.nil) { */ case 10:
				dt = template.New(dname);
				_r$7 = t.Tree.Root.CopyList(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				dt.Tree = new parse.Tree.ptr(dname, "", _r$7, "", sliceType$5.nil, ptrType$18.nil, arrayType$2.zero(), 0, sliceType.nil, false);
				_key$1 = dname; (e.derived || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: dt };
			/* } */ case 11:
			t = dt;
		/* } */ case 9:
		_r$8 = e.computeOutCtx(c, t); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return [_r$8, dname];
		return [_r$8, dname];
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeTree }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.c = c; $f.dname = dname; $f.dt = dt; $f.e = e; $f.line = line; $f.name = name; $f.node = node; $f.ok = ok; $f.out = out; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeTree = function(c, node, name, line) { return this.$val.escapeTree(c, node, name, line); };
	escaper.ptr.prototype.computeOutCtx = function(c, t) {
		var $ptr, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple, _tuple$1, c, c1, c2, e, ok, ok2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c1 = $f.c1; c2 = $f.c2; e = $f.e; ok = $f.ok; ok2 = $f.ok2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		_r$4 = e.escapeTemplateBody(c, t); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		c1 = $clone(_tuple[0], context);
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$5 = e.escapeTemplateBody(c1, t); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			c2 = $clone(_tuple$1[0], context);
			ok2 = _tuple$1[1];
			if (ok2) {
				_tmp = $clone(c2, context);
				_tmp$1 = true;
				context.copy(c1, _tmp);
				ok = _tmp$1;
			}
		/* } */ case 3:
		/* */ if (!ok && !((c1.state === 23))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!ok && !((c1.state === 23))) { */ case 5:
			_r$6 = errorf(6, t.Tree.Root, 0, "cannot compute output context for template %s", new sliceType$2([new $String(t.Name())])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return new context.ptr(23, 0, 0, 0, 0, 0, _r$6);
			return new context.ptr(23, 0, 0, 0, 0, 0, _r$6);
		/* } */ case 6:
		$s = -1; return c1;
		return c1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.computeOutCtx }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c1 = c1; $f.c2 = c2; $f.e = e; $f.ok = ok; $f.ok2 = ok2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.computeOutCtx = function(c, t) { return this.$val.computeOutCtx(c, t); };
	escaper.ptr.prototype.escapeTemplateBody = function(c, t) {
		var $ptr, _key, _r$4, c, e, filter, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$4 = $f._r$4; c = $f.c; e = $f.e; filter = $f.filter; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		t = [t];
		c[0] = $clone(c[0], context);
		e = this;
		filter = (function(c, t) { return function(e1, c1) {
			var $ptr, _entry, c1, e1;
			c1 = $clone(c1, context);
			if (c1.state === 23) {
				return false;
			}
			if (!(_entry = e1.called[$String.keyFor(t[0].Name())], _entry !== undefined ? _entry.v : false)) {
				return true;
			}
			return c[0].eq(c1);
		}; })(c, t);
		_key = t[0].Name(); (e.output || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(c[0], context) };
		_r$4 = e.escapeListConditionally(c[0], t[0].Tree.Root, filter); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeTemplateBody }; } $f.$ptr = $ptr; $f._key = _key; $f._r$4 = _r$4; $f.c = c; $f.e = e; $f.filter = filter; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeTemplateBody = function(c, t) { return this.$val.escapeTemplateBody(c, t); };
	escaper.ptr.prototype.escapeText = function(c, n) {
		var $ptr, _1, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _v, b, c, c1, cs, e, end, i, i1, j, j$1, n, nread, s, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _v = $f._v; b = $f.b; c = $f.c; c1 = $f.c1; cs = $f.cs; e = $f.e; end = $f.end; i = $f.i; i1 = $f.i1; j = $f.j; j$1 = $f.j$1; n = $f.n; nread = $f.nread; s = $f.s; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		e = this;
		_tmp = n.Text;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		s = _tmp;
		written = _tmp$1;
		i = _tmp$2;
		b = _tmp$3;
		/* while (true) { */ case 1:
			/* if (!(!((i === s.$length)))) { break; } */ if(!(!((i === s.$length)))) { $s = 2; continue; }
			_r$4 = contextAfterText(c, $subslice(s, i)); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			c1 = $clone(_tuple[0], context);
			nread = _tuple[1];
			i1 = i + nread >> 0;
			/* */ if ((c.state === 0) || (c.state === 6)) { $s = 4; continue; }
			/* */ if (isComment(c.state) && (c.delim === 0)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((c.state === 0) || (c.state === 6)) { */ case 4:
				end = i1;
				if (!((c1.state === c.state))) {
					j = end - 1 >> 0;
					while (true) {
						if (!(j >= i)) { break; }
						if (((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]) === 60) {
							end = j;
							break;
						}
						j = j - (1) >> 0;
					}
				}
				j$1 = i;
				/* while (true) { */ case 7:
					/* if (!(j$1 < end)) { break; } */ if(!(j$1 < end)) { $s = 8; continue; }
					if (!(((j$1 < 0 || j$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j$1]) === 60)) { _v = false; $s = 11; continue s; }
					_r$5 = bytes.ToUpper($subslice(s, j$1)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = bytes.HasPrefix(_r$5, doctypeBytes); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v = !_r$6; case 11:
					/* */ if (_v) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (_v) { */ case 9:
						b.Write($subslice(s, written, j$1));
						b.WriteString("&lt;");
						written = j$1 + 1 >> 0;
					/* } */ case 10:
					j$1 = j$1 + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
				$s = 6; continue;
			/* } else if (isComment(c.state) && (c.delim === 0)) { */ case 5:
				_1 = c.state;
				if (_1 === (13)) {
					if (!((bytes.IndexAny($subslice(s, written, i1), "\n\r\xE2\x80\xA8\xE2\x80\xA9") === -1))) {
						b.WriteByte(10);
					} else {
						b.WriteByte(32);
					}
				} else if (_1 === (21)) {
					b.WriteByte(32);
				}
				written = i1;
			/* } */ case 6:
			if (!((c.state === c1.state)) && isComment(c1.state) && (c1.delim === 0)) {
				cs = i1 - 2 >> 0;
				if (c1.state === 5) {
					cs = cs - (2) >> 0;
				}
				b.Write($subslice(s, written, cs));
				written = i1;
			}
			/* */ if ((i === i1) && (c.state === c1.state)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ((i === i1) && (c.state === c1.state)) { */ case 14:
				_r$7 = fmt.Sprintf("infinite loop from %v to %v on %q..%q", new sliceType$2([new c.constructor.elem(c), new c1.constructor.elem(c1), $subslice(s, 0, i), $subslice(s, i)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$panic(new $String(_r$7));
			/* } */ case 15:
			_tmp$4 = $clone(c1, context);
			_tmp$5 = i1;
			context.copy(c, _tmp$4);
			i = _tmp$5;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((written === 0)) && !((c.state === 23))) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!((written === 0)) && !((c.state === 23))) { */ case 17:
			if (!isComment(c.state) || !((c.delim === 0))) {
				b.Write($subslice(n.Text, written));
			}
			$r = e.editTextNode(n, b.Bytes()); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		$s = -1; return c;
		return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.escapeText }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._v = _v; $f.b = b; $f.c = c; $f.c1 = c1; $f.cs = cs; $f.e = e; $f.end = end; $f.i = i; $f.i1 = i1; $f.j = j; $f.j$1 = j$1; $f.n = n; $f.nread = nread; $f.s = s; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.escapeText = function(c, n) { return this.$val.escapeText(c, n); };
	contextAfterText = function(c, s) {
		var $ptr, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple, _tuple$1, c, c1, c1$1, i, i$1, i1, j, s, u, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c1 = $f.c1; c1$1 = $f.c1$1; i = $f.i; i$1 = $f.i$1; i1 = $f.i1; j = $f.j; s = $f.s; u = $f.u; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		/* */ if (c.delim === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.delim === 0) { */ case 1:
			_tuple = tSpecialTagEnd(c, s);
			c1 = $clone(_tuple[0], context);
			i = _tuple[1];
			if (i === 0) {
				$s = -1; return [c1, 0];
				return [c1, 0];
			}
			_r$4 = (x = c.state, ((x < 0 || x >= transitionFunc.length) ? $throwRuntimeError("index out of range") : transitionFunc[x]))(c, $subslice(s, 0, i)); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
			return _r$4;
		/* } */ case 2:
		i$1 = bytes.IndexAny(s, (x$1 = c.delim, ((x$1 < 0 || x$1 >= delimEnds.length) ? $throwRuntimeError("index out of range") : delimEnds[x$1])));
		if (i$1 === -1) {
			i$1 = s.$length;
		}
		/* */ if (c.delim === 3) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (c.delim === 3) { */ case 4:
			j = bytes.IndexAny($subslice(s, 0, i$1), "\"'<=`");
			/* */ if (j >= 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (j >= 0) { */ case 6:
				_r$5 = errorf(2, $ifaceNil, 0, "%q in unquoted attr: %q", new sliceType$2([$subslice(s, j, (j + 1 >> 0)), $subslice(s, 0, i$1)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), s.$length];
				return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), s.$length];
			/* } */ case 7:
		/* } */ case 5:
		/* */ if (i$1 === s.$length) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (i$1 === s.$length) { */ case 9:
			u = new sliceType$1($stringToBytes(html.UnescapeString($bytesToString(s))));
			/* while (true) { */ case 11:
				/* if (!(!((u.$length === 0)))) { break; } */ if(!(!((u.$length === 0)))) { $s = 12; continue; }
				_r$6 = (x$2 = c.state, ((x$2 < 0 || x$2 >= transitionFunc.length) ? $throwRuntimeError("index out of range") : transitionFunc[x$2]))(c, u); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				c1$1 = $clone(_tuple$1[0], context);
				i1 = _tuple$1[1];
				_tmp = $clone(c1$1, context);
				_tmp$1 = $subslice(u, i1);
				context.copy(c, _tmp);
				u = _tmp$1;
			/* } */ $s = 11; continue; case 12:
			$s = -1; return [c, s.$length];
			return [c, s.$length];
		/* } */ case 10:
		if (!((c.delim === 3))) {
			i$1 = i$1 + (1) >> 0;
		}
		$s = -1; return [new context.ptr(1, 0, 0, 0, 0, c.element, ptrType$4.nil), i$1];
		return [new context.ptr(1, 0, 0, 0, 0, c.element, ptrType$4.nil), i$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: contextAfterText }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c1 = c1; $f.c1$1 = c1$1; $f.i = i; $f.i$1 = i$1; $f.i1 = i1; $f.j = j; $f.s = s; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.ptr.prototype.editActionNode = function(n, cmds) {
		var $ptr, _entry, _key, _r$4, _tuple, cmds, e, n, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$4 = $f._r$4; _tuple = $f._tuple; cmds = $f.cmds; e = $f.e; n = $f.n; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = (_entry = e.actionNodeEdits[ptrType$6.keyFor(n)], _entry !== undefined ? [_entry.v, true] : [sliceType.nil, false]);
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$4 = fmt.Sprintf("node %s shared between templates", new sliceType$2([n])); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 2:
		_key = n; (e.actionNodeEdits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$6.keyFor(_key)] = { k: _key, v: cmds };
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.editActionNode }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$4 = _r$4; $f._tuple = _tuple; $f.cmds = cmds; $f.e = e; $f.n = n; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.editActionNode = function(n, cmds) { return this.$val.editActionNode(n, cmds); };
	escaper.ptr.prototype.editTemplateNode = function(n, callee) {
		var $ptr, _entry, _key, _r$4, _tuple, callee, e, n, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$4 = $f._r$4; _tuple = $f._tuple; callee = $f.callee; e = $f.e; n = $f.n; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = (_entry = e.templateNodeEdits[ptrType$7.keyFor(n)], _entry !== undefined ? [_entry.v, true] : ["", false]);
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$4 = fmt.Sprintf("node %s shared between templates", new sliceType$2([n])); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 2:
		_key = n; (e.templateNodeEdits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$7.keyFor(_key)] = { k: _key, v: callee };
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.editTemplateNode }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$4 = _r$4; $f._tuple = _tuple; $f.callee = callee; $f.e = e; $f.n = n; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.editTemplateNode = function(n, callee) { return this.$val.editTemplateNode(n, callee); };
	escaper.ptr.prototype.editTextNode = function(n, text) {
		var $ptr, _entry, _key, _r$4, _tuple, e, n, ok, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$4 = $f._r$4; _tuple = $f._tuple; e = $f.e; n = $f.n; ok = $f.ok; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = (_entry = e.textNodeEdits[ptrType$8.keyFor(n)], _entry !== undefined ? [_entry.v, true] : [sliceType$1.nil, false]);
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$4 = fmt.Sprintf("node %s shared between templates", new sliceType$2([n])); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 2:
		_key = n; (e.textNodeEdits || $throwRuntimeError("assignment to entry in nil map"))[ptrType$8.keyFor(_key)] = { k: _key, v: text };
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.editTextNode }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$4 = _r$4; $f._tuple = _tuple; $f.e = e; $f.n = n; $f.ok = ok; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.editTextNode = function(n, text) { return this.$val.editTextNode(n, text); };
	escaper.ptr.prototype.commit = function() {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _i, _i$1, _i$2, _i$3, _i$4, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, e, err, n, n$1, n$2, name, name$1, s, s$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; e = $f.e; err = $f.err; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; name = $f.name; name$1 = $f.name$1; s = $f.s; s$1 = $f.s$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_ref = e.output;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			_r$4 = e.template(name).Funcs(funcMap); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = e.derived;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 5; continue; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				/* continue; */ $s = 4; continue;
			}
			t = _entry$1.v;
			_r$5 = e.tmpl.text.AddParseTree(t.Name(), t.Tree); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(new $String("error adding derived template"));
			}
			_i$1++;
		/* } */ $s = 4; continue; case 5:
		_ref$2 = e.actionNodeEdits;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		/* while (true) { */ case 7:
			/* if (!(_i$2 < _keys$2.length)) { break; } */ if(!(_i$2 < _keys$2.length)) { $s = 8; continue; }
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 7; continue;
			}
			n = _entry$2.k;
			s = _entry$2.v;
			$r = ensurePipelineContains(n.Pipe, s); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$2++;
		/* } */ $s = 7; continue; case 8:
		_ref$3 = e.templateNodeEdits;
		_i$3 = 0;
		_keys$3 = $keys(_ref$3);
		while (true) {
			if (!(_i$3 < _keys$3.length)) { break; }
			_entry$3 = _ref$3[_keys$3[_i$3]];
			if (_entry$3 === undefined) {
				_i$3++;
				continue;
			}
			n$1 = _entry$3.k;
			name$1 = _entry$3.v;
			n$1.Name = name$1;
			_i$3++;
		}
		_ref$4 = e.textNodeEdits;
		_i$4 = 0;
		_keys$4 = $keys(_ref$4);
		while (true) {
			if (!(_i$4 < _keys$4.length)) { break; }
			_entry$4 = _ref$4[_keys$4[_i$4]];
			if (_entry$4 === undefined) {
				_i$4++;
				continue;
			}
			n$2 = _entry$4.k;
			s$1 = _entry$4.v;
			n$2.Text = s$1;
			_i$4++;
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escaper.ptr.prototype.commit }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.name = name; $f.name$1 = name$1; $f.s = s; $f.s$1 = s$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	escaper.prototype.commit = function() { return this.$val.commit(); };
	escaper.ptr.prototype.template = function(name) {
		var $ptr, _entry, e, name, t;
		e = this;
		t = e.tmpl.text.Lookup(name);
		if (t === ptrType$17.nil) {
			t = (_entry = e.derived[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$17.nil);
		}
		return t;
	};
	escaper.prototype.template = function(name) { return this.$val.template(name); };
	htmlNospaceEscaper = function(args) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, _tuple, args, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; args = $f.args; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		/* */ if (t === 2) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (t === 2) { */ case 2:
			_r$5 = stripTags(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = htmlReplacer(_r$5, htmlNospaceNormReplacementTable, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } */ case 3:
		_r$7 = htmlReplacer(s, htmlNospaceReplacementTable, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: htmlNospaceEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.args = args; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	attrEscaper = function(args) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, _tuple, args, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; args = $f.args; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		/* */ if (t === 2) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (t === 2) { */ case 2:
			_r$5 = stripTags(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = htmlReplacer(_r$5, htmlNormReplacementTable, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			return _r$6;
		/* } */ case 3:
		_r$7 = htmlReplacer(s, htmlReplacementTable, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: attrEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.args = args; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rcdataEscaper = function(args) {
		var $ptr, _r$4, _r$5, _r$6, _tuple, args, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; args = $f.args; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		/* */ if (t === 2) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (t === 2) { */ case 2:
			_r$5 = htmlReplacer(s, htmlNormReplacementTable, true); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
			return _r$5;
		/* } */ case 3:
		_r$6 = htmlReplacer(s, htmlReplacementTable, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rcdataEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.args = args; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	htmlEscaper = function(args) {
		var $ptr, _r$4, _r$5, _tuple, args, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; args = $f.args; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		if (t === 2) {
			$s = -1; return s;
			return s;
		}
		_r$5 = htmlReplacer(s, htmlReplacementTable, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: htmlEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.args = args; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	htmlReplacer = function(s, replacementTable, badRunes) {
		var $ptr, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, badRunes, i, r, repl, replacementTable, s, w, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; badRunes = $f.badRunes; i = $f.i; r = $f.r; repl = $f.repl; replacementTable = $f.replacementTable; s = $f.s; w = $f.w; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		written = _tmp;
		b = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		r = _tmp$2;
		w = _tmp$3;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			r = _tuple[0];
			w = _tuple[1];
			/* */ if ((r >> 0) < replacementTable.$length) { $s = 3; continue; }
			/* */ if (badRunes) { $s = 4; continue; }
			/* */ if (64976 <= r && r <= 65007 || 65520 <= r && r <= 65535) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((r >> 0) < replacementTable.$length) { */ case 3:
				repl = ((r < 0 || r >= replacementTable.$length) ? $throwRuntimeError("index out of range") : replacementTable.$array[replacementTable.$offset + r]);
				if (!((repl.length === 0))) {
					b.WriteString($substring(s, written, i));
					b.WriteString(repl);
					written = i + w >> 0;
				}
				$s = 6; continue;
			/* } else if (badRunes) { */ case 4:
				$s = 6; continue;
			/* } else if (64976 <= r && r <= 65007 || 65520 <= r && r <= 65535) { */ case 5:
				_r$4 = fmt.Fprintf(b, "%s&#x%x;", new sliceType$2([new $String($substring(s, written, i)), new $Int32(r)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				written = i + w >> 0;
			/* } */ case 6:
			i = i + (w) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (written === 0) {
			$s = -1; return s;
			return s;
		}
		b.WriteString($substring(s, written));
		$s = -1; return b.String();
		return b.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: htmlReplacer }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.badRunes = badRunes; $f.i = i; $f.r = r; $f.repl = repl; $f.replacementTable = replacementTable; $f.s = s; $f.w = w; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	stripTags = function(html$1) {
		var $ptr, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, allText, b, c, d, html$1, i, i1, i1$1, j, j1, nread, s, st, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; allText = $f.allText; b = $f.b; c = $f.c; d = $f.d; html$1 = $f.html$1; i = $f.i; i1 = $f.i1; i1$1 = $f.i1$1; j = $f.j; j1 = $f.j1; nread = $f.nread; s = $f.s; st = $f.st; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_tmp = new sliceType$1($stringToBytes(html$1));
		_tmp$1 = new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil);
		_tmp$2 = 0;
		_tmp$3 = true;
		s = _tmp;
		c = $clone(_tmp$1, context);
		i = _tmp$2;
		allText = _tmp$3;
		/* while (true) { */ case 1:
			/* if (!(!((i === s.$length)))) { break; } */ if(!(!((i === s.$length)))) { $s = 2; continue; }
			/* */ if (c.delim === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (c.delim === 0) { */ case 3:
				st = c.state;
				if (!((c.element === 0)) && !isInTag(st)) {
					st = 6;
				}
				_r$4 = ((st < 0 || st >= transitionFunc.length) ? $throwRuntimeError("index out of range") : transitionFunc[st])(c, $subslice(s, i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				d = $clone(_tuple[0], context);
				nread = _tuple[1];
				i1 = i + nread >> 0;
				if ((c.state === 0) || (c.state === 6)) {
					j = i1;
					if (!((d.state === c.state))) {
						j1 = j - 1 >> 0;
						while (true) {
							if (!(j1 >= i)) { break; }
							if (((j1 < 0 || j1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j1]) === 60) {
								j = j1;
								break;
							}
							j1 = j1 - (1) >> 0;
						}
					}
					b.Write($subslice(s, i, j));
				} else {
					allText = false;
				}
				_tmp$4 = $clone(d, context);
				_tmp$5 = i1;
				context.copy(c, _tmp$4);
				i = _tmp$5;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			i1$1 = i + bytes.IndexAny($subslice(s, i), (x = c.delim, ((x < 0 || x >= delimEnds.length) ? $throwRuntimeError("index out of range") : delimEnds[x]))) >> 0;
			if (i1$1 < i) {
				/* break; */ $s = 2; continue;
			}
			if (!((c.delim === 3))) {
				i1$1 = i1$1 + (1) >> 0;
			}
			_tmp$6 = new context.ptr(1, 0, 0, 0, 0, c.element, ptrType$4.nil);
			_tmp$7 = i1$1;
			context.copy(c, _tmp$6);
			i = _tmp$7;
		/* } */ $s = 1; continue; case 2:
		if (allText) {
			$s = -1; return html$1;
			return html$1;
		} else if ((c.state === 0) || (c.state === 6)) {
			b.Write($subslice(s, i));
		}
		$s = -1; return b.String();
		return b.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: stripTags }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.allText = allText; $f.b = b; $f.c = c; $f.d = d; $f.html$1 = html$1; $f.i = i; $f.i1 = i1; $f.i1$1 = i1$1; $f.j = j; $f.j1 = j1; $f.nread = nread; $f.s = s; $f.st = st; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	htmlNameFilter = function(args) {
		var $ptr, _i, _r$4, _r$5, _r$6, _ref, _rune, _tuple, args, r, s, t, t$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; args = $f.args; r = $f.r; s = $f.s; t = $f.t; t$1 = $f.t$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		if (t === 3) {
			$s = -1; return s;
			return s;
		}
		if (s.length === 0) {
			$s = -1; return "ZgotmplZ";
			return "ZgotmplZ";
		}
		_r$5 = strings.ToLower(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		s = _r$5;
		_r$6 = attrType(s); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		t$1 = _r$6;
		if (!((t$1 === 0))) {
			$s = -1; return "ZgotmplZ";
			return "ZgotmplZ";
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (48 <= r && r <= 57) {
			} else if (97 <= r && r <= 122) {
			} else {
				$s = -1; return "ZgotmplZ";
				return "ZgotmplZ";
			}
			_i += _rune[1];
		}
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: htmlNameFilter }; } $f.$ptr = $ptr; $f._i = _i; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.args = args; $f.r = r; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	commentEscaper = function(args) {
		var $ptr, args;
		return "";
	};
	nextJSCtx = function(s, preceding) {
		var $ptr, _1, _entry, _r$4, _tmp, _tmp$1, c, j, n, preceding, s, start, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; c = $f.c; j = $f.j; n = $f.n; preceding = $f.preceding; s = $f.s; start = $f.start; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = bytes.TrimRight(s, "\t\n\f\r \xE2\x80\xA8\xE2\x80\xA9"); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		s = _r$4;
		if (s.$length === 0) {
			$s = -1; return preceding;
			return preceding;
		}
		_tmp = (x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x]));
		_tmp$1 = s.$length;
		c = _tmp;
		n = _tmp$1;
		_1 = c;
		if ((_1 === (43)) || (_1 === (45))) {
			start = n - 1 >> 0;
			while (true) {
				if (!(start > 0 && ((x$1 = start - 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) === c))) { break; }
				start = start - (1) >> 0;
			}
			if ((((n - start >> 0)) & 1) === 1) {
				$s = -1; return 0;
				return 0;
			}
			$s = -1; return 1;
			return 1;
		} else if (_1 === (46)) {
			if (!((n === 1)) && 48 <= (x$2 = n - 2 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$2])) && (x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$3])) <= 57) {
				$s = -1; return 1;
				return 1;
			}
			$s = -1; return 0;
			return 0;
		} else if ((_1 === (44)) || (_1 === (60)) || (_1 === (62)) || (_1 === (61)) || (_1 === (42)) || (_1 === (37)) || (_1 === (38)) || (_1 === (124)) || (_1 === (94)) || (_1 === (63))) {
			$s = -1; return 0;
			return 0;
		} else if ((_1 === (33)) || (_1 === (126))) {
			$s = -1; return 0;
			return 0;
		} else if ((_1 === (40)) || (_1 === (91))) {
			$s = -1; return 0;
			return 0;
		} else if ((_1 === (58)) || (_1 === (59)) || (_1 === (123))) {
			$s = -1; return 0;
			return 0;
		} else if (_1 === (125)) {
			$s = -1; return 0;
			return 0;
		} else {
			j = n;
			while (true) {
				if (!(j > 0 && isJSIdentPart(((x$4 = j - 1 >> 0, ((x$4 < 0 || x$4 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$4])) >> 0)))) { break; }
				j = j - (1) >> 0;
			}
			if ((_entry = regexpPrecederKeywords[$String.keyFor($bytesToString($subslice(s, j)))], _entry !== undefined ? _entry.v : false)) {
				$s = -1; return 0;
				return 0;
			}
		}
		$s = -1; return 1;
		return 1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nextJSCtx }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.c = c; $f.j = j; $f.n = n; $f.preceding = preceding; $f.s = s; $f.start = start; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	indirectToJSONMarshaler = function(a) {
		var $ptr, _r$4, _r$5, _r$6, _r$7, a, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; a = $f.a; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = reflect.ValueOf(a); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		v = _r$4;
		/* while (true) { */ case 2:
			_r$5 = v.Type().Implements(jsonMarshalType); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* if (!(!_r$5 && (v.Kind() === 22) && !v.IsNil())) { break; } */ if(!(!_r$5 && (v.Kind() === 22) && !v.IsNil())) { $s = 3; continue; }
			_r$6 = v.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			v = _r$6;
		/* } */ $s = 2; continue; case 3:
		_r$7 = v.Interface(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indirectToJSONMarshaler }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.a = a; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsValEscaper = function(args) {
		var $ptr, _arg, _i, _r$10, _r$11, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, a, arg, args, b, buf, err, first, i, i$1, last, n, pad, repl, rune, t, t$1, t$2, t$3, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; arg = $f.arg; args = $f.args; b = $f.b; buf = $f.buf; err = $f.err; first = $f.first; i = $f.i; i$1 = $f.i$1; last = $f.last; n = $f.n; pad = $f.pad; repl = $f.repl; rune = $f.rune; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = $ifaceNil;
		/* */ if (args.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (args.$length === 1) { */ case 1:
			_r$4 = indirectToJSONMarshaler((0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			a = _r$4;
			_ref = a;
			/* */ if ($assertType(_ref, JS, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, JSStr, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, json.Marshaler, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, fmt.Stringer, true)[1]) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($assertType(_ref, JS, true)[1]) { */ case 5:
				t = _ref.$val;
				$s = -1; return t;
				return t;
			/* } else if ($assertType(_ref, JSStr, true)[1]) { */ case 6:
				t$1 = _ref.$val;
				$s = -1; return "\"" + t$1 + "\"";
				return "\"" + t$1 + "\"";
			/* } else if ($assertType(_ref, json.Marshaler, true)[1]) { */ case 7:
				t$2 = _ref;
				$s = 9; continue;
			/* } else if ($assertType(_ref, fmt.Stringer, true)[1]) { */ case 8:
				t$3 = _ref;
				_r$5 = t$3.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				a = new $String(_r$5);
			/* } */ case 9:
			$s = 3; continue;
		/* } else { */ case 2:
			_ref$1 = args;
			_i = 0;
			/* while (true) { */ case 11:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 12; continue; }
				i = _i;
				arg = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_r$6 = indirectToJSONMarshaler(arg); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = _r$6);
				_i++;
			/* } */ $s = 11; continue; case 12:
			_r$7 = fmt.Sprint(args); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			a = new $String(_r$7);
		/* } */ case 3:
		_r$8 = json.Marshal(a); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple = _r$8;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 16:
			_r$9 = err.Error(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = strings.Replace(_r$9, "*/", "* /", -1); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg = new $String(_r$10);
			_r$11 = fmt.Sprintf(" /* %s */null ", new sliceType$2([_arg])); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			$s = -1; return _r$11;
			return _r$11;
		/* } */ case 17:
		if (b.$length === 0) {
			$s = -1; return " null ";
			return " null ";
		}
		_tuple$1 = utf8.DecodeRune(b);
		first = _tuple$1[0];
		_tuple$2 = utf8.DecodeLastRune(b);
		last = _tuple$2[0];
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		pad = isJSIdentPart(first) || isJSIdentPart(last);
		if (pad) {
			buf.WriteByte(32);
		}
		written = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < b.$length)) { break; }
			_tuple$3 = utf8.DecodeRune($subslice(b, i$1));
			rune = _tuple$3[0];
			n = _tuple$3[1];
			repl = "";
			if (rune === 8232) {
				repl = "\\u2028";
			} else if (rune === 8233) {
				repl = "\\u2029";
			}
			if (!(repl === "")) {
				buf.Write($subslice(b, written, i$1));
				buf.WriteString(repl);
				written = i$1 + n >> 0;
			}
			i$1 = i$1 + (n) >> 0;
		}
		if (!((buf.Len() === 0))) {
			buf.Write($subslice(b, written));
			if (pad) {
				buf.WriteByte(32);
			}
			b = buf.Bytes();
		}
		$s = -1; return $bytesToString(b);
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: jsValEscaper }; } $f.$ptr = $ptr; $f._arg = _arg; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.arg = arg; $f.args = args; $f.b = b; $f.buf = buf; $f.err = err; $f.first = first; $f.i = i; $f.i$1 = i$1; $f.last = last; $f.n = n; $f.pad = pad; $f.repl = repl; $f.rune = rune; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsStrEscaper = function(args) {
		var $ptr, _r$4, _tuple, args, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tuple = $f._tuple; args = $f.args; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		if (t === 5) {
			$s = -1; return replace(s, jsStrNormReplacementTable);
			return replace(s, jsStrNormReplacementTable);
		}
		$s = -1; return replace(s, jsStrReplacementTable);
		return replace(s, jsStrReplacementTable);
		/* */ } return; } if ($f === undefined) { $f = { $blk: jsStrEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tuple = _tuple; $f.args = args; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsRegexpEscaper = function(args) {
		var $ptr, _r$4, _tuple, args, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tuple = $f._tuple; args = $f.args; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		s = replace(s, jsRegexpReplacementTable);
		if (s === "") {
			$s = -1; return "(?:)";
			return "(?:)";
		}
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: jsRegexpEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tuple = _tuple; $f.args = args; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	replace = function(s, replacementTable) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tuple, b, i, r, repl, replacementTable, s, w, written;
		b = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		r = _tmp;
		w = _tmp$1;
		written = _tmp$2;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			r = _tuple[0];
			w = _tuple[1];
			repl = "";
			if ((r >> 0) < replacementTable.$length && !(((r < 0 || r >= replacementTable.$length) ? $throwRuntimeError("index out of range") : replacementTable.$array[replacementTable.$offset + r]) === "")) {
				repl = ((r < 0 || r >= replacementTable.$length) ? $throwRuntimeError("index out of range") : replacementTable.$array[replacementTable.$offset + r]);
			} else if ((r === 8232)) {
				repl = "\\u2028";
			} else if ((r === 8233)) {
				repl = "\\u2029";
			} else {
				i = i + (w) >> 0;
				continue;
			}
			b.WriteString($substring(s, written, i));
			b.WriteString(repl);
			written = i + w >> 0;
			i = i + (w) >> 0;
		}
		if (written === 0) {
			return s;
		}
		b.WriteString($substring(s, written));
		return b.String();
	};
	isJSIdentPart = function(r) {
		var $ptr, r;
		if ((r === 36)) {
			return true;
		} else if (48 <= r && r <= 57) {
			return true;
		} else if (65 <= r && r <= 90) {
			return true;
		} else if ((r === 95)) {
			return true;
		} else if (97 <= r && r <= 122) {
			return true;
		}
		return false;
	};
	Template.ptr.prototype.Templates = function() {
		var $ptr, _entry, _i, _keys, _ref, m, ns, t, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; m = $f.m; ns = $f.ns; t = $f.t; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		ns = t.nameSpace;
		$r = ns.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(ns.mu, "Unlock"), []]);
		m = $makeSlice(sliceType$6, 0, $keys(ns.set).length);
		_ref = ns.set;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			m = $append(m, v);
			_i++;
		}
		$s = -1; return m;
		return m;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return sliceType$6.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Templates }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.m = m; $f.ns = ns; $f.t = t; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Templates = function() { return this.$val.Templates(); };
	Template.ptr.prototype.Option = function(opt) {
		var $ptr, opt, t;
		t = this;
		t.text.Option(opt);
		return t;
	};
	Template.prototype.Option = function(opt) { return this.$val.Option(opt); };
	Template.ptr.prototype.escape = function() {
		var $ptr, _arg, _arg$1, _r$4, _r$5, _r$6, err, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; err = $f.err; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		/* */ if ($interfaceIsEqual(t.escapeErr, $ifaceNil)) { $s = 2; continue; }
		/* */ if (!($interfaceIsEqual(t.escapeErr, escapeOK))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(t.escapeErr, $ifaceNil)) { */ case 2:
			/* */ if (t.Tree === ptrType$3.nil) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (t.Tree === ptrType$3.nil) { */ case 5:
				_arg = new $String(t.Name());
				_r$4 = t.DefinedTemplates(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r$4);
				_r$5 = fmt.Errorf("template: %q is an incomplete or empty template%s", new sliceType$2([_arg, _arg$1])); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
				return _r$5;
			/* } */ case 6:
			_r$6 = escapeTemplate(t, t.text.Tree.Root, t.Name()); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			$s = 4; continue;
		/* } else if (!($interfaceIsEqual(t.escapeErr, escapeOK))) { */ case 3:
			$s = -1; return t.escapeErr;
			return t.escapeErr;
		/* } */ case 4:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.escape }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.err = err; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.escape = function() { return this.$val.escape(); };
	Template.ptr.prototype.Execute = function(wr, data) {
		var $ptr, _r$4, _r$5, data, err, t, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; data = $f.data; err = $f.err; t = $f.t; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$4 = t.escape(); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		err = _r$4;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$5 = t.text.Execute(wr, data); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Execute }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.data = data; $f.err = err; $f.t = t; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.Execute = function(wr, data) { return this.$val.Execute(wr, data); };
	Template.ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var $ptr, _r$4, _r$5, _tuple, data, err, name, t, tmpl, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; data = $f.data; err = $f.err; name = $f.name; t = $f.t; tmpl = $f.tmpl; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$4 = t.lookupAndEscapeTemplate(name); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		tmpl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$5 = tmpl.text.Execute(wr, data); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ExecuteTemplate }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.name = name; $f.t = t; $f.tmpl = tmpl; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.$val.ExecuteTemplate(wr, name, data); };
	Template.ptr.prototype.lookupAndEscapeTemplate = function(name) {
		var $ptr, _entry, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err, name, t, tmpl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; err = $f.err; name = $f.name; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		tmpl = ptrType$5.nil;
		err = $ifaceNil;
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		tmpl = (_entry = t.nameSpace.set[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$5.nil);
		/* */ if (tmpl === ptrType$5.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (tmpl === ptrType$5.nil) { */ case 2:
			_tmp = ptrType$5.nil;
			_r$4 = fmt.Errorf("html/template: %q is undefined", new sliceType$2([new $String(name)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tmp$1 = _r$4;
			tmpl = _tmp;
			err = _tmp$1;
			$s = -1; return [tmpl, err];
			return [tmpl, err];
		/* } */ case 3:
		if (!($interfaceIsEqual(tmpl.escapeErr, $ifaceNil)) && !($interfaceIsEqual(tmpl.escapeErr, escapeOK))) {
			_tmp$2 = ptrType$5.nil;
			_tmp$3 = tmpl.escapeErr;
			tmpl = _tmp$2;
			err = _tmp$3;
			$s = -1; return [tmpl, err];
			return [tmpl, err];
		}
		/* */ if (tmpl.text.Tree === ptrType$3.nil || tmpl.text.Tree.Root === ptrType$10.nil) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (tmpl.text.Tree === ptrType$3.nil || tmpl.text.Tree.Root === ptrType$10.nil) { */ case 5:
			_tmp$4 = ptrType$5.nil;
			_r$5 = fmt.Errorf("html/template: %q is an incomplete template", new sliceType$2([new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tmp$5 = _r$5;
			tmpl = _tmp$4;
			err = _tmp$5;
			$s = -1; return [tmpl, err];
			return [tmpl, err];
		/* } */ case 6:
		if (t.text.Lookup(name) === ptrType$17.nil) {
			$panic(new $String("html/template internal error: template escaping out of sync"));
		}
		/* */ if ($interfaceIsEqual(tmpl.escapeErr, $ifaceNil)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($interfaceIsEqual(tmpl.escapeErr, $ifaceNil)) { */ case 8:
			_r$6 = escapeTemplate(tmpl, tmpl.text.Tree.Root, name); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
		/* } */ case 9:
		_tmp$6 = tmpl;
		_tmp$7 = err;
		tmpl = _tmp$6;
		err = _tmp$7;
		$s = -1; return [tmpl, err];
		return [tmpl, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tmpl, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.lookupAndEscapeTemplate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.err = err; $f.name = name; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.lookupAndEscapeTemplate = function(name) { return this.$val.lookupAndEscapeTemplate(name); };
	Template.ptr.prototype.DefinedTemplates = function() {
		var $ptr, _r$4, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$4 = t.text.DefinedTemplates(); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.DefinedTemplates }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.DefinedTemplates = function() { return this.$val.DefinedTemplates(); };
	Template.ptr.prototype.Parse = function(src) {
		var $ptr, _entry, _i, _r$4, _r$5, _ref, _tuple, err, name, ret, src, t, tmpl, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; name = $f.name; ret = $f.ret; src = $f.src; t = $f.t; tmpl = $f.tmpl; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t.escapeErr = $ifaceNil;
		$r = t.nameSpace.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = t.text.Parse(src); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		ret = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$5.nil, err];
			return [ptrType$5.nil, err];
		}
		$r = t.nameSpace.mu.Lock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		_ref = ret.Templates();
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			name = v.Name();
			tmpl = (_entry = t.nameSpace.set[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$5.nil);
			/* */ if (tmpl === ptrType$5.nil) { $s = 7; continue; }
			/* */ if (!($interfaceIsEqual(tmpl.escapeErr, $ifaceNil))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (tmpl === ptrType$5.nil) { */ case 7:
				tmpl = t.new$(name);
				$s = 9; continue;
			/* } else if (!($interfaceIsEqual(tmpl.escapeErr, $ifaceNil))) { */ case 8:
				_r$5 = fmt.Errorf("html/template: cannot redefine %q after it has executed", new sliceType$2([new $String(name)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$5.nil, _r$5];
				return [ptrType$5.nil, _r$5];
			/* } */ case 9:
			tmpl.escapeErr = $ifaceNil;
			tmpl.text = v;
			tmpl.Tree = v.Tree;
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return [t, $ifaceNil];
		return [t, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$5.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.name = name; $f.ret = ret; $f.src = src; $f.t = t; $f.tmpl = tmpl; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Parse = function(src) { return this.$val.Parse(src); };
	Template.ptr.prototype.AddParseTree = function(name, tree) {
		var $ptr, _key, _r$4, _r$5, _tuple, err, name, ret, t, text, tree, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; err = $f.err; name = $f.name; ret = $f.ret; t = $f.t; text = $f.text; tree = $f.tree; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		/* */ if (!($interfaceIsEqual(t.escapeErr, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(t.escapeErr, $ifaceNil))) { */ case 2:
			_r$4 = fmt.Errorf("html/template: cannot AddParseTree to %q after it has executed", new sliceType$2([new $String(t.Name())])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$5.nil, _r$4];
			return [ptrType$5.nil, _r$4];
		/* } */ case 3:
		_r$5 = t.text.AddParseTree(name, tree); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple = _r$5;
		text = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$5.nil, err];
			return [ptrType$5.nil, err];
		}
		ret = new Template.ptr($ifaceNil, text, text.Tree, t.nameSpace);
		_key = name; (t.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: ret };
		$s = -1; return [ret, $ifaceNil];
		return [ret, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$5.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.AddParseTree }; } $f.$ptr = $ptr; $f._key = _key; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.err = err; $f.name = name; $f.ret = ret; $f.t = t; $f.text = text; $f.tree = tree; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.$val.AddParseTree(name, tree); };
	Template.ptr.prototype.Clone = function() {
		var $ptr, _entry, _i, _key, _key$1, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, err, name, ret, src, t, textClone, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; name = $f.name; ret = $f.ret; src = $f.src; t = $f.t; textClone = $f.textClone; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		/* */ if (!($interfaceIsEqual(t.escapeErr, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(t.escapeErr, $ifaceNil))) { */ case 2:
			_r$4 = fmt.Errorf("html/template: cannot Clone %q after it has executed", new sliceType$2([new $String(t.Name())])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$5.nil, _r$4];
			return [ptrType$5.nil, _r$4];
		/* } */ case 3:
		_r$5 = t.text.Clone(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple = _r$5;
		textClone = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$5.nil, err];
			return [ptrType$5.nil, err];
		}
		ret = new Template.ptr($ifaceNil, textClone, textClone.Tree, new nameSpace.ptr(new sync.Mutex.ptr(0, 0), {}));
		_key = ret.Name(); (ret.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: ret };
		_ref = textClone.Templates();
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			name = x.Name();
			src = (_entry = t.nameSpace.set[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$5.nil);
			/* */ if (src === ptrType$5.nil || !($interfaceIsEqual(src.escapeErr, $ifaceNil))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (src === ptrType$5.nil || !($interfaceIsEqual(src.escapeErr, $ifaceNil))) { */ case 8:
				_r$6 = fmt.Errorf("html/template: cannot Clone %q after it has executed", new sliceType$2([new $String(t.Name())])); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$5.nil, _r$6];
				return [ptrType$5.nil, _r$6];
			/* } */ case 9:
			_r$7 = x.Tree.Copy(); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			x.Tree = _r$7;
			_key$1 = name; (ret.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: new Template.ptr($ifaceNil, x, x.Tree, ret.nameSpace) };
			_i++;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return [ret, $ifaceNil];
		return [ret, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$5.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.name = name; $f.ret = ret; $f.src = src; $f.t = t; $f.textClone = textClone; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Clone = function() { return this.$val.Clone(); };
	New = function(name) {
		var $ptr, _key, name, tmpl;
		tmpl = new Template.ptr($ifaceNil, template.New(name), ptrType$3.nil, new nameSpace.ptr(new sync.Mutex.ptr(0, 0), {}));
		_key = name; (tmpl.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: tmpl };
		return tmpl;
	};
	$pkg.New = New;
	Template.ptr.prototype.New = function(name) {
		var $ptr, name, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; name = $f.name; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		$s = -1; return t.new$(name);
		return t.new$(name);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$5.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.New }; } $f.$ptr = $ptr; $f.name = name; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.New = function(name) { return this.$val.New(name); };
	Template.ptr.prototype.new$ = function(name) {
		var $ptr, _key, name, t, tmpl;
		t = this;
		tmpl = new Template.ptr($ifaceNil, t.text.New(name), ptrType$3.nil, t.nameSpace);
		_key = name; (tmpl.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: tmpl };
		return tmpl;
	};
	Template.prototype.new$ = function(name) { return this.$val.new$(name); };
	Template.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.text.Name();
	};
	Template.prototype.Name = function() { return this.$val.Name(); };
	Template.ptr.prototype.Funcs = function(funcMap$1) {
		var $ptr, _r$4, funcMap$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; funcMap$1 = $f.funcMap$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$4 = t.text.Funcs(funcMap$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		$s = -1; return t;
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Funcs }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.funcMap$1 = funcMap$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.Funcs = function(funcMap$1) { return this.$val.Funcs(funcMap$1); };
	Template.ptr.prototype.Delims = function(left, right) {
		var $ptr, left, right, t;
		t = this;
		t.text.Delims(left, right);
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.$val.Delims(left, right); };
	Template.ptr.prototype.Lookup = function(name) {
		var $ptr, _entry, name, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; name = $f.name; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		$r = t.nameSpace.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		$s = -1; return (_entry = t.nameSpace.set[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$5.nil);
		return (_entry = t.nameSpace.set[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$5.nil);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$5.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Lookup }; } $f.$ptr = $ptr; $f._entry = _entry; $f.name = name; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Must = function(t, err) {
		var $ptr, err, t;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		return t;
	};
	$pkg.Must = Must;
	Template.ptr.prototype.ParseFiles = function(filenames) {
		var $ptr, _r$4, filenames, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; filenames = $f.filenames; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$4 = parseFiles(t, filenames); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ParseFiles }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.filenames = filenames; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ParseFiles = function(filenames) { return this.$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var $ptr, _i, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, b, err, filename, filenames, name, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; filename = $f.filename; filenames = $f.filenames; name = $f.name; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (filenames.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (filenames.$length === 0) { */ case 1:
			_r$4 = fmt.Errorf("html/template: no files named in call to ParseFiles", new sliceType$2([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$5.nil, _r$4];
			return [ptrType$5.nil, _r$4];
		/* } */ case 2:
		_ref = filenames;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$5 = ioutil.ReadFile(filename); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			b = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$5.nil, err];
				return [ptrType$5.nil, err];
			}
			s = $bytesToString(b);
			name = filepath.Base(filename);
			tmpl = ptrType$5.nil;
			if (t === ptrType$5.nil) {
				t = New(name);
			}
			/* */ if (name === t.Name()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (name === t.Name()) { */ case 7:
				tmpl = t;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$6 = t.New(name); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				tmpl = _r$6;
			/* } */ case 9:
			_r$7 = tmpl.Parse(s); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$1 = _r$7;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$5.nil, err];
				return [ptrType$5.nil, err];
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return [t, $ifaceNil];
		return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseFiles }; } $f.$ptr = $ptr; $f._i = _i; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.filename = filename; $f.filenames = filenames; $f.name = name; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.ptr.prototype.ParseGlob = function(pattern) {
		var $ptr, _r$4, pattern, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; pattern = $f.pattern; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$4 = parseGlob(t, pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ParseGlob }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.pattern = pattern; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ParseGlob = function(pattern) { return this.$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var $ptr, _r$4, _r$5, _r$6, _tuple, err, filenames, pattern, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; filenames = $f.filenames; pattern = $f.pattern; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = filepath.Glob(pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		filenames = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$5.nil, err];
			return [ptrType$5.nil, err];
		}
		/* */ if (filenames.$length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (filenames.$length === 0) { */ case 2:
			_r$5 = fmt.Errorf("html/template: pattern matches no files: %#q", new sliceType$2([new $String(pattern)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$5.nil, _r$5];
			return [ptrType$5.nil, _r$5];
		/* } */ case 3:
		_r$6 = parseFiles(t, filenames); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseGlob }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.filenames = filenames; $f.pattern = pattern; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	tText = function(c, s) {
		var $ptr, _r$4, _tmp, _tmp$1, _tuple, c, e, end, i, j, k, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; e = $f.e; end = $f.end; i = $f.i; j = $f.j; k = $f.k; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		k = 0;
		/* while (true) { */ case 1:
			i = k + bytes.IndexByte($subslice(s, k), 60) >> 0;
			if (i < k || ((i + 1 >> 0) === s.$length)) {
				$s = -1; return [c, s.$length];
				return [c, s.$length];
			} else if ((i + 4 >> 0) <= s.$length && bytes.Equal(commentStart, $subslice(s, i, (i + 4 >> 0)))) {
				$s = -1; return [new context.ptr(5, 0, 0, 0, 0, 0, ptrType$4.nil), i + 4 >> 0];
				return [new context.ptr(5, 0, 0, 0, 0, 0, ptrType$4.nil), i + 4 >> 0];
			}
			i = i + (1) >> 0;
			end = false;
			if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 47) {
				if ((i + 1 >> 0) === s.$length) {
					$s = -1; return [c, s.$length];
					return [c, s.$length];
				}
				_tmp = true;
				_tmp$1 = i + 1 >> 0;
				end = _tmp;
				i = _tmp$1;
			}
			_r$4 = eatTagName(s, i); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			j = _tuple[0];
			e = _tuple[1];
			if (!((j === i))) {
				if (end) {
					e = 0;
				}
				$s = -1; return [new context.ptr(1, 0, 0, 0, 0, e, ptrType$4.nil), j];
				return [new context.ptr(1, 0, 0, 0, 0, e, ptrType$4.nil), j];
			}
			k = j;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), 0];
		return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tText }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.e = e; $f.end = end; $f.i = i; $f.j = j; $f.k = k; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	tTag = function(c, s) {
		var $ptr, _1, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple, attr$1, c, err, i, j, s, state$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; attr$1 = $f.attr$1; c = $f.c; err = $f.err; i = $f.i; j = $f.j; s = $f.s; state$1 = $f.state$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		i = eatWhiteSpace(s, 0);
		if (i === s.$length) {
			$s = -1; return [c, s.$length];
			return [c, s.$length];
		}
		if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 62) {
			$s = -1; return [new context.ptr((x = c.element, ((x < 0 || x >= elementContentType.length) ? $throwRuntimeError("index out of range") : elementContentType[x])), 0, 0, 0, 0, c.element, ptrType$4.nil), i + 1 >> 0];
			return [new context.ptr((x = c.element, ((x < 0 || x >= elementContentType.length) ? $throwRuntimeError("index out of range") : elementContentType[x])), 0, 0, 0, 0, c.element, ptrType$4.nil), i + 1 >> 0];
		}
		_r$4 = eatAttrName(s, i); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		j = _tuple[0];
		err = _tuple[1];
		if (!(err === ptrType$4.nil)) {
			$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, err), s.$length];
			return [new context.ptr(23, 0, 0, 0, 0, 0, err), s.$length];
		}
		_tmp = 1;
		_tmp$1 = 0;
		state$1 = _tmp;
		attr$1 = _tmp$1;
		/* */ if (i === j) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (i === j) { */ case 2:
			_r$5 = errorf(2, $ifaceNil, 0, "expected space, attr name, or end of tag, but got %q", new sliceType$2([$subslice(s, i)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), s.$length];
			return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), s.$length];
		/* } */ case 3:
			_r$6 = attrType($bytesToString($subslice(s, i, j))); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_1 = _r$6;
			if (_1 === (6)) {
				attr$1 = 3;
			} else if (_1 === (1)) {
				attr$1 = 2;
			} else if (_1 === (4)) {
				attr$1 = 1;
			}
		case 5:
		if (j === s.$length) {
			state$1 = 2;
		} else {
			state$1 = 3;
		}
		$s = -1; return [new context.ptr(state$1, 0, 0, 0, attr$1, c.element, ptrType$4.nil), j];
		return [new context.ptr(state$1, 0, 0, 0, attr$1, c.element, ptrType$4.nil), j];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tTag }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.attr$1 = attr$1; $f.c = c; $f.err = err; $f.i = i; $f.j = j; $f.s = s; $f.state$1 = state$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	tAttrName = function(c, s) {
		var $ptr, _r$4, _tuple, c, err, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _tuple = $f._tuple; c = $f.c; err = $f.err; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		_r$4 = eatAttrName(s, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		i = _tuple[0];
		err = _tuple[1];
		if (!(err === ptrType$4.nil)) {
			$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, err), s.$length];
			return [new context.ptr(23, 0, 0, 0, 0, 0, err), s.$length];
		} else if (!((i === s.$length))) {
			c.state = 3;
		}
		$s = -1; return [c, i];
		return [c, i];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tAttrName }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	tAfterName = function(c, s) {
		var $ptr, c, i, s;
		c = $clone(c, context);
		i = eatWhiteSpace(s, 0);
		if (i === s.$length) {
			return [c, s.$length];
		} else if (!((((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 61))) {
			c.state = 1;
			return [c, i];
		}
		c.state = 4;
		return [c, i + 1 >> 0];
	};
	tBeforeValue = function(c, s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, delim$1, i, s, x;
		c = $clone(c, context);
		i = eatWhiteSpace(s, 0);
		if (i === s.$length) {
			return [c, s.$length];
		}
		delim$1 = 3;
		_1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
		if (_1 === (39)) {
			_tmp = 2;
			_tmp$1 = i + 1 >> 0;
			delim$1 = _tmp;
			i = _tmp$1;
		} else if (_1 === (34)) {
			_tmp$2 = 1;
			_tmp$3 = i + 1 >> 0;
			delim$1 = _tmp$2;
			i = _tmp$3;
		}
		_tmp$4 = (x = c.attr, ((x < 0 || x >= attrStartStates.length) ? $throwRuntimeError("index out of range") : attrStartStates[x]));
		_tmp$5 = delim$1;
		c.state = _tmp$4;
		c.delim = _tmp$5;
		return [c, i];
	};
	tHTMLCmt = function(c, s) {
		var $ptr, c, i, s;
		c = $clone(c, context);
		i = bytes.Index(s, commentEnd);
		if (!((i === -1))) {
			return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), i + 3 >> 0];
		}
		return [c, s.$length];
	};
	tSpecialTagEnd = function(c, s) {
		var $ptr, c, i, s, x;
		c = $clone(c, context);
		if (!((c.element === 0))) {
			i = indexTagEnd(s, (x = c.element, ((x < 0 || x >= specialTagEndMarkers.length) ? $throwRuntimeError("index out of range") : specialTagEndMarkers[x])));
			if (!((i === -1))) {
				return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), i];
			}
		}
		return [c, s.$length];
	};
	indexTagEnd = function(s, tag) {
		var $ptr, i, plen, res, s, tag;
		res = 0;
		plen = specialTagEndPrefix.$length;
		while (true) {
			if (!(s.$length > 0)) { break; }
			i = bytes.Index(s, specialTagEndPrefix);
			if (i === -1) {
				return i;
			}
			s = $subslice(s, (i + plen >> 0));
			if (tag.$length <= s.$length && bytes.EqualFold(tag, $subslice(s, 0, tag.$length))) {
				s = $subslice(s, tag.$length);
				if (s.$length > 0 && !((bytes.IndexByte(tagEndSeparators, (0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0])) === -1))) {
					return res + i >> 0;
				}
				res = res + (tag.$length) >> 0;
			}
			res = res + ((i + plen >> 0)) >> 0;
		}
		return -1;
	};
	tAttr = function(c, s) {
		var $ptr, c, s;
		c = $clone(c, context);
		return [c, s.$length];
	};
	tURL = function(c, s) {
		var $ptr, c, s;
		c = $clone(c, context);
		if (bytes.IndexAny(s, "#?") >= 0) {
			c.urlPart = 2;
		} else if (!((s.$length === eatWhiteSpace(s, 0))) && (c.urlPart === 0)) {
			c.urlPart = 1;
		}
		return [c, s.$length];
	};
	tJS = function(c, s) {
		var $ptr, _1, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, c, i, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; c = $f.c; i = $f.i; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		i = bytes.IndexAny(s, "\"'/");
		/* */ if (i === -1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i === -1) { */ case 1:
			_r$4 = nextJSCtx(s, c.jsCtx); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			c.jsCtx = _r$4;
			$s = -1; return [c, s.$length];
			return [c, s.$length];
		/* } */ case 2:
		_r$5 = nextJSCtx($subslice(s, 0, i), c.jsCtx); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		c.jsCtx = _r$5;
			_1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			/* */ if (_1 === (34)) { $s = 6; continue; }
			/* */ if (_1 === (39)) { $s = 7; continue; }
			/* */ if (_1 === (47)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (34)) { */ case 6:
				_tmp = 10;
				_tmp$1 = 0;
				c.state = _tmp;
				c.jsCtx = _tmp$1;
				$s = 10; continue;
			/* } else if (_1 === (39)) { */ case 7:
				_tmp$2 = 11;
				_tmp$3 = 0;
				c.state = _tmp$2;
				c.jsCtx = _tmp$3;
				$s = 10; continue;
			/* } else if (_1 === (47)) { */ case 8:
					/* */ if ((i + 1 >> 0) < s.$length && ((x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 47)) { $s = 12; continue; }
					/* */ if ((i + 1 >> 0) < s.$length && ((x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) === 42)) { $s = 13; continue; }
					/* */ if ((c.jsCtx === 0)) { $s = 14; continue; }
					/* */ if ((c.jsCtx === 1)) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ((i + 1 >> 0) < s.$length && ((x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 47)) { */ case 12:
						_tmp$4 = 14;
						_tmp$5 = i + 1 >> 0;
						c.state = _tmp$4;
						i = _tmp$5;
						$s = 17; continue;
					/* } else if ((i + 1 >> 0) < s.$length && ((x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) === 42)) { */ case 13:
						_tmp$6 = 13;
						_tmp$7 = i + 1 >> 0;
						c.state = _tmp$6;
						i = _tmp$7;
						$s = 17; continue;
					/* } else if ((c.jsCtx === 0)) { */ case 14:
						c.state = 12;
						$s = 17; continue;
					/* } else if ((c.jsCtx === 1)) { */ case 15:
						c.jsCtx = 0;
						$s = 17; continue;
					/* } else { */ case 16:
						_r$6 = errorf(10, $ifaceNil, 0, "'/' could start a division or regexp: %.32q", new sliceType$2([$subslice(s, i)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$6), s.$length];
						return [new context.ptr(23, 0, 0, 0, 0, 0, _r$6), s.$length];
					/* } */ case 17:
				case 11:
				$s = 10; continue;
			/* } else { */ case 9:
				$panic(new $String("unreachable"));
			/* } */ case 10:
		case 5:
		$s = -1; return [c, i + 1 >> 0];
		return [c, i + 1 >> 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tJS }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.c = c; $f.i = i; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	tJSDelimited = function(c, s) {
		var $ptr, _1, _2, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tmp$3, c, i, inCharset, k, s, specials, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; c = $f.c; i = $f.i; inCharset = $f.inCharset; k = $f.k; s = $f.s; specials = $f.specials; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		specials = "\\\"";
		_1 = c.state;
		if (_1 === (11)) {
			specials = "\\'";
		} else if (_1 === (12)) {
			specials = "\\/[]";
		}
		_tmp = 0;
		_tmp$1 = false;
		k = _tmp;
		inCharset = _tmp$1;
		/* while (true) { */ case 1:
			i = k + bytes.IndexAny($subslice(s, k), specials) >> 0;
			if (i < k) {
				/* break; */ $s = 2; continue;
			}
				_2 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
				/* */ if (_2 === (92)) { $s = 4; continue; }
				/* */ if (_2 === (91)) { $s = 5; continue; }
				/* */ if (_2 === (93)) { $s = 6; continue; }
				/* */ if (!inCharset) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_2 === (92)) { */ case 4:
					i = i + (1) >> 0;
					/* */ if (i === s.$length) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (i === s.$length) { */ case 9:
						_r$4 = errorf(8, $ifaceNil, 0, "unfinished escape sequence in JS string: %q", new sliceType$2([s])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$4), s.$length];
						return [new context.ptr(23, 0, 0, 0, 0, 0, _r$4), s.$length];
					/* } */ case 10:
					$s = 8; continue;
				/* } else if (_2 === (91)) { */ case 5:
					inCharset = true;
					$s = 8; continue;
				/* } else if (_2 === (93)) { */ case 6:
					inCharset = false;
					$s = 8; continue;
				/* } else if (!inCharset) { */ case 7:
					_tmp$2 = 9;
					_tmp$3 = 1;
					c.state = _tmp$2;
					c.jsCtx = _tmp$3;
					$s = -1; return [c, i + 1 >> 0];
					return [c, i + 1 >> 0];
				/* } */ case 8:
			case 3:
			k = i + 1 >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (inCharset) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (inCharset) { */ case 12:
			_r$5 = errorf(7, $ifaceNil, 0, "unfinished JS regexp charset: %q", new sliceType$2([s])); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), s.$length];
			return [new context.ptr(23, 0, 0, 0, 0, 0, _r$5), s.$length];
		/* } */ case 13:
		$s = -1; return [c, s.$length];
		return [c, s.$length];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tJSDelimited }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.c = c; $f.i = i; $f.inCharset = inCharset; $f.k = k; $f.s = s; $f.specials = specials; $f.$s = $s; $f.$r = $r; return $f;
	};
	tBlockCmt = function(c, s) {
		var $ptr, _1, _r$4, c, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; c = $f.c; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		i = bytes.Index(s, blockCommentEnd);
		if (i === -1) {
			$s = -1; return [c, s.$length];
			return [c, s.$length];
		}
			_1 = c.state;
			/* */ if (_1 === (13)) { $s = 2; continue; }
			/* */ if (_1 === (21)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (13)) { */ case 2:
				c.state = 9;
				$s = 5; continue;
			/* } else if (_1 === (21)) { */ case 3:
				c.state = 15;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$4 = new state(c.state).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String(_r$4));
			/* } */ case 5:
		case 1:
		$s = -1; return [c, i + 2 >> 0];
		return [c, i + 2 >> 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tBlockCmt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f.c = c; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	tLineCmt = function(c, s) {
		var $ptr, _1, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, c, endState, i, lineTerminators, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; c = $f.c; endState = $f.endState; i = $f.i; lineTerminators = $f.lineTerminators; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		lineTerminators = "";
		endState = 0;
			_1 = c.state;
			/* */ if (_1 === (14)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (14)) { */ case 2:
				_tmp = "\n\r\xE2\x80\xA8\xE2\x80\xA9";
				_tmp$1 = 9;
				lineTerminators = _tmp;
				endState = _tmp$1;
				$s = 5; continue;
			/* } else if (_1 === (22)) { */ case 3:
				_tmp$2 = "\n\f\r";
				_tmp$3 = 15;
				lineTerminators = _tmp$2;
				endState = _tmp$3;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$4 = new state(c.state).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String(_r$4));
			/* } */ case 5:
		case 1:
		i = bytes.IndexAny(s, lineTerminators);
		if (i === -1) {
			$s = -1; return [c, s.$length];
			return [c, s.$length];
		}
		c.state = endState;
		$s = -1; return [c, i];
		return [c, i];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tLineCmt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.c = c; $f.endState = endState; $f.i = i; $f.lineTerminators = lineTerminators; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	tCSS = function(c, s) {
		var $ptr, _1, _2, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$2, _tmp$3, c, i, j, k, p, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; c = $f.c; i = $f.i; j = $f.j; k = $f.k; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		k = 0;
		/* while (true) { */ case 1:
			i = k + bytes.IndexAny($subslice(s, k), "(\"'/") >> 0;
			if (i < k) {
				$s = -1; return [c, s.$length];
				return [c, s.$length];
			}
				_1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
				/* */ if (_1 === (40)) { $s = 4; continue; }
				/* */ if (_1 === (47)) { $s = 5; continue; }
				/* */ if (_1 === (34)) { $s = 6; continue; }
				/* */ if (_1 === (39)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (40)) { */ case 4:
					_r$4 = bytes.TrimRight($subslice(s, 0, i), "\t\n\f\r "); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					p = _r$4;
					_r$5 = endsWithCSSKeyword(p, "url"); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ if (_r$5) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_r$5) { */ case 10:
						_r$6 = bytes.TrimLeft($subslice(s, (i + 1 >> 0)), "\t\n\f\r "); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						j = s.$length - _r$6.$length >> 0;
						if (!((j === s.$length)) && (((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]) === 34)) {
							_tmp = 18;
							_tmp$1 = j + 1 >> 0;
							c.state = _tmp;
							j = _tmp$1;
						} else if (!((j === s.$length)) && (((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]) === 39)) {
							_tmp$2 = 19;
							_tmp$3 = j + 1 >> 0;
							c.state = _tmp$2;
							j = _tmp$3;
						} else {
							c.state = 20;
						}
						$s = -1; return [c, j];
						return [c, j];
					/* } */ case 11:
					$s = 8; continue;
				/* } else if (_1 === (47)) { */ case 5:
					if ((i + 1 >> 0) < s.$length) {
						_2 = (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x]));
						if (_2 === (47)) {
							c.state = 22;
							$s = -1; return [c, i + 2 >> 0];
							return [c, i + 2 >> 0];
						} else if (_2 === (42)) {
							c.state = 21;
							$s = -1; return [c, i + 2 >> 0];
							return [c, i + 2 >> 0];
						}
					}
					$s = 8; continue;
				/* } else if (_1 === (34)) { */ case 6:
					c.state = 16;
					$s = -1; return [c, i + 1 >> 0];
					return [c, i + 1 >> 0];
				/* } else if (_1 === (39)) { */ case 7:
					c.state = 17;
					$s = -1; return [c, i + 1 >> 0];
					return [c, i + 1 >> 0];
				/* } */ case 8:
			case 3:
			k = i + 1 >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), 0];
		return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tCSS }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.c = c; $f.i = i; $f.j = j; $f.k = k; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	tCSSStr = function(c, s) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, c, c$1, endAndEsc, i, k, nread, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c$1 = $f.c$1; endAndEsc = $f.endAndEsc; i = $f.i; k = $f.k; nread = $f.nread; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = $clone(c, context);
		endAndEsc = "";
			_1 = c.state;
			/* */ if ((_1 === (16)) || (_1 === (18))) { $s = 2; continue; }
			/* */ if ((_1 === (17)) || (_1 === (19))) { $s = 3; continue; }
			/* */ if (_1 === (20)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (16)) || (_1 === (18))) { */ case 2:
				endAndEsc = "\\\"";
				$s = 6; continue;
			/* } else if ((_1 === (17)) || (_1 === (19))) { */ case 3:
				endAndEsc = "\\'";
				$s = 6; continue;
			/* } else if (_1 === (20)) { */ case 4:
				endAndEsc = "\\\t\n\f\r )";
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = new state(c.state).String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String(_r$4));
			/* } */ case 6:
		case 1:
		k = 0;
		/* while (true) { */ case 8:
			i = k + bytes.IndexAny($subslice(s, k), endAndEsc) >> 0;
			/* */ if (i < k) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (i < k) { */ case 10:
				_arg = c;
				_r$5 = decodeCSS($subslice(s, k)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				_r$6 = tURL(_arg, _arg$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple = _r$6;
				c$1 = $clone(_tuple[0], context);
				nread = _tuple[1];
				$s = -1; return [c$1, k + nread >> 0];
				return [c$1, k + nread >> 0];
			/* } */ case 11:
			/* */ if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 92) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 92) { */ case 14:
				i = i + (1) >> 0;
				/* */ if (i === s.$length) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (i === s.$length) { */ case 17:
					_r$7 = errorf(8, $ifaceNil, 0, "unfinished escape sequence in CSS string: %q", new sliceType$2([s])); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$s = -1; return [new context.ptr(23, 0, 0, 0, 0, 0, _r$7), s.$length];
					return [new context.ptr(23, 0, 0, 0, 0, 0, _r$7), s.$length];
				/* } */ case 18:
				$s = 16; continue;
			/* } else { */ case 15:
				c.state = 15;
				$s = -1; return [c, i + 1 >> 0];
				return [c, i + 1 >> 0];
			/* } */ case 16:
			_arg$2 = c;
			_r$8 = decodeCSS($subslice(s, 0, (i + 1 >> 0))); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$3 = _r$8;
			_r$9 = tURL(_arg$2, _arg$3); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$1 = _r$9;
			context.copy(c, _tuple$1[0]);
			k = i + 1 >> 0;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), 0];
		return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: tCSSStr }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c$1 = c$1; $f.endAndEsc = endAndEsc; $f.i = i; $f.k = k; $f.nread = nread; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	tError = function(c, s) {
		var $ptr, c, s;
		c = $clone(c, context);
		return [c, s.$length];
	};
	eatAttrName = function(s, i) {
		var $ptr, _1, _r$4, i, j, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; i = $f.i; j = $f.j; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		j = i;
		/* while (true) { */ case 1:
			/* if (!(j < s.$length)) { break; } */ if(!(j < s.$length)) { $s = 2; continue; }
				_1 = ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]);
				/* */ if ((_1 === (32)) || (_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (13)) || (_1 === (61)) || (_1 === (62))) { $s = 4; continue; }
				/* */ if ((_1 === (39)) || (_1 === (34)) || (_1 === (60))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_1 === (32)) || (_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (13)) || (_1 === (61)) || (_1 === (62))) { */ case 4:
					$s = -1; return [j, ptrType$4.nil];
					return [j, ptrType$4.nil];
				/* } else if ((_1 === (39)) || (_1 === (34)) || (_1 === (60))) { */ case 5:
					_r$4 = errorf(2, $ifaceNil, 0, "%q in attribute name: %.32q", new sliceType$2([$subslice(s, j, (j + 1 >> 0)), s])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return [-1, _r$4];
					return [-1, _r$4];
				/* } */ case 6:
			case 3:
			j = j + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [s.$length, ptrType$4.nil];
		return [s.$length, ptrType$4.nil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: eatAttrName }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f.i = i; $f.j = j; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	asciiAlpha = function(c) {
		var $ptr, c;
		return 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	asciiAlphaNum = function(c) {
		var $ptr, c;
		return asciiAlpha(c) || 48 <= c && c <= 57;
	};
	eatTagName = function(s, i) {
		var $ptr, _entry, _r$4, i, j, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$4 = $f._r$4; i = $f.i; j = $f.j; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ((i === s.$length) || !asciiAlpha(((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]))) {
			$s = -1; return [i, 0];
			return [i, 0];
		}
		j = i + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(j < s.$length)) { break; } */ if(!(j < s.$length)) { $s = 2; continue; }
			x = ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]);
			if (asciiAlphaNum(x)) {
				j = j + (1) >> 0;
				/* continue; */ $s = 1; continue;
			}
			if (((x === 58) || (x === 45)) && (j + 1 >> 0) < s.$length && asciiAlphaNum((x$1 = j + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])))) {
				j = j + (2) >> 0;
				/* continue; */ $s = 1; continue;
			}
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		_r$4 = strings.ToLower($bytesToString($subslice(s, i, j))); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return [j, (_entry = elementNameMap[$String.keyFor(_r$4)], _entry !== undefined ? _entry.v : 0)];
		return [j, (_entry = elementNameMap[$String.keyFor(_r$4)], _entry !== undefined ? _entry.v : 0)];
		/* */ } return; } if ($f === undefined) { $f = { $blk: eatTagName }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$4 = _r$4; $f.i = i; $f.j = j; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	eatWhiteSpace = function(s, i) {
		var $ptr, _1, i, j, s;
		j = i;
		while (true) {
			if (!(j < s.$length)) { break; }
			_1 = ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]);
			if ((_1 === (32)) || (_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (13))) {
			} else {
				return j;
			}
			j = j + (1) >> 0;
		}
		return s.$length;
	};
	urlFilter = function(args) {
		var $ptr, _r$4, _r$5, _tuple, args, i, protocol, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; args = $f.args; i = $f.i; protocol = $f.protocol; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		if (t === 6) {
			$s = -1; return s;
			return s;
		}
		i = strings.IndexRune(s, 58);
		/* */ if (i >= 0 && !strings.ContainsRune($substring(s, 0, i), 47)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (i >= 0 && !strings.ContainsRune($substring(s, 0, i), 47)) { */ case 2:
			_r$5 = strings.ToLower($substring(s, 0, i)); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			protocol = _r$5;
			if (!(protocol === "http") && !(protocol === "https") && !(protocol === "mailto")) {
				$s = -1; return "#ZgotmplZ";
				return "#ZgotmplZ";
			}
		/* } */ case 3:
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: urlFilter }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.args = args; $f.i = i; $f.protocol = protocol; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	urlEscaper = function(args) {
		var $ptr, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = urlProcessor(false, args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: urlEscaper }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	urlNormalizer = function(args) {
		var $ptr, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$4 = urlProcessor(true, args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: urlNormalizer }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	urlProcessor = function(norm, args) {
		var $ptr, _1, _r$4, _r$5, _tmp, _tmp$1, _tuple, args, b, c, i, n, norm, s, t, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; args = $f.args; b = $f.b; c = $f.c; i = $f.i; n = $f.n; norm = $f.norm; s = $f.s; t = $f.t; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		_r$4 = stringify(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		s = _tuple[0];
		t = _tuple[1];
		if (t === 6) {
			norm = true;
		}
		b[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		written = 0;
		_tmp = 0;
		_tmp$1 = s.length;
		i = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 2:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 3; continue; }
			c = s.charCodeAt(i);
				_1 = c;
				/* */ if ((_1 === (33)) || (_1 === (35)) || (_1 === (36)) || (_1 === (38)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (47)) || (_1 === (58)) || (_1 === (59)) || (_1 === (61)) || (_1 === (63)) || (_1 === (64)) || (_1 === (91)) || (_1 === (93))) { $s = 5; continue; }
				/* */ if ((_1 === (45)) || (_1 === (46)) || (_1 === (95)) || (_1 === (126))) { $s = 6; continue; }
				/* */ if (_1 === (37)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if ((_1 === (33)) || (_1 === (35)) || (_1 === (36)) || (_1 === (38)) || (_1 === (42)) || (_1 === (43)) || (_1 === (44)) || (_1 === (47)) || (_1 === (58)) || (_1 === (59)) || (_1 === (61)) || (_1 === (63)) || (_1 === (64)) || (_1 === (91)) || (_1 === (93))) { */ case 5:
					if (norm) {
						i = i + (1) >> 0;
						/* continue; */ $s = 2; continue;
					}
					$s = 9; continue;
				/* } else if ((_1 === (45)) || (_1 === (46)) || (_1 === (95)) || (_1 === (126))) { */ case 6:
					i = i + (1) >> 0;
					/* continue; */ $s = 2; continue;
					$s = 9; continue;
				/* } else if (_1 === (37)) { */ case 7:
					if (norm && (i + 2 >> 0) < s.length && isHex(s.charCodeAt((i + 1 >> 0))) && isHex(s.charCodeAt((i + 2 >> 0)))) {
						i = i + (1) >> 0;
						/* continue; */ $s = 2; continue;
					}
					$s = 9; continue;
				/* } else { */ case 8:
					if (97 <= c && c <= 122) {
						i = i + (1) >> 0;
						/* continue; */ $s = 2; continue;
					}
					if (65 <= c && c <= 90) {
						i = i + (1) >> 0;
						/* continue; */ $s = 2; continue;
					}
					if (48 <= c && c <= 57) {
						i = i + (1) >> 0;
						/* continue; */ $s = 2; continue;
					}
				/* } */ case 9:
			case 4:
			b[0].WriteString($substring(s, written, i));
			_r$5 = fmt.Fprintf(b[0], "%%%02x", new sliceType$2([new $Uint8(c)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			written = i + 1 >> 0;
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		if (written === 0) {
			$s = -1; return s;
			return s;
		}
		b[0].WriteString($substring(s, written));
		$s = -1; return b[0].String();
		return b[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: urlProcessor }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.args = args; $f.b = b; $f.c = c; $f.i = i; $f.n = n; $f.norm = norm; $f.s = s; $f.t = t; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	context.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "eq", name: "eq", pkg: "html/template", typ: $funcType([context], [$Bool], false)}, {prop: "mangle", name: "mangle", pkg: "html/template", typ: $funcType([$String], [$String], false)}];
	state.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	delim.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	urlPart.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	jsCtx.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	element.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	attr.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$20.methods = [{prop: "escape", name: "escape", pkg: "html/template", typ: $funcType([context, parse.Node], [context], false)}, {prop: "escapeAction", name: "escapeAction", pkg: "html/template", typ: $funcType([context, ptrType$6], [context], false)}, {prop: "escapeBranch", name: "escapeBranch", pkg: "html/template", typ: $funcType([context, ptrType$19, $String], [context], false)}, {prop: "escapeList", name: "escapeList", pkg: "html/template", typ: $funcType([context, ptrType$10], [context], false)}, {prop: "escapeListConditionally", name: "escapeListConditionally", pkg: "html/template", typ: $funcType([context, ptrType$10, funcType$1], [context, $Bool], false)}, {prop: "escapeTemplate", name: "escapeTemplate", pkg: "html/template", typ: $funcType([context, ptrType$7], [context], false)}, {prop: "escapeTree", name: "escapeTree", pkg: "html/template", typ: $funcType([context, parse.Node, $String, $Int], [context, $String], false)}, {prop: "computeOutCtx", name: "computeOutCtx", pkg: "html/template", typ: $funcType([context, ptrType$17], [context], false)}, {prop: "escapeTemplateBody", name: "escapeTemplateBody", pkg: "html/template", typ: $funcType([context, ptrType$17], [context, $Bool], false)}, {prop: "escapeText", name: "escapeText", pkg: "html/template", typ: $funcType([context, ptrType$8], [context], false)}, {prop: "editActionNode", name: "editActionNode", pkg: "html/template", typ: $funcType([ptrType$6, sliceType], [], false)}, {prop: "editTemplateNode", name: "editTemplateNode", pkg: "html/template", typ: $funcType([ptrType$7, $String], [], false)}, {prop: "editTextNode", name: "editTextNode", pkg: "html/template", typ: $funcType([ptrType$8, sliceType$1], [], false)}, {prop: "commit", name: "commit", pkg: "html/template", typ: $funcType([], [], false)}, {prop: "template", name: "template", pkg: "html/template", typ: $funcType([$String], [ptrType$17], false)}];
	ptrType$5.methods = [{prop: "Templates", name: "Templates", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "Option", name: "Option", pkg: "", typ: $funcType([sliceType], [ptrType$5], true)}, {prop: "escape", name: "escape", pkg: "html/template", typ: $funcType([], [$error], false)}, {prop: "Execute", name: "Execute", pkg: "", typ: $funcType([io.Writer, $emptyInterface], [$error], false)}, {prop: "ExecuteTemplate", name: "ExecuteTemplate", pkg: "", typ: $funcType([io.Writer, $String, $emptyInterface], [$error], false)}, {prop: "lookupAndEscapeTemplate", name: "lookupAndEscapeTemplate", pkg: "html/template", typ: $funcType([$String], [ptrType$5, $error], false)}, {prop: "DefinedTemplates", name: "DefinedTemplates", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String], [ptrType$5, $error], false)}, {prop: "AddParseTree", name: "AddParseTree", pkg: "", typ: $funcType([$String, ptrType$3], [ptrType$5, $error], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$5, $error], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([$String], [ptrType$5], false)}, {prop: "new$", name: "new", pkg: "html/template", typ: $funcType([$String], [ptrType$5], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Funcs", name: "Funcs", pkg: "", typ: $funcType([FuncMap], [ptrType$5], false)}, {prop: "Delims", name: "Delims", pkg: "", typ: $funcType([$String, $String], [ptrType$5], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$5], false)}, {prop: "ParseFiles", name: "ParseFiles", pkg: "", typ: $funcType([sliceType], [ptrType$5, $error], true)}, {prop: "ParseGlob", name: "ParseGlob", pkg: "", typ: $funcType([$String], [ptrType$5, $error], false)}];
	context.init("html/template", [{prop: "state", name: "state", exported: false, typ: state, tag: ""}, {prop: "delim", name: "delim", exported: false, typ: delim, tag: ""}, {prop: "urlPart", name: "urlPart", exported: false, typ: urlPart, tag: ""}, {prop: "jsCtx", name: "jsCtx", exported: false, typ: jsCtx, tag: ""}, {prop: "attr", name: "attr", exported: false, typ: attr, tag: ""}, {prop: "element", name: "element", exported: false, typ: element, tag: ""}, {prop: "err", name: "err", exported: false, typ: ptrType$4, tag: ""}]);
	Error.init("", [{prop: "ErrorCode", name: "ErrorCode", exported: true, typ: ErrorCode, tag: ""}, {prop: "Node", name: "Node", exported: true, typ: parse.Node, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", exported: true, typ: $Int, tag: ""}, {prop: "Description", name: "Description", exported: true, typ: $String, tag: ""}]);
	escaper.init("html/template", [{prop: "tmpl", name: "tmpl", exported: false, typ: ptrType$5, tag: ""}, {prop: "output", name: "output", exported: false, typ: mapType$1, tag: ""}, {prop: "derived", name: "derived", exported: false, typ: mapType$2, tag: ""}, {prop: "called", name: "called", exported: false, typ: mapType$3, tag: ""}, {prop: "actionNodeEdits", name: "actionNodeEdits", exported: false, typ: mapType$4, tag: ""}, {prop: "templateNodeEdits", name: "templateNodeEdits", exported: false, typ: mapType$5, tag: ""}, {prop: "textNodeEdits", name: "textNodeEdits", exported: false, typ: mapType$6, tag: ""}]);
	Template.init("html/template", [{prop: "escapeErr", name: "escapeErr", exported: false, typ: $error, tag: ""}, {prop: "text", name: "text", exported: false, typ: ptrType$17, tag: ""}, {prop: "Tree", name: "Tree", exported: true, typ: ptrType$3, tag: ""}, {prop: "nameSpace", name: "", exported: false, typ: ptrType$21, tag: ""}]);
	nameSpace.init("html/template", [{prop: "mu", name: "mu", exported: false, typ: sync.Mutex, tag: ""}, {prop: "set", name: "set", exported: false, typ: mapType$7, tag: ""}]);
	FuncMap.init($String, $emptyInterface);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = json.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = html.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = template.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parse.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		attrTypeMap = $makeMap($String.keyFor, [{ k: "accept", v: 0 }, { k: "accept-charset", v: 7 }, { k: "action", v: 6 }, { k: "alt", v: 0 }, { k: "archive", v: 6 }, { k: "async", v: 7 }, { k: "autocomplete", v: 0 }, { k: "autofocus", v: 0 }, { k: "autoplay", v: 0 }, { k: "background", v: 6 }, { k: "border", v: 0 }, { k: "checked", v: 0 }, { k: "cite", v: 6 }, { k: "challenge", v: 7 }, { k: "charset", v: 7 }, { k: "class", v: 0 }, { k: "classid", v: 6 }, { k: "codebase", v: 6 }, { k: "cols", v: 0 }, { k: "colspan", v: 0 }, { k: "content", v: 7 }, { k: "contenteditable", v: 0 }, { k: "contextmenu", v: 0 }, { k: "controls", v: 0 }, { k: "coords", v: 0 }, { k: "crossorigin", v: 7 }, { k: "data", v: 6 }, { k: "datetime", v: 0 }, { k: "default", v: 0 }, { k: "defer", v: 7 }, { k: "dir", v: 0 }, { k: "dirname", v: 0 }, { k: "disabled", v: 0 }, { k: "draggable", v: 0 }, { k: "dropzone", v: 0 }, { k: "enctype", v: 7 }, { k: "for", v: 0 }, { k: "form", v: 7 }, { k: "formaction", v: 6 }, { k: "formenctype", v: 7 }, { k: "formmethod", v: 7 }, { k: "formnovalidate", v: 7 }, { k: "formtarget", v: 0 }, { k: "headers", v: 0 }, { k: "height", v: 0 }, { k: "hidden", v: 0 }, { k: "high", v: 0 }, { k: "href", v: 6 }, { k: "hreflang", v: 0 }, { k: "http-equiv", v: 7 }, { k: "icon", v: 6 }, { k: "id", v: 0 }, { k: "ismap", v: 0 }, { k: "keytype", v: 7 }, { k: "kind", v: 0 }, { k: "label", v: 0 }, { k: "lang", v: 0 }, { k: "language", v: 7 }, { k: "list", v: 0 }, { k: "longdesc", v: 6 }, { k: "loop", v: 0 }, { k: "low", v: 0 }, { k: "manifest", v: 6 }, { k: "max", v: 0 }, { k: "maxlength", v: 0 }, { k: "media", v: 0 }, { k: "mediagroup", v: 0 }, { k: "method", v: 7 }, { k: "min", v: 0 }, { k: "multiple", v: 0 }, { k: "name", v: 0 }, { k: "novalidate", v: 7 }, { k: "open", v: 0 }, { k: "optimum", v: 0 }, { k: "pattern", v: 7 }, { k: "placeholder", v: 0 }, { k: "poster", v: 6 }, { k: "profile", v: 6 }, { k: "preload", v: 0 }, { k: "pubdate", v: 0 }, { k: "radiogroup", v: 0 }, { k: "readonly", v: 0 }, { k: "rel", v: 7 }, { k: "required", v: 0 }, { k: "reversed", v: 0 }, { k: "rows", v: 0 }, { k: "rowspan", v: 0 }, { k: "sandbox", v: 7 }, { k: "spellcheck", v: 0 }, { k: "scope", v: 0 }, { k: "scoped", v: 0 }, { k: "seamless", v: 0 }, { k: "selected", v: 0 }, { k: "shape", v: 0 }, { k: "size", v: 0 }, { k: "sizes", v: 0 }, { k: "span", v: 0 }, { k: "src", v: 6 }, { k: "srcdoc", v: 2 }, { k: "srclang", v: 0 }, { k: "start", v: 0 }, { k: "step", v: 0 }, { k: "style", v: 1 }, { k: "tabindex", v: 0 }, { k: "target", v: 0 }, { k: "title", v: 0 }, { k: "type", v: 7 }, { k: "usemap", v: 6 }, { k: "value", v: 7 }, { k: "width", v: 0 }, { k: "wrap", v: 0 }, { k: "xmlns", v: 6 }]);
		_r = reflect.TypeOf(ptrType.nil).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorType = _r;
		_r$1 = reflect.TypeOf(ptrType$1.nil).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		fmtStringerType = _r$1;
		stateNames = $toNativeArray($kindString, ["stateText", "stateTag", "stateAttrName", "stateAfterName", "stateBeforeValue", "stateHTMLCmt", "stateRCDATA", "stateAttr", "stateURL", "stateJS", "stateJSDqStr", "stateJSSqStr", "stateJSRegexp", "stateJSBlockCmt", "stateJSLineCmt", "stateCSS", "stateCSSDqStr", "stateCSSSqStr", "stateCSSDqURL", "stateCSSSqURL", "stateCSSURL", "stateCSSBlockCmt", "stateCSSLineCmt", "stateError"]);
		delimNames = $toNativeArray($kindString, ["delimNone", "delimDoubleQuote", "delimSingleQuote", "delimSpaceOrTagEnd"]);
		urlPartNames = $toNativeArray($kindString, ["urlPartNone", "urlPartPreQuery", "urlPartQueryOrFrag", "urlPartUnknown"]);
		elementNames = $toNativeArray($kindString, ["elementNone", "elementScript", "elementStyle", "elementTextarea", "elementTitle"]);
		attrNames = $toNativeArray($kindString, ["attrNone", "attrScript", "attrStyle", "attrURL"]);
		cssReplacementTable = new sliceType(["\\0", "", "", "", "", "", "", "", "", "\\9", "\\a", "", "\\c", "\\d", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\22", "", "", "", "\\26", "\\27", "\\28", "\\29", "", "\\2b", "", "", "", "\\2f", "", "", "", "", "", "", "", "", "", "", "\\3a", "\\3b", "\\3c", "", "\\3e", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\\\", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\7b", "", "\\7d"]);
		expressionBytes = new sliceType$1($stringToBytes("expression"));
		mozBindingBytes = new sliceType$1($stringToBytes("mozbinding"));
		equivEscapers = $makeMap($String.keyFor, [{ k: "_html_template_attrescaper", v: "html" }, { k: "_html_template_htmlescaper", v: "html" }, { k: "_html_template_nospaceescaper", v: "html" }, { k: "_html_template_rcdataescaper", v: "html" }, { k: "_html_template_urlescaper", v: "urlquery" }, { k: "_html_template_urlnormalizer", v: "urlquery" }]);
		redundantFuncs = $makeMap($String.keyFor, [{ k: "_html_template_commentescaper", v: $makeMap($String.keyFor, [{ k: "_html_template_attrescaper", v: true }, { k: "_html_template_nospaceescaper", v: true }, { k: "_html_template_htmlescaper", v: true }]) }, { k: "_html_template_cssescaper", v: $makeMap($String.keyFor, [{ k: "_html_template_attrescaper", v: true }]) }, { k: "_html_template_jsregexpescaper", v: $makeMap($String.keyFor, [{ k: "_html_template_attrescaper", v: true }]) }, { k: "_html_template_jsstrescaper", v: $makeMap($String.keyFor, [{ k: "_html_template_attrescaper", v: true }]) }, { k: "_html_template_urlescaper", v: $makeMap($String.keyFor, [{ k: "_html_template_urlnormalizer", v: true }]) }]);
		delimEnds = $toNativeArray($kindString, ["", "\"", "'", " \t\n\f\r>"]);
		doctypeBytes = new sliceType$1($stringToBytes("<!DOCTYPE"));
		htmlReplacementTable = new sliceType(["\xEF\xBF\xBD", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#34;", "", "", "", "&amp;", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "", "&gt;"]);
		htmlNormReplacementTable = new sliceType(["\xEF\xBF\xBD", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#34;", "", "", "", "", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "", "&gt;"]);
		htmlNospaceReplacementTable = new sliceType(["&#xfffd;", "", "", "", "", "", "", "", "", "&#9;", "&#10;", "&#11;", "&#12;", "&#13;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#32;", "", "&#34;", "", "", "", "&amp;", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "&#61;", "&gt;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#96;"]);
		htmlNospaceNormReplacementTable = new sliceType(["&#xfffd;", "", "", "", "", "", "", "", "", "&#9;", "&#10;", "&#11;", "&#12;", "&#13;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#32;", "", "&#34;", "", "", "", "", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "&#61;", "&gt;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#96;"]);
		regexpPrecederKeywords = $makeMap($String.keyFor, [{ k: "break", v: true }, { k: "case", v: true }, { k: "continue", v: true }, { k: "delete", v: true }, { k: "do", v: true }, { k: "else", v: true }, { k: "finally", v: true }, { k: "in", v: true }, { k: "instanceof", v: true }, { k: "return", v: true }, { k: "throw", v: true }, { k: "try", v: true }, { k: "typeof", v: true }, { k: "void", v: true }]);
		_r$2 = reflect.TypeOf(ptrType$2.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		jsonMarshalType = _r$2;
		jsStrReplacementTable = new sliceType(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "", "", "\\x26", "\\x27", "", "", "", "\\x2b", "", "", "", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\\\"]);
		jsStrNormReplacementTable = new sliceType(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "", "", "\\x26", "\\x27", "", "", "", "\\x2b", "", "", "", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e"]);
		jsRegexpReplacementTable = new sliceType(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "\\$", "", "\\x26", "\\x27", "\\(", "\\)", "\\*", "\\x2b", "", "\\-", "\\.", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e", "\\?", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\[", "\\\\", "\\]", "\\^", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\{", "\\|", "\\}"]);
		_r$3 = fmt.Errorf("template escaped correctly", new sliceType$2([])); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		escapeOK = _r$3;
		commentStart = new sliceType$1($stringToBytes("<!--"));
		commentEnd = new sliceType$1($stringToBytes("-->"));
		elementContentType = $toNativeArray($kindUint8, [0, 9, 15, 6, 6]);
		attrStartStates = $toNativeArray($kindUint8, [7, 9, 15, 8]);
		specialTagEndMarkers = $toNativeArray($kindSlice, [sliceType$1.nil, new sliceType$1($stringToBytes("script")), new sliceType$1($stringToBytes("style")), new sliceType$1($stringToBytes("textarea")), new sliceType$1($stringToBytes("title"))]);
		specialTagEndPrefix = new sliceType$1($stringToBytes("</"));
		tagEndSeparators = new sliceType$1($stringToBytes("> \t\n\f/"));
		blockCommentEnd = new sliceType$1($stringToBytes("*/"));
		elementNameMap = $makeMap($String.keyFor, [{ k: "script", v: 1 }, { k: "style", v: 2 }, { k: "textarea", v: 3 }, { k: "title", v: 4 }]);
		transitionFunc = $toNativeArray($kindFunc, [tText, tTag, tAttrName, tAfterName, tBeforeValue, tHTMLCmt, tSpecialTagEnd, tAttr, tURL, tJS, tJSDelimited, tJSDelimited, tJSDelimited, tBlockCmt, tLineCmt, tCSS, tCSSStr, tCSSStr, tCSSStr, tCSSStr, tCSSStr, tBlockCmt, tLineCmt, tError]);
		funcMap = $makeMap($String.keyFor, [{ k: "_html_template_attrescaper", v: new funcType(attrEscaper) }, { k: "_html_template_commentescaper", v: new funcType(commentEscaper) }, { k: "_html_template_cssescaper", v: new funcType(cssEscaper) }, { k: "_html_template_cssvaluefilter", v: new funcType(cssValueFilter) }, { k: "_html_template_htmlnamefilter", v: new funcType(htmlNameFilter) }, { k: "_html_template_htmlescaper", v: new funcType(htmlEscaper) }, { k: "_html_template_jsregexpescaper", v: new funcType(jsRegexpEscaper) }, { k: "_html_template_jsstrescaper", v: new funcType(jsStrEscaper) }, { k: "_html_template_jsvalescaper", v: new funcType(jsValEscaper) }, { k: "_html_template_nospaceescaper", v: new funcType(htmlNospaceEscaper) }, { k: "_html_template_rcdataescaper", v: new funcType(rcdataEscaper) }, { k: "_html_template_urlescaper", v: new funcType(urlEscaper) }, { k: "_html_template_urlfilter", v: new funcType(urlFilter) }, { k: "_html_template_urlnormalizer", v: new funcType(urlNormalizer) }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, bytes, fmt, vdom, dom, template, User, State, ptrType, sliceType, arrayType, arrayType$1, ptrType$1, ptrType$2, pageTemplate, _tuple, _r, _r$1, main;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	vdom = $packages["github.com/albrow/vdom"];
	dom = $packages["honnef.co/go/js/dom"];
	template = $packages["html/template"];
	User = $pkg.User = $newType(0, $kindStruct, "main.User", true, "main", true, function(Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			return;
		}
		this.Name = Name_;
	});
	State = $pkg.State = $newType(0, $kindStruct, "main.State", true, "main", true, function(User_, Editing_, Root_, tree_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.User = ptrType$1.nil;
			this.Editing = false;
			this.Root = $ifaceNil;
			this.tree = ptrType.nil;
			return;
		}
		this.User = User_;
		this.Editing = Editing_;
		this.Root = Root_;
		this.tree = tree_;
	});
	ptrType = $ptrType(vdom.Tree);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(User);
	ptrType$2 = $ptrType(State);
	State.ptr.prototype.Render = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, _tuple$2, _tuple$3, buf, buf$1, err, err$1, err$2, err$3, err$4, newTree, patches, s, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; buf = $f.buf; buf$1 = $f.buf$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; newTree = $f.newTree; patches = $f.patches; s = $f.s; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		buf$1 = [buf$1];
		s = this;
		/* */ if (s.tree === ptrType.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.tree === ptrType.nil) { */ case 1:
			buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_r$2 = pageTemplate.Execute(buf[0], s); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(err);
			}
			_r$3 = vdom.Parse(buf[0].Bytes()); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			tree = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$panic(err$1);
			} else {
				s.tree = tree;
			}
			$r = s.Root.SetInnerHTML(buf[0].String()); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
		/* } */ case 2:
		buf$1[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r$4 = pageTemplate.Execute(buf$1[0], s); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		err$2 = _r$4;
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$panic(err$2);
		}
		_r$5 = vdom.Parse(buf$1[0].Bytes()); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		newTree = _tuple$2[0];
		err$3 = _tuple$2[1];
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			$panic(err$3);
		}
		_r$6 = vdom.Diff(s.tree, newTree); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$3 = _r$6;
		patches = _tuple$3[0];
		err$3 = _tuple$3[1];
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			$panic(err$3);
		}
		_r$7 = patches.Patch(s.Root); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		err$4 = _r$7;
		if (!($interfaceIsEqual(err$4, $ifaceNil))) {
			$panic(err$4);
		}
		s.tree = newTree;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: State.ptr.prototype.Render }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.buf = buf; $f.buf$1 = buf$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.newTree = newTree; $f.patches = patches; $f.s = s; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	State.prototype.Render = function() { return this.$val.Render(); };
	main = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		state = [state];
		_r$2 = dom.GetWindow().Document(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.GetElementByID("page"); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		state[0] = new State.ptr(new User.ptr("Damien"), false, _r$3, ptrType.nil);
		$r = state[0].Render(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = dom.GetWindow().Document(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = _r$4.GetElementByID("toggleEdit"); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = _r$5.AddEventListener("click", true, (function(state) { return function $b(param) {
			var $ptr, param, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			state[0].Editing = !state[0].Editing;
			$r = state[0].Render(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
		}; })(state)); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$2.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([], [], false)}];
	User.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}]);
	State.init("main", [{prop: "User", name: "User", exported: true, typ: ptrType$1, tag: ""}, {prop: "Editing", name: "Editing", exported: true, typ: $Bool, tag: ""}, {prop: "Root", name: "Root", exported: true, typ: dom.Element, tag: ""}, {prop: "tree", name: "tree", exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vdom.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dom.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = template.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = template.New("").Delims("[[", "]]").Parse("\n<table>\n  <tbody>\n    <tr>\n      <td>Name:</td>\n      <td>\n        [[if .Editing]]<input type=\"text\" value=\"[[.User.Name]]\">[[else]][[.User.Name]][[end]]\n      </td>\n    </tr>\n  </tbody>\n</table>\n<button id=\"toggleEdit\" type=\"button\">Edit/Cancel</button>\n"); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = template.Must(_tuple[0], _tuple[1]); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pageTemplate = _r$1;
		/* */ if ($pkg === $mainPkg) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($pkg === $mainPkg) { */ case 8:
			$r = main(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 9:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=script.js.map
